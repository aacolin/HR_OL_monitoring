//! moment.js locale configuration
//! locale : Slovenian [sl]
//! author : Robert Sedovšek : https://github.com/sedovsek

import moment from '../moment';

function processRelativeTime(number, withoutSuffi***REMOVED***, key, isFuture) {
    var result = number + ' ';
    switch (key) {
        case 's':
            return withoutSuffi***REMOVED*** || isFuture
                ? 'nekaj sekund'
                : 'nekaj sekundami';
        case 'ss':
            if (number === 1) {
                result += withoutSuffi***REMOVED*** ? 'sekundo' : 'sekundi';
            } else if (number === 2) {
                result += withoutSuffi***REMOVED*** || isFuture ? 'sekundi' : 'sekundah';
            } else if (number < 5) {
                result += withoutSuffi***REMOVED*** || isFuture ? 'sekunde' : 'sekundah';
            } else {
                result += 'sekund';
            }
            return result;
        case 'm':
            return withoutSuffi***REMOVED*** ? 'ena minuta' : 'eno minuto';
        case 'mm':
            if (number === 1) {
                result += withoutSuffi***REMOVED*** ? 'minuta' : 'minuto';
            } else if (number === 2) {
                result += withoutSuffi***REMOVED*** || isFuture ? 'minuti' : 'minutama';
            } else if (number < 5) {
                result += withoutSuffi***REMOVED*** || isFuture ? 'minute' : 'minutami';
            } else {
                result += withoutSuffi***REMOVED*** || isFuture ? 'minut' : 'minutami';
            }
            return result;
        case 'h':
            return withoutSuffi***REMOVED*** ? 'ena ura' : 'eno uro';
        case 'hh':
            if (number === 1) {
                result += withoutSuffi***REMOVED*** ? 'ura' : 'uro';
            } else if (number === 2) {
                result += withoutSuffi***REMOVED*** || isFuture ? 'uri' : 'urama';
            } else if (number < 5) {
                result += withoutSuffi***REMOVED*** || isFuture ? 'ure' : 'urami';
            } else {
                result += withoutSuffi***REMOVED*** || isFuture ? 'ur' : 'urami';
            }
            return result;
        case 'd':
            return withoutSuffi***REMOVED*** || isFuture ? 'en dan' : 'enim dnem';
        case 'dd':
            if (number === 1) {
                result += withoutSuffi***REMOVED*** || isFuture ? 'dan' : 'dnem';
            } else if (number === 2) {
                result += withoutSuffi***REMOVED*** || isFuture ? 'dni' : 'dnevoma';
            } else {
                result += withoutSuffi***REMOVED*** || isFuture ? 'dni' : 'dnevi';
            }
            return result;
        case 'M':
            return withoutSuffi***REMOVED*** || isFuture ? 'en mesec' : 'enim mesecem';
        case 'MM':
            if (number === 1) {
                result += withoutSuffi***REMOVED*** || isFuture ? 'mesec' : 'mesecem';
            } else if (number === 2) {
                result += withoutSuffi***REMOVED*** || isFuture ? 'meseca' : 'mesecema';
            } else if (number < 5) {
                result += withoutSuffi***REMOVED*** || isFuture ? 'mesece' : 'meseci';
            } else {
                result += withoutSuffi***REMOVED*** || isFuture ? 'mesecev' : 'meseci';
            }
            return result;
        case 'y':
            return withoutSuffi***REMOVED*** || isFuture ? 'eno leto' : 'enim letom';
        case 'yy':
            if (number === 1) {
                result += withoutSuffi***REMOVED*** || isFuture ? 'leto' : 'letom';
            } else if (number === 2) {
                result += withoutSuffi***REMOVED*** || isFuture ? 'leti' : 'letoma';
            } else if (number < 5) {
                result += withoutSuffi***REMOVED*** || isFuture ? 'leta' : 'leti';
            } else {
                result += withoutSuffi***REMOVED*** || isFuture ? 'let' : 'leti';
            }
            return result;
    }
}

e***REMOVED***port default moment.defineLocale('sl', {
    months: 'januar_februar_marec_april_maj_junij_julij_avgust_september_oktober_november_december'.split(
        '_'
    ),
    monthsShort:
        'jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.'.split(
            '_'
        ),
    monthsParseE***REMOVED***act: true,
    weekdays: 'nedelja_ponedeljek_torek_sreda_četrtek_petek_sobota'.split('_'),
    weekdaysShort: 'ned._pon._tor._sre._čet._pet._sob.'.split('_'),
    weekdaysMin: 'ne_po_to_sr_če_pe_so'.split('_'),
    weekdaysParseE***REMOVED***act: true,
    longDateFormat: {
        LT: 'H:mm',
        LTS: 'H:mm:ss',
        L: 'DD. MM. YYYY',
        LL: 'D. MMMM YYYY',
        LLL: 'D. MMMM YYYY H:mm',
        LLLL: 'dddd, D. MMMM YYYY H:mm',
    },
    calendar: {
        sameDay: '[danes ob] LT',
        ne***REMOVED***tDay: '[jutri ob] LT',

        ne***REMOVED***tWeek: function () {
            switch (this.day()) {
                case 0:
                    return '[v] [nedeljo] [ob] LT';
                case 3:
                    return '[v] [sredo] [ob] LT';
                case 6:
                    return '[v] [soboto] [ob] LT';
                case 1:
                case 2:
                case 4:
                case 5:
                    return '[v] dddd [ob] LT';
            }
        },
        lastDay: '[včeraj ob] LT',
        lastWeek: function () {
            switch (this.day()) {
                case 0:
                    return '[prejšnjo] [nedeljo] [ob] LT';
                case 3:
                    return '[prejšnjo] [sredo] [ob] LT';
                case 6:
                    return '[prejšnjo] [soboto] [ob] LT';
                case 1:
                case 2:
                case 4:
                case 5:
                    return '[prejšnji] dddd [ob] LT';
            }
        },
        sameElse: 'L',
    },
    relativeTime: {
        future: 'čez %s',
        past: 'pred %s',
        s: processRelativeTime,
        ss: processRelativeTime,
        m: processRelativeTime,
        mm: processRelativeTime,
        h: processRelativeTime,
        hh: processRelativeTime,
        d: processRelativeTime,
        dd: processRelativeTime,
        M: processRelativeTime,
        MM: processRelativeTime,
        y: processRelativeTime,
        yy: processRelativeTime,
    },
    dayOfMonthOrdinalParse: /\d{1,2}\./,
    ordinal: '%d.',
    week: {
        dow: 1, // Monday is the first day of the week.
        doy: 7, // The week that contains Jan 7th is the first week of the year.
    },
});
