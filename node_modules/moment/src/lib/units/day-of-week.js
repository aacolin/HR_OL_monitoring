import { get } from '../moment/get-set';
import { addFormatToken } from '../format/format';
import {
    addRege***REMOVED***Token,
    match1to2,
    matchWord,
    rege***REMOVED***Escape,
} from '../parse/rege***REMOVED***';
import { addWeekParseToken } from '../parse/token';
import toInt from '../utils/to-int';
import isArray from '../utils/is-array';
import inde***REMOVED***Of from '../utils/inde***REMOVED***-of';
import hasOwnProp from '../utils/has-own-prop';
import { createUTC } from '../create/utc';
import getParsingFlags from '../create/parsing-flags';

// FORMATTING

addFormatToken('d', 0, 'do', 'day');

addFormatToken('dd', 0, 0, function (format) {
    return this.localeData().weekdaysMin(this, format);
});

addFormatToken('ddd', 0, 0, function (format) {
    return this.localeData().weekdaysShort(this, format);
});

addFormatToken('dddd', 0, 0, function (format) {
    return this.localeData().weekdays(this, format);
});

addFormatToken('e', 0, 0, 'weekday');
addFormatToken('E', 0, 0, 'isoWeekday');

// PARSING

addRege***REMOVED***Token('d', match1to2);
addRege***REMOVED***Token('e', match1to2);
addRege***REMOVED***Token('E', match1to2);
addRege***REMOVED***Token('dd', function (isStrict, locale) {
    return locale.weekdaysMinRege***REMOVED***(isStrict);
});
addRege***REMOVED***Token('ddd', function (isStrict, locale) {
    return locale.weekdaysShortRege***REMOVED***(isStrict);
});
addRege***REMOVED***Token('dddd', function (isStrict, locale) {
    return locale.weekdaysRege***REMOVED***(isStrict);
});

addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {
    var weekday = config._locale.weekdaysParse(input, token, config._strict);
    // if we didn't get a weekday name, mark the date as invalid
    if (weekday != null) {
        week.d = weekday;
    } else {
        getParsingFlags(config).invalidWeekday = input;
    }
});

addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
    week[token] = toInt(input);
});

// HELPERS

function parseWeekday(input, locale) {
    if (typeof input !== 'string') {
        return input;
    }

    if (!isNaN(input)) {
        return parseInt(input, 10);
    }

    input = locale.weekdaysParse(input);
    if (typeof input === 'number') {
        return input;
    }

    return null;
}

function parseIsoWeekday(input, locale) {
    if (typeof input === 'string') {
        return locale.weekdaysParse(input) % 7 || 7;
    }
    return isNaN(input) ? null : input;
}

// LOCALES
function shiftWeekdays(ws, n) {
    return ws.slice(n, 7).concat(ws.slice(0, n));
}

var defaultLocaleWeekdays =
        'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
    defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
    defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
    defaultWeekdaysRege***REMOVED*** = matchWord,
    defaultWeekdaysShortRege***REMOVED*** = matchWord,
    defaultWeekdaysMinRege***REMOVED*** = matchWord;

e***REMOVED***port {
    defaultLocaleWeekdays,
    defaultLocaleWeekdaysShort,
    defaultLocaleWeekdaysMin,
};

e***REMOVED***port function localeWeekdays(m, format) {
    var weekdays = isArray(this._weekdays)
        ? this._weekdays
        : this._weekdays[
              m && m !== true && this._weekdays.isFormat.test(format)
                  ? 'format'
                  : 'standalone'
          ];
    return m === true
        ? shiftWeekdays(weekdays, this._week.dow)
        : m
          ? weekdays[m.day()]
          : weekdays;
}

e***REMOVED***port function localeWeekdaysShort(m) {
    return m === true
        ? shiftWeekdays(this._weekdaysShort, this._week.dow)
        : m
          ? this._weekdaysShort[m.day()]
          : this._weekdaysShort;
}

e***REMOVED***port function localeWeekdaysMin(m) {
    return m === true
        ? shiftWeekdays(this._weekdaysMin, this._week.dow)
        : m
          ? this._weekdaysMin[m.day()]
          : this._weekdaysMin;
}

function handleStrictParse(weekdayName, format, strict) {
    var i,
        ii,
        mom,
        llc = weekdayName.toLocaleLowerCase();
    if (!this._weekdaysParse) {
        this._weekdaysParse = [];
        this._shortWeekdaysParse = [];
        this._minWeekdaysParse = [];

        for (i = 0; i < 7; ++i) {
            mom = createUTC([2000, 1]).day(i);
            this._minWeekdaysParse[i] = this.weekdaysMin(
                mom,
                ''
            ).toLocaleLowerCase();
            this._shortWeekdaysParse[i] = this.weekdaysShort(
                mom,
                ''
            ).toLocaleLowerCase();
            this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
        }
    }

    if (strict) {
        if (format === 'dddd') {
            ii = inde***REMOVED***Of.call(this._weekdaysParse, llc);
            return ii !== -1 ? ii : null;
        } else if (format === 'ddd') {
            ii = inde***REMOVED***Of.call(this._shortWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
        } else {
            ii = inde***REMOVED***Of.call(this._minWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
        }
    } else {
        if (format === 'dddd') {
            ii = inde***REMOVED***Of.call(this._weekdaysParse, llc);
            if (ii !== -1) {
                return ii;
            }
            ii = inde***REMOVED***Of.call(this._shortWeekdaysParse, llc);
            if (ii !== -1) {
                return ii;
            }
            ii = inde***REMOVED***Of.call(this._minWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
        } else if (format === 'ddd') {
            ii = inde***REMOVED***Of.call(this._shortWeekdaysParse, llc);
            if (ii !== -1) {
                return ii;
            }
            ii = inde***REMOVED***Of.call(this._weekdaysParse, llc);
            if (ii !== -1) {
                return ii;
            }
            ii = inde***REMOVED***Of.call(this._minWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
        } else {
            ii = inde***REMOVED***Of.call(this._minWeekdaysParse, llc);
            if (ii !== -1) {
                return ii;
            }
            ii = inde***REMOVED***Of.call(this._weekdaysParse, llc);
            if (ii !== -1) {
                return ii;
            }
            ii = inde***REMOVED***Of.call(this._shortWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
        }
    }
}

e***REMOVED***port function localeWeekdaysParse(weekdayName, format, strict) {
    var i, mom, rege***REMOVED***;

    if (this._weekdaysParseE***REMOVED***act) {
        return handleStrictParse.call(this, weekdayName, format, strict);
    }

    if (!this._weekdaysParse) {
        this._weekdaysParse = [];
        this._minWeekdaysParse = [];
        this._shortWeekdaysParse = [];
        this._fullWeekdaysParse = [];
    }

    for (i = 0; i < 7; i++) {
        // make the rege***REMOVED*** if we don't have it already

        mom = createUTC([2000, 1]).day(i);
        if (strict && !this._fullWeekdaysParse[i]) {
            this._fullWeekdaysParse[i] = new RegE***REMOVED***p(
                '^' + this.weekdays(mom, '').replace('.', '\\.?') + '$',
                'i'
            );
            this._shortWeekdaysParse[i] = new RegE***REMOVED***p(
                '^' + this.weekdaysShort(mom, '').replace('.', '\\.?') + '$',
                'i'
            );
            this._minWeekdaysParse[i] = new RegE***REMOVED***p(
                '^' + this.weekdaysMin(mom, '').replace('.', '\\.?') + '$',
                'i'
            );
        }
        if (!this._weekdaysParse[i]) {
            rege***REMOVED*** =
                '^' +
                this.weekdays(mom, '') +
                '|^' +
                this.weekdaysShort(mom, '') +
                '|^' +
                this.weekdaysMin(mom, '');
            this._weekdaysParse[i] = new RegE***REMOVED***p(rege***REMOVED***.replace('.', ''), 'i');
        }
        // test the rege***REMOVED***
        if (
            strict &&
            format === 'dddd' &&
            this._fullWeekdaysParse[i].test(weekdayName)
        ) {
            return i;
        } else if (
            strict &&
            format === 'ddd' &&
            this._shortWeekdaysParse[i].test(weekdayName)
        ) {
            return i;
        } else if (
            strict &&
            format === 'dd' &&
            this._minWeekdaysParse[i].test(weekdayName)
        ) {
            return i;
        } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
            return i;
        }
    }
}

// MOMENTS

e***REMOVED***port function getSetDayOfWeek(input) {
    if (!this.isValid()) {
        return input != null ? this : NaN;
    }

    var day = get(this, 'Day');
    if (input != null) {
        input = parseWeekday(input, this.localeData());
        return this.add(input - day, 'd');
    } else {
        return day;
    }
}

e***REMOVED***port function getSetLocaleDayOfWeek(input) {
    if (!this.isValid()) {
        return input != null ? this : NaN;
    }
    var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
    return input == null ? weekday : this.add(input - weekday, 'd');
}

e***REMOVED***port function getSetISODayOfWeek(input) {
    if (!this.isValid()) {
        return input != null ? this : NaN;
    }

    // behaves the same as moment#day e***REMOVED***cept
    // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
    // as a setter, sunday should belong to the previous week.

    if (input != null) {
        var weekday = parseIsoWeekday(input, this.localeData());
        return this.day(this.day() % 7 ? weekday : weekday - 7);
    } else {
        return this.day() || 7;
    }
}

e***REMOVED***port function weekdaysRege***REMOVED***(isStrict) {
    if (this._weekdaysParseE***REMOVED***act) {
        if (!hasOwnProp(this, '_weekdaysRege***REMOVED***')) {
            computeWeekdaysParse.call(this);
        }
        if (isStrict) {
            return this._weekdaysStrictRege***REMOVED***;
        } else {
            return this._weekdaysRege***REMOVED***;
        }
    } else {
        if (!hasOwnProp(this, '_weekdaysRege***REMOVED***')) {
            this._weekdaysRege***REMOVED*** = defaultWeekdaysRege***REMOVED***;
        }
        return this._weekdaysStrictRege***REMOVED*** && isStrict
            ? this._weekdaysStrictRege***REMOVED***
            : this._weekdaysRege***REMOVED***;
    }
}

e***REMOVED***port function weekdaysShortRege***REMOVED***(isStrict) {
    if (this._weekdaysParseE***REMOVED***act) {
        if (!hasOwnProp(this, '_weekdaysRege***REMOVED***')) {
            computeWeekdaysParse.call(this);
        }
        if (isStrict) {
            return this._weekdaysShortStrictRege***REMOVED***;
        } else {
            return this._weekdaysShortRege***REMOVED***;
        }
    } else {
        if (!hasOwnProp(this, '_weekdaysShortRege***REMOVED***')) {
            this._weekdaysShortRege***REMOVED*** = defaultWeekdaysShortRege***REMOVED***;
        }
        return this._weekdaysShortStrictRege***REMOVED*** && isStrict
            ? this._weekdaysShortStrictRege***REMOVED***
            : this._weekdaysShortRege***REMOVED***;
    }
}

e***REMOVED***port function weekdaysMinRege***REMOVED***(isStrict) {
    if (this._weekdaysParseE***REMOVED***act) {
        if (!hasOwnProp(this, '_weekdaysRege***REMOVED***')) {
            computeWeekdaysParse.call(this);
        }
        if (isStrict) {
            return this._weekdaysMinStrictRege***REMOVED***;
        } else {
            return this._weekdaysMinRege***REMOVED***;
        }
    } else {
        if (!hasOwnProp(this, '_weekdaysMinRege***REMOVED***')) {
            this._weekdaysMinRege***REMOVED*** = defaultWeekdaysMinRege***REMOVED***;
        }
        return this._weekdaysMinStrictRege***REMOVED*** && isStrict
            ? this._weekdaysMinStrictRege***REMOVED***
            : this._weekdaysMinRege***REMOVED***;
    }
}

function computeWeekdaysParse() {
    function cmpLenRev(a, b) {
        return b.length - a.length;
    }

    var minPieces = [],
        shortPieces = [],
        longPieces = [],
        mi***REMOVED***edPieces = [],
        i,
        mom,
        minp,
        shortp,
        longp;
    for (i = 0; i < 7; i++) {
        // make the rege***REMOVED*** if we don't have it already
        mom = createUTC([2000, 1]).day(i);
        minp = rege***REMOVED***Escape(this.weekdaysMin(mom, ''));
        shortp = rege***REMOVED***Escape(this.weekdaysShort(mom, ''));
        longp = rege***REMOVED***Escape(this.weekdays(mom, ''));
        minPieces.push(minp);
        shortPieces.push(shortp);
        longPieces.push(longp);
        mi***REMOVED***edPieces.push(minp);
        mi***REMOVED***edPieces.push(shortp);
        mi***REMOVED***edPieces.push(longp);
    }
    // Sorting makes sure if one weekday (or abbr) is a prefi***REMOVED*** of another it
    // will match the longer piece.
    minPieces.sort(cmpLenRev);
    shortPieces.sort(cmpLenRev);
    longPieces.sort(cmpLenRev);
    mi***REMOVED***edPieces.sort(cmpLenRev);

    this._weekdaysRege***REMOVED*** = new RegE***REMOVED***p('^(' + mi***REMOVED***edPieces.join('|') + ')', 'i');
    this._weekdaysShortRege***REMOVED*** = this._weekdaysRege***REMOVED***;
    this._weekdaysMinRege***REMOVED*** = this._weekdaysRege***REMOVED***;

    this._weekdaysStrictRege***REMOVED*** = new RegE***REMOVED***p(
        '^(' + longPieces.join('|') + ')',
        'i'
    );
    this._weekdaysShortStrictRege***REMOVED*** = new RegE***REMOVED***p(
        '^(' + shortPieces.join('|') + ')',
        'i'
    );
    this._weekdaysMinStrictRege***REMOVED*** = new RegE***REMOVED***p(
        '^(' + minPieces.join('|') + ')',
        'i'
    );
}
