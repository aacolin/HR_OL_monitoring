import { get } from '../moment/get-set';
import hasOwnProp from '../utils/has-own-prop';
import { addFormatToken } from '../format/format';
import {
    addRege***REMOVED***Token,
    match1to2,
    match2,
    matchWord,
    rege***REMOVED***Escape,
    match1to2NoLeadingZero,
} from '../parse/rege***REMOVED***';
import { addParseToken } from '../parse/token';
import { hooks } from '../utils/hooks';
import { MONTH } from './constants';
import toInt from '../utils/to-int';
import isArray from '../utils/is-array';
import isNumber from '../utils/is-number';
import mod from '../utils/mod';
import inde***REMOVED***Of from '../utils/inde***REMOVED***-of';
import { createUTC } from '../create/utc';
import getParsingFlags from '../create/parsing-flags';
import { isLeapYear } from '../utils/is-leap-year';

e***REMOVED***port function daysInMonth(year, month) {
    if (isNaN(year) || isNaN(month)) {
        return NaN;
    }
    var modMonth = mod(month, 12);
    year += (month - modMonth) / 12;
    return modMonth === 1
        ? isLeapYear(year)
            ? 29
            : 28
        : 31 - ((modMonth % 7) % 2);
}

// FORMATTING

addFormatToken('M', ['MM', 2], 'Mo', function () {
    return this.month() + 1;
});

addFormatToken('MMM', 0, 0, function (format) {
    return this.localeData().monthsShort(this, format);
});

addFormatToken('MMMM', 0, 0, function (format) {
    return this.localeData().months(this, format);
});

// PARSING

addRege***REMOVED***Token('M', match1to2, match1to2NoLeadingZero);
addRege***REMOVED***Token('MM', match1to2, match2);
addRege***REMOVED***Token('MMM', function (isStrict, locale) {
    return locale.monthsShortRege***REMOVED***(isStrict);
});
addRege***REMOVED***Token('MMMM', function (isStrict, locale) {
    return locale.monthsRege***REMOVED***(isStrict);
});

addParseToken(['M', 'MM'], function (input, array) {
    array[MONTH] = toInt(input) - 1;
});

addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
    var month = config._locale.monthsParse(input, token, config._strict);
    // if we didn't find a month name, mark the date as invalid.
    if (month != null) {
        array[MONTH] = month;
    } else {
        getParsingFlags(config).invalidMonth = input;
    }
});

// LOCALES

var defaultLocaleMonths =
        'January_February_March_April_May_June_July_August_September_October_November_December'.split(
            '_'
        ),
    defaultLocaleMonthsShort =
        'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
    MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/,
    defaultMonthsShortRege***REMOVED*** = matchWord,
    defaultMonthsRege***REMOVED*** = matchWord;

e***REMOVED***port { defaultLocaleMonths, defaultLocaleMonthsShort };

e***REMOVED***port function localeMonths(m, format) {
    if (!m) {
        return isArray(this._months)
            ? this._months
            : this._months['standalone'];
    }
    return isArray(this._months)
        ? this._months[m.month()]
        : this._months[
              (this._months.isFormat || MONTHS_IN_FORMAT).test(format)
                  ? 'format'
                  : 'standalone'
          ][m.month()];
}

e***REMOVED***port function localeMonthsShort(m, format) {
    if (!m) {
        return isArray(this._monthsShort)
            ? this._monthsShort
            : this._monthsShort['standalone'];
    }
    return isArray(this._monthsShort)
        ? this._monthsShort[m.month()]
        : this._monthsShort[
              MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'
          ][m.month()];
}

function handleStrictParse(monthName, format, strict) {
    var i,
        ii,
        mom,
        llc = monthName.toLocaleLowerCase();
    if (!this._monthsParse) {
        // this is not used
        this._monthsParse = [];
        this._longMonthsParse = [];
        this._shortMonthsParse = [];
        for (i = 0; i < 12; ++i) {
            mom = createUTC([2000, i]);
            this._shortMonthsParse[i] = this.monthsShort(
                mom,
                ''
            ).toLocaleLowerCase();
            this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
        }
    }

    if (strict) {
        if (format === 'MMM') {
            ii = inde***REMOVED***Of.call(this._shortMonthsParse, llc);
            return ii !== -1 ? ii : null;
        } else {
            ii = inde***REMOVED***Of.call(this._longMonthsParse, llc);
            return ii !== -1 ? ii : null;
        }
    } else {
        if (format === 'MMM') {
            ii = inde***REMOVED***Of.call(this._shortMonthsParse, llc);
            if (ii !== -1) {
                return ii;
            }
            ii = inde***REMOVED***Of.call(this._longMonthsParse, llc);
            return ii !== -1 ? ii : null;
        } else {
            ii = inde***REMOVED***Of.call(this._longMonthsParse, llc);
            if (ii !== -1) {
                return ii;
            }
            ii = inde***REMOVED***Of.call(this._shortMonthsParse, llc);
            return ii !== -1 ? ii : null;
        }
    }
}

e***REMOVED***port function localeMonthsParse(monthName, format, strict) {
    var i, mom, rege***REMOVED***;

    if (this._monthsParseE***REMOVED***act) {
        return handleStrictParse.call(this, monthName, format, strict);
    }

    if (!this._monthsParse) {
        this._monthsParse = [];
        this._longMonthsParse = [];
        this._shortMonthsParse = [];
    }

    // TODO: add sorting
    // Sorting makes sure if one month (or abbr) is a prefi***REMOVED*** of another
    // see sorting in computeMonthsParse
    for (i = 0; i < 12; i++) {
        // make the rege***REMOVED*** if we don't have it already
        mom = createUTC([2000, i]);
        if (strict && !this._longMonthsParse[i]) {
            this._longMonthsParse[i] = new RegE***REMOVED***p(
                '^' + this.months(mom, '').replace('.', '') + '$',
                'i'
            );
            this._shortMonthsParse[i] = new RegE***REMOVED***p(
                '^' + this.monthsShort(mom, '').replace('.', '') + '$',
                'i'
            );
        }
        if (!strict && !this._monthsParse[i]) {
            rege***REMOVED*** =
                '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
            this._monthsParse[i] = new RegE***REMOVED***p(rege***REMOVED***.replace('.', ''), 'i');
        }
        // test the rege***REMOVED***
        if (
            strict &&
            format === 'MMMM' &&
            this._longMonthsParse[i].test(monthName)
        ) {
            return i;
        } else if (
            strict &&
            format === 'MMM' &&
            this._shortMonthsParse[i].test(monthName)
        ) {
            return i;
        } else if (!strict && this._monthsParse[i].test(monthName)) {
            return i;
        }
    }
}

// MOMENTS

e***REMOVED***port function setMonth(mom, value) {
    if (!mom.isValid()) {
        // No op
        return mom;
    }

    if (typeof value === 'string') {
        if (/^\d+$/.test(value)) {
            value = toInt(value);
        } else {
            value = mom.localeData().monthsParse(value);
            // TODO: Another silent failure?
            if (!isNumber(value)) {
                return mom;
            }
        }
    }

    var month = value,
        date = mom.date();

    date = date < 29 ? date : Math.min(date, daysInMonth(mom.year(), month));
    void (mom._isUTC
        ? mom._d.setUTCMonth(month, date)
        : mom._d.setMonth(month, date));
    return mom;
}

e***REMOVED***port function getSetMonth(value) {
    if (value != null) {
        setMonth(this, value);
        hooks.updateOffset(this, true);
        return this;
    } else {
        return get(this, 'Month');
    }
}

e***REMOVED***port function getDaysInMonth() {
    return daysInMonth(this.year(), this.month());
}

e***REMOVED***port function monthsShortRege***REMOVED***(isStrict) {
    if (this._monthsParseE***REMOVED***act) {
        if (!hasOwnProp(this, '_monthsRege***REMOVED***')) {
            computeMonthsParse.call(this);
        }
        if (isStrict) {
            return this._monthsShortStrictRege***REMOVED***;
        } else {
            return this._monthsShortRege***REMOVED***;
        }
    } else {
        if (!hasOwnProp(this, '_monthsShortRege***REMOVED***')) {
            this._monthsShortRege***REMOVED*** = defaultMonthsShortRege***REMOVED***;
        }
        return this._monthsShortStrictRege***REMOVED*** && isStrict
            ? this._monthsShortStrictRege***REMOVED***
            : this._monthsShortRege***REMOVED***;
    }
}

e***REMOVED***port function monthsRege***REMOVED***(isStrict) {
    if (this._monthsParseE***REMOVED***act) {
        if (!hasOwnProp(this, '_monthsRege***REMOVED***')) {
            computeMonthsParse.call(this);
        }
        if (isStrict) {
            return this._monthsStrictRege***REMOVED***;
        } else {
            return this._monthsRege***REMOVED***;
        }
    } else {
        if (!hasOwnProp(this, '_monthsRege***REMOVED***')) {
            this._monthsRege***REMOVED*** = defaultMonthsRege***REMOVED***;
        }
        return this._monthsStrictRege***REMOVED*** && isStrict
            ? this._monthsStrictRege***REMOVED***
            : this._monthsRege***REMOVED***;
    }
}

function computeMonthsParse() {
    function cmpLenRev(a, b) {
        return b.length - a.length;
    }

    var shortPieces = [],
        longPieces = [],
        mi***REMOVED***edPieces = [],
        i,
        mom,
        shortP,
        longP;
    for (i = 0; i < 12; i++) {
        // make the rege***REMOVED*** if we don't have it already
        mom = createUTC([2000, i]);
        shortP = rege***REMOVED***Escape(this.monthsShort(mom, ''));
        longP = rege***REMOVED***Escape(this.months(mom, ''));
        shortPieces.push(shortP);
        longPieces.push(longP);
        mi***REMOVED***edPieces.push(longP);
        mi***REMOVED***edPieces.push(shortP);
    }
    // Sorting makes sure if one month (or abbr) is a prefi***REMOVED*** of another it
    // will match the longer piece.
    shortPieces.sort(cmpLenRev);
    longPieces.sort(cmpLenRev);
    mi***REMOVED***edPieces.sort(cmpLenRev);

    this._monthsRege***REMOVED*** = new RegE***REMOVED***p('^(' + mi***REMOVED***edPieces.join('|') + ')', 'i');
    this._monthsShortRege***REMOVED*** = this._monthsRege***REMOVED***;
    this._monthsStrictRege***REMOVED*** = new RegE***REMOVED***p(
        '^(' + longPieces.join('|') + ')',
        'i'
    );
    this._monthsShortStrictRege***REMOVED*** = new RegE***REMOVED***p(
        '^(' + shortPieces.join('|') + ')',
        'i'
    );
}
