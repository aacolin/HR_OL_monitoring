'use strict';

const path = require('path');
const win32 = process.platform === 'win32';
const {
  REGEX_BACKSLASH,
  REGEX_REMOVE_BACKSLASH,
  REGEX_SPECIAL_CHARS,
  REGEX_SPECIAL_CHARS_GLOBAL
} = require('./constants');

e***REMOVED***ports.isObject = val => val !== null && typeof val === 'object' && !Array.isArray(val);
e***REMOVED***ports.hasRege***REMOVED***Chars = str => REGEX_SPECIAL_CHARS.test(str);
e***REMOVED***ports.isRege***REMOVED***Char = str => str.length === 1 && e***REMOVED***ports.hasRege***REMOVED***Chars(str);
e***REMOVED***ports.escapeRege***REMOVED*** = str => str.replace(REGEX_SPECIAL_CHARS_GLOBAL, '\\$1');
e***REMOVED***ports.toPosi***REMOVED***Slashes = str => str.replace(REGEX_BACKSLASH, '/');

e***REMOVED***ports.removeBackslashes = str => {
  return str.replace(REGEX_REMOVE_BACKSLASH, match => {
    return match === '\\' ? '' : match;
  });
};

e***REMOVED***ports.supportsLookbehinds = () => {
  const segs = process.version.slice(1).split('.').map(Number);
  if (segs.length === 3 && segs[0] >= 9 || (segs[0] === 8 && segs[1] >= 10)) {
    return true;
  }
  return false;
};

e***REMOVED***ports.isWindows = options => {
  if (options && typeof options.windows === 'boolean') {
    return options.windows;
  }
  return win32 === true || path.sep === '\\';
};

e***REMOVED***ports.escapeLast = (input, char, lastId***REMOVED***) => {
  const id***REMOVED*** = input.lastInde***REMOVED***Of(char, lastId***REMOVED***);
  if (id***REMOVED*** === -1) return input;
  if (input[id***REMOVED*** - 1] === '\\') return e***REMOVED***ports.escapeLast(input, char, id***REMOVED*** - 1);
  return `${input.slice(0, id***REMOVED***)}\\${input.slice(id***REMOVED***)}`;
};

e***REMOVED***ports.removePrefi***REMOVED*** = (input, state = {}) => {
  let output = input;
  if (output.startsWith('./')) {
    output = output.slice(2);
    state.prefi***REMOVED*** = './';
  }
  return output;
};

e***REMOVED***ports.wrapOutput = (input, state = {}, options = {}) => {
  const prepend = options.contains ? '' : '^';
  const append = options.contains ? '' : '$';

  let output = `${prepend}(?:${input})${append}`;
  if (state.negated === true) {
    output = `(?:^(?!${output}).*$)`;
  }
  return output;
};
