'use strict';

var hasToStringTag = require('has-tostringtag/shams')();
var forEach = require('foreach');
var test = require('tape');
var isRege***REMOVED*** = require('..');

test('not rege***REMOVED***es', function (t) {
	t.notOk(isRege***REMOVED***(), 'undefined is not rege***REMOVED***');
	t.notOk(isRege***REMOVED***(null), 'null is not rege***REMOVED***');
	t.notOk(isRege***REMOVED***(false), 'false is not rege***REMOVED***');
	t.notOk(isRege***REMOVED***(true), 'true is not rege***REMOVED***');
	t.notOk(isRege***REMOVED***(42), 'number is not rege***REMOVED***');
	t.notOk(isRege***REMOVED***('foo'), 'string is not rege***REMOVED***');
	t.notOk(isRege***REMOVED***([]), 'array is not rege***REMOVED***');
	t.notOk(isRege***REMOVED***({}), 'object is not rege***REMOVED***');
	t.notOk(isRege***REMOVED***(function () {}), 'function is not rege***REMOVED***');
	t.end();
});

test('@@toStringTag', { skip: !hasToStringTag }, function (t) {
	var rege***REMOVED*** = /a/g;
	var fakeRege***REMOVED*** = {
		toString: function () { return String(rege***REMOVED***); },
		valueOf: function () { return rege***REMOVED***; }
	};
	fakeRege***REMOVED***[Symbol.toStringTag] = 'RegE***REMOVED***p';
	t.notOk(isRege***REMOVED***(fakeRege***REMOVED***), 'fake RegE***REMOVED***p with @@toStringTag "RegE***REMOVED***p" is not rege***REMOVED***');
	t.end();
});

test('rege***REMOVED***es', function (t) {
	t.ok(isRege***REMOVED***(/a/g), 'rege***REMOVED*** literal is rege***REMOVED***');
	t.ok(isRege***REMOVED***(new RegE***REMOVED***p('a', 'g')), 'rege***REMOVED*** object is rege***REMOVED***');
	t.end();
});

test('does not mutate rege***REMOVED***es', function (t) {
	t.test('lastInde***REMOVED*** is a marker object', function (st) {
		var rege***REMOVED*** = /a/;
		var marker = {};
		rege***REMOVED***.lastInde***REMOVED*** = marker;
		st.equal(rege***REMOVED***.lastInde***REMOVED***, marker, 'lastInde***REMOVED*** is the marker object');
		st.ok(isRege***REMOVED***(rege***REMOVED***), 'is rege***REMOVED***');
		st.equal(rege***REMOVED***.lastInde***REMOVED***, marker, 'lastInde***REMOVED*** is the marker object after isRege***REMOVED***');
		st.end();
	});

	t.test('lastInde***REMOVED*** is nonzero', function (st) {
		var rege***REMOVED*** = /a/;
		rege***REMOVED***.lastInde***REMOVED*** = 3;
		st.equal(rege***REMOVED***.lastInde***REMOVED***, 3, 'lastInde***REMOVED*** is 3');
		st.ok(isRege***REMOVED***(rege***REMOVED***), 'is rege***REMOVED***');
		st.equal(rege***REMOVED***.lastInde***REMOVED***, 3, 'lastInde***REMOVED*** is 3 after isRege***REMOVED***');
		st.end();
	});

	t.end();
});

test('does not perform operations observable to Pro***REMOVED***ies', { skip: typeof Pro***REMOVED***y !== 'function' }, function (t) {
	var Handler = function () {
		this.trapCalls = [];
	};

	forEach([
		'defineProperty',
		'deleteProperty',
		'get',
		'getOwnPropertyDescriptor',
		'getPrototypeOf',
		'has',
		'isE***REMOVED***tensible',
		'ownKeys',
		'preventE***REMOVED***tensions',
		'set',
		'setPrototypeOf'
	], function (trapName) {
		Handler.prototype[trapName] = function () {
			this.trapCalls.push(trapName);
			return Reflect[trapName].apply(Reflect, arguments);
		};
	});

	t.test('pro***REMOVED***y of object', function (st) {
		var handler = new Handler();
		var pro***REMOVED***y = new Pro***REMOVED***y({ lastInde***REMOVED***: 0 }, handler);

		st.equal(isRege***REMOVED***(pro***REMOVED***y), false, 'pro***REMOVED***y of plain object is not rege***REMOVED***');
		st.deepEqual(handler.trapCalls, ['getOwnPropertyDescriptor'], 'no une***REMOVED***pected pro***REMOVED***y traps were triggered');
		st.end();
	});

	t.test('pro***REMOVED***y of RegE***REMOVED***p instance', function (st) {
		var handler = new Handler();
		var pro***REMOVED***y = new Pro***REMOVED***y(/a/, handler);

		st.equal(isRege***REMOVED***(pro***REMOVED***y), false, 'pro***REMOVED***y of RegE***REMOVED***p instance is not rege***REMOVED***');
		st.deepEqual(handler.trapCalls, ['getOwnPropertyDescriptor'], 'no une***REMOVED***pected pro***REMOVED***y traps were triggered');
		st.end();
	});

	t.end();
});
