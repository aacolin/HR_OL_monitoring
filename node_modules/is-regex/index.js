'use strict';

var callBound = require('call-bind/callBound');
var hasToStringTag = require('has-tostringtag/shams')();
var has;
var $e***REMOVED***ec;
var isRege***REMOVED***Marker;
var badStringifier;

if (hasToStringTag) {
	has = callBound('Object.prototype.hasOwnProperty');
	$e***REMOVED***ec = callBound('RegE***REMOVED***p.prototype.e***REMOVED***ec');
	isRege***REMOVED***Marker = {};

	var throwRege***REMOVED***Marker = function () {
		throw isRege***REMOVED***Marker;
	};
	badStringifier = {
		toString: throwRege***REMOVED***Marker,
		valueOf: throwRege***REMOVED***Marker
	};

	if (typeof Symbol.toPrimitive === 'symbol') {
		badStringifier[Symbol.toPrimitive] = throwRege***REMOVED***Marker;
	}
}

var $toString = callBound('Object.prototype.toString');
var gOPD = Object.getOwnPropertyDescriptor;
var rege***REMOVED***Class = '[object RegE***REMOVED***p]';

module.e***REMOVED***ports = hasToStringTag
	// eslint-disable-ne***REMOVED***t-line consistent-return
	? function isRege***REMOVED***(value) {
		if (!value || typeof value !== 'object') {
			return false;
		}

		var descriptor = gOPD(value, 'lastInde***REMOVED***');
		var hasLastInde***REMOVED***DataProperty = descriptor && has(descriptor, 'value');
		if (!hasLastInde***REMOVED***DataProperty) {
			return false;
		}

		try {
			$e***REMOVED***ec(value, badStringifier);
		} catch (e) {
			return e === isRege***REMOVED***Marker;
		}
	}
	: function isRege***REMOVED***(value) {
		// In older browsers, typeof rege***REMOVED*** incorrectly returns 'function'
		if (!value || (typeof value !== 'object' && typeof value !== 'function')) {
			return false;
		}

		return $toString(value) === rege***REMOVED***Class;
	};
