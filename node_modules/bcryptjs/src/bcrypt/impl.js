/**
 * @type {number}
 * @const
 * @inner
 */
var BCRYPT_SALT_LEN = 16;

/**
 * @type {number}
 * @const
 * @inner
 */
var GENSALT_DEFAULT_LOG2_ROUNDS = 10;

/**
 * @type {number}
 * @const
 * @inner
 */
var BLOWFISH_NUM_ROUNDS = 16;

/**
 * @type {number}
 * @const
 * @inner
 */
var MAX_EXECUTION_TIME = 100;

/**
 * @type {Array.<number>}
 * @const
 * @inner
 */
var P_ORIG = [
    0***REMOVED***243f6a88, 0***REMOVED***85a308d3, 0***REMOVED***13198a2e, 0***REMOVED***03707344, 0***REMOVED***a4093822,
    0***REMOVED***299f31d0, 0***REMOVED***082efa98, 0***REMOVED***ec4e6c89, 0***REMOVED***452821e6, 0***REMOVED***38d01377,
    0***REMOVED***be5466cf, 0***REMOVED***34e90c6c, 0***REMOVED***c0ac29b7, 0***REMOVED***c97c50dd, 0***REMOVED***3f84d5b5,
    0***REMOVED***b5470917, 0***REMOVED***9216d5d9, 0***REMOVED***8979fb1b
];

/**
 * @type {Array.<number>}
 * @const
 * @inner
 */
var S_ORIG = [
    0***REMOVED***d1310ba6, 0***REMOVED***98dfb5ac, 0***REMOVED***2ffd72db, 0***REMOVED***d01adfb7, 0***REMOVED***b8e1afed,
    0***REMOVED***6a267e96, 0***REMOVED***ba7c9045, 0***REMOVED***f12c7f99, 0***REMOVED***24a19947, 0***REMOVED***b3916cf7,
    0***REMOVED***0801f2e2, 0***REMOVED***858efc16, 0***REMOVED***636920d8, 0***REMOVED***71574e69, 0***REMOVED***a458fea3,
    0***REMOVED***f4933d7e, 0***REMOVED***0d95748f, 0***REMOVED***728eb658, 0***REMOVED***718bcd58, 0***REMOVED***82154aee,
    0***REMOVED***7b54a41d, 0***REMOVED***c25a59b5, 0***REMOVED***9c30d539, 0***REMOVED***2af26013, 0***REMOVED***c5d1b023,
    0***REMOVED***286085f0, 0***REMOVED***ca417918, 0***REMOVED***b8db38ef, 0***REMOVED***8e79dcb0, 0***REMOVED***603a180e,
    0***REMOVED***6c9e0e8b, 0***REMOVED***b01e8a3e, 0***REMOVED***d71577c1, 0***REMOVED***bd314b27, 0***REMOVED***78af2fda,
    0***REMOVED***55605c60, 0***REMOVED***e65525f3, 0***REMOVED***aa55ab94, 0***REMOVED***57489862, 0***REMOVED***63e81440,
    0***REMOVED***55ca396a, 0***REMOVED***2aab10b6, 0***REMOVED***b4cc5c34, 0***REMOVED***1141e8ce, 0***REMOVED***a15486af,
    0***REMOVED***7c72e993, 0***REMOVED***b3ee1411, 0***REMOVED***636fbc2a, 0***REMOVED***2ba9c55d, 0***REMOVED***741831f6,
    0***REMOVED***ce5c3e16, 0***REMOVED***9b87931e, 0***REMOVED***afd6ba33, 0***REMOVED***6c24cf5c, 0***REMOVED***7a325381,
    0***REMOVED***28958677, 0***REMOVED***3b8f4898, 0***REMOVED***6b4bb9af, 0***REMOVED***c4bfe81b, 0***REMOVED***66282193,
    0***REMOVED***61d809cc, 0***REMOVED***fb21a991, 0***REMOVED***487cac60, 0***REMOVED***5dec8032, 0***REMOVED***ef845d5d,
    0***REMOVED***e98575b1, 0***REMOVED***dc262302, 0***REMOVED***eb651b88, 0***REMOVED***23893e81, 0***REMOVED***d396acc5,
    0***REMOVED***0f6d6ff3, 0***REMOVED***83f44239, 0***REMOVED***2e0b4482, 0***REMOVED***a4842004, 0***REMOVED***69c8f04a,
    0***REMOVED***9e1f9b5e, 0***REMOVED***21c66842, 0***REMOVED***f6e96c9a, 0***REMOVED***670c9c61, 0***REMOVED***abd388f0,
    0***REMOVED***6a51a0d2, 0***REMOVED***d8542f68, 0***REMOVED***960fa728, 0***REMOVED***ab5133a3, 0***REMOVED***6eef0b6c,
    0***REMOVED***137a3be4, 0***REMOVED***ba3bf050, 0***REMOVED***7efb2a98, 0***REMOVED***a1f1651d, 0***REMOVED***39af0176,
    0***REMOVED***66ca593e, 0***REMOVED***82430e88, 0***REMOVED***8cee8619, 0***REMOVED***456f9fb4, 0***REMOVED***7d84a5c3,
    0***REMOVED***3b8b5ebe, 0***REMOVED***e06f75d8, 0***REMOVED***85c12073, 0***REMOVED***401a449f, 0***REMOVED***56c16aa6,
    0***REMOVED***4ed3aa62, 0***REMOVED***363f7706, 0***REMOVED***1bfedf72, 0***REMOVED***429b023d, 0***REMOVED***37d0d724,
    0***REMOVED***d00a1248, 0***REMOVED***db0fead3, 0***REMOVED***49f1c09b, 0***REMOVED***075372c9, 0***REMOVED***80991b7b,
    0***REMOVED***25d479d8, 0***REMOVED***f6e8def7, 0***REMOVED***e3fe501a, 0***REMOVED***b6794c3b, 0***REMOVED***976ce0bd,
    0***REMOVED***04c006ba, 0***REMOVED***c1a94fb6, 0***REMOVED***409f60c4, 0***REMOVED***5e5c9ec2, 0***REMOVED***196a2463,
    0***REMOVED***68fb6faf, 0***REMOVED***3e6c53b5, 0***REMOVED***1339b2eb, 0***REMOVED***3b52ec6f, 0***REMOVED***6dfc511f,
    0***REMOVED***9b30952c, 0***REMOVED***cc814544, 0***REMOVED***af5ebd09, 0***REMOVED***bee3d004, 0***REMOVED***de334afd,
    0***REMOVED***660f2807, 0***REMOVED***192e4bb3, 0***REMOVED***c0cba857, 0***REMOVED***45c8740f, 0***REMOVED***d20b5f39,
    0***REMOVED***b9d3fbdb, 0***REMOVED***5579c0bd, 0***REMOVED***1a60320a, 0***REMOVED***d6a100c6, 0***REMOVED***402c7279,
    0***REMOVED***679f25fe, 0***REMOVED***fb1fa3cc, 0***REMOVED***8ea5e9f8, 0***REMOVED***db3222f8, 0***REMOVED***3c7516df,
    0***REMOVED***fd616b15, 0***REMOVED***2f501ec8, 0***REMOVED***ad0552ab, 0***REMOVED***323db5fa, 0***REMOVED***fd238760,
    0***REMOVED***53317b48, 0***REMOVED***3e00df82, 0***REMOVED***9e5c57bb, 0***REMOVED***ca6f8ca0, 0***REMOVED***1a87562e,
    0***REMOVED***df1769db, 0***REMOVED***d542a8f6, 0***REMOVED***287effc3, 0***REMOVED***ac6732c6, 0***REMOVED***8c4f5573,
    0***REMOVED***695b27b0, 0***REMOVED***bbca58c8, 0***REMOVED***e1ffa35d, 0***REMOVED***b8f011a0, 0***REMOVED***10fa3d98,
    0***REMOVED***fd2183b8, 0***REMOVED***4afcb56c, 0***REMOVED***2dd1d35b, 0***REMOVED***9a53e479, 0***REMOVED***b6f84565,
    0***REMOVED***d28e49bc, 0***REMOVED***4bfb9790, 0***REMOVED***e1ddf2da, 0***REMOVED***a4cb7e33, 0***REMOVED***62fb1341,
    0***REMOVED***cee4c6e8, 0***REMOVED***ef20cada, 0***REMOVED***36774c01, 0***REMOVED***d07e9efe, 0***REMOVED***2bf11fb4,
    0***REMOVED***95dbda4d, 0***REMOVED***ae909198, 0***REMOVED***eaad8e71, 0***REMOVED***6b93d5a0, 0***REMOVED***d08ed1d0,
    0***REMOVED***afc725e0, 0***REMOVED***8e3c5b2f, 0***REMOVED***8e7594b7, 0***REMOVED***8ff6e2fb, 0***REMOVED***f2122b64,
    0***REMOVED***8888b812, 0***REMOVED***900df01c, 0***REMOVED***4fad5ea0, 0***REMOVED***688fc31c, 0***REMOVED***d1cff191,
    0***REMOVED***b3a8c1ad, 0***REMOVED***2f2f2218, 0***REMOVED***be0e1777, 0***REMOVED***ea752dfe, 0***REMOVED***8b021fa1,
    0***REMOVED***e5a0cc0f, 0***REMOVED***b56f74e8, 0***REMOVED***18acf3d6, 0***REMOVED***ce89e299, 0***REMOVED***b4a84fe0,
    0***REMOVED***fd13e0b7, 0***REMOVED***7cc43b81, 0***REMOVED***d2ada8d9, 0***REMOVED***165fa266, 0***REMOVED***80957705,
    0***REMOVED***93cc7314, 0***REMOVED***211a1477, 0***REMOVED***e6ad2065, 0***REMOVED***77b5fa86, 0***REMOVED***c75442f5,
    0***REMOVED***fb9d35cf, 0***REMOVED***ebcdaf0c, 0***REMOVED***7b3e89a0, 0***REMOVED***d6411bd3, 0***REMOVED***ae1e7e49,
    0***REMOVED***00250e2d, 0***REMOVED***2071b35e, 0***REMOVED***226800bb, 0***REMOVED***57b8e0af, 0***REMOVED***2464369b,
    0***REMOVED***f009b91e, 0***REMOVED***5563911d, 0***REMOVED***59dfa6aa, 0***REMOVED***78c14389, 0***REMOVED***d95a537f,
    0***REMOVED***207d5ba2, 0***REMOVED***02e5b9c5, 0***REMOVED***83260376, 0***REMOVED***6295cfa9, 0***REMOVED***11c81968,
    0***REMOVED***4e734a41, 0***REMOVED***b3472dca, 0***REMOVED***7b14a94a, 0***REMOVED***1b510052, 0***REMOVED***9a532915,
    0***REMOVED***d60f573f, 0***REMOVED***bc9bc6e4, 0***REMOVED***2b60a476, 0***REMOVED***81e67400, 0***REMOVED***08ba6fb5,
    0***REMOVED***571be91f, 0***REMOVED***f296ec6b, 0***REMOVED***2a0dd915, 0***REMOVED***b6636521, 0***REMOVED***e7b9f9b6,
    0***REMOVED***ff34052e, 0***REMOVED***c5855664, 0***REMOVED***53b02d5d, 0***REMOVED***a99f8fa1, 0***REMOVED***08ba4799,
    0***REMOVED***6e85076a, 0***REMOVED***4b7a70e9, 0***REMOVED***b5b32944, 0***REMOVED***db75092e, 0***REMOVED***c4192623,
    0***REMOVED***ad6ea6b0, 0***REMOVED***49a7df7d, 0***REMOVED***9cee60b8, 0***REMOVED***8fedb266, 0***REMOVED***ecaa8c71,
    0***REMOVED***699a17ff, 0***REMOVED***5664526c, 0***REMOVED***c2b19ee1, 0***REMOVED***193602a5, 0***REMOVED***75094c29,
    0***REMOVED***a0591340, 0***REMOVED***e4183a3e, 0***REMOVED***3f54989a, 0***REMOVED***5b429d65, 0***REMOVED***6b8fe4d6,
    0***REMOVED***99f73fd6, 0***REMOVED***a1d29c07, 0***REMOVED***efe830f5, 0***REMOVED***4d2d38e6, 0***REMOVED***f0255dc1,
    0***REMOVED***4cdd2086, 0***REMOVED***8470eb26, 0***REMOVED***6382e9c6, 0***REMOVED***021ecc5e, 0***REMOVED***09686b3f,
    0***REMOVED***3ebaefc9, 0***REMOVED***3c971814, 0***REMOVED***6b6a70a1, 0***REMOVED***687f3584, 0***REMOVED***52a0e286,
    0***REMOVED***b79c5305, 0***REMOVED***aa500737, 0***REMOVED***3e07841c, 0***REMOVED***7fdeae5c, 0***REMOVED***8e7d44ec,
    0***REMOVED***5716f2b8, 0***REMOVED***b03ada37, 0***REMOVED***f0500c0d, 0***REMOVED***f01c1f04, 0***REMOVED***0200b3ff,
    0***REMOVED***ae0cf51a, 0***REMOVED***3cb574b2, 0***REMOVED***25837a58, 0***REMOVED***dc0921bd, 0***REMOVED***d19113f9,
    0***REMOVED***7ca92ff6, 0***REMOVED***94324773, 0***REMOVED***22f54701, 0***REMOVED***3ae5e581, 0***REMOVED***37c2dadc,
    0***REMOVED***c8b57634, 0***REMOVED***9af3dda7, 0***REMOVED***a9446146, 0***REMOVED***0fd0030e, 0***REMOVED***ecc8c73e,
    0***REMOVED***a4751e41, 0***REMOVED***e238cd99, 0***REMOVED***3bea0e2f, 0***REMOVED***3280bba1, 0***REMOVED***183eb331,
    0***REMOVED***4e548b38, 0***REMOVED***4f6db908, 0***REMOVED***6f420d03, 0***REMOVED***f60a04bf, 0***REMOVED***2cb81290,
    0***REMOVED***24977c79, 0***REMOVED***5679b072, 0***REMOVED***bcaf89af, 0***REMOVED***de9a771f, 0***REMOVED***d9930810,
    0***REMOVED***b38bae12, 0***REMOVED***dccf3f2e, 0***REMOVED***5512721f, 0***REMOVED***2e6b7124, 0***REMOVED***501adde6,
    0***REMOVED***9f84cd87, 0***REMOVED***7a584718, 0***REMOVED***7408da17, 0***REMOVED***bc9f9abc, 0***REMOVED***e94b7d8c,
    0***REMOVED***ec7aec3a, 0***REMOVED***db851dfa, 0***REMOVED***63094366, 0***REMOVED***c464c3d2, 0***REMOVED***ef1c1847,
    0***REMOVED***3215d908, 0***REMOVED***dd433b37, 0***REMOVED***24c2ba16, 0***REMOVED***12a14d43, 0***REMOVED***2a65c451,
    0***REMOVED***50940002, 0***REMOVED***133ae4dd, 0***REMOVED***71dff89e, 0***REMOVED***10314e55, 0***REMOVED***81ac77d6,
    0***REMOVED***5f11199b, 0***REMOVED***043556f1, 0***REMOVED***d7a3c76b, 0***REMOVED***3c11183b, 0***REMOVED***5924a509,
    0***REMOVED***f28fe6ed, 0***REMOVED***97f1fbfa, 0***REMOVED***9ebabf2c, 0***REMOVED***1e153c6e, 0***REMOVED***86e34570,
    0***REMOVED***eae96fb1, 0***REMOVED***860e5e0a, 0***REMOVED***5a3e2ab3, 0***REMOVED***771fe71c, 0***REMOVED***4e3d06fa,
    0***REMOVED***2965dcb9, 0***REMOVED***99e71d0f, 0***REMOVED***803e89d6, 0***REMOVED***5266c825, 0***REMOVED***2e4cc978,
    0***REMOVED***9c10b36a, 0***REMOVED***c6150eba, 0***REMOVED***94e2ea78, 0***REMOVED***a5fc3c53, 0***REMOVED***1e0a2df4,
    0***REMOVED***f2f74ea7, 0***REMOVED***361d2b3d, 0***REMOVED***1939260f, 0***REMOVED***19c27960, 0***REMOVED***5223a708,
    0***REMOVED***f71312b6, 0***REMOVED***ebadfe6e, 0***REMOVED***eac31f66, 0***REMOVED***e3bc4595, 0***REMOVED***a67bc883,
    0***REMOVED***b17f37d1, 0***REMOVED***018cff28, 0***REMOVED***c332ddef, 0***REMOVED***be6c5aa5, 0***REMOVED***65582185,
    0***REMOVED***68ab9802, 0***REMOVED***eecea50f, 0***REMOVED***db2f953b, 0***REMOVED***2aef7dad, 0***REMOVED***5b6e2f84,
    0***REMOVED***1521b628, 0***REMOVED***29076170, 0***REMOVED***ecdd4775, 0***REMOVED***619f1510, 0***REMOVED***13cca830,
    0***REMOVED***eb61bd96, 0***REMOVED***0334fe1e, 0***REMOVED***aa0363cf, 0***REMOVED***b5735c90, 0***REMOVED***4c70a239,
    0***REMOVED***d59e9e0b, 0***REMOVED***cbaade14, 0***REMOVED***eecc86bc, 0***REMOVED***60622ca7, 0***REMOVED***9cab5cab,
    0***REMOVED***b2f3846e, 0***REMOVED***648b1eaf, 0***REMOVED***19bdf0ca, 0***REMOVED***a02369b9, 0***REMOVED***655abb50,
    0***REMOVED***40685a32, 0***REMOVED***3c2ab4b3, 0***REMOVED***319ee9d5, 0***REMOVED***c021b8f7, 0***REMOVED***9b540b19,
    0***REMOVED***875fa099, 0***REMOVED***95f7997e, 0***REMOVED***623d7da8, 0***REMOVED***f837889a, 0***REMOVED***97e32d77,
    0***REMOVED***11ed935f, 0***REMOVED***16681281, 0***REMOVED***0e358829, 0***REMOVED***c7e61fd6, 0***REMOVED***96dedfa1,
    0***REMOVED***7858ba99, 0***REMOVED***57f584a5, 0***REMOVED***1b227263, 0***REMOVED***9b83c3ff, 0***REMOVED***1ac24696,
    0***REMOVED***cdb30aeb, 0***REMOVED***532e3054, 0***REMOVED***8fd948e4, 0***REMOVED***6dbc3128, 0***REMOVED***58ebf2ef,
    0***REMOVED***34c6ffea, 0***REMOVED***fe28ed61, 0***REMOVED***ee7c3c73, 0***REMOVED***5d4a14d9, 0***REMOVED***e864b7e3,
    0***REMOVED***42105d14, 0***REMOVED***203e13e0, 0***REMOVED***45eee2b6, 0***REMOVED***a3aaabea, 0***REMOVED***db6c4f15,
    0***REMOVED***facb4fd0, 0***REMOVED***c742f442, 0***REMOVED***ef6abbb5, 0***REMOVED***654f3b1d, 0***REMOVED***41cd2105,
    0***REMOVED***d81e799e, 0***REMOVED***86854dc7, 0***REMOVED***e44b476a, 0***REMOVED***3d816250, 0***REMOVED***cf62a1f2,
    0***REMOVED***5b8d2646, 0***REMOVED***fc8883a0, 0***REMOVED***c1c7b6a3, 0***REMOVED***7f1524c3, 0***REMOVED***69cb7492,
    0***REMOVED***47848a0b, 0***REMOVED***5692b285, 0***REMOVED***095bbf00, 0***REMOVED***ad19489d, 0***REMOVED***1462b174,
    0***REMOVED***23820e00, 0***REMOVED***58428d2a, 0***REMOVED***0c55f5ea, 0***REMOVED***1dadf43e, 0***REMOVED***233f7061,
    0***REMOVED***3372f092, 0***REMOVED***8d937e41, 0***REMOVED***d65fecf1, 0***REMOVED***6c223bdb, 0***REMOVED***7cde3759,
    0***REMOVED***cbee7460, 0***REMOVED***4085f2a7, 0***REMOVED***ce77326e, 0***REMOVED***a6078084, 0***REMOVED***19f8509e,
    0***REMOVED***e8efd855, 0***REMOVED***61d99735, 0***REMOVED***a969a7aa, 0***REMOVED***c50c06c2, 0***REMOVED***5a04abfc,
    0***REMOVED***800bcadc, 0***REMOVED***9e447a2e, 0***REMOVED***c3453484, 0***REMOVED***fdd56705, 0***REMOVED***0e1e9ec9,
    0***REMOVED***db73dbd3, 0***REMOVED***105588cd, 0***REMOVED***675fda79, 0***REMOVED***e3674340, 0***REMOVED***c5c43465,
    0***REMOVED***713e38d8, 0***REMOVED***3d28f89e, 0***REMOVED***f16dff20, 0***REMOVED***153e21e7, 0***REMOVED***8fb03d4a,
    0***REMOVED***e6e39f2b, 0***REMOVED***db83adf7, 0***REMOVED***e93d5a68, 0***REMOVED***948140f7, 0***REMOVED***f64c261c,
    0***REMOVED***94692934, 0***REMOVED***411520f7, 0***REMOVED***7602d4f7, 0***REMOVED***bcf46b2e, 0***REMOVED***d4a20068,
    0***REMOVED***d4082471, 0***REMOVED***3320f46a, 0***REMOVED***43b7d4b7, 0***REMOVED***500061af, 0***REMOVED***1e39f62e,
    0***REMOVED***97244546, 0***REMOVED***14214f74, 0***REMOVED***bf8b8840, 0***REMOVED***4d95fc1d, 0***REMOVED***96b591af,
    0***REMOVED***70f4ddd3, 0***REMOVED***66a02f45, 0***REMOVED***bfbc09ec, 0***REMOVED***03bd9785, 0***REMOVED***7fac6dd0,
    0***REMOVED***31cb8504, 0***REMOVED***96eb27b3, 0***REMOVED***55fd3941, 0***REMOVED***da2547e6, 0***REMOVED***abca0a9a,
    0***REMOVED***28507825, 0***REMOVED***530429f4, 0***REMOVED***0a2c86da, 0***REMOVED***e9b66dfb, 0***REMOVED***68dc1462,
    0***REMOVED***d7486900, 0***REMOVED***680ec0a4, 0***REMOVED***27a18dee, 0***REMOVED***4f3ffea2, 0***REMOVED***e887ad8c,
    0***REMOVED***b58ce006, 0***REMOVED***7af4d6b6, 0***REMOVED***aace1e7c, 0***REMOVED***d3375fec, 0***REMOVED***ce78a399,
    0***REMOVED***406b2a42, 0***REMOVED***20fe9e35, 0***REMOVED***d9f385b9, 0***REMOVED***ee39d7ab, 0***REMOVED***3b124e8b,
    0***REMOVED***1dc9faf7, 0***REMOVED***4b6d1856, 0***REMOVED***26a36631, 0***REMOVED***eae397b2, 0***REMOVED***3a6efa74,
    0***REMOVED***dd5b4332, 0***REMOVED***6841e7f7, 0***REMOVED***ca7820fb, 0***REMOVED***fb0af54e, 0***REMOVED***d8feb397,
    0***REMOVED***454056ac, 0***REMOVED***ba489527, 0***REMOVED***55533a3a, 0***REMOVED***20838d87, 0***REMOVED***fe6ba9b7,
    0***REMOVED***d096954b, 0***REMOVED***55a867bc, 0***REMOVED***a1159a58, 0***REMOVED***cca92963, 0***REMOVED***99e1db33,
    0***REMOVED***a62a4a56, 0***REMOVED***3f3125f9, 0***REMOVED***5ef47e1c, 0***REMOVED***9029317c, 0***REMOVED***fdf8e802,
    0***REMOVED***04272f70, 0***REMOVED***80bb155c, 0***REMOVED***05282ce3, 0***REMOVED***95c11548, 0***REMOVED***e4c66d22,
    0***REMOVED***48c1133f, 0***REMOVED***c70f86dc, 0***REMOVED***07f9c9ee, 0***REMOVED***41041f0f, 0***REMOVED***404779a4,
    0***REMOVED***5d886e17, 0***REMOVED***325f51eb, 0***REMOVED***d59bc0d1, 0***REMOVED***f2bcc18f, 0***REMOVED***41113564,
    0***REMOVED***257b7834, 0***REMOVED***602a9c60, 0***REMOVED***dff8e8a3, 0***REMOVED***1f636c1b, 0***REMOVED***0e12b4c2,
    0***REMOVED***02e1329e, 0***REMOVED***af664fd1, 0***REMOVED***cad18115, 0***REMOVED***6b2395e0, 0***REMOVED***333e92e1,
    0***REMOVED***3b240b62, 0***REMOVED***eebeb922, 0***REMOVED***85b2a20e, 0***REMOVED***e6ba0d99, 0***REMOVED***de720c8c,
    0***REMOVED***2da2f728, 0***REMOVED***d0127845, 0***REMOVED***95b794fd, 0***REMOVED***647d0862, 0***REMOVED***e7ccf5f0,
    0***REMOVED***5449a36f, 0***REMOVED***877d48fa, 0***REMOVED***c39dfd27, 0***REMOVED***f33e8d1e, 0***REMOVED***0a476341,
    0***REMOVED***992eff74, 0***REMOVED***3a6f6eab, 0***REMOVED***f4f8fd37, 0***REMOVED***a812dc60, 0***REMOVED***a1ebddf8,
    0***REMOVED***991be14c, 0***REMOVED***db6e6b0d, 0***REMOVED***c67b5510, 0***REMOVED***6d672c37, 0***REMOVED***2765d43b,
    0***REMOVED***dcd0e804, 0***REMOVED***f1290dc7, 0***REMOVED***cc00ffa3, 0***REMOVED***b5390f92, 0***REMOVED***690fed0b,
    0***REMOVED***667b9ffb, 0***REMOVED***cedb7d9c, 0***REMOVED***a091cf0b, 0***REMOVED***d9155ea3, 0***REMOVED***bb132f88,
    0***REMOVED***515bad24, 0***REMOVED***7b9479bf, 0***REMOVED***763bd6eb, 0***REMOVED***37392eb3, 0***REMOVED***cc115979,
    0***REMOVED***8026e297, 0***REMOVED***f42e312d, 0***REMOVED***6842ada7, 0***REMOVED***c66a2b3b, 0***REMOVED***12754ccc,
    0***REMOVED***782ef11c, 0***REMOVED***6a124237, 0***REMOVED***b79251e7, 0***REMOVED***06a1bbe6, 0***REMOVED***4bfb6350,
    0***REMOVED***1a6b1018, 0***REMOVED***11caedfa, 0***REMOVED***3d25bdd8, 0***REMOVED***e2e1c3c9, 0***REMOVED***44421659,
    0***REMOVED***0a121386, 0***REMOVED***d90cec6e, 0***REMOVED***d5abea2a, 0***REMOVED***64af674e, 0***REMOVED***da86a85f,
    0***REMOVED***bebfe988, 0***REMOVED***64e4c3fe, 0***REMOVED***9dbc8057, 0***REMOVED***f0f7c086, 0***REMOVED***60787bf8,
    0***REMOVED***6003604d, 0***REMOVED***d1fd8346, 0***REMOVED***f6381fb0, 0***REMOVED***7745ae04, 0***REMOVED***d736fccc,
    0***REMOVED***83426b33, 0***REMOVED***f01eab71, 0***REMOVED***b0804187, 0***REMOVED***3c005e5f, 0***REMOVED***77a057be,
    0***REMOVED***bde8ae24, 0***REMOVED***55464299, 0***REMOVED***bf582e61, 0***REMOVED***4e58f48f, 0***REMOVED***f2ddfda2,
    0***REMOVED***f474ef38, 0***REMOVED***8789bdc2, 0***REMOVED***5366f9c3, 0***REMOVED***c8b38e74, 0***REMOVED***b475f255,
    0***REMOVED***46fcd9b9, 0***REMOVED***7aeb2661, 0***REMOVED***8b1ddf84, 0***REMOVED***846a0e79, 0***REMOVED***915f95e2,
    0***REMOVED***466e598e, 0***REMOVED***20b45770, 0***REMOVED***8cd55591, 0***REMOVED***c902de4c, 0***REMOVED***b90bace1,
    0***REMOVED***bb8205d0, 0***REMOVED***11a86248, 0***REMOVED***7574a99e, 0***REMOVED***b77f19b6, 0***REMOVED***e0a9dc09,
    0***REMOVED***662d09a1, 0***REMOVED***c4324633, 0***REMOVED***e85a1f02, 0***REMOVED***09f0be8c, 0***REMOVED***4a99a025,
    0***REMOVED***1d6efe10, 0***REMOVED***1ab93d1d, 0***REMOVED***0ba5a4df, 0***REMOVED***a186f20f, 0***REMOVED***2868f169,
    0***REMOVED***dcb7da83, 0***REMOVED***573906fe, 0***REMOVED***a1e2ce9b, 0***REMOVED***4fcd7f52, 0***REMOVED***50115e01,
    0***REMOVED***a70683fa, 0***REMOVED***a002b5c4, 0***REMOVED***0de6d027, 0***REMOVED***9af88c27, 0***REMOVED***773f8641,
    0***REMOVED***c3604c06, 0***REMOVED***61a806b5, 0***REMOVED***f0177a28, 0***REMOVED***c0f586e0, 0***REMOVED***006058aa,
    0***REMOVED***30dc7d62, 0***REMOVED***11e69ed7, 0***REMOVED***2338ea63, 0***REMOVED***53c2dd94, 0***REMOVED***c2c21634,
    0***REMOVED***bbcbee56, 0***REMOVED***90bcb6de, 0***REMOVED***ebfc7da1, 0***REMOVED***ce591d76, 0***REMOVED***6f05e409,
    0***REMOVED***4b7c0188, 0***REMOVED***39720a3d, 0***REMOVED***7c927c24, 0***REMOVED***86e3725f, 0***REMOVED***724d9db9,
    0***REMOVED***1ac15bb4, 0***REMOVED***d39eb8fc, 0***REMOVED***ed545578, 0***REMOVED***08fca5b5, 0***REMOVED***d83d7cd3,
    0***REMOVED***4dad0fc4, 0***REMOVED***1e50ef5e, 0***REMOVED***b161e6f8, 0***REMOVED***a28514d9, 0***REMOVED***6c51133c,
    0***REMOVED***6fd5c7e7, 0***REMOVED***56e14ec4, 0***REMOVED***362abfce, 0***REMOVED***ddc6c837, 0***REMOVED***d79a3234,
    0***REMOVED***92638212, 0***REMOVED***670efa8e, 0***REMOVED***406000e0, 0***REMOVED***3a39ce37, 0***REMOVED***d3faf5cf,
    0***REMOVED***abc27737, 0***REMOVED***5ac52d1b, 0***REMOVED***5cb0679e, 0***REMOVED***4fa33742, 0***REMOVED***d3822740,
    0***REMOVED***99bc9bbe, 0***REMOVED***d5118e9d, 0***REMOVED***bf0f7315, 0***REMOVED***d62d1c7e, 0***REMOVED***c700c47b,
    0***REMOVED***b78c1b6b, 0***REMOVED***21a19045, 0***REMOVED***b26eb1be, 0***REMOVED***6a366eb4, 0***REMOVED***5748ab2f,
    0***REMOVED***bc946e79, 0***REMOVED***c6a376d2, 0***REMOVED***6549c2c8, 0***REMOVED***530ff8ee, 0***REMOVED***468dde7d,
    0***REMOVED***d5730a1d, 0***REMOVED***4cd04dc6, 0***REMOVED***2939bbdb, 0***REMOVED***a9ba4650, 0***REMOVED***ac9526e8,
    0***REMOVED***be5ee304, 0***REMOVED***a1fad5f0, 0***REMOVED***6a2d519a, 0***REMOVED***63ef8ce2, 0***REMOVED***9a86ee22,
    0***REMOVED***c089c2b8, 0***REMOVED***43242ef6, 0***REMOVED***a51e03aa, 0***REMOVED***9cf2d0a4, 0***REMOVED***83c061ba,
    0***REMOVED***9be96a4d, 0***REMOVED***8fe51550, 0***REMOVED***ba645bd6, 0***REMOVED***2826a2f9, 0***REMOVED***a73a3ae1,
    0***REMOVED***4ba99586, 0***REMOVED***ef5562e9, 0***REMOVED***c72fefd3, 0***REMOVED***f752f7da, 0***REMOVED***3f046f69,
    0***REMOVED***77fa0a59, 0***REMOVED***80e4a915, 0***REMOVED***87b08601, 0***REMOVED***9b09e6ad, 0***REMOVED***3b3ee593,
    0***REMOVED***e990fd5a, 0***REMOVED***9e34d797, 0***REMOVED***2cf0b7d9, 0***REMOVED***022b8b51, 0***REMOVED***96d5ac3a,
    0***REMOVED***017da67d, 0***REMOVED***d1cf3ed6, 0***REMOVED***7c7d2d28, 0***REMOVED***1f9f25cf, 0***REMOVED***adf2b89b,
    0***REMOVED***5ad6b472, 0***REMOVED***5a88f54c, 0***REMOVED***e029ac71, 0***REMOVED***e019a5e6, 0***REMOVED***47b0acfd,
    0***REMOVED***ed93fa9b, 0***REMOVED***e8d3c48d, 0***REMOVED***283b57cc, 0***REMOVED***f8d56629, 0***REMOVED***79132e28,
    0***REMOVED***785f0191, 0***REMOVED***ed756055, 0***REMOVED***f7960e44, 0***REMOVED***e3d35e8c, 0***REMOVED***15056dd4,
    0***REMOVED***88f46dba, 0***REMOVED***03a16125, 0***REMOVED***0564f0bd, 0***REMOVED***c3eb9e15, 0***REMOVED***3c9057a2,
    0***REMOVED***97271aec, 0***REMOVED***a93a072a, 0***REMOVED***1b3f6d9b, 0***REMOVED***1e6321f5, 0***REMOVED***f59c66fb,
    0***REMOVED***26dcf319, 0***REMOVED***7533d928, 0***REMOVED***b155fdf5, 0***REMOVED***03563482, 0***REMOVED***8aba3cbb,
    0***REMOVED***28517711, 0***REMOVED***c20ad9f8, 0***REMOVED***abcc5167, 0***REMOVED***ccad925f, 0***REMOVED***4de81751,
    0***REMOVED***3830dc8e, 0***REMOVED***379d5862, 0***REMOVED***9320f991, 0***REMOVED***ea7a90c2, 0***REMOVED***fb3e7bce,
    0***REMOVED***5121ce64, 0***REMOVED***774fbe32, 0***REMOVED***a8b6e37e, 0***REMOVED***c3293d46, 0***REMOVED***48de5369,
    0***REMOVED***6413e680, 0***REMOVED***a2ae0810, 0***REMOVED***dd6db224, 0***REMOVED***69852dfd, 0***REMOVED***09072166,
    0***REMOVED***b39a460a, 0***REMOVED***6445c0dd, 0***REMOVED***586cdecf, 0***REMOVED***1c20c8ae, 0***REMOVED***5bbef7dd,
    0***REMOVED***1b588d40, 0***REMOVED***ccd2017f, 0***REMOVED***6bb4e3bb, 0***REMOVED***dda26a7e, 0***REMOVED***3a59ff45,
    0***REMOVED***3e350a44, 0***REMOVED***bcb4cdd5, 0***REMOVED***72eacea8, 0***REMOVED***fa6484bb, 0***REMOVED***8d6612ae,
    0***REMOVED***bf3c6f47, 0***REMOVED***d29be463, 0***REMOVED***542f5d9e, 0***REMOVED***aec2771b, 0***REMOVED***f64e6370,
    0***REMOVED***740e0d8d, 0***REMOVED***e75b1357, 0***REMOVED***f8721671, 0***REMOVED***af537d5d, 0***REMOVED***4040cb08,
    0***REMOVED***4eb4e2cc, 0***REMOVED***34d2466a, 0***REMOVED***0115af84, 0***REMOVED***e1b00428, 0***REMOVED***95983a1d,
    0***REMOVED***06b89fb4, 0***REMOVED***ce6ea048, 0***REMOVED***6f3f3b82, 0***REMOVED***3520ab82, 0***REMOVED***011a1d4b,
    0***REMOVED***277227f8, 0***REMOVED***611560b1, 0***REMOVED***e7933fdc, 0***REMOVED***bb3a792b, 0***REMOVED***344525bd,
    0***REMOVED***a08839e1, 0***REMOVED***51ce794b, 0***REMOVED***2f32c9b7, 0***REMOVED***a01fbac9, 0***REMOVED***e01cc87e,
    0***REMOVED***bcc7d1f6, 0***REMOVED***cf0111c3, 0***REMOVED***a1e8aac7, 0***REMOVED***1a908749, 0***REMOVED***d44fbd9a,
    0***REMOVED***d0dadecb, 0***REMOVED***d50ada38, 0***REMOVED***0339c32a, 0***REMOVED***c6913667, 0***REMOVED***8df9317c,
    0***REMOVED***e0b12b4f, 0***REMOVED***f79e59b7, 0***REMOVED***43f5bb3a, 0***REMOVED***f2d519ff, 0***REMOVED***27d9459c,
    0***REMOVED***bf97222c, 0***REMOVED***15e6fc2a, 0***REMOVED***0f91fc71, 0***REMOVED***9b941525, 0***REMOVED***fae59361,
    0***REMOVED***ceb69ceb, 0***REMOVED***c2a86459, 0***REMOVED***12baa8d1, 0***REMOVED***b6c1075e, 0***REMOVED***e3056a0c,
    0***REMOVED***10d25065, 0***REMOVED***cb03a442, 0***REMOVED***e0ec6e0e, 0***REMOVED***1698db3b, 0***REMOVED***4c98a0be,
    0***REMOVED***3278e964, 0***REMOVED***9f1f9532, 0***REMOVED***e0d392df, 0***REMOVED***d3a0342b, 0***REMOVED***8971f21e,
    0***REMOVED***1b0a7441, 0***REMOVED***4ba3348c, 0***REMOVED***c5be7120, 0***REMOVED***c37632d8, 0***REMOVED***df359f8d,
    0***REMOVED***9b992f2e, 0***REMOVED***e60b6f47, 0***REMOVED***0fe3f11d, 0***REMOVED***e54cda54, 0***REMOVED***1edad891,
    0***REMOVED***ce6279cf, 0***REMOVED***cd3e7e6f, 0***REMOVED***1618b166, 0***REMOVED***fd2c1d05, 0***REMOVED***848fd2c5,
    0***REMOVED***f6fb2299, 0***REMOVED***f523f357, 0***REMOVED***a6327623, 0***REMOVED***93a83531, 0***REMOVED***56cccd02,
    0***REMOVED***acf08162, 0***REMOVED***5a75ebb5, 0***REMOVED***6e163697, 0***REMOVED***88d273cc, 0***REMOVED***de966292,
    0***REMOVED***81b949d0, 0***REMOVED***4c50901b, 0***REMOVED***71c65614, 0***REMOVED***e6c6c7bd, 0***REMOVED***327a140a,
    0***REMOVED***45e1d006, 0***REMOVED***c3f27b9a, 0***REMOVED***c9aa53fd, 0***REMOVED***62a80f00, 0***REMOVED***bb25bfe2,
    0***REMOVED***35bdd2f6, 0***REMOVED***71126905, 0***REMOVED***b2040222, 0***REMOVED***b6cbcf7c, 0***REMOVED***cd769c2b,
    0***REMOVED***53113ec0, 0***REMOVED***1640e3d3, 0***REMOVED***38abbd60, 0***REMOVED***2547adf0, 0***REMOVED***ba38209c,
    0***REMOVED***f746ce76, 0***REMOVED***77afa1c5, 0***REMOVED***20756060, 0***REMOVED***85cbfe4e, 0***REMOVED***8ae88dd8,
    0***REMOVED***7aaaf9b0, 0***REMOVED***4cf9aa7e, 0***REMOVED***1948c25c, 0***REMOVED***02fb8a8c, 0***REMOVED***01c36ae4,
    0***REMOVED***d6ebe1f9, 0***REMOVED***90d4f869, 0***REMOVED***a65cdea0, 0***REMOVED***3f09252d, 0***REMOVED***c208e69f,
    0***REMOVED***b74e6132, 0***REMOVED***ce77e25b, 0***REMOVED***578fdfe3, 0***REMOVED***3ac372e6
];

/**
 * @type {Array.<number>}
 * @const
 * @inner
 */
var C_ORIG = [
    0***REMOVED***4f727068, 0***REMOVED***65616e42, 0***REMOVED***65686f6c, 0***REMOVED***64657253, 0***REMOVED***63727944,
    0***REMOVED***6f756274
];

/**
 * @param {Array.<number>} lr
 * @param {number} off
 * @param {Array.<number>} P
 * @param {Array.<number>} S
 * @returns {Array.<number>}
 * @inner
 */
function _encipher(lr, off, P, S) { // This is our bottleneck: 1714/1905 ticks / 90% - see profile.t***REMOVED***t
    var n,
        l = lr[off],
        r = lr[off + 1];

    l ^= P[0];

    /*
    for (var i=0, k=BLOWFISH_NUM_ROUNDS-2; i<=k;)
        // Feistel substitution on left word
        n  = S[l >>> 24],
        n += S[0***REMOVED***100 | ((l >> 16) & 0***REMOVED***ff)],
        n ^= S[0***REMOVED***200 | ((l >> 8) & 0***REMOVED***ff)],
        n += S[0***REMOVED***300 | (l & 0***REMOVED***ff)],
        r ^= n ^ P[++i],
        // Feistel substitution on right word
        n  = S[r >>> 24],
        n += S[0***REMOVED***100 | ((r >> 16) & 0***REMOVED***ff)],
        n ^= S[0***REMOVED***200 | ((r >> 8) & 0***REMOVED***ff)],
        n += S[0***REMOVED***300 | (r & 0***REMOVED***ff)],
        l ^= n ^ P[++i];
    */

    //The following is an unrolled version of the above loop.
    //Iteration 0
    n  = S[l >>> 24];
    n += S[0***REMOVED***100 | ((l >> 16) & 0***REMOVED***ff)];
    n ^= S[0***REMOVED***200 | ((l >> 8) & 0***REMOVED***ff)];
    n += S[0***REMOVED***300 | (l & 0***REMOVED***ff)];
    r ^= n ^ P[1];
    n  = S[r >>> 24];
    n += S[0***REMOVED***100 | ((r >> 16) & 0***REMOVED***ff)];
    n ^= S[0***REMOVED***200 | ((r >> 8) & 0***REMOVED***ff)];
    n += S[0***REMOVED***300 | (r & 0***REMOVED***ff)];
    l ^= n ^ P[2];
    //Iteration 1
    n  = S[l >>> 24];
    n += S[0***REMOVED***100 | ((l >> 16) & 0***REMOVED***ff)];
    n ^= S[0***REMOVED***200 | ((l >> 8) & 0***REMOVED***ff)];
    n += S[0***REMOVED***300 | (l & 0***REMOVED***ff)];
    r ^= n ^ P[3];
    n  = S[r >>> 24];
    n += S[0***REMOVED***100 | ((r >> 16) & 0***REMOVED***ff)];
    n ^= S[0***REMOVED***200 | ((r >> 8) & 0***REMOVED***ff)];
    n += S[0***REMOVED***300 | (r & 0***REMOVED***ff)];
    l ^= n ^ P[4];
    //Iteration 2
    n  = S[l >>> 24];
    n += S[0***REMOVED***100 | ((l >> 16) & 0***REMOVED***ff)];
    n ^= S[0***REMOVED***200 | ((l >> 8) & 0***REMOVED***ff)];
    n += S[0***REMOVED***300 | (l & 0***REMOVED***ff)];
    r ^= n ^ P[5];
    n  = S[r >>> 24];
    n += S[0***REMOVED***100 | ((r >> 16) & 0***REMOVED***ff)];
    n ^= S[0***REMOVED***200 | ((r >> 8) & 0***REMOVED***ff)];
    n += S[0***REMOVED***300 | (r & 0***REMOVED***ff)];
    l ^= n ^ P[6];
    //Iteration 3
    n  = S[l >>> 24];
    n += S[0***REMOVED***100 | ((l >> 16) & 0***REMOVED***ff)];
    n ^= S[0***REMOVED***200 | ((l >> 8) & 0***REMOVED***ff)];
    n += S[0***REMOVED***300 | (l & 0***REMOVED***ff)];
    r ^= n ^ P[7];
    n  = S[r >>> 24];
    n += S[0***REMOVED***100 | ((r >> 16) & 0***REMOVED***ff)];
    n ^= S[0***REMOVED***200 | ((r >> 8) & 0***REMOVED***ff)];
    n += S[0***REMOVED***300 | (r & 0***REMOVED***ff)];
    l ^= n ^ P[8];
    //Iteration 4
    n  = S[l >>> 24];
    n += S[0***REMOVED***100 | ((l >> 16) & 0***REMOVED***ff)];
    n ^= S[0***REMOVED***200 | ((l >> 8) & 0***REMOVED***ff)];
    n += S[0***REMOVED***300 | (l & 0***REMOVED***ff)];
    r ^= n ^ P[9];
    n  = S[r >>> 24];
    n += S[0***REMOVED***100 | ((r >> 16) & 0***REMOVED***ff)];
    n ^= S[0***REMOVED***200 | ((r >> 8) & 0***REMOVED***ff)];
    n += S[0***REMOVED***300 | (r & 0***REMOVED***ff)];
    l ^= n ^ P[10];
    //Iteration 5
    n  = S[l >>> 24];
    n += S[0***REMOVED***100 | ((l >> 16) & 0***REMOVED***ff)];
    n ^= S[0***REMOVED***200 | ((l >> 8) & 0***REMOVED***ff)];
    n += S[0***REMOVED***300 | (l & 0***REMOVED***ff)];
    r ^= n ^ P[11];
    n  = S[r >>> 24];
    n += S[0***REMOVED***100 | ((r >> 16) & 0***REMOVED***ff)];
    n ^= S[0***REMOVED***200 | ((r >> 8) & 0***REMOVED***ff)];
    n += S[0***REMOVED***300 | (r & 0***REMOVED***ff)];
    l ^= n ^ P[12];
    //Iteration 6
    n  = S[l >>> 24];
    n += S[0***REMOVED***100 | ((l >> 16) & 0***REMOVED***ff)];
    n ^= S[0***REMOVED***200 | ((l >> 8) & 0***REMOVED***ff)];
    n += S[0***REMOVED***300 | (l & 0***REMOVED***ff)];
    r ^= n ^ P[13];
    n  = S[r >>> 24];
    n += S[0***REMOVED***100 | ((r >> 16) & 0***REMOVED***ff)];
    n ^= S[0***REMOVED***200 | ((r >> 8) & 0***REMOVED***ff)];
    n += S[0***REMOVED***300 | (r & 0***REMOVED***ff)];
    l ^= n ^ P[14];
    //Iteration 7
    n  = S[l >>> 24];
    n += S[0***REMOVED***100 | ((l >> 16) & 0***REMOVED***ff)];
    n ^= S[0***REMOVED***200 | ((l >> 8) & 0***REMOVED***ff)];
    n += S[0***REMOVED***300 | (l & 0***REMOVED***ff)];
    r ^= n ^ P[15];
    n  = S[r >>> 24];
    n += S[0***REMOVED***100 | ((r >> 16) & 0***REMOVED***ff)];
    n ^= S[0***REMOVED***200 | ((r >> 8) & 0***REMOVED***ff)];
    n += S[0***REMOVED***300 | (r & 0***REMOVED***ff)];
    l ^= n ^ P[16];

    lr[off] = r ^ P[BLOWFISH_NUM_ROUNDS + 1];
    lr[off + 1] = l;
    return lr;
}

/**
 * @param {Array.<number>} data
 * @param {number} offp
 * @returns {{key: number, offp: number}}
 * @inner
 */
function _streamtoword(data, offp) {
    for (var i = 0, word = 0; i < 4; ++i)
        word = (word << 8) | (data[offp] & 0***REMOVED***ff),
        offp = (offp + 1) % data.length;
    return { key: word, offp: offp };
}

/**
 * @param {Array.<number>} key
 * @param {Array.<number>} P
 * @param {Array.<number>} S
 * @inner
 */
function _key(key, P, S) {
    var offset = 0,
        lr = [0, 0],
        plen = P.length,
        slen = S.length,
        sw;
    for (var i = 0; i < plen; i++)
        sw = _streamtoword(key, offset),
        offset = sw.offp,
        P[i] = P[i] ^ sw.key;
    for (i = 0; i < plen; i += 2)
        lr = _encipher(lr, 0, P, S),
        P[i] = lr[0],
        P[i + 1] = lr[1];
    for (i = 0; i < slen; i += 2)
        lr = _encipher(lr, 0, P, S),
        S[i] = lr[0],
        S[i + 1] = lr[1];
}

/**
 * E***REMOVED***pensive key schedule Blowfish.
 * @param {Array.<number>} data
 * @param {Array.<number>} key
 * @param {Array.<number>} P
 * @param {Array.<number>} S
 * @inner
 */
function _ekskey(data, key, P, S) {
    var offp = 0,
        lr = [0, 0],
        plen = P.length,
        slen = S.length,
        sw;
    for (var i = 0; i < plen; i++)
        sw = _streamtoword(key, offp),
        offp = sw.offp,
        P[i] = P[i] ^ sw.key;
    offp = 0;
    for (i = 0; i < plen; i += 2)
        sw = _streamtoword(data, offp),
        offp = sw.offp,
        lr[0] ^= sw.key,
        sw = _streamtoword(data, offp),
        offp = sw.offp,
        lr[1] ^= sw.key,
        lr = _encipher(lr, 0, P, S),
        P[i] = lr[0],
        P[i + 1] = lr[1];
    for (i = 0; i < slen; i += 2)
        sw = _streamtoword(data, offp),
        offp = sw.offp,
        lr[0] ^= sw.key,
        sw = _streamtoword(data, offp),
        offp = sw.offp,
        lr[1] ^= sw.key,
        lr = _encipher(lr, 0, P, S),
        S[i] = lr[0],
        S[i + 1] = lr[1];
}

/**
 * Internaly crypts a string.
 * @param {Array.<number>} b Bytes to crypt
 * @param {Array.<number>} salt Salt bytes to use
 * @param {number} rounds Number of rounds
 * @param {function(Error, Array.<number>=)=} callback Callback receiving the error, if any, and the resulting bytes. If
 *  omitted, the operation will be performed synchronously.
 *  @param {function(number)=} progressCallback Callback called with the current progress
 * @returns {!Array.<number>|undefined} Resulting bytes if callback has been omitted, otherwise `undefined`
 * @inner
 */
function _crypt(b, salt, rounds, callback, progressCallback) {
    var cdata = C_ORIG.slice(),
        clen = cdata.length,
        err;

    // Validate
    if (rounds < 4 || rounds > 31) {
        err = Error("Illegal number of rounds (4-31): "+rounds);
        if (callback) {
            ne***REMOVED***tTick(callback.bind(this, err));
            return;
        } else
            throw err;
    }
    if (salt.length !== BCRYPT_SALT_LEN) {
        err =Error("Illegal salt length: "+salt.length+" != "+BCRYPT_SALT_LEN);
        if (callback) {
            ne***REMOVED***tTick(callback.bind(this, err));
            return;
        } else
            throw err;
    }
    rounds = (1 << rounds) >>> 0;

    var P, S, i = 0, j;

    //Use typed arrays when available - huge speedup!
    if (Int32Array) {
        P = new Int32Array(P_ORIG);
        S = new Int32Array(S_ORIG);
    } else {
        P = P_ORIG.slice();
        S = S_ORIG.slice();
    }

    _ekskey(salt, b, P, S);

    /**
     * Calcualtes the ne***REMOVED***t round.
     * @returns {Array.<number>|undefined} Resulting array if callback has been omitted, otherwise `undefined`
     * @inner
     */
    function ne***REMOVED***t() {
        if (progressCallback)
            progressCallback(i / rounds);
        if (i < rounds) {
            var start = Date.now();
            for (; i < rounds;) {
                i = i + 1;
                _key(b, P, S);
                _key(salt, P, S);
                if (Date.now() - start > MAX_EXECUTION_TIME)
                    break;
            }
        } else {
            for (i = 0; i < 64; i++)
                for (j = 0; j < (clen >> 1); j++)
                    _encipher(cdata, j << 1, P, S);
            var ret = [];
            for (i = 0; i < clen; i++)
                ret.push(((cdata[i] >> 24) & 0***REMOVED***ff) >>> 0),
                ret.push(((cdata[i] >> 16) & 0***REMOVED***ff) >>> 0),
                ret.push(((cdata[i] >> 8) & 0***REMOVED***ff) >>> 0),
                ret.push((cdata[i] & 0***REMOVED***ff) >>> 0);
            if (callback) {
                callback(null, ret);
                return;
            } else
                return ret;
        }
        if (callback)
            ne***REMOVED***tTick(ne***REMOVED***t);
    }

    // Async
    if (typeof callback !== 'undefined') {
        ne***REMOVED***t();

        // Sync
    } else {
        var res;
        while (true)
            if (typeof(res = ne***REMOVED***t()) !== 'undefined')
                return res || [];
    }
}

/**
 * Internally hashes a string.
 * @param {string} s String to hash
 * @param {?string} salt Salt to use, actually never null
 * @param {function(Error, string=)=} callback Callback receiving the error, if any, and the resulting hash. If omitted,
 *  hashing is perormed synchronously.
 *  @param {function(number)=} progressCallback Callback called with the current progress
 * @returns {string|undefined} Resulting hash if callback has been omitted, otherwise `undefined`
 * @inner
 */
function _hash(s, salt, callback, progressCallback) {
    var err;
    if (typeof s !== 'string' || typeof salt !== 'string') {
        err = Error("Invalid string / salt: Not a string");
        if (callback) {
            ne***REMOVED***tTick(callback.bind(this, err));
            return;
        }
        else
            throw err;
    }

    // Validate the salt
    var minor, offset;
    if (salt.charAt(0) !== '$' || salt.charAt(1) !== '2') {
        err = Error("Invalid salt version: "+salt.substring(0,2));
        if (callback) {
            ne***REMOVED***tTick(callback.bind(this, err));
            return;
        }
        else
            throw err;
    }
    if (salt.charAt(2) === '$')
        minor = String.fromCharCode(0),
        offset = 3;
    else {
        minor = salt.charAt(2);
        if ((minor !== 'a' && minor !== 'b' && minor !== 'y') || salt.charAt(3) !== '$') {
            err = Error("Invalid salt revision: "+salt.substring(2,4));
            if (callback) {
                ne***REMOVED***tTick(callback.bind(this, err));
                return;
            } else
                throw err;
        }
        offset = 4;
    }

    // E***REMOVED***tract number of rounds
    if (salt.charAt(offset + 2) > '$') {
        err = Error("Missing salt rounds");
        if (callback) {
            ne***REMOVED***tTick(callback.bind(this, err));
            return;
        } else
            throw err;
    }
    var r1 = parseInt(salt.substring(offset, offset + 1), 10) * 10,
        r2 = parseInt(salt.substring(offset + 1, offset + 2), 10),
        rounds = r1 + r2,
        real_salt = salt.substring(offset + 3, offset + 25);
    s += minor >= 'a' ? "\***REMOVED***00" : "";

    var passwordb = stringToBytes(s),
        saltb = base64_decode(real_salt, BCRYPT_SALT_LEN);

    /**
     * Finishes hashing.
     * @param {Array.<number>} bytes Byte array
     * @returns {string}
     * @inner
     */
    function finish(bytes) {
        var res = [];
        res.push("$2");
        if (minor >= 'a')
            res.push(minor);
        res.push("$");
        if (rounds < 10)
            res.push("0");
        res.push(rounds.toString());
        res.push("$");
        res.push(base64_encode(saltb, saltb.length));
        res.push(base64_encode(bytes, C_ORIG.length * 4 - 1));
        return res.join('');
    }

    // Sync
    if (typeof callback == 'undefined')
        return finish(_crypt(passwordb, saltb, rounds));

    // Async
    else {
        _crypt(passwordb, saltb, rounds, function(err, bytes) {
            if (err)
                callback(err, null);
            else
                callback(null, finish(bytes));
        }, progressCallback);
    }
}
