{{# def.definitions }}
{{# def.errors }}
{{# def.setupKeyword }}
{{# def.$data }}

{{## def.setE***REMOVED***clusiveLimit:
  $e***REMOVED***clusive = true;
  $errorKeyword = $e***REMOVED***clusiveKeyword;
  $errSchemaPath = it.errSchemaPath + '/' + $e***REMOVED***clusiveKeyword;
#}}

{{
  var $isMa***REMOVED*** = $keyword == 'ma***REMOVED***imum'
    , $e***REMOVED***clusiveKeyword = $isMa***REMOVED*** ? 'e***REMOVED***clusiveMa***REMOVED***imum' : 'e***REMOVED***clusiveMinimum'
    , $schemaE***REMOVED***cl = it.schema[$e***REMOVED***clusiveKeyword]
    , $isDataE***REMOVED***cl = it.opts.$data && $schemaE***REMOVED***cl && $schemaE***REMOVED***cl.$data
    , $op = $isMa***REMOVED*** ? '<' : '>'
    , $notOp = $isMa***REMOVED*** ? '>' : '<'
    , $errorKeyword = undefined;

  if (!($isData || typeof $schema == 'number' || $schema === undefined)) {
    throw new Error($keyword + ' must be number');
  }
  if (!($isDataE***REMOVED***cl || $schemaE***REMOVED***cl === undefined
                    || typeof $schemaE***REMOVED***cl == 'number'
                    || typeof $schemaE***REMOVED***cl == 'boolean')) {
    throw new Error($e***REMOVED***clusiveKeyword + ' must be number or boolean');
  }
}}

{{? $isDataE***REMOVED***cl }}
  {{
    var $schemaValueE***REMOVED***cl = it.util.getData($schemaE***REMOVED***cl.$data, $dataLvl, it.dataPathArr)
      , $e***REMOVED***clusive = 'e***REMOVED***clusive' + $lvl
      , $e***REMOVED***clType = 'e***REMOVED***clType' + $lvl
      , $e***REMOVED***clIsNumber = 'e***REMOVED***clIsNumber' + $lvl
      , $opE***REMOVED***pr = 'op' + $lvl
      , $opStr = '\' + ' + $opE***REMOVED***pr + ' + \'';
  }}
  var schemaE***REMOVED***cl{{=$lvl}} = {{=$schemaValueE***REMOVED***cl}};
  {{ $schemaValueE***REMOVED***cl = 'schemaE***REMOVED***cl' + $lvl; }}

  var {{=$e***REMOVED***clusive}};
  var {{=$e***REMOVED***clType}} = typeof {{=$schemaValueE***REMOVED***cl}};
  if ({{=$e***REMOVED***clType}} != 'boolean' && {{=$e***REMOVED***clType}} != 'undefined' && {{=$e***REMOVED***clType}} != 'number') {
    {{ var $errorKeyword = $e***REMOVED***clusiveKeyword; }}
    {{# def.error:'_e***REMOVED***clusiveLimit' }}
  } else if ({{# def.$dataNotType:'number' }}
            {{=$e***REMOVED***clType}} == 'number'
              ? (
                  ({{=$e***REMOVED***clusive}} = {{=$schemaValue}} === undefined || {{=$schemaValueE***REMOVED***cl}} {{=$op}}= {{=$schemaValue}})
                    ? {{=$data}} {{=$notOp}}= {{=$schemaValueE***REMOVED***cl}}
                    : {{=$data}} {{=$notOp}} {{=$schemaValue}}
                )
              : (
                  ({{=$e***REMOVED***clusive}} = {{=$schemaValueE***REMOVED***cl}} === true)
                    ? {{=$data}} {{=$notOp}}= {{=$schemaValue}}
                    : {{=$data}} {{=$notOp}} {{=$schemaValue}}
                )
            || {{=$data}} !== {{=$data}}) {
    var op{{=$lvl}} = {{=$e***REMOVED***clusive}} ? '{{=$op}}' : '{{=$op}}=';
    {{
      if ($schema === undefined) {
        $errorKeyword = $e***REMOVED***clusiveKeyword;
        $errSchemaPath = it.errSchemaPath + '/' + $e***REMOVED***clusiveKeyword;
        $schemaValue = $schemaValueE***REMOVED***cl;
        $isData = $isDataE***REMOVED***cl;
      }
    }}
{{??}}
  {{
    var $e***REMOVED***clIsNumber = typeof $schemaE***REMOVED***cl == 'number'
      , $opStr = $op;  /*used in error*/
  }}

  {{? $e***REMOVED***clIsNumber && $isData }}
    {{ var $opE***REMOVED***pr = '\'' + $opStr + '\''; /*used in error*/ }}
    if ({{# def.$dataNotType:'number' }}
        ( {{=$schemaValue}} === undefined
          || {{=$schemaE***REMOVED***cl}} {{=$op}}= {{=$schemaValue}}
            ? {{=$data}} {{=$notOp}}= {{=$schemaE***REMOVED***cl}}
            : {{=$data}} {{=$notOp}} {{=$schemaValue}} )
        || {{=$data}} !== {{=$data}}) {
  {{??}}
    {{
      if ($e***REMOVED***clIsNumber && $schema === undefined) {
          {{# def.setE***REMOVED***clusiveLimit }}
          $schemaValue = $schemaE***REMOVED***cl;
          $notOp += '=';
      } else {
        if ($e***REMOVED***clIsNumber)
          $schemaValue = Math[$isMa***REMOVED*** ? 'min' : 'ma***REMOVED***']($schemaE***REMOVED***cl, $schema);

        if ($schemaE***REMOVED***cl === ($e***REMOVED***clIsNumber ? $schemaValue : true)) {
          {{# def.setE***REMOVED***clusiveLimit }}
          $notOp += '=';
        } else {
          $e***REMOVED***clusive = false;
          $opStr += '=';
        }
      }

      var $opE***REMOVED***pr = '\'' + $opStr + '\''; /*used in error*/
    }}

    if ({{# def.$dataNotType:'number' }}
        {{=$data}} {{=$notOp}} {{=$schemaValue}}
        || {{=$data}} !== {{=$data}}) {
  {{?}}
{{?}}
    {{ $errorKeyword = $errorKeyword || $keyword; }}
    {{# def.error:'_limit' }}
  } {{? $breakOnError }} else { {{?}}
