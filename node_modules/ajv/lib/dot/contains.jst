{{# def.definitions }}
{{# def.errors }}
{{# def.setupKeyword }}
{{# def.setupNe***REMOVED***tLevel }}


{{
  var $id***REMOVED*** = 'i' + $lvl
    , $dataN***REMOVED***t = $it.dataLevel = it.dataLevel + 1
    , $ne***REMOVED***tData = 'data' + $dataN***REMOVED***t
    , $currentBaseId = it.baseId
    , $nonEmptySchema = {{# def.nonEmptySchema:$schema }};
}}

var {{=$errs}} = errors;
var {{=$valid}};

{{? $nonEmptySchema }}
  {{# def.setCompositeRule }}

  {{
    $it.schema = $schema;
    $it.schemaPath = $schemaPath;
    $it.errSchemaPath = $errSchemaPath;
  }}

  var {{=$ne***REMOVED***tValid}} = false;

  for (var {{=$id***REMOVED***}} = 0; {{=$id***REMOVED***}} < {{=$data}}.length; {{=$id***REMOVED***}}++) {
    {{
      $it.errorPath = it.util.getPathE***REMOVED***pr(it.errorPath, $id***REMOVED***, it.opts.jsonPointers, true);
      var $passData = $data + '[' + $id***REMOVED*** + ']';
      $it.dataPathArr[$dataN***REMOVED***t] = $id***REMOVED***;
    }}

    {{# def.generateSubschemaCode }}
    {{# def.optimizeValidate }}

    if ({{=$ne***REMOVED***tValid}}) break;
  }

  {{# def.resetCompositeRule }}
  {{= $closingBraces }}

  if (!{{=$ne***REMOVED***tValid}}) {
{{??}}
  if ({{=$data}}.length == 0) {
{{?}}

    {{# def.error:'contains' }}
  } else {
    {{? $nonEmptySchema }}
      {{# def.resetErrors }}
    {{?}}
  {{? it.opts.allErrors }} } {{?}}
