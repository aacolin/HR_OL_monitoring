{{# def.definitions }}
{{# def.errors }}
{{# def.setupKeyword }}
{{# def.setupNe***REMOVED***tLevel }}


{{## def.validateItems:startFrom:
  for (var {{=$id***REMOVED***}} = {{=startFrom}}; {{=$id***REMOVED***}} < {{=$data}}.length; {{=$id***REMOVED***}}++) {
    {{
      $it.errorPath = it.util.getPathE***REMOVED***pr(it.errorPath, $id***REMOVED***, it.opts.jsonPointers, true);
      var $passData = $data + '[' + $id***REMOVED*** + ']';
      $it.dataPathArr[$dataN***REMOVED***t] = $id***REMOVED***;
    }}

    {{# def.generateSubschemaCode }}
    {{# def.optimizeValidate }}

    {{? $breakOnError }}
      if (!{{=$ne***REMOVED***tValid}}) break;
    {{?}}
  }
#}}

{{
  var $id***REMOVED*** = 'i' + $lvl
    , $dataN***REMOVED***t = $it.dataLevel = it.dataLevel + 1
    , $ne***REMOVED***tData = 'data' + $dataN***REMOVED***t
    , $currentBaseId = it.baseId;
}}

var {{=$errs}} = errors;
var {{=$valid}};

{{? Array.isArray($schema) }}
  {{ /* 'items' is an array of schemas */}}
  {{ var $additionalItems = it.schema.additionalItems; }}
  {{? $additionalItems === false }}
    {{=$valid}} = {{=$data}}.length <= {{= $schema.length }};
    {{
      var $currErrSchemaPath = $errSchemaPath;
      $errSchemaPath = it.errSchemaPath + '/additionalItems';      
    }}
    {{# def.checkError:'additionalItems' }}
    {{ $errSchemaPath = $currErrSchemaPath; }}
    {{# def.elseIfValid}}
  {{?}}

  {{~ $schema:$sch:$i }}
    {{? {{# def.nonEmptySchema:$sch }} }}
      {{=$ne***REMOVED***tValid}} = true;

      if ({{=$data}}.length > {{=$i}}) {
        {{
          var $passData = $data + '[' + $i + ']';
          $it.schema = $sch;
          $it.schemaPath = $schemaPath + '[' + $i + ']';
          $it.errSchemaPath = $errSchemaPath + '/' + $i;
          $it.errorPath = it.util.getPathE***REMOVED***pr(it.errorPath, $i, it.opts.jsonPointers, true);
          $it.dataPathArr[$dataN***REMOVED***t] = $i;
        }}

        {{# def.generateSubschemaCode }}
        {{# def.optimizeValidate }}
      }

      {{# def.ifResultValid }}
    {{?}}
  {{~}}

  {{? typeof $additionalItems == 'object' && {{# def.nonEmptySchema:$additionalItems }} }}
    {{
      $it.schema = $additionalItems;
      $it.schemaPath = it.schemaPath + '.additionalItems';
      $it.errSchemaPath = it.errSchemaPath + '/additionalItems';
    }}
    {{=$ne***REMOVED***tValid}} = true;

    if ({{=$data}}.length > {{= $schema.length }}) {
      {{# def.validateItems: $schema.length }}
    }

    {{# def.ifResultValid }}
  {{?}}

{{?? {{# def.nonEmptySchema:$schema }} }}
  {{ /* 'items' is a single schema */}}
  {{
    $it.schema = $schema;
    $it.schemaPath = $schemaPath;
    $it.errSchemaPath = $errSchemaPath;
  }}
  {{# def.validateItems: 0 }}
{{?}}

{{? $breakOnError }}
  {{= $closingBraces }}
  if ({{=$errs}} == errors) {
{{?}}
