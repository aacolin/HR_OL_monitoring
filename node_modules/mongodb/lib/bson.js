"use strict";
Object.defineProperty(e***REMOVED***ports, "__esModule", { value: true });
e***REMOVED***ports.toUTF8 = e***REMOVED***ports.getBigInt64LE = e***REMOVED***ports.getFloat64LE = e***REMOVED***ports.getInt32LE = e***REMOVED***ports.UUID = e***REMOVED***ports.Timestamp = e***REMOVED***ports.serialize = e***REMOVED***ports.ObjectId = e***REMOVED***ports.MinKey = e***REMOVED***ports.Ma***REMOVED***Key = e***REMOVED***ports.Long = e***REMOVED***ports.Int32 = e***REMOVED***ports.EJSON = e***REMOVED***ports.Double = e***REMOVED***ports.deserialize = e***REMOVED***ports.Decimal128 = e***REMOVED***ports.DBRef = e***REMOVED***ports.Code = e***REMOVED***ports.calculateObjectSize = e***REMOVED***ports.BSONType = e***REMOVED***ports.BSONSymbol = e***REMOVED***ports.BSONRegE***REMOVED***p = e***REMOVED***ports.BSONError = e***REMOVED***ports.BSON = e***REMOVED***ports.Binary = void 0;
e***REMOVED***ports.parseToElementsToArray = parseToElementsToArray;
e***REMOVED***ports.pluckBSONSerializeOptions = pluckBSONSerializeOptions;
e***REMOVED***ports.resolveBSONOptions = resolveBSONOptions;
e***REMOVED***ports.parseUtf8ValidationOption = parseUtf8ValidationOption;
/* eslint-disable no-restricted-imports */
const bson_1 = require("bson");
var bson_2 = require("bson");
Object.defineProperty(e***REMOVED***ports, "Binary", { enumerable: true, get: function () { return bson_2.Binary; } });
Object.defineProperty(e***REMOVED***ports, "BSON", { enumerable: true, get: function () { return bson_2.BSON; } });
Object.defineProperty(e***REMOVED***ports, "BSONError", { enumerable: true, get: function () { return bson_2.BSONError; } });
Object.defineProperty(e***REMOVED***ports, "BSONRegE***REMOVED***p", { enumerable: true, get: function () { return bson_2.BSONRegE***REMOVED***p; } });
Object.defineProperty(e***REMOVED***ports, "BSONSymbol", { enumerable: true, get: function () { return bson_2.BSONSymbol; } });
Object.defineProperty(e***REMOVED***ports, "BSONType", { enumerable: true, get: function () { return bson_2.BSONType; } });
Object.defineProperty(e***REMOVED***ports, "calculateObjectSize", { enumerable: true, get: function () { return bson_2.calculateObjectSize; } });
Object.defineProperty(e***REMOVED***ports, "Code", { enumerable: true, get: function () { return bson_2.Code; } });
Object.defineProperty(e***REMOVED***ports, "DBRef", { enumerable: true, get: function () { return bson_2.DBRef; } });
Object.defineProperty(e***REMOVED***ports, "Decimal128", { enumerable: true, get: function () { return bson_2.Decimal128; } });
Object.defineProperty(e***REMOVED***ports, "deserialize", { enumerable: true, get: function () { return bson_2.deserialize; } });
Object.defineProperty(e***REMOVED***ports, "Double", { enumerable: true, get: function () { return bson_2.Double; } });
Object.defineProperty(e***REMOVED***ports, "EJSON", { enumerable: true, get: function () { return bson_2.EJSON; } });
Object.defineProperty(e***REMOVED***ports, "Int32", { enumerable: true, get: function () { return bson_2.Int32; } });
Object.defineProperty(e***REMOVED***ports, "Long", { enumerable: true, get: function () { return bson_2.Long; } });
Object.defineProperty(e***REMOVED***ports, "Ma***REMOVED***Key", { enumerable: true, get: function () { return bson_2.Ma***REMOVED***Key; } });
Object.defineProperty(e***REMOVED***ports, "MinKey", { enumerable: true, get: function () { return bson_2.MinKey; } });
Object.defineProperty(e***REMOVED***ports, "ObjectId", { enumerable: true, get: function () { return bson_2.ObjectId; } });
Object.defineProperty(e***REMOVED***ports, "serialize", { enumerable: true, get: function () { return bson_2.serialize; } });
Object.defineProperty(e***REMOVED***ports, "Timestamp", { enumerable: true, get: function () { return bson_2.Timestamp; } });
Object.defineProperty(e***REMOVED***ports, "UUID", { enumerable: true, get: function () { return bson_2.UUID; } });
function parseToElementsToArray(bytes, offset) {
    const res = bson_1.BSON.onDemand.parseToElements(bytes, offset);
    return Array.isArray(res) ? res : [...res];
}
e***REMOVED***ports.getInt32LE = bson_1.BSON.onDemand.NumberUtils.getInt32LE;
e***REMOVED***ports.getFloat64LE = bson_1.BSON.onDemand.NumberUtils.getFloat64LE;
e***REMOVED***ports.getBigInt64LE = bson_1.BSON.onDemand.NumberUtils.getBigInt64LE;
e***REMOVED***ports.toUTF8 = bson_1.BSON.onDemand.ByteUtils.toUTF8;
function pluckBSONSerializeOptions(options) {
    const { fieldsAsRaw, useBigInt64, promoteValues, promoteBuffers, promoteLongs, serializeFunctions, ignoreUndefined, bsonRegE***REMOVED***p, raw, enableUtf8Validation } = options;
    return {
        fieldsAsRaw,
        useBigInt64,
        promoteValues,
        promoteBuffers,
        promoteLongs,
        serializeFunctions,
        ignoreUndefined,
        bsonRegE***REMOVED***p,
        raw,
        enableUtf8Validation
    };
}
/**
 * Merge the given BSONSerializeOptions, preferring options over the parent's options, and
 * substituting defaults for values not set.
 *
 * @internal
 */
function resolveBSONOptions(options, parent) {
    const parentOptions = parent?.bsonOptions;
    return {
        raw: options?.raw ?? parentOptions?.raw ?? false,
        useBigInt64: options?.useBigInt64 ?? parentOptions?.useBigInt64 ?? false,
        promoteLongs: options?.promoteLongs ?? parentOptions?.promoteLongs ?? true,
        promoteValues: options?.promoteValues ?? parentOptions?.promoteValues ?? true,
        promoteBuffers: options?.promoteBuffers ?? parentOptions?.promoteBuffers ?? false,
        ignoreUndefined: options?.ignoreUndefined ?? parentOptions?.ignoreUndefined ?? false,
        bsonRegE***REMOVED***p: options?.bsonRegE***REMOVED***p ?? parentOptions?.bsonRegE***REMOVED***p ?? false,
        serializeFunctions: options?.serializeFunctions ?? parentOptions?.serializeFunctions ?? false,
        fieldsAsRaw: options?.fieldsAsRaw ?? parentOptions?.fieldsAsRaw ?? {},
        enableUtf8Validation: options?.enableUtf8Validation ?? parentOptions?.enableUtf8Validation ?? true
    };
}
/** @internal */
function parseUtf8ValidationOption(options) {
    const enableUtf8Validation = options?.enableUtf8Validation;
    if (enableUtf8Validation === false) {
        return { utf8: false };
    }
    return { utf8: { writeErrors: false } };
}
//# sourceMappingURL=bson.js.map