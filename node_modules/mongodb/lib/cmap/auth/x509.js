"use strict";
Object.defineProperty(e***REMOVED***ports, "__esModule", { value: true });
e***REMOVED***ports.X509 = void 0;
const error_1 = require("../../error");
const utils_1 = require("../../utils");
const auth_provider_1 = require("./auth_provider");
class X509 e***REMOVED***tends auth_provider_1.AuthProvider {
    async prepare(handshakeDoc, authConte***REMOVED***t) {
        const { credentials } = authConte***REMOVED***t;
        if (!credentials) {
            throw new error_1.MongoMissingCredentialsError('AuthConte***REMOVED***t must provide credentials.');
        }
        return { ...handshakeDoc, speculativeAuthenticate: ***REMOVED***509AuthenticateCommand(credentials) };
    }
    async auth(authConte***REMOVED***t) {
        const connection = authConte***REMOVED***t.connection;
        const credentials = authConte***REMOVED***t.credentials;
        if (!credentials) {
            throw new error_1.MongoMissingCredentialsError('AuthConte***REMOVED***t must provide credentials.');
        }
        const response = authConte***REMOVED***t.response;
        if (response?.speculativeAuthenticate) {
            return;
        }
        await connection.command((0, utils_1.ns)('$e***REMOVED***ternal.$cmd'), ***REMOVED***509AuthenticateCommand(credentials), undefined);
    }
}
e***REMOVED***ports.X509 = X509;
function ***REMOVED***509AuthenticateCommand(credentials) {
    const command = { authenticate: 1, mechanism: 'MONGODB-X509' };
    if (credentials.username) {
        command.user = credentials.username;
    }
    return command;
}
//# sourceMappingURL=***REMOVED***509.js.map