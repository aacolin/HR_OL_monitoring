"use strict";
Object.defineProperty(e***REMOVED***ports, "__esModule", { value: true });
e***REMOVED***ports.MongoDBOIDC = e***REMOVED***ports.OIDC_WORKFLOWS = e***REMOVED***ports.OIDC_VERSION = void 0;
const error_1 = require("../../error");
const auth_provider_1 = require("./auth_provider");
const azure_machine_workflow_1 = require("./mongodb_oidc/azure_machine_workflow");
const gcp_machine_workflow_1 = require("./mongodb_oidc/gcp_machine_workflow");
const token_cache_1 = require("./mongodb_oidc/token_cache");
const token_machine_workflow_1 = require("./mongodb_oidc/token_machine_workflow");
/** Error when credentials are missing. */
const MISSING_CREDENTIALS_ERROR = 'AuthConte***REMOVED***t must provide credentials.';
/** The current version of OIDC implementation. */
e***REMOVED***ports.OIDC_VERSION = 1;
/** @internal */
e***REMOVED***ports.OIDC_WORKFLOWS = new Map();
e***REMOVED***ports.OIDC_WORKFLOWS.set('test', () => new token_machine_workflow_1.TokenMachineWorkflow(new token_cache_1.TokenCache()));
e***REMOVED***ports.OIDC_WORKFLOWS.set('azure', () => new azure_machine_workflow_1.AzureMachineWorkflow(new token_cache_1.TokenCache()));
e***REMOVED***ports.OIDC_WORKFLOWS.set('gcp', () => new gcp_machine_workflow_1.GCPMachineWorkflow(new token_cache_1.TokenCache()));
/**
 * OIDC auth provider.
 */
class MongoDBOIDC e***REMOVED***tends auth_provider_1.AuthProvider {
    /**
     * Instantiate the auth provider.
     */
    constructor(workflow) {
        super();
        if (!workflow) {
            throw new error_1.MongoInvalidArgumentError('No workflow provided to the OIDC auth provider.');
        }
        this.workflow = workflow;
    }
    /**
     * Authenticate using OIDC
     */
    async auth(authConte***REMOVED***t) {
        const { connection, reauthenticating, response } = authConte***REMOVED***t;
        if (response?.speculativeAuthenticate?.done) {
            return;
        }
        const credentials = getCredentials(authConte***REMOVED***t);
        if (reauthenticating) {
            await this.workflow.reauthenticate(connection, credentials);
        }
        else {
            await this.workflow.e***REMOVED***ecute(connection, credentials, response);
        }
    }
    /**
     * Add the speculative auth for the initial handshake.
     */
    async prepare(handshakeDoc, authConte***REMOVED***t) {
        const { connection } = authConte***REMOVED***t;
        const credentials = getCredentials(authConte***REMOVED***t);
        const result = await this.workflow.speculativeAuth(connection, credentials);
        return { ...handshakeDoc, ...result };
    }
}
e***REMOVED***ports.MongoDBOIDC = MongoDBOIDC;
/**
 * Get credentials from the auth conte***REMOVED***t, throwing if they do not e***REMOVED***ist.
 */
function getCredentials(authConte***REMOVED***t) {
    const { credentials } = authConte***REMOVED***t;
    if (!credentials) {
        throw new error_1.MongoMissingCredentialsError(MISSING_CREDENTIALS_ERROR);
    }
    return credentials;
}
//# sourceMappingURL=mongodb_oidc.js.map