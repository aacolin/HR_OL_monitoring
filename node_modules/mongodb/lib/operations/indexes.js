"use strict";
Object.defineProperty(e***REMOVED***ports, "__esModule", { value: true });
e***REMOVED***ports.ListInde***REMOVED***esOperation = e***REMOVED***ports.DropInde***REMOVED***Operation = e***REMOVED***ports.CreateInde***REMOVED***esOperation = void 0;
const responses_1 = require("../cmap/wire_protocol/responses");
const error_1 = require("../error");
const utils_1 = require("../utils");
const command_1 = require("./command");
const operation_1 = require("./operation");
const VALID_INDEX_OPTIONS = new Set([
    'background',
    'unique',
    'name',
    'partialFilterE***REMOVED***pression',
    'sparse',
    'hidden',
    'e***REMOVED***pireAfterSeconds',
    'storageEngine',
    'collation',
    'version',
    // te***REMOVED***t inde***REMOVED***es
    'weights',
    'default_language',
    'language_override',
    'te***REMOVED***tInde***REMOVED***Version',
    // 2d-sphere inde***REMOVED***es
    '2dsphereInde***REMOVED***Version',
    // 2d inde***REMOVED***es
    'bits',
    'min',
    'ma***REMOVED***',
    // geoHaystack Inde***REMOVED***es
    'bucketSize',
    // wildcard inde***REMOVED***es
    'wildcardProjection'
]);
function isInde***REMOVED***Direction(***REMOVED***) {
    return (typeof ***REMOVED*** === 'number' || ***REMOVED*** === '2d' || ***REMOVED*** === '2dsphere' || ***REMOVED*** === 'te***REMOVED***t' || ***REMOVED*** === 'geoHaystack');
}
function isSingleInde***REMOVED***Tuple(t) {
    return Array.isArray(t) && t.length === 2 && isInde***REMOVED***Direction(t[1]);
}
/**
 * Converts an `Inde***REMOVED***Specification`, which can be specified in multiple formats, into a
 * valid `key` for the createInde***REMOVED***es command.
 */
function constructInde***REMOVED***DescriptionMap(inde***REMOVED***Spec) {
    const key = new Map();
    const inde***REMOVED***Specs = !Array.isArray(inde***REMOVED***Spec) || isSingleInde***REMOVED***Tuple(inde***REMOVED***Spec) ? [inde***REMOVED***Spec] : inde***REMOVED***Spec;
    // Iterate through array and handle different types
    for (const spec of inde***REMOVED***Specs) {
        if (typeof spec === 'string') {
            key.set(spec, 1);
        }
        else if (Array.isArray(spec)) {
            key.set(spec[0], spec[1] ?? 1);
        }
        else if (spec instanceof Map) {
            for (const [property, value] of spec) {
                key.set(property, value);
            }
        }
        else if ((0, utils_1.isObject)(spec)) {
            for (const [property, value] of Object.entries(spec)) {
                key.set(property, value);
            }
        }
    }
    return key;
}
/**
 * Receives an inde***REMOVED*** description and returns a modified inde***REMOVED*** description which has had invalid options removed
 * from the description and has mapped the `version` option to the `v` option.
 */
function resolveInde***REMOVED***Description(description) {
    const validProvidedOptions = Object.entries(description).filter(([optionName]) => VALID_INDEX_OPTIONS.has(optionName));
    return Object.fromEntries(
    // we support the `version` option, but the `createInde***REMOVED***es` command e***REMOVED***pects it to be the `v`
    validProvidedOptions.map(([name, value]) => (name === 'version' ? ['v', value] : [name, value])));
}
/** @internal */
class CreateInde***REMOVED***esOperation e***REMOVED***tends command_1.CommandOperation {
    constructor(parent, collectionName, inde***REMOVED***es, options) {
        super(parent, options);
        this.options = options ?? {};
        this.collectionName = collectionName;
        this.inde***REMOVED***es = inde***REMOVED***es.map((userInde***REMOVED***) => {
            // Ensure the key is a Map to preserve inde***REMOVED*** key ordering
            const key = userInde***REMOVED***.key instanceof Map ? userInde***REMOVED***.key : new Map(Object.entries(userInde***REMOVED***.key));
            const name = userInde***REMOVED***.name ?? Array.from(key).flat().join('_');
            const validInde***REMOVED***Options = resolveInde***REMOVED***Description(userInde***REMOVED***);
            return {
                ...validInde***REMOVED***Options,
                name,
                key
            };
        });
    }
    static fromInde***REMOVED***DescriptionArray(parent, collectionName, inde***REMOVED***es, options) {
        return new CreateInde***REMOVED***esOperation(parent, collectionName, inde***REMOVED***es, options);
    }
    static fromInde***REMOVED***Specification(parent, collectionName, inde***REMOVED***Spec, options = {}) {
        const key = constructInde***REMOVED***DescriptionMap(inde***REMOVED***Spec);
        const description = { ...options, key };
        return new CreateInde***REMOVED***esOperation(parent, collectionName, [description], options);
    }
    get commandName() {
        return 'createInde***REMOVED***es';
    }
    async e***REMOVED***ecute(server, session) {
        const options = this.options;
        const inde***REMOVED***es = this.inde***REMOVED***es;
        const serverWireVersion = (0, utils_1.ma***REMOVED***WireVersion)(server);
        const cmd = { createInde***REMOVED***es: this.collectionName, inde***REMOVED***es };
        if (options.commitQuorum != null) {
            if (serverWireVersion < 9) {
                throw new error_1.MongoCompatibilityError('Option `commitQuorum` for `createInde***REMOVED***es` not supported on servers < 4.4');
            }
            cmd.commitQuorum = options.commitQuorum;
        }
        // collation is set on each inde***REMOVED***, it should not be defined at the root
        this.options.collation = undefined;
        await super.e***REMOVED***ecuteCommand(server, session, cmd);
        const inde***REMOVED***Names = inde***REMOVED***es.map(inde***REMOVED*** => inde***REMOVED***.name || '');
        return inde***REMOVED***Names;
    }
}
e***REMOVED***ports.CreateInde***REMOVED***esOperation = CreateInde***REMOVED***esOperation;
/** @internal */
class DropInde***REMOVED***Operation e***REMOVED***tends command_1.CommandOperation {
    constructor(collection, inde***REMOVED***Name, options) {
        super(collection, options);
        this.options = options ?? {};
        this.collection = collection;
        this.inde***REMOVED***Name = inde***REMOVED***Name;
    }
    get commandName() {
        return 'dropInde***REMOVED***es';
    }
    async e***REMOVED***ecute(server, session) {
        const cmd = { dropInde***REMOVED***es: this.collection.collectionName, inde***REMOVED***: this.inde***REMOVED***Name };
        return await super.e***REMOVED***ecuteCommand(server, session, cmd);
    }
}
e***REMOVED***ports.DropInde***REMOVED***Operation = DropInde***REMOVED***Operation;
/** @internal */
class ListInde***REMOVED***esOperation e***REMOVED***tends command_1.CommandOperation {
    constructor(collection, options) {
        super(collection, options);
        this.options = { ...options };
        delete this.options.writeConcern;
        this.collectionNamespace = collection.s.namespace;
    }
    get commandName() {
        return 'listInde***REMOVED***es';
    }
    async e***REMOVED***ecute(server, session) {
        const serverWireVersion = (0, utils_1.ma***REMOVED***WireVersion)(server);
        const cursor = this.options.batchSize ? { batchSize: this.options.batchSize } : {};
        const command = { listInde***REMOVED***es: this.collectionNamespace.collection, cursor };
        // we check for undefined specifically here to allow falsy values
        // eslint-disable-ne***REMOVED***t-line no-restricted-synta***REMOVED***
        if (serverWireVersion >= 9 && this.options.comment !== undefined) {
            command.comment = this.options.comment;
        }
        return await super.e***REMOVED***ecuteCommand(server, session, command, responses_1.CursorResponse);
    }
}
e***REMOVED***ports.ListInde***REMOVED***esOperation = ListInde***REMOVED***esOperation;
(0, operation_1.defineAspects)(ListInde***REMOVED***esOperation, [
    operation_1.Aspect.READ_OPERATION,
    operation_1.Aspect.RETRYABLE,
    operation_1.Aspect.CURSOR_CREATING
]);
(0, operation_1.defineAspects)(CreateInde***REMOVED***esOperation, [operation_1.Aspect.WRITE_OPERATION]);
(0, operation_1.defineAspects)(DropInde***REMOVED***Operation, [operation_1.Aspect.WRITE_OPERATION]);
//# sourceMappingURL=inde***REMOVED***es.js.map