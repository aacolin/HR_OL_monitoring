"use strict";
Object.defineProperty(e***REMOVED***ports, "__esModule", { value: true });
e***REMOVED***ports.MongoWriteConcernError = e***REMOVED***ports.MongoServerSelectionError = e***REMOVED***ports.MongoSystemError = e***REMOVED***ports.MongoMissingDependencyError = e***REMOVED***ports.MongoMissingCredentialsError = e***REMOVED***ports.MongoCompatibilityError = e***REMOVED***ports.MongoInvalidArgumentError = e***REMOVED***ports.MongoParseError = e***REMOVED***ports.MongoNetworkTimeoutError = e***REMOVED***ports.MongoNetworkError = e***REMOVED***ports.MongoTopologyClosedError = e***REMOVED***ports.MongoCursorE***REMOVED***haustedError = e***REMOVED***ports.MongoServerClosedError = e***REMOVED***ports.MongoCursorInUseError = e***REMOVED***ports.MongoUne***REMOVED***pectedServerResponseError = e***REMOVED***ports.MongoGridFSChunkError = e***REMOVED***ports.MongoGridFSStreamError = e***REMOVED***ports.MongoTailableCursorError = e***REMOVED***ports.MongoChangeStreamError = e***REMOVED***ports.MongoClientBulkWriteE***REMOVED***ecutionError = e***REMOVED***ports.MongoClientBulkWriteCursorError = e***REMOVED***ports.MongoClientBulkWriteError = e***REMOVED***ports.MongoGCPError = e***REMOVED***ports.MongoAzureError = e***REMOVED***ports.MongoOIDCError = e***REMOVED***ports.MongoAWSError = e***REMOVED***ports.MongoKerberosError = e***REMOVED***ports.MongoE***REMOVED***piredSessionError = e***REMOVED***ports.MongoTransactionError = e***REMOVED***ports.MongoNotConnectedError = e***REMOVED***ports.MongoDecompressionError = e***REMOVED***ports.MongoBatchReE***REMOVED***ecutionError = e***REMOVED***ports.MongoRuntimeError = e***REMOVED***ports.MongoAPIError = e***REMOVED***ports.MongoDriverError = e***REMOVED***ports.MongoServerError = e***REMOVED***ports.MongoError = e***REMOVED***ports.MongoErrorLabel = e***REMOVED***ports.GET_MORE_RESUMABLE_CODES = e***REMOVED***ports.MONGODB_ERROR_CODES = e***REMOVED***ports.NODE_IS_RECOVERING_ERROR_MESSAGE = e***REMOVED***ports.LEGACY_NOT_PRIMARY_OR_SECONDARY_ERROR_MESSAGE = e***REMOVED***ports.LEGACY_NOT_WRITABLE_PRIMARY_ERROR_MESSAGE = void 0;
e***REMOVED***ports.isNetworkErrorBeforeHandshake = isNetworkErrorBeforeHandshake;
e***REMOVED***ports.needsRetryableWriteLabel = needsRetryableWriteLabel;
e***REMOVED***ports.isRetryableWriteError = isRetryableWriteError;
e***REMOVED***ports.isRetryableReadError = isRetryableReadError;
e***REMOVED***ports.isNodeShuttingDownError = isNodeShuttingDownError;
e***REMOVED***ports.isSDAMUnrecoverableError = isSDAMUnrecoverableError;
e***REMOVED***ports.isNetworkTimeoutError = isNetworkTimeoutError;
e***REMOVED***ports.isResumableError = isResumableError;
/** @internal */
const kErrorLabels = Symbol('errorLabels');
/**
 * @internal
 * The legacy error message from the server that indicates the node is not a writable primary
 * https://github.com/mongodb/specifications/blob/b07c26dc40d04ac20349f989db531c9845fdd755/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#not-writable-primary-and-node-is-recovering
 */
e***REMOVED***ports.LEGACY_NOT_WRITABLE_PRIMARY_ERROR_MESSAGE = new RegE***REMOVED***p('not master', 'i');
/**
 * @internal
 * The legacy error message from the server that indicates the node is not a primary or secondary
 * https://github.com/mongodb/specifications/blob/b07c26dc40d04ac20349f989db531c9845fdd755/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#not-writable-primary-and-node-is-recovering
 */
e***REMOVED***ports.LEGACY_NOT_PRIMARY_OR_SECONDARY_ERROR_MESSAGE = new RegE***REMOVED***p('not master or secondary', 'i');
/**
 * @internal
 * The error message from the server that indicates the node is recovering
 * https://github.com/mongodb/specifications/blob/b07c26dc40d04ac20349f989db531c9845fdd755/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#not-writable-primary-and-node-is-recovering
 */
e***REMOVED***ports.NODE_IS_RECOVERING_ERROR_MESSAGE = new RegE***REMOVED***p('node is recovering', 'i');
/** @internal MongoDB Error Codes */
e***REMOVED***ports.MONGODB_ERROR_CODES = Object.freeze({
    HostUnreachable: 6,
    HostNotFound: 7,
    AuthenticationFailed: 18,
    NetworkTimeout: 89,
    ShutdownInProgress: 91,
    PrimarySteppedDown: 189,
    E***REMOVED***ceededTimeLimit: 262,
    SocketE***REMOVED***ception: 9001,
    NotWritablePrimary: 10107,
    InterruptedAtShutdown: 11600,
    InterruptedDueToReplStateChange: 11602,
    NotPrimaryNoSecondaryOk: 13435,
    NotPrimaryOrSecondary: 13436,
    StaleShardVersion: 63,
    StaleEpoch: 150,
    StaleConfig: 13388,
    RetryChangeStream: 234,
    FailedToSatisfyReadPreference: 133,
    CursorNotFound: 43,
    LegacyNotPrimary: 10058,
    WriteConcernFailed: 64,
    NamespaceNotFound: 26,
    IllegalOperation: 20,
    Ma***REMOVED***TimeMSE***REMOVED***pired: 50,
    UnknownReplWriteConcern: 79,
    UnsatisfiableWriteConcern: 100,
    Reauthenticate: 391,
    ReadConcernMajorityNotAvailableYet: 134
});
// From spec@https://github.com/mongodb/specifications/blob/f93d78191f3db2898a59013a7ed5650352ef6da8/source/change-streams/change-streams.rst#resumable-error
e***REMOVED***ports.GET_MORE_RESUMABLE_CODES = new Set([
    e***REMOVED***ports.MONGODB_ERROR_CODES.HostUnreachable,
    e***REMOVED***ports.MONGODB_ERROR_CODES.HostNotFound,
    e***REMOVED***ports.MONGODB_ERROR_CODES.NetworkTimeout,
    e***REMOVED***ports.MONGODB_ERROR_CODES.ShutdownInProgress,
    e***REMOVED***ports.MONGODB_ERROR_CODES.PrimarySteppedDown,
    e***REMOVED***ports.MONGODB_ERROR_CODES.E***REMOVED***ceededTimeLimit,
    e***REMOVED***ports.MONGODB_ERROR_CODES.SocketE***REMOVED***ception,
    e***REMOVED***ports.MONGODB_ERROR_CODES.NotWritablePrimary,
    e***REMOVED***ports.MONGODB_ERROR_CODES.InterruptedAtShutdown,
    e***REMOVED***ports.MONGODB_ERROR_CODES.InterruptedDueToReplStateChange,
    e***REMOVED***ports.MONGODB_ERROR_CODES.NotPrimaryNoSecondaryOk,
    e***REMOVED***ports.MONGODB_ERROR_CODES.NotPrimaryOrSecondary,
    e***REMOVED***ports.MONGODB_ERROR_CODES.StaleShardVersion,
    e***REMOVED***ports.MONGODB_ERROR_CODES.StaleEpoch,
    e***REMOVED***ports.MONGODB_ERROR_CODES.StaleConfig,
    e***REMOVED***ports.MONGODB_ERROR_CODES.RetryChangeStream,
    e***REMOVED***ports.MONGODB_ERROR_CODES.FailedToSatisfyReadPreference,
    e***REMOVED***ports.MONGODB_ERROR_CODES.CursorNotFound
]);
/** @public */
e***REMOVED***ports.MongoErrorLabel = Object.freeze({
    RetryableWriteError: 'RetryableWriteError',
    TransientTransactionError: 'TransientTransactionError',
    UnknownTransactionCommitResult: 'UnknownTransactionCommitResult',
    ResumableChangeStreamError: 'ResumableChangeStreamError',
    HandshakeError: 'HandshakeError',
    ResetPool: 'ResetPool',
    PoolRequstedRetry: 'PoolRequstedRetry',
    InterruptInUseConnections: 'InterruptInUseConnections',
    NoWritesPerformed: 'NoWritesPerformed'
});
function isAggregateError(e) {
    return e != null && typeof e === 'object' && 'errors' in e && Array.isArray(e.errors);
}
/**
 * @public
 * @category Error
 *
 * @privateRemarks
 * mongodb-client-encryption has a dependency on this error, it uses the constructor with a string argument
 */
class MongoError e***REMOVED***tends Error {
    /**
     * **Do not use this constructor!**
     *
     * Meant for internal use only.
     *
     * @remarks
     * This class is only meant to be constructed within the driver. This constructor is
     * not subject to semantic versioning compatibility guarantees and may change at any time.
     *
     * @public
     **/
    constructor(message, options) {
        super(message, options);
        this[kErrorLabels] = new Set();
    }
    /** @internal */
    static buildErrorMessage(e) {
        if (typeof e === 'string') {
            return e;
        }
        if (isAggregateError(e) && e.message.length === 0) {
            return e.errors.length === 0
                ? 'AggregateError has an empty errors array. Please check the `cause` property for more information.'
                : e.errors.map(({ message }) => message).join(', ');
        }
        return e != null && typeof e === 'object' && 'message' in e && typeof e.message === 'string'
            ? e.message
            : 'empty error message';
    }
    get name() {
        return 'MongoError';
    }
    /** Legacy name for server error responses */
    get errmsg() {
        return this.message;
    }
    /**
     * Checks the error to see if it has an error label
     *
     * @param label - The error label to check for
     * @returns returns true if the error has the provided error label
     */
    hasErrorLabel(label) {
        return this[kErrorLabels].has(label);
    }
    addErrorLabel(label) {
        this[kErrorLabels].add(label);
    }
    get errorLabels() {
        return Array.from(this[kErrorLabels]);
    }
}
e***REMOVED***ports.MongoError = MongoError;
/**
 * An error coming from the mongo server
 *
 * @public
 * @category Error
 */
class MongoServerError e***REMOVED***tends MongoError {
    /**
     * **Do not use this constructor!**
     *
     * Meant for internal use only.
     *
     * @remarks
     * This class is only meant to be constructed within the driver. This constructor is
     * not subject to semantic versioning compatibility guarantees and may change at any time.
     *
     * @public
     **/
    constructor(message) {
        super(message.message || message.errmsg || message.$err || 'n/a');
        if (message.errorLabels) {
            this[kErrorLabels] = new Set(message.errorLabels);
        }
        this.errorResponse = message;
        for (const name in message) {
            if (name !== 'errorLabels' &&
                name !== 'errmsg' &&
                name !== 'message' &&
                name !== 'errorResponse') {
                this[name] = message[name];
            }
        }
    }
    get name() {
        return 'MongoServerError';
    }
}
e***REMOVED***ports.MongoServerError = MongoServerError;
/**
 * An error generated by the driver
 *
 * @public
 * @category Error
 */
class MongoDriverError e***REMOVED***tends MongoError {
    /**
     * **Do not use this constructor!**
     *
     * Meant for internal use only.
     *
     * @remarks
     * This class is only meant to be constructed within the driver. This constructor is
     * not subject to semantic versioning compatibility guarantees and may change at any time.
     *
     * @public
     **/
    constructor(message, options) {
        super(message, options);
    }
    get name() {
        return 'MongoDriverError';
    }
}
e***REMOVED***ports.MongoDriverError = MongoDriverError;
/**
 * An error generated when the driver API is used incorrectly
 *
 * @privateRemarks
 * Should **never** be directly instantiated
 *
 * @public
 * @category Error
 */
class MongoAPIError e***REMOVED***tends MongoDriverError {
    /**
     * **Do not use this constructor!**
     *
     * Meant for internal use only.
     *
     * @remarks
     * This class is only meant to be constructed within the driver. This constructor is
     * not subject to semantic versioning compatibility guarantees and may change at any time.
     *
     * @public
     **/
    constructor(message, options) {
        super(message, options);
    }
    get name() {
        return 'MongoAPIError';
    }
}
e***REMOVED***ports.MongoAPIError = MongoAPIError;
/**
 * An error generated when the driver encounters une***REMOVED***pected input
 * or reaches an une***REMOVED***pected/invalid internal state
 *
 * @privateRemarks
 * Should **never** be directly instantiated.
 *
 * @public
 * @category Error
 */
class MongoRuntimeError e***REMOVED***tends MongoDriverError {
    /**
     * **Do not use this constructor!**
     *
     * Meant for internal use only.
     *
     * @remarks
     * This class is only meant to be constructed within the driver. This constructor is
     * not subject to semantic versioning compatibility guarantees and may change at any time.
     *
     * @public
     **/
    constructor(message, options) {
        super(message, options);
    }
    get name() {
        return 'MongoRuntimeError';
    }
}
e***REMOVED***ports.MongoRuntimeError = MongoRuntimeError;
/**
 * An error generated when a batch command is re-e***REMOVED***ecuted after one of the commands in the batch
 * has failed
 *
 * @public
 * @category Error
 */
class MongoBatchReE***REMOVED***ecutionError e***REMOVED***tends MongoAPIError {
    /**
     * **Do not use this constructor!**
     *
     * Meant for internal use only.
     *
     * @remarks
     * This class is only meant to be constructed within the driver. This constructor is
     * not subject to semantic versioning compatibility guarantees and may change at any time.
     *
     * @public
     **/
    constructor(message = 'This batch has already been e***REMOVED***ecuted, create new batch to e***REMOVED***ecute') {
        super(message);
    }
    get name() {
        return 'MongoBatchReE***REMOVED***ecutionError';
    }
}
e***REMOVED***ports.MongoBatchReE***REMOVED***ecutionError = MongoBatchReE***REMOVED***ecutionError;
/**
 * An error generated when the driver fails to decompress
 * data received from the server.
 *
 * @public
 * @category Error
 */
class MongoDecompressionError e***REMOVED***tends MongoRuntimeError {
    /**
     * **Do not use this constructor!**
     *
     * Meant for internal use only.
     *
     * @remarks
     * This class is only meant to be constructed within the driver. This constructor is
     * not subject to semantic versioning compatibility guarantees and may change at any time.
     *
     * @public
     **/
    constructor(message) {
        super(message);
    }
    get name() {
        return 'MongoDecompressionError';
    }
}
e***REMOVED***ports.MongoDecompressionError = MongoDecompressionError;
/**
 * An error thrown when the user attempts to operate on a database or collection through a MongoClient
 * that has not yet successfully called the "connect" method
 *
 * @public
 * @category Error
 */
class MongoNotConnectedError e***REMOVED***tends MongoAPIError {
    /**
     * **Do not use this constructor!**
     *
     * Meant for internal use only.
     *
     * @remarks
     * This class is only meant to be constructed within the driver. This constructor is
     * not subject to semantic versioning compatibility guarantees and may change at any time.
     *
     * @public
     **/
    constructor(message) {
        super(message);
    }
    get name() {
        return 'MongoNotConnectedError';
    }
}
e***REMOVED***ports.MongoNotConnectedError = MongoNotConnectedError;
/**
 * An error generated when the user makes a mistake in the usage of transactions.
 * (e.g. attempting to commit a transaction with a readPreference other than primary)
 *
 * @public
 * @category Error
 */
class MongoTransactionError e***REMOVED***tends MongoAPIError {
    /**
     * **Do not use this constructor!**
     *
     * Meant for internal use only.
     *
     * @remarks
     * This class is only meant to be constructed within the driver. This constructor is
     * not subject to semantic versioning compatibility guarantees and may change at any time.
     *
     * @public
     **/
    constructor(message) {
        super(message);
    }
    get name() {
        return 'MongoTransactionError';
    }
}
e***REMOVED***ports.MongoTransactionError = MongoTransactionError;
/**
 * An error generated when the user attempts to operate
 * on a session that has e***REMOVED***pired or has been closed.
 *
 * @public
 * @category Error
 */
class MongoE***REMOVED***piredSessionError e***REMOVED***tends MongoAPIError {
    /**
     * **Do not use this constructor!**
     *
     * Meant for internal use only.
     *
     * @remarks
     * This class is only meant to be constructed within the driver. This constructor is
     * not subject to semantic versioning compatibility guarantees and may change at any time.
     *
     * @public
     **/
    constructor(message = 'Cannot use a session that has ended') {
        super(message);
    }
    get name() {
        return 'MongoE***REMOVED***piredSessionError';
    }
}
e***REMOVED***ports.MongoE***REMOVED***piredSessionError = MongoE***REMOVED***piredSessionError;
/**
 * A error generated when the user attempts to authenticate
 * via Kerberos, but fails to connect to the Kerberos client.
 *
 * @public
 * @category Error
 */
class MongoKerberosError e***REMOVED***tends MongoRuntimeError {
    /**
     * **Do not use this constructor!**
     *
     * Meant for internal use only.
     *
     * @remarks
     * This class is only meant to be constructed within the driver. This constructor is
     * not subject to semantic versioning compatibility guarantees and may change at any time.
     *
     * @public
     **/
    constructor(message) {
        super(message);
    }
    get name() {
        return 'MongoKerberosError';
    }
}
e***REMOVED***ports.MongoKerberosError = MongoKerberosError;
/**
 * A error generated when the user attempts to authenticate
 * via AWS, but fails
 *
 * @public
 * @category Error
 */
class MongoAWSError e***REMOVED***tends MongoRuntimeError {
    /**
     * **Do not use this constructor!**
     *
     * Meant for internal use only.
     *
     * @remarks
     * This class is only meant to be constructed within the driver. This constructor is
     * not subject to semantic versioning compatibility guarantees and may change at any time.
     *
     * @public
     **/
    constructor(message, options) {
        super(message, options);
    }
    get name() {
        return 'MongoAWSError';
    }
}
e***REMOVED***ports.MongoAWSError = MongoAWSError;
/**
 * A error generated when the user attempts to authenticate
 * via OIDC callbacks, but fails.
 *
 * @public
 * @category Error
 */
class MongoOIDCError e***REMOVED***tends MongoRuntimeError {
    /**
     * **Do not use this constructor!**
     *
     * Meant for internal use only.
     *
     * @remarks
     * This class is only meant to be constructed within the driver. This constructor is
     * not subject to semantic versioning compatibility guarantees and may change at any time.
     *
     * @public
     **/
    constructor(message) {
        super(message);
    }
    get name() {
        return 'MongoOIDCError';
    }
}
e***REMOVED***ports.MongoOIDCError = MongoOIDCError;
/**
 * A error generated when the user attempts to authenticate
 * via Azure, but fails.
 *
 * @public
 * @category Error
 */
class MongoAzureError e***REMOVED***tends MongoOIDCError {
    /**
     * **Do not use this constructor!**
     *
     * Meant for internal use only.
     *
     * @remarks
     * This class is only meant to be constructed within the driver. This constructor is
     * not subject to semantic versioning compatibility guarantees and may change at any time.
     *
     * @public
     **/
    constructor(message) {
        super(message);
    }
    get name() {
        return 'MongoAzureError';
    }
}
e***REMOVED***ports.MongoAzureError = MongoAzureError;
/**
 * A error generated when the user attempts to authenticate
 * via GCP, but fails.
 *
 * @public
 * @category Error
 */
class MongoGCPError e***REMOVED***tends MongoOIDCError {
    /**
     * **Do not use this constructor!**
     *
     * Meant for internal use only.
     *
     * @remarks
     * This class is only meant to be constructed within the driver. This constructor is
     * not subject to semantic versioning compatibility guarantees and may change at any time.
     *
     * @public
     **/
    constructor(message) {
        super(message);
    }
    get name() {
        return 'MongoGCPError';
    }
}
e***REMOVED***ports.MongoGCPError = MongoGCPError;
/**
 * An error indicating that an error occurred when e***REMOVED***ecuting the bulk write.
 *
 * @public
 * @category Error
 */
class MongoClientBulkWriteError e***REMOVED***tends MongoServerError {
    /**
     * Initialize the client bulk write error.
     * @param message - The error message.
     */
    constructor(message) {
        super(message);
        this.writeConcernErrors = [];
        this.writeErrors = new Map();
    }
    get name() {
        return 'MongoClientBulkWriteError';
    }
}
e***REMOVED***ports.MongoClientBulkWriteError = MongoClientBulkWriteError;
/**
 * An error indicating that an error occurred when processing bulk write results.
 *
 * @public
 * @category Error
 */
class MongoClientBulkWriteCursorError e***REMOVED***tends MongoRuntimeError {
    /**
     * **Do not use this constructor!**
     *
     * Meant for internal use only.
     *
     * @remarks
     * This class is only meant to be constructed within the driver. This constructor is
     * not subject to semantic versioning compatibility guarantees and may change at any time.
     *
     * @public
     **/
    constructor(message) {
        super(message);
    }
    get name() {
        return 'MongoClientBulkWriteCursorError';
    }
}
e***REMOVED***ports.MongoClientBulkWriteCursorError = MongoClientBulkWriteCursorError;
/**
 * An error indicating that an error occurred on the client when e***REMOVED***ecuting a client bulk write.
 *
 * @public
 * @category Error
 */
class MongoClientBulkWriteE***REMOVED***ecutionError e***REMOVED***tends MongoRuntimeError {
    /**
     * **Do not use this constructor!**
     *
     * Meant for internal use only.
     *
     * @remarks
     * This class is only meant to be constructed within the driver. This constructor is
     * not subject to semantic versioning compatibility guarantees and may change at any time.
     *
     * @public
     **/
    constructor(message) {
        super(message);
    }
    get name() {
        return 'MongoClientBulkWriteE***REMOVED***ecutionError';
    }
}
e***REMOVED***ports.MongoClientBulkWriteE***REMOVED***ecutionError = MongoClientBulkWriteE***REMOVED***ecutionError;
/**
 * An error generated when a ChangeStream operation fails to e***REMOVED***ecute.
 *
 * @public
 * @category Error
 */
class MongoChangeStreamError e***REMOVED***tends MongoRuntimeError {
    /**
     * **Do not use this constructor!**
     *
     * Meant for internal use only.
     *
     * @remarks
     * This class is only meant to be constructed within the driver. This constructor is
     * not subject to semantic versioning compatibility guarantees and may change at any time.
     *
     * @public
     **/
    constructor(message) {
        super(message);
    }
    get name() {
        return 'MongoChangeStreamError';
    }
}
e***REMOVED***ports.MongoChangeStreamError = MongoChangeStreamError;
/**
 * An error thrown when the user calls a function or method not supported on a tailable cursor
 *
 * @public
 * @category Error
 */
class MongoTailableCursorError e***REMOVED***tends MongoAPIError {
    /**
     * **Do not use this constructor!**
     *
     * Meant for internal use only.
     *
     * @remarks
     * This class is only meant to be constructed within the driver. This constructor is
     * not subject to semantic versioning compatibility guarantees and may change at any time.
     *
     * @public
     **/
    constructor(message = 'Tailable cursor does not support this operation') {
        super(message);
    }
    get name() {
        return 'MongoTailableCursorError';
    }
}
e***REMOVED***ports.MongoTailableCursorError = MongoTailableCursorError;
/** An error generated when a GridFSStream operation fails to e***REMOVED***ecute.
 *
 * @public
 * @category Error
 */
class MongoGridFSStreamError e***REMOVED***tends MongoRuntimeError {
    /**
     * **Do not use this constructor!**
     *
     * Meant for internal use only.
     *
     * @remarks
     * This class is only meant to be constructed within the driver. This constructor is
     * not subject to semantic versioning compatibility guarantees and may change at any time.
     *
     * @public
     **/
    constructor(message) {
        super(message);
    }
    get name() {
        return 'MongoGridFSStreamError';
    }
}
e***REMOVED***ports.MongoGridFSStreamError = MongoGridFSStreamError;
/**
 * An error generated when a malformed or invalid chunk is
 * encountered when reading from a GridFSStream.
 *
 * @public
 * @category Error
 */
class MongoGridFSChunkError e***REMOVED***tends MongoRuntimeError {
    /**
     * **Do not use this constructor!**
     *
     * Meant for internal use only.
     *
     * @remarks
     * This class is only meant to be constructed within the driver. This constructor is
     * not subject to semantic versioning compatibility guarantees and may change at any time.
     *
     * @public
     **/
    constructor(message) {
        super(message);
    }
    get name() {
        return 'MongoGridFSChunkError';
    }
}
e***REMOVED***ports.MongoGridFSChunkError = MongoGridFSChunkError;
/**
 * An error generated when a **parsable** une***REMOVED***pected response comes from the server.
 * This is generally an error where the driver in a state e***REMOVED***pecting a certain behavior to occur in
 * the ne***REMOVED***t message from MongoDB but it receives something else.
 * This error **does not** represent an issue with wire message formatting.
 *
 * #### E***REMOVED***ample
 * When an operation fails, it is the driver's job to retry it. It must perform serverSelection
 * again to make sure that it attempts the operation against a server in a good state. If server
 * selection returns a server that does not support retryable operations, this error is used.
 * This scenario is unlikely as retryable support would also have been determined on the first attempt
 * but it is possible the state change could report a selectable server that does not support retries.
 *
 * @public
 * @category Error
 */
class MongoUne***REMOVED***pectedServerResponseError e***REMOVED***tends MongoRuntimeError {
    /**
     * **Do not use this constructor!**
     *
     * Meant for internal use only.
     *
     * @remarks
     * This class is only meant to be constructed within the driver. This constructor is
     * not subject to semantic versioning compatibility guarantees and may change at any time.
     *
     * @public
     **/
    constructor(message, options) {
        super(message, options);
    }
    get name() {
        return 'MongoUne***REMOVED***pectedServerResponseError';
    }
}
e***REMOVED***ports.MongoUne***REMOVED***pectedServerResponseError = MongoUne***REMOVED***pectedServerResponseError;
/**
 * An error thrown when the user attempts to add options to a cursor that has already been
 * initialized
 *
 * @public
 * @category Error
 */
class MongoCursorInUseError e***REMOVED***tends MongoAPIError {
    /**
     * **Do not use this constructor!**
     *
     * Meant for internal use only.
     *
     * @remarks
     * This class is only meant to be constructed within the driver. This constructor is
     * not subject to semantic versioning compatibility guarantees and may change at any time.
     *
     * @public
     **/
    constructor(message = 'Cursor is already initialized') {
        super(message);
    }
    get name() {
        return 'MongoCursorInUseError';
    }
}
e***REMOVED***ports.MongoCursorInUseError = MongoCursorInUseError;
/**
 * An error generated when an attempt is made to operate
 * on a closed/closing server.
 *
 * @public
 * @category Error
 */
class MongoServerClosedError e***REMOVED***tends MongoAPIError {
    /**
     * **Do not use this constructor!**
     *
     * Meant for internal use only.
     *
     * @remarks
     * This class is only meant to be constructed within the driver. This constructor is
     * not subject to semantic versioning compatibility guarantees and may change at any time.
     *
     * @public
     **/
    constructor(message = 'Server is closed') {
        super(message);
    }
    get name() {
        return 'MongoServerClosedError';
    }
}
e***REMOVED***ports.MongoServerClosedError = MongoServerClosedError;
/**
 * An error thrown when an attempt is made to read from a cursor that has been e***REMOVED***hausted
 *
 * @public
 * @category Error
 */
class MongoCursorE***REMOVED***haustedError e***REMOVED***tends MongoAPIError {
    /**
     * **Do not use this constructor!**
     *
     * Meant for internal use only.
     *
     * @remarks
     * This class is only meant to be constructed within the driver. This constructor is
     * not subject to semantic versioning compatibility guarantees and may change at any time.
     *
     * @public
     **/
    constructor(message) {
        super(message || 'Cursor is e***REMOVED***hausted');
    }
    get name() {
        return 'MongoCursorE***REMOVED***haustedError';
    }
}
e***REMOVED***ports.MongoCursorE***REMOVED***haustedError = MongoCursorE***REMOVED***haustedError;
/**
 * An error generated when an attempt is made to operate on a
 * dropped, or otherwise unavailable, database.
 *
 * @public
 * @category Error
 */
class MongoTopologyClosedError e***REMOVED***tends MongoAPIError {
    /**
     * **Do not use this constructor!**
     *
     * Meant for internal use only.
     *
     * @remarks
     * This class is only meant to be constructed within the driver. This constructor is
     * not subject to semantic versioning compatibility guarantees and may change at any time.
     *
     * @public
     **/
    constructor(message = 'Topology is closed') {
        super(message);
    }
    get name() {
        return 'MongoTopologyClosedError';
    }
}
e***REMOVED***ports.MongoTopologyClosedError = MongoTopologyClosedError;
/** @internal */
const kBeforeHandshake = Symbol('beforeHandshake');
function isNetworkErrorBeforeHandshake(err) {
    return err[kBeforeHandshake] === true;
}
/**
 * An error indicating an issue with the network, including TCP errors and timeouts.
 * @public
 * @category Error
 */
class MongoNetworkError e***REMOVED***tends MongoError {
    /**
     * **Do not use this constructor!**
     *
     * Meant for internal use only.
     *
     * @remarks
     * This class is only meant to be constructed within the driver. This constructor is
     * not subject to semantic versioning compatibility guarantees and may change at any time.
     *
     * @public
     **/
    constructor(message, options) {
        super(message, { cause: options?.cause });
        if (options && typeof options.beforeHandshake === 'boolean') {
            this[kBeforeHandshake] = options.beforeHandshake;
        }
    }
    get name() {
        return 'MongoNetworkError';
    }
}
e***REMOVED***ports.MongoNetworkError = MongoNetworkError;
/**
 * An error indicating a network timeout occurred
 * @public
 * @category Error
 *
 * @privateRemarks
 * mongodb-client-encryption has a dependency on this error with an instanceof check
 */
class MongoNetworkTimeoutError e***REMOVED***tends MongoNetworkError {
    /**
     * **Do not use this constructor!**
     *
     * Meant for internal use only.
     *
     * @remarks
     * This class is only meant to be constructed within the driver. This constructor is
     * not subject to semantic versioning compatibility guarantees and may change at any time.
     *
     * @public
     **/
    constructor(message, options) {
        super(message, options);
    }
    get name() {
        return 'MongoNetworkTimeoutError';
    }
}
e***REMOVED***ports.MongoNetworkTimeoutError = MongoNetworkTimeoutError;
/**
 * An error used when attempting to parse a value (like a connection string)
 * @public
 * @category Error
 */
class MongoParseError e***REMOVED***tends MongoDriverError {
    /**
     * **Do not use this constructor!**
     *
     * Meant for internal use only.
     *
     * @remarks
     * This class is only meant to be constructed within the driver. This constructor is
     * not subject to semantic versioning compatibility guarantees and may change at any time.
     *
     * @public
     **/
    constructor(message) {
        super(message);
    }
    get name() {
        return 'MongoParseError';
    }
}
e***REMOVED***ports.MongoParseError = MongoParseError;
/**
 * An error generated when the user supplies malformed or une***REMOVED***pected arguments
 * or when a required argument or field is not provided.
 *
 *
 * @public
 * @category Error
 */
class MongoInvalidArgumentError e***REMOVED***tends MongoAPIError {
    /**
     * **Do not use this constructor!**
     *
     * Meant for internal use only.
     *
     * @remarks
     * This class is only meant to be constructed within the driver. This constructor is
     * not subject to semantic versioning compatibility guarantees and may change at any time.
     *
     * @public
     **/
    constructor(message, options) {
        super(message, options);
    }
    get name() {
        return 'MongoInvalidArgumentError';
    }
}
e***REMOVED***ports.MongoInvalidArgumentError = MongoInvalidArgumentError;
/**
 * An error generated when a feature that is not enabled or allowed for the current server
 * configuration is used
 *
 *
 * @public
 * @category Error
 */
class MongoCompatibilityError e***REMOVED***tends MongoAPIError {
    /**
     * **Do not use this constructor!**
     *
     * Meant for internal use only.
     *
     * @remarks
     * This class is only meant to be constructed within the driver. This constructor is
     * not subject to semantic versioning compatibility guarantees and may change at any time.
     *
     * @public
     **/
    constructor(message) {
        super(message);
    }
    get name() {
        return 'MongoCompatibilityError';
    }
}
e***REMOVED***ports.MongoCompatibilityError = MongoCompatibilityError;
/**
 * An error generated when the user fails to provide authentication credentials before attempting
 * to connect to a mongo server instance.
 *
 *
 * @public
 * @category Error
 */
class MongoMissingCredentialsError e***REMOVED***tends MongoAPIError {
    /**
     * **Do not use this constructor!**
     *
     * Meant for internal use only.
     *
     * @remarks
     * This class is only meant to be constructed within the driver. This constructor is
     * not subject to semantic versioning compatibility guarantees and may change at any time.
     *
     * @public
     **/
    constructor(message) {
        super(message);
    }
    get name() {
        return 'MongoMissingCredentialsError';
    }
}
e***REMOVED***ports.MongoMissingCredentialsError = MongoMissingCredentialsError;
/**
 * An error generated when a required module or dependency is not present in the local environment
 *
 * @public
 * @category Error
 */
class MongoMissingDependencyError e***REMOVED***tends MongoAPIError {
    /**
     * **Do not use this constructor!**
     *
     * Meant for internal use only.
     *
     * @remarks
     * This class is only meant to be constructed within the driver. This constructor is
     * not subject to semantic versioning compatibility guarantees and may change at any time.
     *
     * @public
     **/
    constructor(message, options) {
        super(message, options);
        this.dependencyName = options.dependencyName;
    }
    get name() {
        return 'MongoMissingDependencyError';
    }
}
e***REMOVED***ports.MongoMissingDependencyError = MongoMissingDependencyError;
/**
 * An error signifying a general system issue
 * @public
 * @category Error
 */
class MongoSystemError e***REMOVED***tends MongoError {
    /**
     * **Do not use this constructor!**
     *
     * Meant for internal use only.
     *
     * @remarks
     * This class is only meant to be constructed within the driver. This constructor is
     * not subject to semantic versioning compatibility guarantees and may change at any time.
     *
     * @public
     **/
    constructor(message, reason) {
        if (reason && reason.error) {
            super(MongoError.buildErrorMessage(reason.error.message || reason.error), {
                cause: reason.error
            });
        }
        else {
            super(message);
        }
        if (reason) {
            this.reason = reason;
        }
        this.code = reason.error?.code;
    }
    get name() {
        return 'MongoSystemError';
    }
}
e***REMOVED***ports.MongoSystemError = MongoSystemError;
/**
 * An error signifying a client-side server selection error
 * @public
 * @category Error
 */
class MongoServerSelectionError e***REMOVED***tends MongoSystemError {
    /**
     * **Do not use this constructor!**
     *
     * Meant for internal use only.
     *
     * @remarks
     * This class is only meant to be constructed within the driver. This constructor is
     * not subject to semantic versioning compatibility guarantees and may change at any time.
     *
     * @public
     **/
    constructor(message, reason) {
        super(message, reason);
    }
    get name() {
        return 'MongoServerSelectionError';
    }
}
e***REMOVED***ports.MongoServerSelectionError = MongoServerSelectionError;
/**
 * An error thrown when the server reports a writeConcernError
 * @public
 * @category Error
 */
class MongoWriteConcernError e***REMOVED***tends MongoServerError {
    /**
     * **Do not use this constructor!**
     *
     * Meant for internal use only.
     *
     * @remarks
     * This class is only meant to be constructed within the driver. This constructor is
     * not subject to semantic versioning compatibility guarantees and may change at any time.
     *
     * @public
     **/
    constructor(result) {
        super({ ...result.writeConcernError, ...result });
        this.errInfo = result.writeConcernError.errInfo;
        this.result = result;
    }
    get name() {
        return 'MongoWriteConcernError';
    }
}
e***REMOVED***ports.MongoWriteConcernError = MongoWriteConcernError;
// https://github.com/mongodb/specifications/blob/master/source/retryable-reads/retryable-reads.rst#retryable-error
const RETRYABLE_READ_ERROR_CODES = new Set([
    e***REMOVED***ports.MONGODB_ERROR_CODES.HostUnreachable,
    e***REMOVED***ports.MONGODB_ERROR_CODES.HostNotFound,
    e***REMOVED***ports.MONGODB_ERROR_CODES.NetworkTimeout,
    e***REMOVED***ports.MONGODB_ERROR_CODES.ShutdownInProgress,
    e***REMOVED***ports.MONGODB_ERROR_CODES.PrimarySteppedDown,
    e***REMOVED***ports.MONGODB_ERROR_CODES.SocketE***REMOVED***ception,
    e***REMOVED***ports.MONGODB_ERROR_CODES.NotWritablePrimary,
    e***REMOVED***ports.MONGODB_ERROR_CODES.InterruptedAtShutdown,
    e***REMOVED***ports.MONGODB_ERROR_CODES.InterruptedDueToReplStateChange,
    e***REMOVED***ports.MONGODB_ERROR_CODES.NotPrimaryNoSecondaryOk,
    e***REMOVED***ports.MONGODB_ERROR_CODES.NotPrimaryOrSecondary,
    e***REMOVED***ports.MONGODB_ERROR_CODES.E***REMOVED***ceededTimeLimit,
    e***REMOVED***ports.MONGODB_ERROR_CODES.ReadConcernMajorityNotAvailableYet
]);
// see: https://github.com/mongodb/specifications/blob/master/source/retryable-writes/retryable-writes.rst#terms
const RETRYABLE_WRITE_ERROR_CODES = RETRYABLE_READ_ERROR_CODES;
function needsRetryableWriteLabel(error, ma***REMOVED***WireVersion, serverType) {
    // pre-4.4 server, then the driver adds an error label for every valid case
    // e***REMOVED***ecute operation will only inspect the label, code/message logic is handled here
    if (error instanceof MongoNetworkError) {
        return true;
    }
    if (error instanceof MongoError) {
        if ((ma***REMOVED***WireVersion >= 9 || isRetryableWriteError(error)) &&
            !error.hasErrorLabel(e***REMOVED***ports.MongoErrorLabel.HandshakeError)) {
            // If we already have the error label no need to add it again. 4.4+ servers add the label.
            // In the case where we have a handshake error, need to fall down to the logic checking
            // the codes.
            return false;
        }
    }
    if (error instanceof MongoWriteConcernError) {
        if (serverType === 'Mongos' && ma***REMOVED***WireVersion < 9) {
            // use original top-level code from server response
            return RETRYABLE_WRITE_ERROR_CODES.has(error.result.code ?? 0);
        }
        const code = error.result.writeConcernError.code ?? Number(error.code);
        return RETRYABLE_WRITE_ERROR_CODES.has(Number.isNaN(code) ? 0 : code);
    }
    if (error instanceof MongoError) {
        return RETRYABLE_WRITE_ERROR_CODES.has(Number(error.code));
    }
    const isNotWritablePrimaryError = e***REMOVED***ports.LEGACY_NOT_WRITABLE_PRIMARY_ERROR_MESSAGE.test(error.message);
    if (isNotWritablePrimaryError) {
        return true;
    }
    const isNodeIsRecoveringError = e***REMOVED***ports.NODE_IS_RECOVERING_ERROR_MESSAGE.test(error.message);
    if (isNodeIsRecoveringError) {
        return true;
    }
    return false;
}
function isRetryableWriteError(error) {
    return (error.hasErrorLabel(e***REMOVED***ports.MongoErrorLabel.RetryableWriteError) ||
        error.hasErrorLabel(e***REMOVED***ports.MongoErrorLabel.PoolRequstedRetry));
}
/** Determines whether an error is something the driver should attempt to retry */
function isRetryableReadError(error) {
    const hasRetryableErrorCode = typeof error.code === 'number' ? RETRYABLE_READ_ERROR_CODES.has(error.code) : false;
    if (hasRetryableErrorCode) {
        return true;
    }
    if (error instanceof MongoNetworkError) {
        return true;
    }
    const isNotWritablePrimaryError = e***REMOVED***ports.LEGACY_NOT_WRITABLE_PRIMARY_ERROR_MESSAGE.test(error.message);
    if (isNotWritablePrimaryError) {
        return true;
    }
    const isNodeIsRecoveringError = e***REMOVED***ports.NODE_IS_RECOVERING_ERROR_MESSAGE.test(error.message);
    if (isNodeIsRecoveringError) {
        return true;
    }
    return false;
}
const SDAM_RECOVERING_CODES = new Set([
    e***REMOVED***ports.MONGODB_ERROR_CODES.ShutdownInProgress,
    e***REMOVED***ports.MONGODB_ERROR_CODES.PrimarySteppedDown,
    e***REMOVED***ports.MONGODB_ERROR_CODES.InterruptedAtShutdown,
    e***REMOVED***ports.MONGODB_ERROR_CODES.InterruptedDueToReplStateChange,
    e***REMOVED***ports.MONGODB_ERROR_CODES.NotPrimaryOrSecondary
]);
const SDAM_NOT_PRIMARY_CODES = new Set([
    e***REMOVED***ports.MONGODB_ERROR_CODES.NotWritablePrimary,
    e***REMOVED***ports.MONGODB_ERROR_CODES.NotPrimaryNoSecondaryOk,
    e***REMOVED***ports.MONGODB_ERROR_CODES.LegacyNotPrimary
]);
const SDAM_NODE_SHUTTING_DOWN_ERROR_CODES = new Set([
    e***REMOVED***ports.MONGODB_ERROR_CODES.InterruptedAtShutdown,
    e***REMOVED***ports.MONGODB_ERROR_CODES.ShutdownInProgress
]);
function isRecoveringError(err) {
    if (typeof err.code === 'number') {
        // If any error code e***REMOVED***ists, we ignore the error.message
        return SDAM_RECOVERING_CODES.has(err.code);
    }
    return (e***REMOVED***ports.LEGACY_NOT_PRIMARY_OR_SECONDARY_ERROR_MESSAGE.test(err.message) ||
        e***REMOVED***ports.NODE_IS_RECOVERING_ERROR_MESSAGE.test(err.message));
}
function isNotWritablePrimaryError(err) {
    if (typeof err.code === 'number') {
        // If any error code e***REMOVED***ists, we ignore the error.message
        return SDAM_NOT_PRIMARY_CODES.has(err.code);
    }
    if (isRecoveringError(err)) {
        return false;
    }
    return e***REMOVED***ports.LEGACY_NOT_WRITABLE_PRIMARY_ERROR_MESSAGE.test(err.message);
}
function isNodeShuttingDownError(err) {
    return !!(typeof err.code === 'number' && SDAM_NODE_SHUTTING_DOWN_ERROR_CODES.has(err.code));
}
/**
 * Determines whether SDAM can recover from a given error. If it cannot
 * then the pool will be cleared, and server state will completely reset
 * locally.
 *
 * @see https://github.com/mongodb/specifications/blob/master/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#not-master-and-node-is-recovering
 */
function isSDAMUnrecoverableError(error) {
    // NOTE: null check is here for a strictly pre-CMAP world, a timeout or
    //       close event are considered unrecoverable
    if (error instanceof MongoParseError || error == null) {
        return true;
    }
    return isRecoveringError(error) || isNotWritablePrimaryError(error);
}
function isNetworkTimeoutError(err) {
    return !!(err instanceof MongoNetworkError && err.message.match(/timed out/));
}
function isResumableError(error, wireVersion) {
    if (error == null || !(error instanceof MongoError)) {
        return false;
    }
    if (error instanceof MongoNetworkError) {
        return true;
    }
    if (wireVersion != null && wireVersion >= 9) {
        // DRIVERS-1308: For 4.4 drivers running against 4.4 servers, drivers will add a special case to treat the CursorNotFound error code as resumable
        if (error.code === e***REMOVED***ports.MONGODB_ERROR_CODES.CursorNotFound) {
            return true;
        }
        return error.hasErrorLabel(e***REMOVED***ports.MongoErrorLabel.ResumableChangeStreamError);
    }
    if (typeof error.code === 'number') {
        return e***REMOVED***ports.GET_MORE_RESUMABLE_CODES.has(error.code);
    }
    return false;
}
//# sourceMappingURL=error.js.map