import type { Document } from '../../bson';
import type { Collection } from '../../collection';
import type { Server } from '../../sdam/server';
import type { ClientSession } from '../../sessions';
import { AbstractOperation } from '../operation';

/**
 * @public
 */
e***REMOVED***port interface SearchInde***REMOVED***Description e***REMOVED***tends Document {
  /** The name of the inde***REMOVED***. */
  name?: string;

  /** The inde***REMOVED*** definition. */
  definition: Document;

  /** The type of the inde***REMOVED***.  Currently `search` or `vectorSearch` are supported. */
  type?: string;
}

/** @internal */
e***REMOVED***port class CreateSearchInde***REMOVED***esOperation e***REMOVED***tends AbstractOperation<string[]> {
  constructor(
    private readonly collection: Collection,
    private readonly descriptions: ReadonlyArray<SearchInde***REMOVED***Description>
  ) {
    super();
  }

  override get commandName() {
    return 'createSearchInde***REMOVED***es' as const;
  }

  override async e***REMOVED***ecute(server: Server, session: ClientSession | undefined): Promise<string[]> {
    const namespace = this.collection.fullNamespace;
    const command = {
      createSearchInde***REMOVED***es: namespace.collection,
      inde***REMOVED***es: this.descriptions
    };

    const res = await server.command(namespace, command, { session });

    const inde***REMOVED***esCreated: Array<{ name: string }> = res?.inde***REMOVED***esCreated ?? [];
    return inde***REMOVED***esCreated.map(({ name }) => name);
  }
}
