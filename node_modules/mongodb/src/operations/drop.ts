import type { Document } from '../bson';
import type { Db } from '../db';
import { MONGODB_ERROR_CODES, MongoServerError } from '../error';
import type { Server } from '../sdam/server';
import type { ClientSession } from '../sessions';
import { CommandOperation, type CommandOperationOptions } from './command';
import { Aspect, defineAspects } from './operation';

/** @public */
e***REMOVED***port interface DropCollectionOptions e***REMOVED***tends CommandOperationOptions {
  /** @e***REMOVED***perimental */
  encryptedFields?: Document;
}

/** @internal */
e***REMOVED***port class DropCollectionOperation e***REMOVED***tends CommandOperation<boolean> {
  override options: DropCollectionOptions;
  db: Db;
  name: string;

  constructor(db: Db, name: string, options: DropCollectionOptions = {}) {
    super(db, options);
    this.db = db;
    this.options = options;
    this.name = name;
  }

  override get commandName() {
    return 'drop' as const;
  }

  override async e***REMOVED***ecute(server: Server, session: ClientSession | undefined): Promise<boolean> {
    const db = this.db;
    const options = this.options;
    const name = this.name;

    const encryptedFieldsMap = db.client.options.autoEncryption?.encryptedFieldsMap;
    let encryptedFields: Document | undefined =
      options.encryptedFields ?? encryptedFieldsMap?.[`${db.databaseName}.${name}`];

    if (!encryptedFields && encryptedFieldsMap) {
      // If the MongoClient was configured with an encryptedFieldsMap,
      // and no encryptedFields config was available in it or e***REMOVED***plicitly
      // passed as an argument, the spec tells us to look one up using
      // listCollections().
      const listCollectionsResult = await db
        .listCollections({ name }, { nameOnly: false })
        .toArray();
      encryptedFields = listCollectionsResult?.[0]?.options?.encryptedFields;
    }

    if (encryptedFields) {
      const escCollection = encryptedFields.escCollection || `en***REMOVED***col_.${name}.esc`;
      const ecocCollection = encryptedFields.ecocCollection || `en***REMOVED***col_.${name}.ecoc`;

      for (const collectionName of [escCollection, ecocCollection]) {
        // Drop au***REMOVED***illiary collections, ignoring potential NamespaceNotFound errors.
        const dropOp = new DropCollectionOperation(db, collectionName);
        try {
          await dropOp.e***REMOVED***ecuteWithoutEncryptedFieldsCheck(server, session);
        } catch (err) {
          if (
            !(err instanceof MongoServerError) ||
            err.code !== MONGODB_ERROR_CODES.NamespaceNotFound
          ) {
            throw err;
          }
        }
      }
    }

    return await this.e***REMOVED***ecuteWithoutEncryptedFieldsCheck(server, session);
  }

  private async e***REMOVED***ecuteWithoutEncryptedFieldsCheck(
    server: Server,
    session: ClientSession | undefined
  ): Promise<boolean> {
    await super.e***REMOVED***ecuteCommand(server, session, { drop: this.name });
    return true;
  }
}

/** @public */
e***REMOVED***port type DropDatabaseOptions = CommandOperationOptions;

/** @internal */
e***REMOVED***port class DropDatabaseOperation e***REMOVED***tends CommandOperation<boolean> {
  override options: DropDatabaseOptions;

  constructor(db: Db, options: DropDatabaseOptions) {
    super(db, options);
    this.options = options;
  }
  override get commandName() {
    return 'dropDatabase' as const;
  }

  override async e***REMOVED***ecute(server: Server, session: ClientSession | undefined): Promise<boolean> {
    await super.e***REMOVED***ecuteCommand(server, session, { dropDatabase: 1 });
    return true;
  }
}

defineAspects(DropCollectionOperation, [Aspect.WRITE_OPERATION]);
defineAspects(DropDatabaseOperation, [Aspect.WRITE_OPERATION]);
