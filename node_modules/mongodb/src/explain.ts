/** @public */
e***REMOVED***port const E***REMOVED***plainVerbosity = Object.freeze({
  queryPlanner: 'queryPlanner',
  queryPlannerE***REMOVED***tended: 'queryPlannerE***REMOVED***tended',
  e***REMOVED***ecutionStats: 'e***REMOVED***ecutionStats',
  allPlansE***REMOVED***ecution: 'allPlansE***REMOVED***ecution'
} as const);

/** @public */
e***REMOVED***port type E***REMOVED***plainVerbosity = string;

/**
 * For backwards compatibility, true is interpreted as "allPlansE***REMOVED***ecution"
 * and false as "queryPlanner".
 * @public
 */
e***REMOVED***port type E***REMOVED***plainVerbosityLike = E***REMOVED***plainVerbosity | boolean;

/** @public */
e***REMOVED***port interface E***REMOVED***plainCommandOptions {
  /** The e***REMOVED***plain verbosity for the command. */
  verbosity: E***REMOVED***plainVerbosity;
  /** The ma***REMOVED***TimeMS setting for the command. */
  ma***REMOVED***TimeMS?: number;
}

/**
 * @public
 *
 * When set, this configures an e***REMOVED***plain command.  Valid values are boolean (for legacy compatibility,
 * see {@link E***REMOVED***plainVerbosityLike}), a string containing the e***REMOVED***plain verbosity, or an object containing the verbosity and
 * an optional ma***REMOVED***TimeMS.
 *
 * E***REMOVED***amples of valid usage:
 *
 * ```typescript
 * collection.find({ name: 'john doe' }, { e***REMOVED***plain: true });
 * collection.find({ name: 'john doe' }, { e***REMOVED***plain: false });
 * collection.find({ name: 'john doe' }, { e***REMOVED***plain: 'queryPlanner' });
 * collection.find({ name: 'john doe' }, { e***REMOVED***plain: { verbosity: 'queryPlanner' } });
 * ```
 *
 * ma***REMOVED***TimeMS can be configured to limit the amount of time the server
 * spends e***REMOVED***ecuting an e***REMOVED***plain by providing an object:
 *
 * ```typescript
 * // limits the `e***REMOVED***plain` command to no more than 2 seconds
 * collection.find({ name: 'john doe' }, {
 *   e***REMOVED***plain:  {
 *    verbosity: 'queryPlanner',
 *    ma***REMOVED***TimeMS: 2000
 *  }
 * });
 * ```
 */
e***REMOVED***port interface E***REMOVED***plainOptions {
  /** Specifies the verbosity mode for the e***REMOVED***plain output. */
  e***REMOVED***plain?: E***REMOVED***plainVerbosityLike | E***REMOVED***plainCommandOptions;
}

/** @internal */
e***REMOVED***port class E***REMOVED***plain {
  readonly verbosity: E***REMOVED***plainVerbosity;
  readonly ma***REMOVED***TimeMS?: number;

  private constructor(verbosity: E***REMOVED***plainVerbosityLike, ma***REMOVED***TimeMS?: number) {
    if (typeof verbosity === 'boolean') {
      this.verbosity = verbosity
        ? E***REMOVED***plainVerbosity.allPlansE***REMOVED***ecution
        : E***REMOVED***plainVerbosity.queryPlanner;
    } else {
      this.verbosity = verbosity;
    }

    this.ma***REMOVED***TimeMS = ma***REMOVED***TimeMS;
  }

  static fromOptions({ e***REMOVED***plain }: E***REMOVED***plainOptions = {}): E***REMOVED***plain | undefined {
    if (e***REMOVED***plain == null) return;

    if (typeof e***REMOVED***plain === 'boolean' || typeof e***REMOVED***plain === 'string') {
      return new E***REMOVED***plain(e***REMOVED***plain);
    }

    const { verbosity, ma***REMOVED***TimeMS } = e***REMOVED***plain;
    return new E***REMOVED***plain(verbosity, ma***REMOVED***TimeMS);
  }
}
