import type { Document } from '../../bson';
import { MongoMissingCredentialsError } from '../../error';
import { ns } from '../../utils';
import type { HandshakeDocument } from '../connect';
import { type AuthConte***REMOVED***t, AuthProvider } from './auth_provider';
import type { MongoCredentials } from './mongo_credentials';

e***REMOVED***port class X509 e***REMOVED***tends AuthProvider {
  override async prepare(
    handshakeDoc: HandshakeDocument,
    authConte***REMOVED***t: AuthConte***REMOVED***t
  ): Promise<HandshakeDocument> {
    const { credentials } = authConte***REMOVED***t;
    if (!credentials) {
      throw new MongoMissingCredentialsError('AuthConte***REMOVED***t must provide credentials.');
    }
    return { ...handshakeDoc, speculativeAuthenticate: ***REMOVED***509AuthenticateCommand(credentials) };
  }

  override async auth(authConte***REMOVED***t: AuthConte***REMOVED***t) {
    const connection = authConte***REMOVED***t.connection;
    const credentials = authConte***REMOVED***t.credentials;
    if (!credentials) {
      throw new MongoMissingCredentialsError('AuthConte***REMOVED***t must provide credentials.');
    }
    const response = authConte***REMOVED***t.response;

    if (response?.speculativeAuthenticate) {
      return;
    }

    await connection.command(ns('$e***REMOVED***ternal.$cmd'), ***REMOVED***509AuthenticateCommand(credentials), undefined);
  }
}

function ***REMOVED***509AuthenticateCommand(credentials: MongoCredentials) {
  const command: Document = { authenticate: 1, mechanism: 'MONGODB-X509' };
  if (credentials.username) {
    command.user = credentials.username;
  }

  return command;
}
