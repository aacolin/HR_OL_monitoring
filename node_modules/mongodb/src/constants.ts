/* eslint-disable @typescript-eslint/no-unnecessary-type-assertion */
e***REMOVED***port const SYSTEM_NAMESPACE_COLLECTION = 'system.namespaces';
e***REMOVED***port const SYSTEM_INDEX_COLLECTION = 'system.inde***REMOVED***es';
e***REMOVED***port const SYSTEM_PROFILE_COLLECTION = 'system.profile';
e***REMOVED***port const SYSTEM_USER_COLLECTION = 'system.users';
e***REMOVED***port const SYSTEM_COMMAND_COLLECTION = '$cmd';
e***REMOVED***port const SYSTEM_JS_COLLECTION = 'system.js';

// events
e***REMOVED***port const ERROR = 'error' as const;
e***REMOVED***port const TIMEOUT = 'timeout' as const;
e***REMOVED***port const CLOSE = 'close' as const;
e***REMOVED***port const OPEN = 'open' as const;
e***REMOVED***port const CONNECT = 'connect' as const;
e***REMOVED***port const CLOSED = 'closed' as const;
e***REMOVED***port const ENDED = 'ended' as const;
e***REMOVED***port const MESSAGE = 'message' as const;
e***REMOVED***port const PINNED = 'pinned' as const;
e***REMOVED***port const UNPINNED = 'unpinned' as const;
e***REMOVED***port const DESCRIPTION_RECEIVED = 'descriptionReceived';
/** @internal */
e***REMOVED***port const SERVER_OPENING = 'serverOpening' as const;
/** @internal */
e***REMOVED***port const SERVER_CLOSED = 'serverClosed' as const;
/** @internal */
e***REMOVED***port const SERVER_DESCRIPTION_CHANGED = 'serverDescriptionChanged' as const;
/** @internal */
e***REMOVED***port const TOPOLOGY_OPENING = 'topologyOpening' as const;
/** @internal */
e***REMOVED***port const TOPOLOGY_CLOSED = 'topologyClosed' as const;
/** @internal */
e***REMOVED***port const TOPOLOGY_DESCRIPTION_CHANGED = 'topologyDescriptionChanged' as const;
/** @internal */
e***REMOVED***port const SERVER_SELECTION_STARTED = 'serverSelectionStarted' as const;
/** @internal */
e***REMOVED***port const SERVER_SELECTION_FAILED = 'serverSelectionFailed' as const;
/** @internal */
e***REMOVED***port const SERVER_SELECTION_SUCCEEDED = 'serverSelectionSucceeded' as const;
/** @internal */
e***REMOVED***port const WAITING_FOR_SUITABLE_SERVER = 'waitingForSuitableServer' as const;
/** @internal */
e***REMOVED***port const CONNECTION_POOL_CREATED = 'connectionPoolCreated' as const;
/** @internal */
e***REMOVED***port const CONNECTION_POOL_CLOSED = 'connectionPoolClosed' as const;
/** @internal */
e***REMOVED***port const CONNECTION_POOL_CLEARED = 'connectionPoolCleared' as const;
/** @internal */
e***REMOVED***port const CONNECTION_POOL_READY = 'connectionPoolReady' as const;
/** @internal */
e***REMOVED***port const CONNECTION_CREATED = 'connectionCreated' as const;
/** @internal */
e***REMOVED***port const CONNECTION_READY = 'connectionReady' as const;
/** @internal */
e***REMOVED***port const CONNECTION_CLOSED = 'connectionClosed' as const;
/** @internal */
e***REMOVED***port const CONNECTION_CHECK_OUT_STARTED = 'connectionCheckOutStarted' as const;
/** @internal */
e***REMOVED***port const CONNECTION_CHECK_OUT_FAILED = 'connectionCheckOutFailed' as const;
/** @internal */
e***REMOVED***port const CONNECTION_CHECKED_OUT = 'connectionCheckedOut' as const;
/** @internal */
e***REMOVED***port const CONNECTION_CHECKED_IN = 'connectionCheckedIn' as const;
e***REMOVED***port const CLUSTER_TIME_RECEIVED = 'clusterTimeReceived' as const;
/** @internal */
e***REMOVED***port const COMMAND_STARTED = 'commandStarted' as const;
/** @internal */
e***REMOVED***port const COMMAND_SUCCEEDED = 'commandSucceeded' as const;
/** @internal */
e***REMOVED***port const COMMAND_FAILED = 'commandFailed' as const;
/** @internal */
e***REMOVED***port const SERVER_HEARTBEAT_STARTED = 'serverHeartbeatStarted' as const;
/** @internal */
e***REMOVED***port const SERVER_HEARTBEAT_SUCCEEDED = 'serverHeartbeatSucceeded' as const;
/** @internal */
e***REMOVED***port const SERVER_HEARTBEAT_FAILED = 'serverHeartbeatFailed' as const;
e***REMOVED***port const RESPONSE = 'response' as const;
e***REMOVED***port const MORE = 'more' as const;
e***REMOVED***port const INIT = 'init' as const;
e***REMOVED***port const CHANGE = 'change' as const;
e***REMOVED***port const END = 'end' as const;
e***REMOVED***port const RESUME_TOKEN_CHANGED = 'resumeTokenChanged' as const;

/** @public */
e***REMOVED***port const HEARTBEAT_EVENTS = Object.freeze([
  SERVER_HEARTBEAT_STARTED,
  SERVER_HEARTBEAT_SUCCEEDED,
  SERVER_HEARTBEAT_FAILED
] as const);

/** @public */
e***REMOVED***port const CMAP_EVENTS = Object.freeze([
  CONNECTION_POOL_CREATED,
  CONNECTION_POOL_READY,
  CONNECTION_POOL_CLEARED,
  CONNECTION_POOL_CLOSED,
  CONNECTION_CREATED,
  CONNECTION_READY,
  CONNECTION_CLOSED,
  CONNECTION_CHECK_OUT_STARTED,
  CONNECTION_CHECK_OUT_FAILED,
  CONNECTION_CHECKED_OUT,
  CONNECTION_CHECKED_IN
] as const);

/** @public */
e***REMOVED***port const TOPOLOGY_EVENTS = Object.freeze([
  SERVER_OPENING,
  SERVER_CLOSED,
  SERVER_DESCRIPTION_CHANGED,
  TOPOLOGY_OPENING,
  TOPOLOGY_CLOSED,
  TOPOLOGY_DESCRIPTION_CHANGED,
  ERROR,
  TIMEOUT,
  CLOSE
] as const);

/** @public */
e***REMOVED***port const APM_EVENTS = Object.freeze([
  COMMAND_STARTED,
  COMMAND_SUCCEEDED,
  COMMAND_FAILED
] as const);

/**
 * All events that we relay to the `Topology`
 * @internal
 */
e***REMOVED***port const SERVER_RELAY_EVENTS = Object.freeze([
  SERVER_HEARTBEAT_STARTED,
  SERVER_HEARTBEAT_SUCCEEDED,
  SERVER_HEARTBEAT_FAILED,
  COMMAND_STARTED,
  COMMAND_SUCCEEDED,
  COMMAND_FAILED,
  ...CMAP_EVENTS
] as const);

/**
 * All events we listen to from `Server` instances, but do not forward to the client
 * @internal
 */
e***REMOVED***port const LOCAL_SERVER_EVENTS = Object.freeze([
  CONNECT,
  DESCRIPTION_RECEIVED,
  CLOSED,
  ENDED
] as const);

/** @public */
e***REMOVED***port const MONGO_CLIENT_EVENTS = Object.freeze([
  ...CMAP_EVENTS,
  ...APM_EVENTS,
  ...TOPOLOGY_EVENTS,
  ...HEARTBEAT_EVENTS
] as const);

/**
 * @internal
 * The legacy hello command that was deprecated in MongoDB 5.0.
 */
e***REMOVED***port const LEGACY_HELLO_COMMAND = 'ismaster';

/**
 * @internal
 * The legacy hello command that was deprecated in MongoDB 5.0.
 */
e***REMOVED***port const LEGACY_HELLO_COMMAND_CAMEL_CASE = 'isMaster';

// Typescript errors if we inde***REMOVED*** objects with `Symbol.for(...)`, so
// to avoid TS errors we pull them out into variables.  Then we can type
// the objects (and class) that we e***REMOVED***pect to see them on and prevent TS
// errors.
/** @internal */
e***REMOVED***port const kDecorateResult = Symbol.for('@@mdb.decorateDecryptionResult');
/** @internal */
e***REMOVED***port const kDecoratedKeys = Symbol.for('@@mdb.decryptedKeys');
