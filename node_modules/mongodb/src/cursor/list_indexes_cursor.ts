import type { Collection } from '../collection';
import { e***REMOVED***ecuteOperation } from '../operations/e***REMOVED***ecute_operation';
import { ListInde***REMOVED***esOperation, type ListInde***REMOVED***esOptions } from '../operations/inde***REMOVED***es';
import type { ClientSession } from '../sessions';
import { AbstractCursor, type InitialCursorResponse } from './abstract_cursor';

/** @public */
e***REMOVED***port class ListInde***REMOVED***esCursor e***REMOVED***tends AbstractCursor {
  parent: Collection;
  options?: ListInde***REMOVED***esOptions;

  constructor(collection: Collection, options?: ListInde***REMOVED***esOptions) {
    super(collection.client, collection.s.namespace, options);
    this.parent = collection;
    this.options = options;
  }

  clone(): ListInde***REMOVED***esCursor {
    return new ListInde***REMOVED***esCursor(this.parent, {
      ...this.options,
      ...this.cursorOptions
    });
  }

  /** @internal */
  async _initialize(session: ClientSession | undefined): Promise<InitialCursorResponse> {
    const operation = new ListInde***REMOVED***esOperation(this.parent, {
      ...this.cursorOptions,
      ...this.options,
      session
    });

    const response = await e***REMOVED***ecuteOperation(this.parent.client, operation);

    return { server: operation.server, session, response };
  }
}
