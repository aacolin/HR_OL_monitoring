"use strict";
e***REMOVED***ports.__esModule = true;
var parser_1 = require("@babel/parser");
var b = require("@babel/types");
var binaryOperation_1 = require("./binaryOperation");
function e***REMOVED***pressionToConstant(e***REMOVED***pression, options) {
    if (options === void 0) { options = {}; }
    var constant = true;
    function toConstant(e***REMOVED***pression) {
        if (!constant)
            return;
        if (b.isArrayE***REMOVED***pression(e***REMOVED***pression)) {
            var result_1 = [];
            for (var i = 0; constant && i < e***REMOVED***pression.elements.length; i++) {
                var element = e***REMOVED***pression.elements[i];
                if (b.isSpreadElement(element)) {
                    var spread = toConstant(element.argument);
                    if (!(isSpreadable(spread) && constant)) {
                        constant = false;
                    }
                    else {
                        result_1.push.apply(result_1, spread);
                    }
                }
                else if (b.isE***REMOVED***pression(element)) {
                    result_1.push(toConstant(element));
                }
                else {
                    constant = false;
                }
            }
            return result_1;
        }
        if (b.isBinaryE***REMOVED***pression(e***REMOVED***pression)) {
            var left = toConstant(e***REMOVED***pression.left);
            var right = toConstant(e***REMOVED***pression.right);
            return constant && binaryOperation_1["default"](e***REMOVED***pression.operator, left, right);
        }
        if (b.isBooleanLiteral(e***REMOVED***pression)) {
            return e***REMOVED***pression.value;
        }
        if (b.isCallE***REMOVED***pression(e***REMOVED***pression)) {
            var args = [];
            for (var i = 0; constant && i < e***REMOVED***pression.arguments.length; i++) {
                var arg = e***REMOVED***pression.arguments[i];
                if (b.isSpreadElement(arg)) {
                    var spread = toConstant(arg.argument);
                    if (!(isSpreadable(spread) && constant)) {
                        constant = false;
                    }
                    else {
                        args.push.apply(args, spread);
                    }
                }
                else if (b.isE***REMOVED***pression(arg)) {
                    args.push(toConstant(arg));
                }
                else {
                    constant = false;
                }
            }
            if (!constant)
                return;
            if (b.isMemberE***REMOVED***pression(e***REMOVED***pression.callee)) {
                var object = toConstant(e***REMOVED***pression.callee.object);
                if (!object || !constant) {
                    constant = false;
                    return;
                }
                var member = e***REMOVED***pression.callee.computed
                    ? toConstant(e***REMOVED***pression.callee.property)
                    : b.isIdentifier(e***REMOVED***pression.callee.property)
                        ? e***REMOVED***pression.callee.property.name
                        : undefined;
                if (member === undefined && !e***REMOVED***pression.callee.computed) {
                    constant = false;
                }
                if (!constant)
                    return;
                if (canCallMethod(object, '' + member)) {
                    return object[member].apply(object, args);
                }
            }
            else {
                if (!b.isE***REMOVED***pression(e***REMOVED***pression.callee)) {
                    constant = false;
                    return;
                }
                var callee = toConstant(e***REMOVED***pression.callee);
                if (!constant)
                    return;
                return callee.apply(null, args);
            }
        }
        if (b.isConditionalE***REMOVED***pression(e***REMOVED***pression)) {
            var test = toConstant(e***REMOVED***pression.test);
            return test
                ? toConstant(e***REMOVED***pression.consequent)
                : toConstant(e***REMOVED***pression.alternate);
        }
        if (b.isIdentifier(e***REMOVED***pression)) {
            if (options.constants &&
                {}.hasOwnProperty.call(options.constants, e***REMOVED***pression.name)) {
                return options.constants[e***REMOVED***pression.name];
            }
        }
        if (b.isLogicalE***REMOVED***pression(e***REMOVED***pression)) {
            var left = toConstant(e***REMOVED***pression.left);
            var right = toConstant(e***REMOVED***pression.right);
            if (constant && e***REMOVED***pression.operator === '&&') {
                return left && right;
            }
            if (constant && e***REMOVED***pression.operator === '||') {
                return left || right;
            }
        }
        if (b.isMemberE***REMOVED***pression(e***REMOVED***pression)) {
            var object = toConstant(e***REMOVED***pression.object);
            if (!object || !constant) {
                constant = false;
                return;
            }
            var member = e***REMOVED***pression.computed
                ? toConstant(e***REMOVED***pression.property)
                : b.isIdentifier(e***REMOVED***pression.property)
                    ? e***REMOVED***pression.property.name
                    : undefined;
            if (member === undefined && !e***REMOVED***pression.computed) {
                constant = false;
            }
            if (!constant)
                return;
            if ({}.hasOwnProperty.call(object, '' + member) && member[0] !== '_') {
                return object[member];
            }
        }
        if (b.isNullLiteral(e***REMOVED***pression)) {
            return null;
        }
        if (b.isNumericLiteral(e***REMOVED***pression)) {
            return e***REMOVED***pression.value;
        }
        if (b.isObjectE***REMOVED***pression(e***REMOVED***pression)) {
            var result_2 = {};
            for (var i = 0; constant && i < e***REMOVED***pression.properties.length; i++) {
                var property = e***REMOVED***pression.properties[i];
                if (b.isObjectProperty(property)) {
                    if (property.shorthand) {
                        constant = false;
                        return;
                    }
                    var key = property.computed
                        ? toConstant(property.key)
                        : b.isIdentifier(property.key)
                            ? property.key.name
                            : b.isStringLiteral(property.key)
                                ? property.key.value
                                : undefined;
                    if (!key || key[0] === '_') {
                        constant = false;
                    }
                    if (!constant)
                        return;
                    if (b.isE***REMOVED***pression(property.value)) {
                        var value = toConstant(property.value);
                        if (!constant)
                            return;
                        result_2[key] = value;
                    }
                    else {
                        constant = false;
                    }
                }
                else if (b.isObjectMethod(property)) {
                    constant = false;
                }
                else if (b.isSpreadProperty(property)) {
                    var argument = toConstant(property.argument);
                    if (!argument)
                        constant = false;
                    if (!constant)
                        return;
                    Object.assign(result_2, argument);
                }
            }
            return result_2;
        }
        if (b.isParenthesizedE***REMOVED***pression(e***REMOVED***pression)) {
            return toConstant(e***REMOVED***pression.e***REMOVED***pression);
        }
        if (b.isRegE***REMOVED***pLiteral(e***REMOVED***pression)) {
            return new RegE***REMOVED***p(e***REMOVED***pression.pattern, e***REMOVED***pression.flags);
        }
        if (b.isSequenceE***REMOVED***pression(e***REMOVED***pression)) {
            for (var i = 0; i < e***REMOVED***pression.e***REMOVED***pressions.length - 1 && constant; i++) {
                toConstant(e***REMOVED***pression.e***REMOVED***pressions[i]);
            }
            return toConstant(e***REMOVED***pression.e***REMOVED***pressions[e***REMOVED***pression.e***REMOVED***pressions.length - 1]);
        }
        if (b.isStringLiteral(e***REMOVED***pression)) {
            return e***REMOVED***pression.value;
        }
        // TODO: TaggedTemplateE***REMOVED***pression
        if (b.isTemplateLiteral(e***REMOVED***pression)) {
            var result_3 = '';
            for (var i = 0; i < e***REMOVED***pression.quasis.length; i++) {
                var quasi = e***REMOVED***pression.quasis[i];
                result_3 += quasi.value.cooked;
                if (i < e***REMOVED***pression.e***REMOVED***pressions.length) {
                    result_3 += '' + toConstant(e***REMOVED***pression.e***REMOVED***pressions[i]);
                }
            }
            return result_3;
        }
        if (b.isUnaryE***REMOVED***pression(e***REMOVED***pression)) {
            var argument = toConstant(e***REMOVED***pression.argument);
            if (!constant) {
                return;
            }
            switch (e***REMOVED***pression.operator) {
                case '-':
                    return -argument;
                case '+':
                    return +argument;
                case '!':
                    return !argument;
                case '~':
                    return ~argument;
                case 'typeof':
                    return typeof argument;
                case 'void':
                    return void argument;
            }
        }
        constant = false;
    }
    var result = toConstant(e***REMOVED***pression);
    return constant ? { constant: true, result: result } : { constant: false };
}
e***REMOVED***ports.e***REMOVED***pressionToConstant = e***REMOVED***pressionToConstant;
function isSpreadable(value) {
    return (typeof value === 'string' ||
        Array.isArray(value) ||
        (typeof Set !== 'undefined' && value instanceof Set) ||
        (typeof Map !== 'undefined' && value instanceof Map));
}
function shallowEqual(a, b) {
    if (a === b)
        return true;
    if (a && b && typeof a === 'object' && typeof b === 'object') {
        for (var key in a) {
            if (a[key] !== b[key]) {
                return false;
            }
        }
        for (var key in b) {
            if (a[key] !== b[key]) {
                return false;
            }
        }
        return true;
    }
    return false;
}
function canCallMethod(object, member) {
    switch (typeof object) {
        case 'boolean':
            switch (member) {
                case 'toString':
                    return true;
                default:
                    return false;
            }
        case 'number':
            switch (member) {
                case 'toE***REMOVED***ponential':
                case 'toFi***REMOVED***ed':
                case 'toPrecision':
                case 'toString':
                    return true;
                default:
                    return false;
            }
        case 'string':
            switch (member) {
                case 'charAt':
                case 'charCodeAt':
                case 'codePointAt':
                case 'concat':
                case 'endsWith':
                case 'includes':
                case 'inde***REMOVED***Of':
                case 'lastInde***REMOVED***Of':
                case 'match':
                case 'normalize':
                case 'padEnd':
                case 'padStart':
                case 'repeat':
                case 'replace':
                case 'search':
                case 'slice':
                case 'split':
                case 'startsWith':
                case 'substr':
                case 'substring':
                case 'toLowerCase':
                case 'toUpperCase':
                case 'trim':
                    return true;
                default:
                    return false;
            }
        default:
            if (object instanceof RegE***REMOVED***p) {
                switch (member) {
                    case 'test':
                    case 'e***REMOVED***ec':
                        return true;
                    default:
                        return false;
                }
            }
            return {}.hasOwnProperty.call(object, member) && member[0] !== '_';
    }
}
var EMPTY_OBJECT = {};
var lastSrc = '';
var lastConstants = EMPTY_OBJECT;
var lastOptions = EMPTY_OBJECT;
var lastResult = null;
var lastWasConstant = false;
function isConstant(src, constants, options) {
    if (constants === void 0) { constants = EMPTY_OBJECT; }
    if (options === void 0) { options = EMPTY_OBJECT; }
    if (lastSrc === src &&
        shallowEqual(lastConstants, constants) &&
        shallowEqual(lastOptions, options)) {
        return lastWasConstant;
    }
    lastSrc = src;
    lastConstants = constants;
    var ast;
    try {
        ast = parser_1.parseE***REMOVED***pression(src, options);
    }
    catch (e***REMOVED***) {
        return (lastWasConstant = false);
    }
    var _a = e***REMOVED***pressionToConstant(ast, { constants: constants }), result = _a.result, constant = _a.constant;
    lastResult = result;
    return (lastWasConstant = constant);
}
e***REMOVED***ports.isConstant = isConstant;
function toConstant(src, constants, options) {
    if (constants === void 0) { constants = EMPTY_OBJECT; }
    if (options === void 0) { options = EMPTY_OBJECT; }
    if (!isConstant(src, constants, options)) {
        throw new Error(JSON.stringify(src) + ' is not constant.');
    }
    return lastResult;
}
e***REMOVED***ports.toConstant = toConstant;
e***REMOVED***ports["default"] = isConstant;
module.e***REMOVED***ports = isConstant;
module.e***REMOVED***ports["default"] = isConstant;
module.e***REMOVED***ports.e***REMOVED***pressionToConstant = e***REMOVED***pressionToConstant;
module.e***REMOVED***ports.isConstant = isConstant;
module.e***REMOVED***ports.toConstant = toConstant;
