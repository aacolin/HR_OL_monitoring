// Type definitions for TweetNaCl.js

e***REMOVED***port as namespace nacl;

declare var nacl: nacl;
e***REMOVED***port = nacl;

declare namespace nacl {
    e***REMOVED***port interface Bo***REMOVED***KeyPair {
        publicKey: Uint8Array;
        secretKey: Uint8Array;
    }

    e***REMOVED***port interface SignKeyPair {
        publicKey: Uint8Array;
        secretKey: Uint8Array;
    }

    e***REMOVED***port interface secretbo***REMOVED*** {
        (msg: Uint8Array, nonce: Uint8Array, key: Uint8Array): Uint8Array;
        open(bo***REMOVED***: Uint8Array, nonce: Uint8Array, key: Uint8Array): Uint8Array | false;
        readonly keyLength: number;
        readonly nonceLength: number;
        readonly overheadLength: number;
    }

    e***REMOVED***port interface scalarMult {
        (n: Uint8Array, p: Uint8Array): Uint8Array;
        base(n: Uint8Array): Uint8Array;
        readonly scalarLength: number;
        readonly groupElementLength: number;
    }

    namespace bo***REMOVED*** {
        e***REMOVED***port interface open {
            (msg: Uint8Array, nonce: Uint8Array, publicKey: Uint8Array, secretKey: Uint8Array): Uint8Array | false;
            after(bo***REMOVED***: Uint8Array, nonce: Uint8Array, key: Uint8Array): Uint8Array | false;
        }

        e***REMOVED***port interface keyPair {
            (): Bo***REMOVED***KeyPair;
            fromSecretKey(secretKey: Uint8Array): Bo***REMOVED***KeyPair;
        }
    }

    e***REMOVED***port interface bo***REMOVED*** {
        (msg: Uint8Array, nonce: Uint8Array, publicKey: Uint8Array, secretKey: Uint8Array): Uint8Array;
        before(publicKey: Uint8Array, secretKey: Uint8Array): Uint8Array;
        after(msg: Uint8Array, nonce: Uint8Array, key: Uint8Array): Uint8Array;
        open: bo***REMOVED***.open;
        keyPair: bo***REMOVED***.keyPair;
        readonly publicKeyLength: number;
        readonly secretKeyLength: number;
        readonly sharedKeyLength: number;
        readonly nonceLength: number;
        readonly overheadLength: number;
    }

    namespace sign {
        e***REMOVED***port interface detached {
            (msg: Uint8Array, secretKey: Uint8Array): Uint8Array;
            verify(msg: Uint8Array, sig: Uint8Array, publicKey: Uint8Array): boolean;
        }

        e***REMOVED***port interface keyPair {
            (): SignKeyPair;
            fromSecretKey(secretKey: Uint8Array): SignKeyPair;
            fromSeed(secretKey: Uint8Array): SignKeyPair;
        }
    }

    e***REMOVED***port interface sign {
        (msg: Uint8Array, secretKey: Uint8Array): Uint8Array;
        open(signedMsg: Uint8Array, publicKey: Uint8Array): Uint8Array | null;
        detached: sign.detached;
        keyPair: sign.keyPair;
        readonly publicKeyLength: number;
        readonly secretKeyLength: number;
        readonly seedLength: number;
        readonly signatureLength: number;
    }

    e***REMOVED***port interface hash {
        (msg: Uint8Array): Uint8Array;
        readonly hashLength: number;
    }
}

declare interface nacl {
    randomBytes(n: number): Uint8Array;
    secretbo***REMOVED***: nacl.secretbo***REMOVED***;
    scalarMult: nacl.scalarMult;
    bo***REMOVED***: nacl.bo***REMOVED***;
    sign: nacl.sign;
    hash: nacl.hash;
    verify(***REMOVED***: Uint8Array, y: Uint8Array): boolean;
    setPRNG(fn: (***REMOVED***: Uint8Array, n: number) => void): void;
}
