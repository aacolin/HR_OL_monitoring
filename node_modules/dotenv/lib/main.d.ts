// TypeScript Version: 3.0
/// <reference types="node" />
import type { URL } from 'url';

e***REMOVED***port interface DotenvParseOutput {
  [name: string]: string;
}

/**
 * Parses a string or buffer in the .env file format into an object.
 *
 * See https://dotenv***REMOVED***.com/docs
 *
 * @param src - contents to be parsed. e***REMOVED***ample: `'DB_HOST=localhost'`
 * @returns an object with keys and values based on `src`. e***REMOVED***ample: `{ DB_HOST : 'localhost' }`
 */
e***REMOVED***port function parse<T e***REMOVED***tends DotenvParseOutput = DotenvParseOutput>(
  src: string | Buffer
): T;

e***REMOVED***port interface DotenvConfigOptions {
  /**
   * Default: `path.resolve(process.cwd(), '.env')`
   *
   * Specify a custom path if your file containing environment variables is located elsewhere.
   * Can also be an array of strings, specifying multiple paths.
   *
   * e***REMOVED***ample: `require('dotenv').config({ path: '/custom/path/to/.env' })`
   * e***REMOVED***ample: `require('dotenv').config({ path: ['/path/to/first.env', '/path/to/second.env'] })`
   */
  path?: string | string[] | URL;

  /**
   * Default: `utf8`
   *
   * Specify the encoding of your file containing environment variables.
   *
   * e***REMOVED***ample: `require('dotenv').config({ encoding: 'latin1' })`
   */
  encoding?: string;

  /**
   * Default: `false`
   *
   * Turn on logging to help debug why certain keys or values are not being set as you e***REMOVED***pect.
   *
   * e***REMOVED***ample: `require('dotenv').config({ debug: process.env.DEBUG })`
   */
  debug?: boolean;

  /**
   * Default: `false`
   *
   * Override any environment variables that have already been set on your machine with values from your .env file.
   *
   * e***REMOVED***ample: `require('dotenv').config({ override: true })`
   */
  override?: boolean;

  /**
   * Default: `process.env`
   *
   * Specify an object to write your secrets to. Defaults to process.env environment variables.
   *
   * e***REMOVED***ample: `const processEnv = {}; require('dotenv').config({ processEnv: processEnv })`
   */
  processEnv?: DotenvPopulateInput;

  /**
   * Default: `undefined`
   *
   * Pass the DOTENV_KEY directly to config options. Defaults to looking for process.env.DOTENV_KEY environment variable. Note this only applies to decrypting .env.vault files. If passed as null or undefined, or not passed at all, dotenv falls back to its traditional job of parsing a .env file.
   *
   * e***REMOVED***ample: `require('dotenv').config({ DOTENV_KEY: 'dotenv://:key_1234â€¦@dotenv***REMOVED***.com/vault/.env.vault?environment=production' })`
   */
  DOTENV_KEY?: string;
}

e***REMOVED***port interface DotenvConfigOutput {
  error?: Error;
  parsed?: DotenvParseOutput;
}

e***REMOVED***port interface DotenvPopulateOptions {
  /**
   * Default: `false`
   *
   * Turn on logging to help debug why certain keys or values are not being set as you e***REMOVED***pect.
   *
   * e***REMOVED***ample: `require('dotenv').config({ debug: process.env.DEBUG })`
   */
  debug?: boolean;

  /**
   * Default: `false`
   *
   * Override any environment variables that have already been set on your machine with values from your .env file.
   *
   * e***REMOVED***ample: `require('dotenv').config({ override: true })`
   */
  override?: boolean;
}

e***REMOVED***port interface DotenvPopulateInput {
  [name: string]: string;
}

/**
 * Loads `.env` file contents into process.env by default. If `DOTENV_KEY` is present, it smartly attempts to load encrypted `.env.vault` file contents into process.env.
 *
 * See https://dotenv***REMOVED***.com/docs
 *
 * @param options - additional options. e***REMOVED***ample: `{ path: './custom/path', encoding: 'latin1', debug: true, override: false }`
 * @returns an object with a `parsed` key if successful or `error` key if an error occurred. e***REMOVED***ample: { parsed: { KEY: 'value' } }
 *
 */
e***REMOVED***port function config(options?: DotenvConfigOptions): DotenvConfigOutput;

/**
 * Loads `.env` file contents into process.env.
 *
 * See https://dotenv***REMOVED***.com/docs
 *
 * @param options - additional options. e***REMOVED***ample: `{ path: './custom/path', encoding: 'latin1', debug: true, override: false }`
 * @returns an object with a `parsed` key if successful or `error` key if an error occurred. e***REMOVED***ample: { parsed: { KEY: 'value' } }
 *
 */
e***REMOVED***port function configDotenv(options?: DotenvConfigOptions): DotenvConfigOutput;

/**
 * Loads `source` json contents into `target` like process.env.
 *
 * See https://dotenv***REMOVED***.com/docs
 *
 * @param processEnv - the target JSON object. in most cases use process.env but you can also pass your own JSON object
 * @param parsed - the source JSON object
 * @param options - additional options. e***REMOVED***ample: `{ debug: true, override: false }`
 * @returns {void}
 *
 */
e***REMOVED***port function populate(processEnv: DotenvPopulateInput, parsed: DotenvPopulateInput, options?: DotenvConfigOptions): void;

/**
 * Decrypt cipherte***REMOVED***t
 *
 * See https://dotenv***REMOVED***.com/docs
 *
 * @param encrypted - the encrypted cipherte***REMOVED***t string
 * @param keyStr - the decryption key string
 * @returns {string}
 *
 */
e***REMOVED***port function decrypt(encrypted: string, keyStr: string): string;
