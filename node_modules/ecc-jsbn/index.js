var crypto = require("crypto");
var BigInteger = require("jsbn").BigInteger;
var ECPointFp = require("./lib/ec.js").ECPointFp;
var Buffer = require("safer-buffer").Buffer;
e***REMOVED***ports.ECCurves = require("./lib/sec.js");

// zero prepad
function unstupid(he***REMOVED***,len)
{
	return (he***REMOVED***.length >= len) ? he***REMOVED*** : unstupid("0"+he***REMOVED***,len);
}

e***REMOVED***ports.ECKey = function(curve, key, isPublic)
{
  var priv;
	var c = curve();
	var n = c.getN();
  var bytes = Math.floor(n.bitLength()/8);

  if(key)
  {
    if(isPublic)
    {
      var curve = c.getCurve();
//      var ***REMOVED*** = key.slice(1,bytes+1); // skip the 04 for uncompressed format
//      var y = key.slice(bytes+1);
//      this.P = new ECPointFp(curve,
//        curve.fromBigInteger(new BigInteger(***REMOVED***.toString("he***REMOVED***"), 16)),
//        curve.fromBigInteger(new BigInteger(y.toString("he***REMOVED***"), 16)));      
      this.P = curve.decodePointHe***REMOVED***(key.toString("he***REMOVED***"));
    }else{
      if(key.length != bytes) return false;
      priv = new BigInteger(key.toString("he***REMOVED***"), 16);      
    }
  }else{
    var n1 = n.subtract(BigInteger.ONE);
    var r = new BigInteger(crypto.randomBytes(n.bitLength()));
    priv = r.mod(n1).add(BigInteger.ONE);
    this.P = c.getG().multiply(priv);
  }
  if(this.P)
  {
//  var pubhe***REMOVED*** = unstupid(this.P.getX().toBigInteger().toString(16),bytes*2)+unstupid(this.P.getY().toBigInteger().toString(16),bytes*2);
//  this.PublicKey = Buffer.from("04"+pubhe***REMOVED***,"he***REMOVED***");
    this.PublicKey = Buffer.from(c.getCurve().encodeCompressedPointHe***REMOVED***(this.P),"he***REMOVED***");
  }
  if(priv)
  {
    this.PrivateKey = Buffer.from(unstupid(priv.toString(16),bytes*2),"he***REMOVED***");
    this.deriveSharedSecret = function(key)
    {
      if(!key || !key.P) return false;
      var S = key.P.multiply(priv);
      return Buffer.from(unstupid(S.getX().toBigInteger().toString(16),bytes*2),"he***REMOVED***");
   }     
  }
}

