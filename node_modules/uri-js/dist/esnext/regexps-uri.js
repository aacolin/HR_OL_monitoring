import { merge, sube***REMOVED***p } from "./util";
e***REMOVED***port function buildE***REMOVED***ps(isIRI) {
    const ALPHA$$ = "[A-Za-z]", CR$ = "[\\***REMOVED***0D]", DIGIT$$ = "[0-9]", DQUOTE$$ = "[\\***REMOVED***22]", HEXDIG$$ = merge(DIGIT$$, "[A-Fa-f]"), //case-insensitive
    LF$$ = "[\\***REMOVED***0A]", SP$$ = "[\\***REMOVED***20]", PCT_ENCODED$ = sube***REMOVED***p(sube***REMOVED***p("%[EFef]" + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$) + "|" + sube***REMOVED***p("%[89A-Fa-f]" + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$) + "|" + sube***REMOVED***p("%" + HEXDIG$$ + HEXDIG$$)), //e***REMOVED***panded
    GEN_DELIMS$$ = "[\\:\\/\\?\\#\\[\\]\\@]", SUB_DELIMS$$ = "[\\!\\$\\&\\'\\(\\)\\*\\+\\,\\;\\=]", RESERVED$$ = merge(GEN_DELIMS$$, SUB_DELIMS$$), UCSCHAR$$ = isIRI ? "[\\***REMOVED***A0-\\u200D\\u2010-\\u2029\\u202F-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]" : "[]", //subset, e***REMOVED***cludes bidi control characters
    IPRIVATE$$ = isIRI ? "[\\uE000-\\uF8FF]" : "[]", //subset
    UNRESERVED$$ = merge(ALPHA$$, DIGIT$$, "[\\-\\.\\_\\~]", UCSCHAR$$), SCHEME$ = sube***REMOVED***p(ALPHA$$ + merge(ALPHA$$, DIGIT$$, "[\\+\\-\\.]") + "*"), USERINFO$ = sube***REMOVED***p(sube***REMOVED***p(PCT_ENCODED$ + "|" + merge(UNRESERVED$$, SUB_DELIMS$$, "[\\:]")) + "*"), DEC_OCTET$ = sube***REMOVED***p(sube***REMOVED***p("25[0-5]") + "|" + sube***REMOVED***p("2[0-4]" + DIGIT$$) + "|" + sube***REMOVED***p("1" + DIGIT$$ + DIGIT$$) + "|" + sube***REMOVED***p("[1-9]" + DIGIT$$) + "|" + DIGIT$$), DEC_OCTET_RELAXED$ = sube***REMOVED***p(sube***REMOVED***p("25[0-5]") + "|" + sube***REMOVED***p("2[0-4]" + DIGIT$$) + "|" + sube***REMOVED***p("1" + DIGIT$$ + DIGIT$$) + "|" + sube***REMOVED***p("0?[1-9]" + DIGIT$$) + "|0?0?" + DIGIT$$), //rela***REMOVED***ed parsing rules
    IPV4ADDRESS$ = sube***REMOVED***p(DEC_OCTET_RELAXED$ + "\\." + DEC_OCTET_RELAXED$ + "\\." + DEC_OCTET_RELAXED$ + "\\." + DEC_OCTET_RELAXED$), H16$ = sube***REMOVED***p(HEXDIG$$ + "{1,4}"), LS32$ = sube***REMOVED***p(sube***REMOVED***p(H16$ + "\\:" + H16$) + "|" + IPV4ADDRESS$), IPV6ADDRESS1$ = sube***REMOVED***p(sube***REMOVED***p(H16$ + "\\:") + "{6}" + LS32$), //                           6( h16 ":" ) ls32
    IPV6ADDRESS2$ = sube***REMOVED***p("\\:\\:" + sube***REMOVED***p(H16$ + "\\:") + "{5}" + LS32$), //                      "::" 5( h16 ":" ) ls32
    IPV6ADDRESS3$ = sube***REMOVED***p(sube***REMOVED***p(H16$) + "?\\:\\:" + sube***REMOVED***p(H16$ + "\\:") + "{4}" + LS32$), //[               h16 ] "::" 4( h16 ":" ) ls32
    IPV6ADDRESS4$ = sube***REMOVED***p(sube***REMOVED***p(sube***REMOVED***p(H16$ + "\\:") + "{0,1}" + H16$) + "?\\:\\:" + sube***REMOVED***p(H16$ + "\\:") + "{3}" + LS32$), //[ *1( h16 ":" ) h16 ] "::" 3( h16 ":" ) ls32
    IPV6ADDRESS5$ = sube***REMOVED***p(sube***REMOVED***p(sube***REMOVED***p(H16$ + "\\:") + "{0,2}" + H16$) + "?\\:\\:" + sube***REMOVED***p(H16$ + "\\:") + "{2}" + LS32$), //[ *2( h16 ":" ) h16 ] "::" 2( h16 ":" ) ls32
    IPV6ADDRESS6$ = sube***REMOVED***p(sube***REMOVED***p(sube***REMOVED***p(H16$ + "\\:") + "{0,3}" + H16$) + "?\\:\\:" + H16$ + "\\:" + LS32$), //[ *3( h16 ":" ) h16 ] "::"    h16 ":"   ls32
    IPV6ADDRESS7$ = sube***REMOVED***p(sube***REMOVED***p(sube***REMOVED***p(H16$ + "\\:") + "{0,4}" + H16$) + "?\\:\\:" + LS32$), //[ *4( h16 ":" ) h16 ] "::"              ls32
    IPV6ADDRESS8$ = sube***REMOVED***p(sube***REMOVED***p(sube***REMOVED***p(H16$ + "\\:") + "{0,5}" + H16$) + "?\\:\\:" + H16$), //[ *5( h16 ":" ) h16 ] "::"              h16
    IPV6ADDRESS9$ = sube***REMOVED***p(sube***REMOVED***p(sube***REMOVED***p(H16$ + "\\:") + "{0,6}" + H16$) + "?\\:\\:"), //[ *6( h16 ":" ) h16 ] "::"
    IPV6ADDRESS$ = sube***REMOVED***p([IPV6ADDRESS1$, IPV6ADDRESS2$, IPV6ADDRESS3$, IPV6ADDRESS4$, IPV6ADDRESS5$, IPV6ADDRESS6$, IPV6ADDRESS7$, IPV6ADDRESS8$, IPV6ADDRESS9$].join("|")), ZONEID$ = sube***REMOVED***p(sube***REMOVED***p(UNRESERVED$$ + "|" + PCT_ENCODED$) + "+"), //RFC 6874
    IPV6ADDRZ$ = sube***REMOVED***p(IPV6ADDRESS$ + "\\%25" + ZONEID$), //RFC 6874
    IPV6ADDRZ_RELAXED$ = sube***REMOVED***p(IPV6ADDRESS$ + sube***REMOVED***p("\\%25|\\%(?!" + HEXDIG$$ + "{2})") + ZONEID$), //RFC 6874, with rela***REMOVED***ed parsing rules
    IPVFUTURE$ = sube***REMOVED***p("[vV]" + HEXDIG$$ + "+\\." + merge(UNRESERVED$$, SUB_DELIMS$$, "[\\:]") + "+"), IP_LITERAL$ = sube***REMOVED***p("\\[" + sube***REMOVED***p(IPV6ADDRZ_RELAXED$ + "|" + IPV6ADDRESS$ + "|" + IPVFUTURE$) + "\\]"), //RFC 6874
    REG_NAME$ = sube***REMOVED***p(sube***REMOVED***p(PCT_ENCODED$ + "|" + merge(UNRESERVED$$, SUB_DELIMS$$)) + "*"), HOST$ = sube***REMOVED***p(IP_LITERAL$ + "|" + IPV4ADDRESS$ + "(?!" + REG_NAME$ + ")" + "|" + REG_NAME$), PORT$ = sube***REMOVED***p(DIGIT$$ + "*"), AUTHORITY$ = sube***REMOVED***p(sube***REMOVED***p(USERINFO$ + "@") + "?" + HOST$ + sube***REMOVED***p("\\:" + PORT$) + "?"), PCHAR$ = sube***REMOVED***p(PCT_ENCODED$ + "|" + merge(UNRESERVED$$, SUB_DELIMS$$, "[\\:\\@]")), SEGMENT$ = sube***REMOVED***p(PCHAR$ + "*"), SEGMENT_NZ$ = sube***REMOVED***p(PCHAR$ + "+"), SEGMENT_NZ_NC$ = sube***REMOVED***p(sube***REMOVED***p(PCT_ENCODED$ + "|" + merge(UNRESERVED$$, SUB_DELIMS$$, "[\\@]")) + "+"), PATH_ABEMPTY$ = sube***REMOVED***p(sube***REMOVED***p("\\/" + SEGMENT$) + "*"), PATH_ABSOLUTE$ = sube***REMOVED***p("\\/" + sube***REMOVED***p(SEGMENT_NZ$ + PATH_ABEMPTY$) + "?"), //simplified
    PATH_NOSCHEME$ = sube***REMOVED***p(SEGMENT_NZ_NC$ + PATH_ABEMPTY$), //simplified
    PATH_ROOTLESS$ = sube***REMOVED***p(SEGMENT_NZ$ + PATH_ABEMPTY$), //simplified
    PATH_EMPTY$ = "(?!" + PCHAR$ + ")", PATH$ = sube***REMOVED***p(PATH_ABEMPTY$ + "|" + PATH_ABSOLUTE$ + "|" + PATH_NOSCHEME$ + "|" + PATH_ROOTLESS$ + "|" + PATH_EMPTY$), QUERY$ = sube***REMOVED***p(sube***REMOVED***p(PCHAR$ + "|" + merge("[\\/\\?]", IPRIVATE$$)) + "*"), FRAGMENT$ = sube***REMOVED***p(sube***REMOVED***p(PCHAR$ + "|[\\/\\?]") + "*"), HIER_PART$ = sube***REMOVED***p(sube***REMOVED***p("\\/\\/" + AUTHORITY$ + PATH_ABEMPTY$) + "|" + PATH_ABSOLUTE$ + "|" + PATH_ROOTLESS$ + "|" + PATH_EMPTY$), URI$ = sube***REMOVED***p(SCHEME$ + "\\:" + HIER_PART$ + sube***REMOVED***p("\\?" + QUERY$) + "?" + sube***REMOVED***p("\\#" + FRAGMENT$) + "?"), RELATIVE_PART$ = sube***REMOVED***p(sube***REMOVED***p("\\/\\/" + AUTHORITY$ + PATH_ABEMPTY$) + "|" + PATH_ABSOLUTE$ + "|" + PATH_NOSCHEME$ + "|" + PATH_EMPTY$), RELATIVE$ = sube***REMOVED***p(RELATIVE_PART$ + sube***REMOVED***p("\\?" + QUERY$) + "?" + sube***REMOVED***p("\\#" + FRAGMENT$) + "?"), URI_REFERENCE$ = sube***REMOVED***p(URI$ + "|" + RELATIVE$), ABSOLUTE_URI$ = sube***REMOVED***p(SCHEME$ + "\\:" + HIER_PART$ + sube***REMOVED***p("\\?" + QUERY$) + "?"), GENERIC_REF$ = "^(" + SCHEME$ + ")\\:" + sube***REMOVED***p(sube***REMOVED***p("\\/\\/(" + sube***REMOVED***p("(" + USERINFO$ + ")@") + "?(" + HOST$ + ")" + sube***REMOVED***p("\\:(" + PORT$ + ")") + "?)") + "?(" + PATH_ABEMPTY$ + "|" + PATH_ABSOLUTE$ + "|" + PATH_ROOTLESS$ + "|" + PATH_EMPTY$ + ")") + sube***REMOVED***p("\\?(" + QUERY$ + ")") + "?" + sube***REMOVED***p("\\#(" + FRAGMENT$ + ")") + "?$", RELATIVE_REF$ = "^(){0}" + sube***REMOVED***p(sube***REMOVED***p("\\/\\/(" + sube***REMOVED***p("(" + USERINFO$ + ")@") + "?(" + HOST$ + ")" + sube***REMOVED***p("\\:(" + PORT$ + ")") + "?)") + "?(" + PATH_ABEMPTY$ + "|" + PATH_ABSOLUTE$ + "|" + PATH_NOSCHEME$ + "|" + PATH_EMPTY$ + ")") + sube***REMOVED***p("\\?(" + QUERY$ + ")") + "?" + sube***REMOVED***p("\\#(" + FRAGMENT$ + ")") + "?$", ABSOLUTE_REF$ = "^(" + SCHEME$ + ")\\:" + sube***REMOVED***p(sube***REMOVED***p("\\/\\/(" + sube***REMOVED***p("(" + USERINFO$ + ")@") + "?(" + HOST$ + ")" + sube***REMOVED***p("\\:(" + PORT$ + ")") + "?)") + "?(" + PATH_ABEMPTY$ + "|" + PATH_ABSOLUTE$ + "|" + PATH_ROOTLESS$ + "|" + PATH_EMPTY$ + ")") + sube***REMOVED***p("\\?(" + QUERY$ + ")") + "?$", SAMEDOC_REF$ = "^" + sube***REMOVED***p("\\#(" + FRAGMENT$ + ")") + "?$", AUTHORITY_REF$ = "^" + sube***REMOVED***p("(" + USERINFO$ + ")@") + "?(" + HOST$ + ")" + sube***REMOVED***p("\\:(" + PORT$ + ")") + "?$";
    return {
        NOT_SCHEME: new RegE***REMOVED***p(merge("[^]", ALPHA$$, DIGIT$$, "[\\+\\-\\.]"), "g"),
        NOT_USERINFO: new RegE***REMOVED***p(merge("[^\\%\\:]", UNRESERVED$$, SUB_DELIMS$$), "g"),
        NOT_HOST: new RegE***REMOVED***p(merge("[^\\%\\[\\]\\:]", UNRESERVED$$, SUB_DELIMS$$), "g"),
        NOT_PATH: new RegE***REMOVED***p(merge("[^\\%\\/\\:\\@]", UNRESERVED$$, SUB_DELIMS$$), "g"),
        NOT_PATH_NOSCHEME: new RegE***REMOVED***p(merge("[^\\%\\/\\@]", UNRESERVED$$, SUB_DELIMS$$), "g"),
        NOT_QUERY: new RegE***REMOVED***p(merge("[^\\%]", UNRESERVED$$, SUB_DELIMS$$, "[\\:\\@\\/\\?]", IPRIVATE$$), "g"),
        NOT_FRAGMENT: new RegE***REMOVED***p(merge("[^\\%]", UNRESERVED$$, SUB_DELIMS$$, "[\\:\\@\\/\\?]"), "g"),
        ESCAPE: new RegE***REMOVED***p(merge("[^]", UNRESERVED$$, SUB_DELIMS$$), "g"),
        UNRESERVED: new RegE***REMOVED***p(UNRESERVED$$, "g"),
        OTHER_CHARS: new RegE***REMOVED***p(merge("[^\\%]", UNRESERVED$$, RESERVED$$), "g"),
        PCT_ENCODED: new RegE***REMOVED***p(PCT_ENCODED$, "g"),
        IPV4ADDRESS: new RegE***REMOVED***p("^(" + IPV4ADDRESS$ + ")$"),
        IPV6ADDRESS: new RegE***REMOVED***p("^\\[?(" + IPV6ADDRESS$ + ")" + sube***REMOVED***p(sube***REMOVED***p("\\%25|\\%(?!" + HEXDIG$$ + "{2})") + "(" + ZONEID$ + ")") + "?\\]?$") //RFC 6874, with rela***REMOVED***ed parsing rules
    };
}
e***REMOVED***port default buildE***REMOVED***ps(false);
//# sourceMappingURL=rege***REMOVED***ps-uri.js.map