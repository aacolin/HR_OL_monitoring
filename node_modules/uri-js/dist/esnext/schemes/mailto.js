import { pctEncChar, pctDecChars, unescapeComponent } from "../uri";
import punycode from "punycode";
import { merge, sube***REMOVED***p, toUpperCase, toArray } from "../util";
const O = {};
const isIRI = true;
//RFC 3986
const UNRESERVED$$ = "[A-Za-z0-9\\-\\.\\_\\~" + (isIRI ? "\\***REMOVED***A0-\\u200D\\u2010-\\u2029\\u202F-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF" : "") + "]";
const HEXDIG$$ = "[0-9A-Fa-f]"; //case-insensitive
const PCT_ENCODED$ = sube***REMOVED***p(sube***REMOVED***p("%[EFef]" + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$) + "|" + sube***REMOVED***p("%[89A-Fa-f]" + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$) + "|" + sube***REMOVED***p("%" + HEXDIG$$ + HEXDIG$$)); //e***REMOVED***panded
//RFC 5322, e***REMOVED***cept these symbols as per RFC 6068: @ : / ? # [ ] & ; =
//const ATEXT$$ = "[A-Za-z0-9\\!\\#\\$\\%\\&\\'\\*\\+\\-\\/\\=\\?\\^\\_\\`\\{\\|\\}\\~]";
//const WSP$$ = "[\\***REMOVED***20\\***REMOVED***09]";
//const OBS_QTEXT$$ = "[\\***REMOVED***01-\\***REMOVED***08\\***REMOVED***0B\\***REMOVED***0C\\***REMOVED***0E-\\***REMOVED***1F\\***REMOVED***7F]";  //(%d1-8 / %d11-12 / %d14-31 / %d127)
//const QTEXT$$ = merge("[\\***REMOVED***21\\***REMOVED***23-\\***REMOVED***5B\\***REMOVED***5D-\\***REMOVED***7E]", OBS_QTEXT$$);  //%d33 / %d35-91 / %d93-126 / obs-qte***REMOVED***t
//const VCHAR$$ = "[\\***REMOVED***21-\\***REMOVED***7E]";
//const WSP$$ = "[\\***REMOVED***20\\***REMOVED***09]";
//const OBS_QP$ = sube***REMOVED***p("\\\\" + merge("[\\***REMOVED***00\\***REMOVED***0D\\***REMOVED***0A]", OBS_QTEXT$$));  //%d0 / CR / LF / obs-qte***REMOVED***t
//const FWS$ = sube***REMOVED***p(sube***REMOVED***p(WSP$$ + "*" + "\\***REMOVED***0D\\***REMOVED***0A") + "?" + WSP$$ + "+");
//const QUOTED_PAIR$ = sube***REMOVED***p(sube***REMOVED***p("\\\\" + sube***REMOVED***p(VCHAR$$ + "|" + WSP$$)) + "|" + OBS_QP$);
//const QUOTED_STRING$ = sube***REMOVED***p('\\"' + sube***REMOVED***p(FWS$ + "?" + QCONTENT$) + "*" + FWS$ + "?" + '\\"');
const ATEXT$$ = "[A-Za-z0-9\\!\\$\\%\\'\\*\\+\\-\\^\\_\\`\\{\\|\\}\\~]";
const QTEXT$$ = "[\\!\\$\\%\\'\\(\\)\\*\\+\\,\\-\\.0-9\\<\\>A-Z\\***REMOVED***5E-\\***REMOVED***7E]";
const VCHAR$$ = merge(QTEXT$$, "[\\\"\\\\]");
const DOT_ATOM_TEXT$ = sube***REMOVED***p(ATEXT$$ + "+" + sube***REMOVED***p("\\." + ATEXT$$ + "+") + "*");
const QUOTED_PAIR$ = sube***REMOVED***p("\\\\" + VCHAR$$);
const QCONTENT$ = sube***REMOVED***p(QTEXT$$ + "|" + QUOTED_PAIR$);
const QUOTED_STRING$ = sube***REMOVED***p('\\"' + QCONTENT$ + "*" + '\\"');
//RFC 6068
const DTEXT_NO_OBS$$ = "[\\***REMOVED***21-\\***REMOVED***5A\\***REMOVED***5E-\\***REMOVED***7E]"; //%d33-90 / %d94-126
const SOME_DELIMS$$ = "[\\!\\$\\'\\(\\)\\*\\+\\,\\;\\:\\@]";
const QCHAR$ = sube***REMOVED***p(UNRESERVED$$ + "|" + PCT_ENCODED$ + "|" + SOME_DELIMS$$);
const DOMAIN$ = sube***REMOVED***p(DOT_ATOM_TEXT$ + "|" + "\\[" + DTEXT_NO_OBS$$ + "*" + "\\]");
const LOCAL_PART$ = sube***REMOVED***p(DOT_ATOM_TEXT$ + "|" + QUOTED_STRING$);
const ADDR_SPEC$ = sube***REMOVED***p(LOCAL_PART$ + "\\@" + DOMAIN$);
const TO$ = sube***REMOVED***p(ADDR_SPEC$ + sube***REMOVED***p("\\," + ADDR_SPEC$) + "*");
const HFNAME$ = sube***REMOVED***p(QCHAR$ + "*");
const HFVALUE$ = HFNAME$;
const HFIELD$ = sube***REMOVED***p(HFNAME$ + "\\=" + HFVALUE$);
const HFIELDS2$ = sube***REMOVED***p(HFIELD$ + sube***REMOVED***p("\\&" + HFIELD$) + "*");
const HFIELDS$ = sube***REMOVED***p("\\?" + HFIELDS2$);
const MAILTO_URI = new RegE***REMOVED***p("^mailto\\:" + TO$ + "?" + HFIELDS$ + "?$");
const UNRESERVED = new RegE***REMOVED***p(UNRESERVED$$, "g");
const PCT_ENCODED = new RegE***REMOVED***p(PCT_ENCODED$, "g");
const NOT_LOCAL_PART = new RegE***REMOVED***p(merge("[^]", ATEXT$$, "[\\.]", '[\\"]', VCHAR$$), "g");
const NOT_DOMAIN = new RegE***REMOVED***p(merge("[^]", ATEXT$$, "[\\.]", "[\\[]", DTEXT_NO_OBS$$, "[\\]]"), "g");
const NOT_HFNAME = new RegE***REMOVED***p(merge("[^]", UNRESERVED$$, SOME_DELIMS$$), "g");
const NOT_HFVALUE = NOT_HFNAME;
const TO = new RegE***REMOVED***p("^" + TO$ + "$");
const HFIELDS = new RegE***REMOVED***p("^" + HFIELDS2$ + "$");
function decodeUnreserved(str) {
    const decStr = pctDecChars(str);
    return (!decStr.match(UNRESERVED) ? str : decStr);
}
const handler = {
    scheme: "mailto",
    parse: function (components, options) {
        const mailtoComponents = components;
        const to = mailtoComponents.to = (mailtoComponents.path ? mailtoComponents.path.split(",") : []);
        mailtoComponents.path = undefined;
        if (mailtoComponents.query) {
            let unknownHeaders = false;
            const headers = {};
            const hfields = mailtoComponents.query.split("&");
            for (let ***REMOVED*** = 0, ***REMOVED***l = hfields.length; ***REMOVED*** < ***REMOVED***l; ++***REMOVED***) {
                const hfield = hfields[***REMOVED***].split("=");
                switch (hfield[0]) {
                    case "to":
                        const toAddrs = hfield[1].split(",");
                        for (let ***REMOVED*** = 0, ***REMOVED***l = toAddrs.length; ***REMOVED*** < ***REMOVED***l; ++***REMOVED***) {
                            to.push(toAddrs[***REMOVED***]);
                        }
                        break;
                    case "subject":
                        mailtoComponents.subject = unescapeComponent(hfield[1], options);
                        break;
                    case "body":
                        mailtoComponents.body = unescapeComponent(hfield[1], options);
                        break;
                    default:
                        unknownHeaders = true;
                        headers[unescapeComponent(hfield[0], options)] = unescapeComponent(hfield[1], options);
                        break;
                }
            }
            if (unknownHeaders)
                mailtoComponents.headers = headers;
        }
        mailtoComponents.query = undefined;
        for (let ***REMOVED*** = 0, ***REMOVED***l = to.length; ***REMOVED*** < ***REMOVED***l; ++***REMOVED***) {
            const addr = to[***REMOVED***].split("@");
            addr[0] = unescapeComponent(addr[0]);
            if (!options.unicodeSupport) {
                //convert Unicode IDN -> ASCII IDN
                try {
                    addr[1] = punycode.toASCII(unescapeComponent(addr[1], options).toLowerCase());
                }
                catch (e) {
                    mailtoComponents.error = mailtoComponents.error || "Email address's domain name can not be converted to ASCII via punycode: " + e;
                }
            }
            else {
                addr[1] = unescapeComponent(addr[1], options).toLowerCase();
            }
            to[***REMOVED***] = addr.join("@");
        }
        return mailtoComponents;
    },
    serialize: function (mailtoComponents, options) {
        const components = mailtoComponents;
        const to = toArray(mailtoComponents.to);
        if (to) {
            for (let ***REMOVED*** = 0, ***REMOVED***l = to.length; ***REMOVED*** < ***REMOVED***l; ++***REMOVED***) {
                const toAddr = String(to[***REMOVED***]);
                const atId***REMOVED*** = toAddr.lastInde***REMOVED***Of("@");
                const localPart = (toAddr.slice(0, atId***REMOVED***)).replace(PCT_ENCODED, decodeUnreserved).replace(PCT_ENCODED, toUpperCase).replace(NOT_LOCAL_PART, pctEncChar);
                let domain = toAddr.slice(atId***REMOVED*** + 1);
                //convert IDN via punycode
                try {
                    domain = (!options.iri ? punycode.toASCII(unescapeComponent(domain, options).toLowerCase()) : punycode.toUnicode(domain));
                }
                catch (e) {
                    components.error = components.error || "Email address's domain name can not be converted to " + (!options.iri ? "ASCII" : "Unicode") + " via punycode: " + e;
                }
                to[***REMOVED***] = localPart + "@" + domain;
            }
            components.path = to.join(",");
        }
        const headers = mailtoComponents.headers = mailtoComponents.headers || {};
        if (mailtoComponents.subject)
            headers["subject"] = mailtoComponents.subject;
        if (mailtoComponents.body)
            headers["body"] = mailtoComponents.body;
        const fields = [];
        for (const name in headers) {
            if (headers[name] !== O[name]) {
                fields.push(name.replace(PCT_ENCODED, decodeUnreserved).replace(PCT_ENCODED, toUpperCase).replace(NOT_HFNAME, pctEncChar) +
                    "=" +
                    headers[name].replace(PCT_ENCODED, decodeUnreserved).replace(PCT_ENCODED, toUpperCase).replace(NOT_HFVALUE, pctEncChar));
            }
        }
        if (fields.length) {
            components.query = fields.join("&");
        }
        return components;
    }
};
e***REMOVED***port default handler;
//# sourceMappingURL=mailto.js.map