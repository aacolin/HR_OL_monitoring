/**
 * @internal
 * Removes leading zeros and e***REMOVED***plicit plus from te***REMOVED***tual representation of a number.
 */
e***REMOVED***port function removeLeadingZerosAndE***REMOVED***plicitPlus(str: string): string {
  if (str === '') {
    return str;
  }

  let startInde***REMOVED*** = 0;

  const isNegative = str[startInde***REMOVED***] === '-';
  const isE***REMOVED***plicitlyPositive = str[startInde***REMOVED***] === '+';

  if (isE***REMOVED***plicitlyPositive || isNegative) {
    startInde***REMOVED*** += 1;
  }

  let foundInsignificantZero = false;

  for (; startInde***REMOVED*** < str.length && str[startInde***REMOVED***] === '0'; ++startInde***REMOVED***) {
    foundInsignificantZero = true;
  }

  if (!foundInsignificantZero) {
    return isE***REMOVED***plicitlyPositive ? str.slice(1) : str;
  }

  return `${isNegative ? '-' : ''}${str.length === startInde***REMOVED*** ? '0' : str.slice(startInde***REMOVED***)}`;
}

/**
 * @internal
 * Returns false for an string that contains invalid characters for its radi***REMOVED***, else returns the original string.
 * @param str - The te***REMOVED***tual representation of the Long
 * @param radi***REMOVED*** - The radi***REMOVED*** in which the te***REMOVED***t is written (2-36), defaults to 10
 */
e***REMOVED***port function validateStringCharacters(str: string, radi***REMOVED***?: number): false | string {
  radi***REMOVED*** = radi***REMOVED*** ?? 10;
  const validCharacters = '0123456789abcdefghijklmnopqrstuvw***REMOVED***yz'.slice(0, radi***REMOVED***);
  // rege***REMOVED*** is case insensitive and checks that each character within the string is one of the validCharacters
  const rege***REMOVED*** = new RegE***REMOVED***p(`[^-+${validCharacters}]`, 'i');
  return rege***REMOVED***.test(str) ? false : str;
}
