// NOTE: This file is autogenerated. Do not modify.
// See packages/babel-types/scripts/generators/flow.js for script used.

declare class BabelNodeComment {
  value: string;
  start: number;
  end: number;
  loc: BabelNodeSourceLocation;
}

declare class BabelNodeCommentBlock e***REMOVED***tends BabelNodeComment {
  type: "CommentBlock";
}

declare class BabelNodeCommentLine e***REMOVED***tends BabelNodeComment {
  type: "CommentLine";
}

declare class BabelNodeSourceLocation {
  start: {
    line: number;
    column: number;
  };

  end: {
    line: number;
    column: number;
  };
}

declare class BabelNode {
  leadingComments?: Array<BabelNodeComment>;
  innerComments?: Array<BabelNodeComment>;
  trailingComments?: Array<BabelNodeComment>;
  start: ?number;
  end: ?number;
  loc: ?BabelNodeSourceLocation;
  e***REMOVED***tra?: { [string]: mi***REMOVED***ed };
}

declare class BabelNodeArrayE***REMOVED***pression e***REMOVED***tends BabelNode {
  type: "ArrayE***REMOVED***pression";
  elements?: Array<null | BabelNodeE***REMOVED***pression | BabelNodeSpreadElement>;
}

declare class BabelNodeAssignmentE***REMOVED***pression e***REMOVED***tends BabelNode {
  type: "AssignmentE***REMOVED***pression";
  operator: string;
  left: BabelNodeLVal | BabelNodeOptionalMemberE***REMOVED***pression;
  right: BabelNodeE***REMOVED***pression;
}

declare class BabelNodeBinaryE***REMOVED***pression e***REMOVED***tends BabelNode {
  type: "BinaryE***REMOVED***pression";
  operator: "+" | "-" | "/" | "%" | "*" | "**" | "&" | "|" | ">>" | ">>>" | "<<" | "^" | "==" | "===" | "!=" | "!==" | "in" | "instanceof" | ">" | "<" | ">=" | "<=" | "|>";
  left: BabelNodeE***REMOVED***pression | BabelNodePrivateName;
  right: BabelNodeE***REMOVED***pression;
}

declare class BabelNodeInterpreterDirective e***REMOVED***tends BabelNode {
  type: "InterpreterDirective";
  value: string;
}

declare class BabelNodeDirective e***REMOVED***tends BabelNode {
  type: "Directive";
  value: BabelNodeDirectiveLiteral;
}

declare class BabelNodeDirectiveLiteral e***REMOVED***tends BabelNode {
  type: "DirectiveLiteral";
  value: string;
}

declare class BabelNodeBlockStatement e***REMOVED***tends BabelNode {
  type: "BlockStatement";
  body: Array<BabelNodeStatement>;
  directives?: Array<BabelNodeDirective>;
}

declare class BabelNodeBreakStatement e***REMOVED***tends BabelNode {
  type: "BreakStatement";
  label?: BabelNodeIdentifier;
}

declare class BabelNodeCallE***REMOVED***pression e***REMOVED***tends BabelNode {
  type: "CallE***REMOVED***pression";
  callee: BabelNodeE***REMOVED***pression | BabelNodeSuper | BabelNodeV8IntrinsicIdentifier;
  arguments: Array<BabelNodeE***REMOVED***pression | BabelNodeSpreadElement | BabelNodeArgumentPlaceholder>;
  optional?: boolean;
  typeArguments?: BabelNodeTypeParameterInstantiation;
  typeParameters?: BabelNodeTSTypeParameterInstantiation;
}

declare class BabelNodeCatchClause e***REMOVED***tends BabelNode {
  type: "CatchClause";
  param?: BabelNodeIdentifier | BabelNodeArrayPattern | BabelNodeObjectPattern;
  body: BabelNodeBlockStatement;
}

declare class BabelNodeConditionalE***REMOVED***pression e***REMOVED***tends BabelNode {
  type: "ConditionalE***REMOVED***pression";
  test: BabelNodeE***REMOVED***pression;
  consequent: BabelNodeE***REMOVED***pression;
  alternate: BabelNodeE***REMOVED***pression;
}

declare class BabelNodeContinueStatement e***REMOVED***tends BabelNode {
  type: "ContinueStatement";
  label?: BabelNodeIdentifier;
}

declare class BabelNodeDebuggerStatement e***REMOVED***tends BabelNode {
  type: "DebuggerStatement";
}

declare class BabelNodeDoWhileStatement e***REMOVED***tends BabelNode {
  type: "DoWhileStatement";
  test: BabelNodeE***REMOVED***pression;
  body: BabelNodeStatement;
}

declare class BabelNodeEmptyStatement e***REMOVED***tends BabelNode {
  type: "EmptyStatement";
}

declare class BabelNodeE***REMOVED***pressionStatement e***REMOVED***tends BabelNode {
  type: "E***REMOVED***pressionStatement";
  e***REMOVED***pression: BabelNodeE***REMOVED***pression;
}

declare class BabelNodeFile e***REMOVED***tends BabelNode {
  type: "File";
  program: BabelNodeProgram;
  comments?: Array<BabelNodeCommentBlock | BabelNodeCommentLine>;
  tokens?: Array<any>;
}

declare class BabelNodeForInStatement e***REMOVED***tends BabelNode {
  type: "ForInStatement";
  left: BabelNodeVariableDeclaration | BabelNodeLVal;
  right: BabelNodeE***REMOVED***pression;
  body: BabelNodeStatement;
}

declare class BabelNodeForStatement e***REMOVED***tends BabelNode {
  type: "ForStatement";
  init?: BabelNodeVariableDeclaration | BabelNodeE***REMOVED***pression;
  test?: BabelNodeE***REMOVED***pression;
  update?: BabelNodeE***REMOVED***pression;
  body: BabelNodeStatement;
}

declare class BabelNodeFunctionDeclaration e***REMOVED***tends BabelNode {
  type: "FunctionDeclaration";
  id?: BabelNodeIdentifier;
  params: Array<BabelNodeIdentifier | BabelNodePattern | BabelNodeRestElement>;
  body: BabelNodeBlockStatement;
  generator?: boolean;
  async?: boolean;
  declare?: boolean;
  predicate?: BabelNodeDeclaredPredicate | BabelNodeInferredPredicate;
  returnType?: BabelNodeTypeAnnotation | BabelNodeTSTypeAnnotation | BabelNodeNoop;
  typeParameters?: BabelNodeTypeParameterDeclaration | BabelNodeTSTypeParameterDeclaration | BabelNodeNoop;
}

declare class BabelNodeFunctionE***REMOVED***pression e***REMOVED***tends BabelNode {
  type: "FunctionE***REMOVED***pression";
  id?: BabelNodeIdentifier;
  params: Array<BabelNodeIdentifier | BabelNodePattern | BabelNodeRestElement>;
  body: BabelNodeBlockStatement;
  generator?: boolean;
  async?: boolean;
  predicate?: BabelNodeDeclaredPredicate | BabelNodeInferredPredicate;
  returnType?: BabelNodeTypeAnnotation | BabelNodeTSTypeAnnotation | BabelNodeNoop;
  typeParameters?: BabelNodeTypeParameterDeclaration | BabelNodeTSTypeParameterDeclaration | BabelNodeNoop;
}

declare class BabelNodeIdentifier e***REMOVED***tends BabelNode {
  type: "Identifier";
  name: string;
  decorators?: Array<BabelNodeDecorator>;
  optional?: boolean;
  typeAnnotation?: BabelNodeTypeAnnotation | BabelNodeTSTypeAnnotation | BabelNodeNoop;
}

declare class BabelNodeIfStatement e***REMOVED***tends BabelNode {
  type: "IfStatement";
  test: BabelNodeE***REMOVED***pression;
  consequent: BabelNodeStatement;
  alternate?: BabelNodeStatement;
}

declare class BabelNodeLabeledStatement e***REMOVED***tends BabelNode {
  type: "LabeledStatement";
  label: BabelNodeIdentifier;
  body: BabelNodeStatement;
}

declare class BabelNodeStringLiteral e***REMOVED***tends BabelNode {
  type: "StringLiteral";
  value: string;
}

declare class BabelNodeNumericLiteral e***REMOVED***tends BabelNode {
  type: "NumericLiteral";
  value: number;
}

declare class BabelNodeNullLiteral e***REMOVED***tends BabelNode {
  type: "NullLiteral";
}

declare class BabelNodeBooleanLiteral e***REMOVED***tends BabelNode {
  type: "BooleanLiteral";
  value: boolean;
}

declare class BabelNodeRegE***REMOVED***pLiteral e***REMOVED***tends BabelNode {
  type: "RegE***REMOVED***pLiteral";
  pattern: string;
  flags?: string;
}

declare class BabelNodeLogicalE***REMOVED***pression e***REMOVED***tends BabelNode {
  type: "LogicalE***REMOVED***pression";
  operator: "||" | "&&" | "??";
  left: BabelNodeE***REMOVED***pression;
  right: BabelNodeE***REMOVED***pression;
}

declare class BabelNodeMemberE***REMOVED***pression e***REMOVED***tends BabelNode {
  type: "MemberE***REMOVED***pression";
  object: BabelNodeE***REMOVED***pression | BabelNodeSuper;
  property: BabelNodeE***REMOVED***pression | BabelNodeIdentifier | BabelNodePrivateName;
  computed?: boolean;
  optional?: boolean;
}

declare class BabelNodeNewE***REMOVED***pression e***REMOVED***tends BabelNode {
  type: "NewE***REMOVED***pression";
  callee: BabelNodeE***REMOVED***pression | BabelNodeSuper | BabelNodeV8IntrinsicIdentifier;
  arguments: Array<BabelNodeE***REMOVED***pression | BabelNodeSpreadElement | BabelNodeArgumentPlaceholder>;
  optional?: boolean;
  typeArguments?: BabelNodeTypeParameterInstantiation;
  typeParameters?: BabelNodeTSTypeParameterInstantiation;
}

declare class BabelNodeProgram e***REMOVED***tends BabelNode {
  type: "Program";
  body: Array<BabelNodeStatement>;
  directives?: Array<BabelNodeDirective>;
  sourceType?: "script" | "module";
  interpreter?: BabelNodeInterpreterDirective;
}

declare class BabelNodeObjectE***REMOVED***pression e***REMOVED***tends BabelNode {
  type: "ObjectE***REMOVED***pression";
  properties: Array<BabelNodeObjectMethod | BabelNodeObjectProperty | BabelNodeSpreadElement>;
}

declare class BabelNodeObjectMethod e***REMOVED***tends BabelNode {
  type: "ObjectMethod";
  kind?: "method" | "get" | "set";
  key: BabelNodeE***REMOVED***pression | BabelNodeIdentifier | BabelNodeStringLiteral | BabelNodeNumericLiteral | BabelNodeBigIntLiteral;
  params: Array<BabelNodeIdentifier | BabelNodePattern | BabelNodeRestElement>;
  body: BabelNodeBlockStatement;
  computed?: boolean;
  generator?: boolean;
  async?: boolean;
  decorators?: Array<BabelNodeDecorator>;
  returnType?: BabelNodeTypeAnnotation | BabelNodeTSTypeAnnotation | BabelNodeNoop;
  typeParameters?: BabelNodeTypeParameterDeclaration | BabelNodeTSTypeParameterDeclaration | BabelNodeNoop;
}

declare class BabelNodeObjectProperty e***REMOVED***tends BabelNode {
  type: "ObjectProperty";
  key: BabelNodeE***REMOVED***pression | BabelNodeIdentifier | BabelNodeStringLiteral | BabelNodeNumericLiteral | BabelNodeBigIntLiteral | BabelNodeDecimalLiteral | BabelNodePrivateName;
  value: BabelNodeE***REMOVED***pression | BabelNodePatternLike;
  computed?: boolean;
  shorthand?: boolean;
  decorators?: Array<BabelNodeDecorator>;
}

declare class BabelNodeRestElement e***REMOVED***tends BabelNode {
  type: "RestElement";
  argument: BabelNodeLVal;
  decorators?: Array<BabelNodeDecorator>;
  optional?: boolean;
  typeAnnotation?: BabelNodeTypeAnnotation | BabelNodeTSTypeAnnotation | BabelNodeNoop;
}

declare class BabelNodeReturnStatement e***REMOVED***tends BabelNode {
  type: "ReturnStatement";
  argument?: BabelNodeE***REMOVED***pression;
}

declare class BabelNodeSequenceE***REMOVED***pression e***REMOVED***tends BabelNode {
  type: "SequenceE***REMOVED***pression";
  e***REMOVED***pressions: Array<BabelNodeE***REMOVED***pression>;
}

declare class BabelNodeParenthesizedE***REMOVED***pression e***REMOVED***tends BabelNode {
  type: "ParenthesizedE***REMOVED***pression";
  e***REMOVED***pression: BabelNodeE***REMOVED***pression;
}

declare class BabelNodeSwitchCase e***REMOVED***tends BabelNode {
  type: "SwitchCase";
  test?: BabelNodeE***REMOVED***pression;
  consequent: Array<BabelNodeStatement>;
}

declare class BabelNodeSwitchStatement e***REMOVED***tends BabelNode {
  type: "SwitchStatement";
  discriminant: BabelNodeE***REMOVED***pression;
  cases: Array<BabelNodeSwitchCase>;
}

declare class BabelNodeThisE***REMOVED***pression e***REMOVED***tends BabelNode {
  type: "ThisE***REMOVED***pression";
}

declare class BabelNodeThrowStatement e***REMOVED***tends BabelNode {
  type: "ThrowStatement";
  argument: BabelNodeE***REMOVED***pression;
}

declare class BabelNodeTryStatement e***REMOVED***tends BabelNode {
  type: "TryStatement";
  block: BabelNodeBlockStatement;
  handler?: BabelNodeCatchClause;
  finalizer?: BabelNodeBlockStatement;
}

declare class BabelNodeUnaryE***REMOVED***pression e***REMOVED***tends BabelNode {
  type: "UnaryE***REMOVED***pression";
  operator: "void" | "throw" | "delete" | "!" | "+" | "-" | "~" | "typeof";
  argument: BabelNodeE***REMOVED***pression;
  prefi***REMOVED***?: boolean;
}

declare class BabelNodeUpdateE***REMOVED***pression e***REMOVED***tends BabelNode {
  type: "UpdateE***REMOVED***pression";
  operator: "++" | "--";
  argument: BabelNodeE***REMOVED***pression;
  prefi***REMOVED***?: boolean;
}

declare class BabelNodeVariableDeclaration e***REMOVED***tends BabelNode {
  type: "VariableDeclaration";
  kind: "var" | "let" | "const" | "using" | "await using";
  declarations: Array<BabelNodeVariableDeclarator>;
  declare?: boolean;
}

declare class BabelNodeVariableDeclarator e***REMOVED***tends BabelNode {
  type: "VariableDeclarator";
  id: BabelNodeLVal;
  init?: BabelNodeE***REMOVED***pression;
  definite?: boolean;
}

declare class BabelNodeWhileStatement e***REMOVED***tends BabelNode {
  type: "WhileStatement";
  test: BabelNodeE***REMOVED***pression;
  body: BabelNodeStatement;
}

declare class BabelNodeWithStatement e***REMOVED***tends BabelNode {
  type: "WithStatement";
  object: BabelNodeE***REMOVED***pression;
  body: BabelNodeStatement;
}

declare class BabelNodeAssignmentPattern e***REMOVED***tends BabelNode {
  type: "AssignmentPattern";
  left: BabelNodeIdentifier | BabelNodeObjectPattern | BabelNodeArrayPattern | BabelNodeMemberE***REMOVED***pression | BabelNodeTSAsE***REMOVED***pression | BabelNodeTSSatisfiesE***REMOVED***pression | BabelNodeTSTypeAssertion | BabelNodeTSNonNullE***REMOVED***pression;
  right: BabelNodeE***REMOVED***pression;
  decorators?: Array<BabelNodeDecorator>;
  optional?: boolean;
  typeAnnotation?: BabelNodeTypeAnnotation | BabelNodeTSTypeAnnotation | BabelNodeNoop;
}

declare class BabelNodeArrayPattern e***REMOVED***tends BabelNode {
  type: "ArrayPattern";
  elements: Array<null | BabelNodePatternLike | BabelNodeLVal>;
  decorators?: Array<BabelNodeDecorator>;
  optional?: boolean;
  typeAnnotation?: BabelNodeTypeAnnotation | BabelNodeTSTypeAnnotation | BabelNodeNoop;
}

declare class BabelNodeArrowFunctionE***REMOVED***pression e***REMOVED***tends BabelNode {
  type: "ArrowFunctionE***REMOVED***pression";
  params: Array<BabelNodeIdentifier | BabelNodePattern | BabelNodeRestElement>;
  body: BabelNodeBlockStatement | BabelNodeE***REMOVED***pression;
  async?: boolean;
  e***REMOVED***pression: boolean;
  generator?: boolean;
  predicate?: BabelNodeDeclaredPredicate | BabelNodeInferredPredicate;
  returnType?: BabelNodeTypeAnnotation | BabelNodeTSTypeAnnotation | BabelNodeNoop;
  typeParameters?: BabelNodeTypeParameterDeclaration | BabelNodeTSTypeParameterDeclaration | BabelNodeNoop;
}

declare class BabelNodeClassBody e***REMOVED***tends BabelNode {
  type: "ClassBody";
  body: Array<BabelNodeClassMethod | BabelNodeClassPrivateMethod | BabelNodeClassProperty | BabelNodeClassPrivateProperty | BabelNodeClassAccessorProperty | BabelNodeTSDeclareMethod | BabelNodeTSInde***REMOVED***Signature | BabelNodeStaticBlock>;
}

declare class BabelNodeClassE***REMOVED***pression e***REMOVED***tends BabelNode {
  type: "ClassE***REMOVED***pression";
  id?: BabelNodeIdentifier;
  superClass?: BabelNodeE***REMOVED***pression;
  body: BabelNodeClassBody;
  decorators?: Array<BabelNodeDecorator>;
  mi***REMOVED***ins?: BabelNodeInterfaceE***REMOVED***tends;
  superTypeParameters?: BabelNodeTypeParameterInstantiation | BabelNodeTSTypeParameterInstantiation;
  typeParameters?: BabelNodeTypeParameterDeclaration | BabelNodeTSTypeParameterDeclaration | BabelNodeNoop;
}

declare class BabelNodeClassDeclaration e***REMOVED***tends BabelNode {
  type: "ClassDeclaration";
  id?: BabelNodeIdentifier;
  superClass?: BabelNodeE***REMOVED***pression;
  body: BabelNodeClassBody;
  decorators?: Array<BabelNodeDecorator>;
  abstract?: boolean;
  declare?: boolean;
  mi***REMOVED***ins?: BabelNodeInterfaceE***REMOVED***tends;
  superTypeParameters?: BabelNodeTypeParameterInstantiation | BabelNodeTSTypeParameterInstantiation;
  typeParameters?: BabelNodeTypeParameterDeclaration | BabelNodeTSTypeParameterDeclaration | BabelNodeNoop;
}

declare class BabelNodeE***REMOVED***portAllDeclaration e***REMOVED***tends BabelNode {
  type: "E***REMOVED***portAllDeclaration";
  source: BabelNodeStringLiteral;
  assertions?: Array<BabelNodeImportAttribute>;
  attributes?: Array<BabelNodeImportAttribute>;
  e***REMOVED***portKind?: "type" | "value";
}

declare class BabelNodeE***REMOVED***portDefaultDeclaration e***REMOVED***tends BabelNode {
  type: "E***REMOVED***portDefaultDeclaration";
  declaration: BabelNodeTSDeclareFunction | BabelNodeFunctionDeclaration | BabelNodeClassDeclaration | BabelNodeE***REMOVED***pression;
  e***REMOVED***portKind?: "value";
}

declare class BabelNodeE***REMOVED***portNamedDeclaration e***REMOVED***tends BabelNode {
  type: "E***REMOVED***portNamedDeclaration";
  declaration?: BabelNodeDeclaration;
  specifiers?: Array<BabelNodeE***REMOVED***portSpecifier | BabelNodeE***REMOVED***portDefaultSpecifier | BabelNodeE***REMOVED***portNamespaceSpecifier>;
  source?: BabelNodeStringLiteral;
  assertions?: Array<BabelNodeImportAttribute>;
  attributes?: Array<BabelNodeImportAttribute>;
  e***REMOVED***portKind?: "type" | "value";
}

declare class BabelNodeE***REMOVED***portSpecifier e***REMOVED***tends BabelNode {
  type: "E***REMOVED***portSpecifier";
  local: BabelNodeIdentifier;
  e***REMOVED***ported: BabelNodeIdentifier | BabelNodeStringLiteral;
  e***REMOVED***portKind?: "type" | "value";
}

declare class BabelNodeForOfStatement e***REMOVED***tends BabelNode {
  type: "ForOfStatement";
  left: BabelNodeVariableDeclaration | BabelNodeLVal;
  right: BabelNodeE***REMOVED***pression;
  body: BabelNodeStatement;
}

declare class BabelNodeImportDeclaration e***REMOVED***tends BabelNode {
  type: "ImportDeclaration";
  specifiers: Array<BabelNodeImportSpecifier | BabelNodeImportDefaultSpecifier | BabelNodeImportNamespaceSpecifier>;
  source: BabelNodeStringLiteral;
  assertions?: Array<BabelNodeImportAttribute>;
  attributes?: Array<BabelNodeImportAttribute>;
  importKind?: "type" | "typeof" | "value";
  module?: boolean;
  phase?: "source" | "defer";
}

declare class BabelNodeImportDefaultSpecifier e***REMOVED***tends BabelNode {
  type: "ImportDefaultSpecifier";
  local: BabelNodeIdentifier;
}

declare class BabelNodeImportNamespaceSpecifier e***REMOVED***tends BabelNode {
  type: "ImportNamespaceSpecifier";
  local: BabelNodeIdentifier;
}

declare class BabelNodeImportSpecifier e***REMOVED***tends BabelNode {
  type: "ImportSpecifier";
  local: BabelNodeIdentifier;
  imported: BabelNodeIdentifier | BabelNodeStringLiteral;
  importKind?: "type" | "typeof" | "value";
}

declare class BabelNodeImportE***REMOVED***pression e***REMOVED***tends BabelNode {
  type: "ImportE***REMOVED***pression";
  source: BabelNodeE***REMOVED***pression;
  options?: BabelNodeE***REMOVED***pression;
  phase?: "source" | "defer";
}

declare class BabelNodeMetaProperty e***REMOVED***tends BabelNode {
  type: "MetaProperty";
  meta: BabelNodeIdentifier;
  property: BabelNodeIdentifier;
}

declare class BabelNodeClassMethod e***REMOVED***tends BabelNode {
  type: "ClassMethod";
  kind?: "get" | "set" | "method" | "constructor";
  key: BabelNodeIdentifier | BabelNodeStringLiteral | BabelNodeNumericLiteral | BabelNodeBigIntLiteral | BabelNodeE***REMOVED***pression;
  params: Array<BabelNodeIdentifier | BabelNodePattern | BabelNodeRestElement | BabelNodeTSParameterProperty>;
  body: BabelNodeBlockStatement;
  computed?: boolean;
  generator?: boolean;
  async?: boolean;
  abstract?: boolean;
  access?: "public" | "private" | "protected";
  accessibility?: "public" | "private" | "protected";
  decorators?: Array<BabelNodeDecorator>;
  optional?: boolean;
  override?: boolean;
  returnType?: BabelNodeTypeAnnotation | BabelNodeTSTypeAnnotation | BabelNodeNoop;
  typeParameters?: BabelNodeTypeParameterDeclaration | BabelNodeTSTypeParameterDeclaration | BabelNodeNoop;
}

declare class BabelNodeObjectPattern e***REMOVED***tends BabelNode {
  type: "ObjectPattern";
  properties: Array<BabelNodeRestElement | BabelNodeObjectProperty>;
  decorators?: Array<BabelNodeDecorator>;
  optional?: boolean;
  typeAnnotation?: BabelNodeTypeAnnotation | BabelNodeTSTypeAnnotation | BabelNodeNoop;
}

declare class BabelNodeSpreadElement e***REMOVED***tends BabelNode {
  type: "SpreadElement";
  argument: BabelNodeE***REMOVED***pression;
}

declare class BabelNodeSuper e***REMOVED***tends BabelNode {
  type: "Super";
}

declare class BabelNodeTaggedTemplateE***REMOVED***pression e***REMOVED***tends BabelNode {
  type: "TaggedTemplateE***REMOVED***pression";
  tag: BabelNodeE***REMOVED***pression;
  quasi: BabelNodeTemplateLiteral;
  typeParameters?: BabelNodeTypeParameterInstantiation | BabelNodeTSTypeParameterInstantiation;
}

declare class BabelNodeTemplateElement e***REMOVED***tends BabelNode {
  type: "TemplateElement";
  value: { raw: string, cooked?: string };
  tail?: boolean;
}

declare class BabelNodeTemplateLiteral e***REMOVED***tends BabelNode {
  type: "TemplateLiteral";
  quasis: Array<BabelNodeTemplateElement>;
  e***REMOVED***pressions: Array<BabelNodeE***REMOVED***pression | BabelNodeTSType>;
}

declare class BabelNodeYieldE***REMOVED***pression e***REMOVED***tends BabelNode {
  type: "YieldE***REMOVED***pression";
  argument?: BabelNodeE***REMOVED***pression;
  delegate?: boolean;
}

declare class BabelNodeAwaitE***REMOVED***pression e***REMOVED***tends BabelNode {
  type: "AwaitE***REMOVED***pression";
  argument: BabelNodeE***REMOVED***pression;
}

declare class BabelNodeImport e***REMOVED***tends BabelNode {
  type: "Import";
}

declare class BabelNodeBigIntLiteral e***REMOVED***tends BabelNode {
  type: "BigIntLiteral";
  value: string;
}

declare class BabelNodeE***REMOVED***portNamespaceSpecifier e***REMOVED***tends BabelNode {
  type: "E***REMOVED***portNamespaceSpecifier";
  e***REMOVED***ported: BabelNodeIdentifier;
}

declare class BabelNodeOptionalMemberE***REMOVED***pression e***REMOVED***tends BabelNode {
  type: "OptionalMemberE***REMOVED***pression";
  object: BabelNodeE***REMOVED***pression;
  property: BabelNodeE***REMOVED***pression | BabelNodeIdentifier;
  computed?: boolean;
  optional: boolean;
}

declare class BabelNodeOptionalCallE***REMOVED***pression e***REMOVED***tends BabelNode {
  type: "OptionalCallE***REMOVED***pression";
  callee: BabelNodeE***REMOVED***pression;
  arguments: Array<BabelNodeE***REMOVED***pression | BabelNodeSpreadElement | BabelNodeArgumentPlaceholder>;
  optional: boolean;
  typeArguments?: BabelNodeTypeParameterInstantiation;
  typeParameters?: BabelNodeTSTypeParameterInstantiation;
}

declare class BabelNodeClassProperty e***REMOVED***tends BabelNode {
  type: "ClassProperty";
  key: BabelNodeIdentifier | BabelNodeStringLiteral | BabelNodeNumericLiteral | BabelNodeBigIntLiteral | BabelNodeE***REMOVED***pression;
  value?: BabelNodeE***REMOVED***pression;
  typeAnnotation?: BabelNodeTypeAnnotation | BabelNodeTSTypeAnnotation | BabelNodeNoop;
  decorators?: Array<BabelNodeDecorator>;
  computed?: boolean;
  abstract?: boolean;
  accessibility?: "public" | "private" | "protected";
  declare?: boolean;
  definite?: boolean;
  optional?: boolean;
  override?: boolean;
  readonly?: boolean;
  variance?: BabelNodeVariance;
}

declare class BabelNodeClassAccessorProperty e***REMOVED***tends BabelNode {
  type: "ClassAccessorProperty";
  key: BabelNodeIdentifier | BabelNodeStringLiteral | BabelNodeNumericLiteral | BabelNodeBigIntLiteral | BabelNodeE***REMOVED***pression | BabelNodePrivateName;
  value?: BabelNodeE***REMOVED***pression;
  typeAnnotation?: BabelNodeTypeAnnotation | BabelNodeTSTypeAnnotation | BabelNodeNoop;
  decorators?: Array<BabelNodeDecorator>;
  computed?: boolean;
  abstract?: boolean;
  accessibility?: "public" | "private" | "protected";
  declare?: boolean;
  definite?: boolean;
  optional?: boolean;
  override?: boolean;
  readonly?: boolean;
  variance?: BabelNodeVariance;
}

declare class BabelNodeClassPrivateProperty e***REMOVED***tends BabelNode {
  type: "ClassPrivateProperty";
  key: BabelNodePrivateName;
  value?: BabelNodeE***REMOVED***pression;
  decorators?: Array<BabelNodeDecorator>;
  definite?: boolean;
  readonly?: boolean;
  typeAnnotation?: BabelNodeTypeAnnotation | BabelNodeTSTypeAnnotation | BabelNodeNoop;
  variance?: BabelNodeVariance;
}

declare class BabelNodeClassPrivateMethod e***REMOVED***tends BabelNode {
  type: "ClassPrivateMethod";
  kind?: "get" | "set" | "method";
  key: BabelNodePrivateName;
  params: Array<BabelNodeIdentifier | BabelNodePattern | BabelNodeRestElement | BabelNodeTSParameterProperty>;
  body: BabelNodeBlockStatement;
  abstract?: boolean;
  access?: "public" | "private" | "protected";
  accessibility?: "public" | "private" | "protected";
  async?: boolean;
  computed?: boolean;
  decorators?: Array<BabelNodeDecorator>;
  generator?: boolean;
  optional?: boolean;
  override?: boolean;
  returnType?: BabelNodeTypeAnnotation | BabelNodeTSTypeAnnotation | BabelNodeNoop;
  typeParameters?: BabelNodeTypeParameterDeclaration | BabelNodeTSTypeParameterDeclaration | BabelNodeNoop;
}

declare class BabelNodePrivateName e***REMOVED***tends BabelNode {
  type: "PrivateName";
  id: BabelNodeIdentifier;
}

declare class BabelNodeStaticBlock e***REMOVED***tends BabelNode {
  type: "StaticBlock";
  body: Array<BabelNodeStatement>;
}

declare class BabelNodeAnyTypeAnnotation e***REMOVED***tends BabelNode {
  type: "AnyTypeAnnotation";
}

declare class BabelNodeArrayTypeAnnotation e***REMOVED***tends BabelNode {
  type: "ArrayTypeAnnotation";
  elementType: BabelNodeFlowType;
}

declare class BabelNodeBooleanTypeAnnotation e***REMOVED***tends BabelNode {
  type: "BooleanTypeAnnotation";
}

declare class BabelNodeBooleanLiteralTypeAnnotation e***REMOVED***tends BabelNode {
  type: "BooleanLiteralTypeAnnotation";
  value: boolean;
}

declare class BabelNodeNullLiteralTypeAnnotation e***REMOVED***tends BabelNode {
  type: "NullLiteralTypeAnnotation";
}

declare class BabelNodeClassImplements e***REMOVED***tends BabelNode {
  type: "ClassImplements";
  id: BabelNodeIdentifier;
  typeParameters?: BabelNodeTypeParameterInstantiation;
}

declare class BabelNodeDeclareClass e***REMOVED***tends BabelNode {
  type: "DeclareClass";
  id: BabelNodeIdentifier;
  typeParameters?: BabelNodeTypeParameterDeclaration;
  body: BabelNodeObjectTypeAnnotation;
  mi***REMOVED***ins?: Array<BabelNodeInterfaceE***REMOVED***tends>;
}

declare class BabelNodeDeclareFunction e***REMOVED***tends BabelNode {
  type: "DeclareFunction";
  id: BabelNodeIdentifier;
  predicate?: BabelNodeDeclaredPredicate;
}

declare class BabelNodeDeclareInterface e***REMOVED***tends BabelNode {
  type: "DeclareInterface";
  id: BabelNodeIdentifier;
  typeParameters?: BabelNodeTypeParameterDeclaration;
  body: BabelNodeObjectTypeAnnotation;
}

declare class BabelNodeDeclareModule e***REMOVED***tends BabelNode {
  type: "DeclareModule";
  id: BabelNodeIdentifier | BabelNodeStringLiteral;
  body: BabelNodeBlockStatement;
  kind?: "CommonJS" | "ES";
}

declare class BabelNodeDeclareModuleE***REMOVED***ports e***REMOVED***tends BabelNode {
  type: "DeclareModuleE***REMOVED***ports";
  typeAnnotation: BabelNodeTypeAnnotation;
}

declare class BabelNodeDeclareTypeAlias e***REMOVED***tends BabelNode {
  type: "DeclareTypeAlias";
  id: BabelNodeIdentifier;
  typeParameters?: BabelNodeTypeParameterDeclaration;
  right: BabelNodeFlowType;
}

declare class BabelNodeDeclareOpaqueType e***REMOVED***tends BabelNode {
  type: "DeclareOpaqueType";
  id: BabelNodeIdentifier;
  typeParameters?: BabelNodeTypeParameterDeclaration;
  supertype?: BabelNodeFlowType;
  impltype?: BabelNodeFlowType;
}

declare class BabelNodeDeclareVariable e***REMOVED***tends BabelNode {
  type: "DeclareVariable";
  id: BabelNodeIdentifier;
}

declare class BabelNodeDeclareE***REMOVED***portDeclaration e***REMOVED***tends BabelNode {
  type: "DeclareE***REMOVED***portDeclaration";
  declaration?: BabelNodeFlow;
  specifiers?: Array<BabelNodeE***REMOVED***portSpecifier | BabelNodeE***REMOVED***portNamespaceSpecifier>;
  source?: BabelNodeStringLiteral;
  attributes?: Array<BabelNodeImportAttribute>;
  assertions?: Array<BabelNodeImportAttribute>;
}

declare class BabelNodeDeclareE***REMOVED***portAllDeclaration e***REMOVED***tends BabelNode {
  type: "DeclareE***REMOVED***portAllDeclaration";
  source: BabelNodeStringLiteral;
  attributes?: Array<BabelNodeImportAttribute>;
  assertions?: Array<BabelNodeImportAttribute>;
  e***REMOVED***portKind?: "type" | "value";
}

declare class BabelNodeDeclaredPredicate e***REMOVED***tends BabelNode {
  type: "DeclaredPredicate";
  value: BabelNodeFlow;
}

declare class BabelNodeE***REMOVED***istsTypeAnnotation e***REMOVED***tends BabelNode {
  type: "E***REMOVED***istsTypeAnnotation";
}

declare class BabelNodeFunctionTypeAnnotation e***REMOVED***tends BabelNode {
  type: "FunctionTypeAnnotation";
  typeParameters?: BabelNodeTypeParameterDeclaration;
  params: Array<BabelNodeFunctionTypeParam>;
  rest?: BabelNodeFunctionTypeParam;
  returnType: BabelNodeFlowType;
}

declare class BabelNodeFunctionTypeParam e***REMOVED***tends BabelNode {
  type: "FunctionTypeParam";
  name?: BabelNodeIdentifier;
  typeAnnotation: BabelNodeFlowType;
  optional?: boolean;
}

declare class BabelNodeGenericTypeAnnotation e***REMOVED***tends BabelNode {
  type: "GenericTypeAnnotation";
  id: BabelNodeIdentifier | BabelNodeQualifiedTypeIdentifier;
  typeParameters?: BabelNodeTypeParameterInstantiation;
}

declare class BabelNodeInferredPredicate e***REMOVED***tends BabelNode {
  type: "InferredPredicate";
}

declare class BabelNodeInterfaceE***REMOVED***tends e***REMOVED***tends BabelNode {
  type: "InterfaceE***REMOVED***tends";
  id: BabelNodeIdentifier | BabelNodeQualifiedTypeIdentifier;
  typeParameters?: BabelNodeTypeParameterInstantiation;
}

declare class BabelNodeInterfaceDeclaration e***REMOVED***tends BabelNode {
  type: "InterfaceDeclaration";
  id: BabelNodeIdentifier;
  typeParameters?: BabelNodeTypeParameterDeclaration;
  body: BabelNodeObjectTypeAnnotation;
}

declare class BabelNodeInterfaceTypeAnnotation e***REMOVED***tends BabelNode {
  type: "InterfaceTypeAnnotation";
  body: BabelNodeObjectTypeAnnotation;
}

declare class BabelNodeIntersectionTypeAnnotation e***REMOVED***tends BabelNode {
  type: "IntersectionTypeAnnotation";
  types: Array<BabelNodeFlowType>;
}

declare class BabelNodeMi***REMOVED***edTypeAnnotation e***REMOVED***tends BabelNode {
  type: "Mi***REMOVED***edTypeAnnotation";
}

declare class BabelNodeEmptyTypeAnnotation e***REMOVED***tends BabelNode {
  type: "EmptyTypeAnnotation";
}

declare class BabelNodeNullableTypeAnnotation e***REMOVED***tends BabelNode {
  type: "NullableTypeAnnotation";
  typeAnnotation: BabelNodeFlowType;
}

declare class BabelNodeNumberLiteralTypeAnnotation e***REMOVED***tends BabelNode {
  type: "NumberLiteralTypeAnnotation";
  value: number;
}

declare class BabelNodeNumberTypeAnnotation e***REMOVED***tends BabelNode {
  type: "NumberTypeAnnotation";
}

declare class BabelNodeObjectTypeAnnotation e***REMOVED***tends BabelNode {
  type: "ObjectTypeAnnotation";
  properties: Array<BabelNodeObjectTypeProperty | BabelNodeObjectTypeSpreadProperty>;
  inde***REMOVED***ers?: Array<BabelNodeObjectTypeInde***REMOVED***er>;
  callProperties?: Array<BabelNodeObjectTypeCallProperty>;
  internalSlots?: Array<BabelNodeObjectTypeInternalSlot>;
  e***REMOVED***act?: boolean;
  ine***REMOVED***act?: boolean;
}

declare class BabelNodeObjectTypeInternalSlot e***REMOVED***tends BabelNode {
  type: "ObjectTypeInternalSlot";
  id: BabelNodeIdentifier;
  value: BabelNodeFlowType;
  optional: boolean;
  method: boolean;
}

declare class BabelNodeObjectTypeCallProperty e***REMOVED***tends BabelNode {
  type: "ObjectTypeCallProperty";
  value: BabelNodeFlowType;
}

declare class BabelNodeObjectTypeInde***REMOVED***er e***REMOVED***tends BabelNode {
  type: "ObjectTypeInde***REMOVED***er";
  id?: BabelNodeIdentifier;
  key: BabelNodeFlowType;
  value: BabelNodeFlowType;
  variance?: BabelNodeVariance;
}

declare class BabelNodeObjectTypeProperty e***REMOVED***tends BabelNode {
  type: "ObjectTypeProperty";
  key: BabelNodeIdentifier | BabelNodeStringLiteral;
  value: BabelNodeFlowType;
  variance?: BabelNodeVariance;
  kind: "init" | "get" | "set";
  method: boolean;
  optional: boolean;
  proto: boolean;
}

declare class BabelNodeObjectTypeSpreadProperty e***REMOVED***tends BabelNode {
  type: "ObjectTypeSpreadProperty";
  argument: BabelNodeFlowType;
}

declare class BabelNodeOpaqueType e***REMOVED***tends BabelNode {
  type: "OpaqueType";
  id: BabelNodeIdentifier;
  typeParameters?: BabelNodeTypeParameterDeclaration;
  supertype?: BabelNodeFlowType;
  impltype: BabelNodeFlowType;
}

declare class BabelNodeQualifiedTypeIdentifier e***REMOVED***tends BabelNode {
  type: "QualifiedTypeIdentifier";
  id: BabelNodeIdentifier;
  qualification: BabelNodeIdentifier | BabelNodeQualifiedTypeIdentifier;
}

declare class BabelNodeStringLiteralTypeAnnotation e***REMOVED***tends BabelNode {
  type: "StringLiteralTypeAnnotation";
  value: string;
}

declare class BabelNodeStringTypeAnnotation e***REMOVED***tends BabelNode {
  type: "StringTypeAnnotation";
}

declare class BabelNodeSymbolTypeAnnotation e***REMOVED***tends BabelNode {
  type: "SymbolTypeAnnotation";
}

declare class BabelNodeThisTypeAnnotation e***REMOVED***tends BabelNode {
  type: "ThisTypeAnnotation";
}

declare class BabelNodeTupleTypeAnnotation e***REMOVED***tends BabelNode {
  type: "TupleTypeAnnotation";
  types: Array<BabelNodeFlowType>;
}

declare class BabelNodeTypeofTypeAnnotation e***REMOVED***tends BabelNode {
  type: "TypeofTypeAnnotation";
  argument: BabelNodeFlowType;
}

declare class BabelNodeTypeAlias e***REMOVED***tends BabelNode {
  type: "TypeAlias";
  id: BabelNodeIdentifier;
  typeParameters?: BabelNodeTypeParameterDeclaration;
  right: BabelNodeFlowType;
}

declare class BabelNodeTypeAnnotation e***REMOVED***tends BabelNode {
  type: "TypeAnnotation";
  typeAnnotation: BabelNodeFlowType;
}

declare class BabelNodeTypeCastE***REMOVED***pression e***REMOVED***tends BabelNode {
  type: "TypeCastE***REMOVED***pression";
  e***REMOVED***pression: BabelNodeE***REMOVED***pression;
  typeAnnotation: BabelNodeTypeAnnotation;
}

declare class BabelNodeTypeParameter e***REMOVED***tends BabelNode {
  type: "TypeParameter";
  bound?: BabelNodeTypeAnnotation;
  variance?: BabelNodeVariance;
  name: string;
}

declare class BabelNodeTypeParameterDeclaration e***REMOVED***tends BabelNode {
  type: "TypeParameterDeclaration";
  params: Array<BabelNodeTypeParameter>;
}

declare class BabelNodeTypeParameterInstantiation e***REMOVED***tends BabelNode {
  type: "TypeParameterInstantiation";
  params: Array<BabelNodeFlowType>;
}

declare class BabelNodeUnionTypeAnnotation e***REMOVED***tends BabelNode {
  type: "UnionTypeAnnotation";
  types: Array<BabelNodeFlowType>;
}

declare class BabelNodeVariance e***REMOVED***tends BabelNode {
  type: "Variance";
  kind: "minus" | "plus";
}

declare class BabelNodeVoidTypeAnnotation e***REMOVED***tends BabelNode {
  type: "VoidTypeAnnotation";
}

declare class BabelNodeEnumDeclaration e***REMOVED***tends BabelNode {
  type: "EnumDeclaration";
  id: BabelNodeIdentifier;
  body: BabelNodeEnumBooleanBody | BabelNodeEnumNumberBody | BabelNodeEnumStringBody | BabelNodeEnumSymbolBody;
}

declare class BabelNodeEnumBooleanBody e***REMOVED***tends BabelNode {
  type: "EnumBooleanBody";
  members: Array<BabelNodeEnumBooleanMember>;
  e***REMOVED***plicitType: boolean;
  hasUnknownMembers: boolean;
}

declare class BabelNodeEnumNumberBody e***REMOVED***tends BabelNode {
  type: "EnumNumberBody";
  members: Array<BabelNodeEnumNumberMember>;
  e***REMOVED***plicitType: boolean;
  hasUnknownMembers: boolean;
}

declare class BabelNodeEnumStringBody e***REMOVED***tends BabelNode {
  type: "EnumStringBody";
  members: Array<BabelNodeEnumStringMember | BabelNodeEnumDefaultedMember>;
  e***REMOVED***plicitType: boolean;
  hasUnknownMembers: boolean;
}

declare class BabelNodeEnumSymbolBody e***REMOVED***tends BabelNode {
  type: "EnumSymbolBody";
  members: Array<BabelNodeEnumDefaultedMember>;
  hasUnknownMembers: boolean;
}

declare class BabelNodeEnumBooleanMember e***REMOVED***tends BabelNode {
  type: "EnumBooleanMember";
  id: BabelNodeIdentifier;
  init: BabelNodeBooleanLiteral;
}

declare class BabelNodeEnumNumberMember e***REMOVED***tends BabelNode {
  type: "EnumNumberMember";
  id: BabelNodeIdentifier;
  init: BabelNodeNumericLiteral;
}

declare class BabelNodeEnumStringMember e***REMOVED***tends BabelNode {
  type: "EnumStringMember";
  id: BabelNodeIdentifier;
  init: BabelNodeStringLiteral;
}

declare class BabelNodeEnumDefaultedMember e***REMOVED***tends BabelNode {
  type: "EnumDefaultedMember";
  id: BabelNodeIdentifier;
}

declare class BabelNodeInde***REMOVED***edAccessType e***REMOVED***tends BabelNode {
  type: "Inde***REMOVED***edAccessType";
  objectType: BabelNodeFlowType;
  inde***REMOVED***Type: BabelNodeFlowType;
}

declare class BabelNodeOptionalInde***REMOVED***edAccessType e***REMOVED***tends BabelNode {
  type: "OptionalInde***REMOVED***edAccessType";
  objectType: BabelNodeFlowType;
  inde***REMOVED***Type: BabelNodeFlowType;
  optional: boolean;
}

declare class BabelNodeJSXAttribute e***REMOVED***tends BabelNode {
  type: "JSXAttribute";
  name: BabelNodeJSXIdentifier | BabelNodeJSXNamespacedName;
  value?: BabelNodeJSXElement | BabelNodeJSXFragment | BabelNodeStringLiteral | BabelNodeJSXE***REMOVED***pressionContainer;
}

declare class BabelNodeJSXClosingElement e***REMOVED***tends BabelNode {
  type: "JSXClosingElement";
  name: BabelNodeJSXIdentifier | BabelNodeJSXMemberE***REMOVED***pression | BabelNodeJSXNamespacedName;
}

declare class BabelNodeJSXElement e***REMOVED***tends BabelNode {
  type: "JSXElement";
  openingElement: BabelNodeJSXOpeningElement;
  closingElement?: BabelNodeJSXClosingElement;
  children: Array<BabelNodeJSXTe***REMOVED***t | BabelNodeJSXE***REMOVED***pressionContainer | BabelNodeJSXSpreadChild | BabelNodeJSXElement | BabelNodeJSXFragment>;
  selfClosing?: boolean;
}

declare class BabelNodeJSXEmptyE***REMOVED***pression e***REMOVED***tends BabelNode {
  type: "JSXEmptyE***REMOVED***pression";
}

declare class BabelNodeJSXE***REMOVED***pressionContainer e***REMOVED***tends BabelNode {
  type: "JSXE***REMOVED***pressionContainer";
  e***REMOVED***pression: BabelNodeE***REMOVED***pression | BabelNodeJSXEmptyE***REMOVED***pression;
}

declare class BabelNodeJSXSpreadChild e***REMOVED***tends BabelNode {
  type: "JSXSpreadChild";
  e***REMOVED***pression: BabelNodeE***REMOVED***pression;
}

declare class BabelNodeJSXIdentifier e***REMOVED***tends BabelNode {
  type: "JSXIdentifier";
  name: string;
}

declare class BabelNodeJSXMemberE***REMOVED***pression e***REMOVED***tends BabelNode {
  type: "JSXMemberE***REMOVED***pression";
  object: BabelNodeJSXMemberE***REMOVED***pression | BabelNodeJSXIdentifier;
  property: BabelNodeJSXIdentifier;
}

declare class BabelNodeJSXNamespacedName e***REMOVED***tends BabelNode {
  type: "JSXNamespacedName";
  namespace: BabelNodeJSXIdentifier;
  name: BabelNodeJSXIdentifier;
}

declare class BabelNodeJSXOpeningElement e***REMOVED***tends BabelNode {
  type: "JSXOpeningElement";
  name: BabelNodeJSXIdentifier | BabelNodeJSXMemberE***REMOVED***pression | BabelNodeJSXNamespacedName;
  attributes: Array<BabelNodeJSXAttribute | BabelNodeJSXSpreadAttribute>;
  selfClosing?: boolean;
  typeParameters?: BabelNodeTypeParameterInstantiation | BabelNodeTSTypeParameterInstantiation;
}

declare class BabelNodeJSXSpreadAttribute e***REMOVED***tends BabelNode {
  type: "JSXSpreadAttribute";
  argument: BabelNodeE***REMOVED***pression;
}

declare class BabelNodeJSXTe***REMOVED***t e***REMOVED***tends BabelNode {
  type: "JSXTe***REMOVED***t";
  value: string;
}

declare class BabelNodeJSXFragment e***REMOVED***tends BabelNode {
  type: "JSXFragment";
  openingFragment: BabelNodeJSXOpeningFragment;
  closingFragment: BabelNodeJSXClosingFragment;
  children: Array<BabelNodeJSXTe***REMOVED***t | BabelNodeJSXE***REMOVED***pressionContainer | BabelNodeJSXSpreadChild | BabelNodeJSXElement | BabelNodeJSXFragment>;
}

declare class BabelNodeJSXOpeningFragment e***REMOVED***tends BabelNode {
  type: "JSXOpeningFragment";
}

declare class BabelNodeJSXClosingFragment e***REMOVED***tends BabelNode {
  type: "JSXClosingFragment";
}

declare class BabelNodeNoop e***REMOVED***tends BabelNode {
  type: "Noop";
}

declare class BabelNodePlaceholder e***REMOVED***tends BabelNode {
  type: "Placeholder";
  e***REMOVED***pectedNode: "Identifier" | "StringLiteral" | "E***REMOVED***pression" | "Statement" | "Declaration" | "BlockStatement" | "ClassBody" | "Pattern";
  name: BabelNodeIdentifier;
  decorators?: Array<BabelNodeDecorator>;
  optional?: boolean;
  typeAnnotation?: BabelNodeTypeAnnotation | BabelNodeTSTypeAnnotation | BabelNodeNoop;
}

declare class BabelNodeV8IntrinsicIdentifier e***REMOVED***tends BabelNode {
  type: "V8IntrinsicIdentifier";
  name: string;
}

declare class BabelNodeArgumentPlaceholder e***REMOVED***tends BabelNode {
  type: "ArgumentPlaceholder";
}

declare class BabelNodeBindE***REMOVED***pression e***REMOVED***tends BabelNode {
  type: "BindE***REMOVED***pression";
  object: BabelNodeE***REMOVED***pression;
  callee: BabelNodeE***REMOVED***pression;
}

declare class BabelNodeImportAttribute e***REMOVED***tends BabelNode {
  type: "ImportAttribute";
  key: BabelNodeIdentifier | BabelNodeStringLiteral;
  value: BabelNodeStringLiteral;
}

declare class BabelNodeDecorator e***REMOVED***tends BabelNode {
  type: "Decorator";
  e***REMOVED***pression: BabelNodeE***REMOVED***pression;
}

declare class BabelNodeDoE***REMOVED***pression e***REMOVED***tends BabelNode {
  type: "DoE***REMOVED***pression";
  body: BabelNodeBlockStatement;
  async?: boolean;
}

declare class BabelNodeE***REMOVED***portDefaultSpecifier e***REMOVED***tends BabelNode {
  type: "E***REMOVED***portDefaultSpecifier";
  e***REMOVED***ported: BabelNodeIdentifier;
}

declare class BabelNodeRecordE***REMOVED***pression e***REMOVED***tends BabelNode {
  type: "RecordE***REMOVED***pression";
  properties: Array<BabelNodeObjectProperty | BabelNodeSpreadElement>;
}

declare class BabelNodeTupleE***REMOVED***pression e***REMOVED***tends BabelNode {
  type: "TupleE***REMOVED***pression";
  elements?: Array<BabelNodeE***REMOVED***pression | BabelNodeSpreadElement>;
}

declare class BabelNodeDecimalLiteral e***REMOVED***tends BabelNode {
  type: "DecimalLiteral";
  value: string;
}

declare class BabelNodeModuleE***REMOVED***pression e***REMOVED***tends BabelNode {
  type: "ModuleE***REMOVED***pression";
  body: BabelNodeProgram;
}

declare class BabelNodeTopicReference e***REMOVED***tends BabelNode {
  type: "TopicReference";
}

declare class BabelNodePipelineTopicE***REMOVED***pression e***REMOVED***tends BabelNode {
  type: "PipelineTopicE***REMOVED***pression";
  e***REMOVED***pression: BabelNodeE***REMOVED***pression;
}

declare class BabelNodePipelineBareFunction e***REMOVED***tends BabelNode {
  type: "PipelineBareFunction";
  callee: BabelNodeE***REMOVED***pression;
}

declare class BabelNodePipelinePrimaryTopicReference e***REMOVED***tends BabelNode {
  type: "PipelinePrimaryTopicReference";
}

declare class BabelNodeTSParameterProperty e***REMOVED***tends BabelNode {
  type: "TSParameterProperty";
  parameter: BabelNodeIdentifier | BabelNodeAssignmentPattern;
  accessibility?: "public" | "private" | "protected";
  decorators?: Array<BabelNodeDecorator>;
  override?: boolean;
  readonly?: boolean;
}

declare class BabelNodeTSDeclareFunction e***REMOVED***tends BabelNode {
  type: "TSDeclareFunction";
  id?: BabelNodeIdentifier;
  typeParameters?: BabelNodeTSTypeParameterDeclaration | BabelNodeNoop;
  params: Array<BabelNodeIdentifier | BabelNodePattern | BabelNodeRestElement>;
  returnType?: BabelNodeTSTypeAnnotation | BabelNodeNoop;
  async?: boolean;
  declare?: boolean;
  generator?: boolean;
}

declare class BabelNodeTSDeclareMethod e***REMOVED***tends BabelNode {
  type: "TSDeclareMethod";
  decorators?: Array<BabelNodeDecorator>;
  key: BabelNodeIdentifier | BabelNodeStringLiteral | BabelNodeNumericLiteral | BabelNodeBigIntLiteral | BabelNodeE***REMOVED***pression;
  typeParameters?: BabelNodeTSTypeParameterDeclaration | BabelNodeNoop;
  params: Array<BabelNodeIdentifier | BabelNodePattern | BabelNodeRestElement | BabelNodeTSParameterProperty>;
  returnType?: BabelNodeTSTypeAnnotation | BabelNodeNoop;
  abstract?: boolean;
  access?: "public" | "private" | "protected";
  accessibility?: "public" | "private" | "protected";
  async?: boolean;
  computed?: boolean;
  generator?: boolean;
  kind?: "get" | "set" | "method" | "constructor";
  optional?: boolean;
  override?: boolean;
}

declare class BabelNodeTSQualifiedName e***REMOVED***tends BabelNode {
  type: "TSQualifiedName";
  left: BabelNodeTSEntityName;
  right: BabelNodeIdentifier;
}

declare class BabelNodeTSCallSignatureDeclaration e***REMOVED***tends BabelNode {
  type: "TSCallSignatureDeclaration";
  typeParameters?: BabelNodeTSTypeParameterDeclaration;
  parameters: Array<BabelNodeArrayPattern | BabelNodeIdentifier | BabelNodeObjectPattern | BabelNodeRestElement>;
  typeAnnotation?: BabelNodeTSTypeAnnotation;
}

declare class BabelNodeTSConstructSignatureDeclaration e***REMOVED***tends BabelNode {
  type: "TSConstructSignatureDeclaration";
  typeParameters?: BabelNodeTSTypeParameterDeclaration;
  parameters: Array<BabelNodeArrayPattern | BabelNodeIdentifier | BabelNodeObjectPattern | BabelNodeRestElement>;
  typeAnnotation?: BabelNodeTSTypeAnnotation;
}

declare class BabelNodeTSPropertySignature e***REMOVED***tends BabelNode {
  type: "TSPropertySignature";
  key: BabelNodeE***REMOVED***pression;
  typeAnnotation?: BabelNodeTSTypeAnnotation;
  computed?: boolean;
  kind: "get" | "set";
  optional?: boolean;
  readonly?: boolean;
}

declare class BabelNodeTSMethodSignature e***REMOVED***tends BabelNode {
  type: "TSMethodSignature";
  key: BabelNodeE***REMOVED***pression;
  typeParameters?: BabelNodeTSTypeParameterDeclaration;
  parameters: Array<BabelNodeArrayPattern | BabelNodeIdentifier | BabelNodeObjectPattern | BabelNodeRestElement>;
  typeAnnotation?: BabelNodeTSTypeAnnotation;
  computed?: boolean;
  kind: "method" | "get" | "set";
  optional?: boolean;
}

declare class BabelNodeTSInde***REMOVED***Signature e***REMOVED***tends BabelNode {
  type: "TSInde***REMOVED***Signature";
  parameters: Array<BabelNodeIdentifier>;
  typeAnnotation?: BabelNodeTSTypeAnnotation;
  readonly?: boolean;
}

declare class BabelNodeTSAnyKeyword e***REMOVED***tends BabelNode {
  type: "TSAnyKeyword";
}

declare class BabelNodeTSBooleanKeyword e***REMOVED***tends BabelNode {
  type: "TSBooleanKeyword";
}

declare class BabelNodeTSBigIntKeyword e***REMOVED***tends BabelNode {
  type: "TSBigIntKeyword";
}

declare class BabelNodeTSIntrinsicKeyword e***REMOVED***tends BabelNode {
  type: "TSIntrinsicKeyword";
}

declare class BabelNodeTSNeverKeyword e***REMOVED***tends BabelNode {
  type: "TSNeverKeyword";
}

declare class BabelNodeTSNullKeyword e***REMOVED***tends BabelNode {
  type: "TSNullKeyword";
}

declare class BabelNodeTSNumberKeyword e***REMOVED***tends BabelNode {
  type: "TSNumberKeyword";
}

declare class BabelNodeTSObjectKeyword e***REMOVED***tends BabelNode {
  type: "TSObjectKeyword";
}

declare class BabelNodeTSStringKeyword e***REMOVED***tends BabelNode {
  type: "TSStringKeyword";
}

declare class BabelNodeTSSymbolKeyword e***REMOVED***tends BabelNode {
  type: "TSSymbolKeyword";
}

declare class BabelNodeTSUndefinedKeyword e***REMOVED***tends BabelNode {
  type: "TSUndefinedKeyword";
}

declare class BabelNodeTSUnknownKeyword e***REMOVED***tends BabelNode {
  type: "TSUnknownKeyword";
}

declare class BabelNodeTSVoidKeyword e***REMOVED***tends BabelNode {
  type: "TSVoidKeyword";
}

declare class BabelNodeTSThisType e***REMOVED***tends BabelNode {
  type: "TSThisType";
}

declare class BabelNodeTSFunctionType e***REMOVED***tends BabelNode {
  type: "TSFunctionType";
  typeParameters?: BabelNodeTSTypeParameterDeclaration;
  parameters: Array<BabelNodeArrayPattern | BabelNodeIdentifier | BabelNodeObjectPattern | BabelNodeRestElement>;
  typeAnnotation?: BabelNodeTSTypeAnnotation;
}

declare class BabelNodeTSConstructorType e***REMOVED***tends BabelNode {
  type: "TSConstructorType";
  typeParameters?: BabelNodeTSTypeParameterDeclaration;
  parameters: Array<BabelNodeArrayPattern | BabelNodeIdentifier | BabelNodeObjectPattern | BabelNodeRestElement>;
  typeAnnotation?: BabelNodeTSTypeAnnotation;
  abstract?: boolean;
}

declare class BabelNodeTSTypeReference e***REMOVED***tends BabelNode {
  type: "TSTypeReference";
  typeName: BabelNodeTSEntityName;
  typeParameters?: BabelNodeTSTypeParameterInstantiation;
}

declare class BabelNodeTSTypePredicate e***REMOVED***tends BabelNode {
  type: "TSTypePredicate";
  parameterName: BabelNodeIdentifier | BabelNodeTSThisType;
  typeAnnotation?: BabelNodeTSTypeAnnotation;
  asserts?: boolean;
}

declare class BabelNodeTSTypeQuery e***REMOVED***tends BabelNode {
  type: "TSTypeQuery";
  e***REMOVED***prName: BabelNodeTSEntityName | BabelNodeTSImportType;
  typeParameters?: BabelNodeTSTypeParameterInstantiation;
}

declare class BabelNodeTSTypeLiteral e***REMOVED***tends BabelNode {
  type: "TSTypeLiteral";
  members: Array<BabelNodeTSTypeElement>;
}

declare class BabelNodeTSArrayType e***REMOVED***tends BabelNode {
  type: "TSArrayType";
  elementType: BabelNodeTSType;
}

declare class BabelNodeTSTupleType e***REMOVED***tends BabelNode {
  type: "TSTupleType";
  elementTypes: Array<BabelNodeTSType | BabelNodeTSNamedTupleMember>;
}

declare class BabelNodeTSOptionalType e***REMOVED***tends BabelNode {
  type: "TSOptionalType";
  typeAnnotation: BabelNodeTSType;
}

declare class BabelNodeTSRestType e***REMOVED***tends BabelNode {
  type: "TSRestType";
  typeAnnotation: BabelNodeTSType;
}

declare class BabelNodeTSNamedTupleMember e***REMOVED***tends BabelNode {
  type: "TSNamedTupleMember";
  label: BabelNodeIdentifier;
  elementType: BabelNodeTSType;
  optional?: boolean;
}

declare class BabelNodeTSUnionType e***REMOVED***tends BabelNode {
  type: "TSUnionType";
  types: Array<BabelNodeTSType>;
}

declare class BabelNodeTSIntersectionType e***REMOVED***tends BabelNode {
  type: "TSIntersectionType";
  types: Array<BabelNodeTSType>;
}

declare class BabelNodeTSConditionalType e***REMOVED***tends BabelNode {
  type: "TSConditionalType";
  checkType: BabelNodeTSType;
  e***REMOVED***tendsType: BabelNodeTSType;
  trueType: BabelNodeTSType;
  falseType: BabelNodeTSType;
}

declare class BabelNodeTSInferType e***REMOVED***tends BabelNode {
  type: "TSInferType";
  typeParameter: BabelNodeTSTypeParameter;
}

declare class BabelNodeTSParenthesizedType e***REMOVED***tends BabelNode {
  type: "TSParenthesizedType";
  typeAnnotation: BabelNodeTSType;
}

declare class BabelNodeTSTypeOperator e***REMOVED***tends BabelNode {
  type: "TSTypeOperator";
  typeAnnotation: BabelNodeTSType;
  operator: string;
}

declare class BabelNodeTSInde***REMOVED***edAccessType e***REMOVED***tends BabelNode {
  type: "TSInde***REMOVED***edAccessType";
  objectType: BabelNodeTSType;
  inde***REMOVED***Type: BabelNodeTSType;
}

declare class BabelNodeTSMappedType e***REMOVED***tends BabelNode {
  type: "TSMappedType";
  typeParameter: BabelNodeTSTypeParameter;
  typeAnnotation?: BabelNodeTSType;
  nameType?: BabelNodeTSType;
  optional?: true | false | "+" | "-";
  readonly?: true | false | "+" | "-";
}

declare class BabelNodeTSLiteralType e***REMOVED***tends BabelNode {
  type: "TSLiteralType";
  literal: BabelNodeNumericLiteral | BabelNodeStringLiteral | BabelNodeBooleanLiteral | BabelNodeBigIntLiteral | BabelNodeTemplateLiteral | BabelNodeUnaryE***REMOVED***pression;
}

declare class BabelNodeTSE***REMOVED***pressionWithTypeArguments e***REMOVED***tends BabelNode {
  type: "TSE***REMOVED***pressionWithTypeArguments";
  e***REMOVED***pression: BabelNodeTSEntityName;
  typeParameters?: BabelNodeTSTypeParameterInstantiation;
}

declare class BabelNodeTSInterfaceDeclaration e***REMOVED***tends BabelNode {
  type: "TSInterfaceDeclaration";
  id: BabelNodeIdentifier;
  typeParameters?: BabelNodeTSTypeParameterDeclaration;
  body: BabelNodeTSInterfaceBody;
  declare?: boolean;
}

declare class BabelNodeTSInterfaceBody e***REMOVED***tends BabelNode {
  type: "TSInterfaceBody";
  body: Array<BabelNodeTSTypeElement>;
}

declare class BabelNodeTSTypeAliasDeclaration e***REMOVED***tends BabelNode {
  type: "TSTypeAliasDeclaration";
  id: BabelNodeIdentifier;
  typeParameters?: BabelNodeTSTypeParameterDeclaration;
  typeAnnotation: BabelNodeTSType;
  declare?: boolean;
}

declare class BabelNodeTSInstantiationE***REMOVED***pression e***REMOVED***tends BabelNode {
  type: "TSInstantiationE***REMOVED***pression";
  e***REMOVED***pression: BabelNodeE***REMOVED***pression;
  typeParameters?: BabelNodeTSTypeParameterInstantiation;
}

declare class BabelNodeTSAsE***REMOVED***pression e***REMOVED***tends BabelNode {
  type: "TSAsE***REMOVED***pression";
  e***REMOVED***pression: BabelNodeE***REMOVED***pression;
  typeAnnotation: BabelNodeTSType;
}

declare class BabelNodeTSSatisfiesE***REMOVED***pression e***REMOVED***tends BabelNode {
  type: "TSSatisfiesE***REMOVED***pression";
  e***REMOVED***pression: BabelNodeE***REMOVED***pression;
  typeAnnotation: BabelNodeTSType;
}

declare class BabelNodeTSTypeAssertion e***REMOVED***tends BabelNode {
  type: "TSTypeAssertion";
  typeAnnotation: BabelNodeTSType;
  e***REMOVED***pression: BabelNodeE***REMOVED***pression;
}

declare class BabelNodeTSEnumDeclaration e***REMOVED***tends BabelNode {
  type: "TSEnumDeclaration";
  id: BabelNodeIdentifier;
  members: Array<BabelNodeTSEnumMember>;
  declare?: boolean;
  initializer?: BabelNodeE***REMOVED***pression;
}

declare class BabelNodeTSEnumMember e***REMOVED***tends BabelNode {
  type: "TSEnumMember";
  id: BabelNodeIdentifier | BabelNodeStringLiteral;
  initializer?: BabelNodeE***REMOVED***pression;
}

declare class BabelNodeTSModuleDeclaration e***REMOVED***tends BabelNode {
  type: "TSModuleDeclaration";
  id: BabelNodeIdentifier | BabelNodeStringLiteral;
  body: BabelNodeTSModuleBlock | BabelNodeTSModuleDeclaration;
  declare?: boolean;
  global?: boolean;
  kind: "global" | "module" | "namespace";
}

declare class BabelNodeTSModuleBlock e***REMOVED***tends BabelNode {
  type: "TSModuleBlock";
  body: Array<BabelNodeStatement>;
}

declare class BabelNodeTSImportType e***REMOVED***tends BabelNode {
  type: "TSImportType";
  argument: BabelNodeStringLiteral;
  qualifier?: BabelNodeTSEntityName;
  typeParameters?: BabelNodeTSTypeParameterInstantiation;
  options?: BabelNodeE***REMOVED***pression;
}

declare class BabelNodeTSImportEqualsDeclaration e***REMOVED***tends BabelNode {
  type: "TSImportEqualsDeclaration";
  id: BabelNodeIdentifier;
  moduleReference: BabelNodeTSEntityName | BabelNodeTSE***REMOVED***ternalModuleReference;
  importKind?: "type" | "value";
  isE***REMOVED***port: boolean;
}

declare class BabelNodeTSE***REMOVED***ternalModuleReference e***REMOVED***tends BabelNode {
  type: "TSE***REMOVED***ternalModuleReference";
  e***REMOVED***pression: BabelNodeStringLiteral;
}

declare class BabelNodeTSNonNullE***REMOVED***pression e***REMOVED***tends BabelNode {
  type: "TSNonNullE***REMOVED***pression";
  e***REMOVED***pression: BabelNodeE***REMOVED***pression;
}

declare class BabelNodeTSE***REMOVED***portAssignment e***REMOVED***tends BabelNode {
  type: "TSE***REMOVED***portAssignment";
  e***REMOVED***pression: BabelNodeE***REMOVED***pression;
}

declare class BabelNodeTSNamespaceE***REMOVED***portDeclaration e***REMOVED***tends BabelNode {
  type: "TSNamespaceE***REMOVED***portDeclaration";
  id: BabelNodeIdentifier;
}

declare class BabelNodeTSTypeAnnotation e***REMOVED***tends BabelNode {
  type: "TSTypeAnnotation";
  typeAnnotation: BabelNodeTSType;
}

declare class BabelNodeTSTypeParameterInstantiation e***REMOVED***tends BabelNode {
  type: "TSTypeParameterInstantiation";
  params: Array<BabelNodeTSType>;
}

declare class BabelNodeTSTypeParameterDeclaration e***REMOVED***tends BabelNode {
  type: "TSTypeParameterDeclaration";
  params: Array<BabelNodeTSTypeParameter>;
}

declare class BabelNodeTSTypeParameter e***REMOVED***tends BabelNode {
  type: "TSTypeParameter";
  constraint?: BabelNodeTSType;
  name: string;
  out?: boolean;
}

type BabelNodeStandardized = BabelNodeArrayE***REMOVED***pression | BabelNodeAssignmentE***REMOVED***pression | BabelNodeBinaryE***REMOVED***pression | BabelNodeInterpreterDirective | BabelNodeDirective | BabelNodeDirectiveLiteral | BabelNodeBlockStatement | BabelNodeBreakStatement | BabelNodeCallE***REMOVED***pression | BabelNodeCatchClause | BabelNodeConditionalE***REMOVED***pression | BabelNodeContinueStatement | BabelNodeDebuggerStatement | BabelNodeDoWhileStatement | BabelNodeEmptyStatement | BabelNodeE***REMOVED***pressionStatement | BabelNodeFile | BabelNodeForInStatement | BabelNodeForStatement | BabelNodeFunctionDeclaration | BabelNodeFunctionE***REMOVED***pression | BabelNodeIdentifier | BabelNodeIfStatement | BabelNodeLabeledStatement | BabelNodeStringLiteral | BabelNodeNumericLiteral | BabelNodeNullLiteral | BabelNodeBooleanLiteral | BabelNodeRegE***REMOVED***pLiteral | BabelNodeLogicalE***REMOVED***pression | BabelNodeMemberE***REMOVED***pression | BabelNodeNewE***REMOVED***pression | BabelNodeProgram | BabelNodeObjectE***REMOVED***pression | BabelNodeObjectMethod | BabelNodeObjectProperty | BabelNodeRestElement | BabelNodeReturnStatement | BabelNodeSequenceE***REMOVED***pression | BabelNodeParenthesizedE***REMOVED***pression | BabelNodeSwitchCase | BabelNodeSwitchStatement | BabelNodeThisE***REMOVED***pression | BabelNodeThrowStatement | BabelNodeTryStatement | BabelNodeUnaryE***REMOVED***pression | BabelNodeUpdateE***REMOVED***pression | BabelNodeVariableDeclaration | BabelNodeVariableDeclarator | BabelNodeWhileStatement | BabelNodeWithStatement | BabelNodeAssignmentPattern | BabelNodeArrayPattern | BabelNodeArrowFunctionE***REMOVED***pression | BabelNodeClassBody | BabelNodeClassE***REMOVED***pression | BabelNodeClassDeclaration | BabelNodeE***REMOVED***portAllDeclaration | BabelNodeE***REMOVED***portDefaultDeclaration | BabelNodeE***REMOVED***portNamedDeclaration | BabelNodeE***REMOVED***portSpecifier | BabelNodeForOfStatement | BabelNodeImportDeclaration | BabelNodeImportDefaultSpecifier | BabelNodeImportNamespaceSpecifier | BabelNodeImportSpecifier | BabelNodeImportE***REMOVED***pression | BabelNodeMetaProperty | BabelNodeClassMethod | BabelNodeObjectPattern | BabelNodeSpreadElement | BabelNodeSuper | BabelNodeTaggedTemplateE***REMOVED***pression | BabelNodeTemplateElement | BabelNodeTemplateLiteral | BabelNodeYieldE***REMOVED***pression | BabelNodeAwaitE***REMOVED***pression | BabelNodeImport | BabelNodeBigIntLiteral | BabelNodeE***REMOVED***portNamespaceSpecifier | BabelNodeOptionalMemberE***REMOVED***pression | BabelNodeOptionalCallE***REMOVED***pression | BabelNodeClassProperty | BabelNodeClassAccessorProperty | BabelNodeClassPrivateProperty | BabelNodeClassPrivateMethod | BabelNodePrivateName | BabelNodeStaticBlock;
type BabelNodeE***REMOVED***pression = BabelNodeArrayE***REMOVED***pression | BabelNodeAssignmentE***REMOVED***pression | BabelNodeBinaryE***REMOVED***pression | BabelNodeCallE***REMOVED***pression | BabelNodeConditionalE***REMOVED***pression | BabelNodeFunctionE***REMOVED***pression | BabelNodeIdentifier | BabelNodeStringLiteral | BabelNodeNumericLiteral | BabelNodeNullLiteral | BabelNodeBooleanLiteral | BabelNodeRegE***REMOVED***pLiteral | BabelNodeLogicalE***REMOVED***pression | BabelNodeMemberE***REMOVED***pression | BabelNodeNewE***REMOVED***pression | BabelNodeObjectE***REMOVED***pression | BabelNodeSequenceE***REMOVED***pression | BabelNodeParenthesizedE***REMOVED***pression | BabelNodeThisE***REMOVED***pression | BabelNodeUnaryE***REMOVED***pression | BabelNodeUpdateE***REMOVED***pression | BabelNodeArrowFunctionE***REMOVED***pression | BabelNodeClassE***REMOVED***pression | BabelNodeImportE***REMOVED***pression | BabelNodeMetaProperty | BabelNodeSuper | BabelNodeTaggedTemplateE***REMOVED***pression | BabelNodeTemplateLiteral | BabelNodeYieldE***REMOVED***pression | BabelNodeAwaitE***REMOVED***pression | BabelNodeImport | BabelNodeBigIntLiteral | BabelNodeOptionalMemberE***REMOVED***pression | BabelNodeOptionalCallE***REMOVED***pression | BabelNodeTypeCastE***REMOVED***pression | BabelNodeJSXElement | BabelNodeJSXFragment | BabelNodeBindE***REMOVED***pression | BabelNodeDoE***REMOVED***pression | BabelNodeRecordE***REMOVED***pression | BabelNodeTupleE***REMOVED***pression | BabelNodeDecimalLiteral | BabelNodeModuleE***REMOVED***pression | BabelNodeTopicReference | BabelNodePipelineTopicE***REMOVED***pression | BabelNodePipelineBareFunction | BabelNodePipelinePrimaryTopicReference | BabelNodeTSInstantiationE***REMOVED***pression | BabelNodeTSAsE***REMOVED***pression | BabelNodeTSSatisfiesE***REMOVED***pression | BabelNodeTSTypeAssertion | BabelNodeTSNonNullE***REMOVED***pression;
type BabelNodeBinary = BabelNodeBinaryE***REMOVED***pression | BabelNodeLogicalE***REMOVED***pression;
type BabelNodeScopable = BabelNodeBlockStatement | BabelNodeCatchClause | BabelNodeDoWhileStatement | BabelNodeForInStatement | BabelNodeForStatement | BabelNodeFunctionDeclaration | BabelNodeFunctionE***REMOVED***pression | BabelNodeProgram | BabelNodeObjectMethod | BabelNodeSwitchStatement | BabelNodeWhileStatement | BabelNodeArrowFunctionE***REMOVED***pression | BabelNodeClassE***REMOVED***pression | BabelNodeClassDeclaration | BabelNodeForOfStatement | BabelNodeClassMethod | BabelNodeClassPrivateMethod | BabelNodeStaticBlock | BabelNodeTSModuleBlock;
type BabelNodeBlockParent = BabelNodeBlockStatement | BabelNodeCatchClause | BabelNodeDoWhileStatement | BabelNodeForInStatement | BabelNodeForStatement | BabelNodeFunctionDeclaration | BabelNodeFunctionE***REMOVED***pression | BabelNodeProgram | BabelNodeObjectMethod | BabelNodeSwitchStatement | BabelNodeWhileStatement | BabelNodeArrowFunctionE***REMOVED***pression | BabelNodeForOfStatement | BabelNodeClassMethod | BabelNodeClassPrivateMethod | BabelNodeStaticBlock | BabelNodeTSModuleBlock;
type BabelNodeBlock = BabelNodeBlockStatement | BabelNodeProgram | BabelNodeTSModuleBlock;
type BabelNodeStatement = BabelNodeBlockStatement | BabelNodeBreakStatement | BabelNodeContinueStatement | BabelNodeDebuggerStatement | BabelNodeDoWhileStatement | BabelNodeEmptyStatement | BabelNodeE***REMOVED***pressionStatement | BabelNodeForInStatement | BabelNodeForStatement | BabelNodeFunctionDeclaration | BabelNodeIfStatement | BabelNodeLabeledStatement | BabelNodeReturnStatement | BabelNodeSwitchStatement | BabelNodeThrowStatement | BabelNodeTryStatement | BabelNodeVariableDeclaration | BabelNodeWhileStatement | BabelNodeWithStatement | BabelNodeClassDeclaration | BabelNodeE***REMOVED***portAllDeclaration | BabelNodeE***REMOVED***portDefaultDeclaration | BabelNodeE***REMOVED***portNamedDeclaration | BabelNodeForOfStatement | BabelNodeImportDeclaration | BabelNodeDeclareClass | BabelNodeDeclareFunction | BabelNodeDeclareInterface | BabelNodeDeclareModule | BabelNodeDeclareModuleE***REMOVED***ports | BabelNodeDeclareTypeAlias | BabelNodeDeclareOpaqueType | BabelNodeDeclareVariable | BabelNodeDeclareE***REMOVED***portDeclaration | BabelNodeDeclareE***REMOVED***portAllDeclaration | BabelNodeInterfaceDeclaration | BabelNodeOpaqueType | BabelNodeTypeAlias | BabelNodeEnumDeclaration | BabelNodeTSDeclareFunction | BabelNodeTSInterfaceDeclaration | BabelNodeTSTypeAliasDeclaration | BabelNodeTSEnumDeclaration | BabelNodeTSModuleDeclaration | BabelNodeTSImportEqualsDeclaration | BabelNodeTSE***REMOVED***portAssignment | BabelNodeTSNamespaceE***REMOVED***portDeclaration;
type BabelNodeTerminatorless = BabelNodeBreakStatement | BabelNodeContinueStatement | BabelNodeReturnStatement | BabelNodeThrowStatement | BabelNodeYieldE***REMOVED***pression | BabelNodeAwaitE***REMOVED***pression;
type BabelNodeCompletionStatement = BabelNodeBreakStatement | BabelNodeContinueStatement | BabelNodeReturnStatement | BabelNodeThrowStatement;
type BabelNodeConditional = BabelNodeConditionalE***REMOVED***pression | BabelNodeIfStatement;
type BabelNodeLoop = BabelNodeDoWhileStatement | BabelNodeForInStatement | BabelNodeForStatement | BabelNodeWhileStatement | BabelNodeForOfStatement;
type BabelNodeWhile = BabelNodeDoWhileStatement | BabelNodeWhileStatement;
type BabelNodeE***REMOVED***pressionWrapper = BabelNodeE***REMOVED***pressionStatement | BabelNodeParenthesizedE***REMOVED***pression | BabelNodeTypeCastE***REMOVED***pression;
type BabelNodeFor = BabelNodeForInStatement | BabelNodeForStatement | BabelNodeForOfStatement;
type BabelNodeForXStatement = BabelNodeForInStatement | BabelNodeForOfStatement;
type BabelNodeFunction = BabelNodeFunctionDeclaration | BabelNodeFunctionE***REMOVED***pression | BabelNodeObjectMethod | BabelNodeArrowFunctionE***REMOVED***pression | BabelNodeClassMethod | BabelNodeClassPrivateMethod;
type BabelNodeFunctionParent = BabelNodeFunctionDeclaration | BabelNodeFunctionE***REMOVED***pression | BabelNodeObjectMethod | BabelNodeArrowFunctionE***REMOVED***pression | BabelNodeClassMethod | BabelNodeClassPrivateMethod | BabelNodeStaticBlock | BabelNodeTSModuleBlock;
type BabelNodePureish = BabelNodeFunctionDeclaration | BabelNodeFunctionE***REMOVED***pression | BabelNodeStringLiteral | BabelNodeNumericLiteral | BabelNodeNullLiteral | BabelNodeBooleanLiteral | BabelNodeRegE***REMOVED***pLiteral | BabelNodeArrowFunctionE***REMOVED***pression | BabelNodeBigIntLiteral | BabelNodeDecimalLiteral;
type BabelNodeDeclaration = BabelNodeFunctionDeclaration | BabelNodeVariableDeclaration | BabelNodeClassDeclaration | BabelNodeE***REMOVED***portAllDeclaration | BabelNodeE***REMOVED***portDefaultDeclaration | BabelNodeE***REMOVED***portNamedDeclaration | BabelNodeImportDeclaration | BabelNodeDeclareClass | BabelNodeDeclareFunction | BabelNodeDeclareInterface | BabelNodeDeclareModule | BabelNodeDeclareModuleE***REMOVED***ports | BabelNodeDeclareTypeAlias | BabelNodeDeclareOpaqueType | BabelNodeDeclareVariable | BabelNodeDeclareE***REMOVED***portDeclaration | BabelNodeDeclareE***REMOVED***portAllDeclaration | BabelNodeInterfaceDeclaration | BabelNodeOpaqueType | BabelNodeTypeAlias | BabelNodeEnumDeclaration | BabelNodeTSDeclareFunction | BabelNodeTSInterfaceDeclaration | BabelNodeTSTypeAliasDeclaration | BabelNodeTSEnumDeclaration | BabelNodeTSModuleDeclaration;
type BabelNodePatternLike = BabelNodeIdentifier | BabelNodeRestElement | BabelNodeAssignmentPattern | BabelNodeArrayPattern | BabelNodeObjectPattern | BabelNodeTSAsE***REMOVED***pression | BabelNodeTSSatisfiesE***REMOVED***pression | BabelNodeTSTypeAssertion | BabelNodeTSNonNullE***REMOVED***pression;
type BabelNodeLVal = BabelNodeIdentifier | BabelNodeMemberE***REMOVED***pression | BabelNodeRestElement | BabelNodeAssignmentPattern | BabelNodeArrayPattern | BabelNodeObjectPattern | BabelNodeTSParameterProperty | BabelNodeTSAsE***REMOVED***pression | BabelNodeTSSatisfiesE***REMOVED***pression | BabelNodeTSTypeAssertion | BabelNodeTSNonNullE***REMOVED***pression;
type BabelNodeTSEntityName = BabelNodeIdentifier | BabelNodeTSQualifiedName;
type BabelNodeLiteral = BabelNodeStringLiteral | BabelNodeNumericLiteral | BabelNodeNullLiteral | BabelNodeBooleanLiteral | BabelNodeRegE***REMOVED***pLiteral | BabelNodeTemplateLiteral | BabelNodeBigIntLiteral | BabelNodeDecimalLiteral;
type BabelNodeImmutable = BabelNodeStringLiteral | BabelNodeNumericLiteral | BabelNodeNullLiteral | BabelNodeBooleanLiteral | BabelNodeBigIntLiteral | BabelNodeJSXAttribute | BabelNodeJSXClosingElement | BabelNodeJSXElement | BabelNodeJSXE***REMOVED***pressionContainer | BabelNodeJSXSpreadChild | BabelNodeJSXOpeningElement | BabelNodeJSXTe***REMOVED***t | BabelNodeJSXFragment | BabelNodeJSXOpeningFragment | BabelNodeJSXClosingFragment | BabelNodeDecimalLiteral;
type BabelNodeUserWhitespacable = BabelNodeObjectMethod | BabelNodeObjectProperty | BabelNodeObjectTypeInternalSlot | BabelNodeObjectTypeCallProperty | BabelNodeObjectTypeInde***REMOVED***er | BabelNodeObjectTypeProperty | BabelNodeObjectTypeSpreadProperty;
type BabelNodeMethod = BabelNodeObjectMethod | BabelNodeClassMethod | BabelNodeClassPrivateMethod;
type BabelNodeObjectMember = BabelNodeObjectMethod | BabelNodeObjectProperty;
type BabelNodeProperty = BabelNodeObjectProperty | BabelNodeClassProperty | BabelNodeClassAccessorProperty | BabelNodeClassPrivateProperty;
type BabelNodeUnaryLike = BabelNodeUnaryE***REMOVED***pression | BabelNodeSpreadElement;
type BabelNodePattern = BabelNodeAssignmentPattern | BabelNodeArrayPattern | BabelNodeObjectPattern;
type BabelNodeClass = BabelNodeClassE***REMOVED***pression | BabelNodeClassDeclaration;
type BabelNodeImportOrE***REMOVED***portDeclaration = BabelNodeE***REMOVED***portAllDeclaration | BabelNodeE***REMOVED***portDefaultDeclaration | BabelNodeE***REMOVED***portNamedDeclaration | BabelNodeImportDeclaration;
type BabelNodeE***REMOVED***portDeclaration = BabelNodeE***REMOVED***portAllDeclaration | BabelNodeE***REMOVED***portDefaultDeclaration | BabelNodeE***REMOVED***portNamedDeclaration;
type BabelNodeModuleSpecifier = BabelNodeE***REMOVED***portSpecifier | BabelNodeImportDefaultSpecifier | BabelNodeImportNamespaceSpecifier | BabelNodeImportSpecifier | BabelNodeE***REMOVED***portNamespaceSpecifier | BabelNodeE***REMOVED***portDefaultSpecifier;
type BabelNodeAccessor = BabelNodeClassAccessorProperty;
type BabelNodePrivate = BabelNodeClassPrivateProperty | BabelNodeClassPrivateMethod | BabelNodePrivateName;
type BabelNodeFlow = BabelNodeAnyTypeAnnotation | BabelNodeArrayTypeAnnotation | BabelNodeBooleanTypeAnnotation | BabelNodeBooleanLiteralTypeAnnotation | BabelNodeNullLiteralTypeAnnotation | BabelNodeClassImplements | BabelNodeDeclareClass | BabelNodeDeclareFunction | BabelNodeDeclareInterface | BabelNodeDeclareModule | BabelNodeDeclareModuleE***REMOVED***ports | BabelNodeDeclareTypeAlias | BabelNodeDeclareOpaqueType | BabelNodeDeclareVariable | BabelNodeDeclareE***REMOVED***portDeclaration | BabelNodeDeclareE***REMOVED***portAllDeclaration | BabelNodeDeclaredPredicate | BabelNodeE***REMOVED***istsTypeAnnotation | BabelNodeFunctionTypeAnnotation | BabelNodeFunctionTypeParam | BabelNodeGenericTypeAnnotation | BabelNodeInferredPredicate | BabelNodeInterfaceE***REMOVED***tends | BabelNodeInterfaceDeclaration | BabelNodeInterfaceTypeAnnotation | BabelNodeIntersectionTypeAnnotation | BabelNodeMi***REMOVED***edTypeAnnotation | BabelNodeEmptyTypeAnnotation | BabelNodeNullableTypeAnnotation | BabelNodeNumberLiteralTypeAnnotation | BabelNodeNumberTypeAnnotation | BabelNodeObjectTypeAnnotation | BabelNodeObjectTypeInternalSlot | BabelNodeObjectTypeCallProperty | BabelNodeObjectTypeInde***REMOVED***er | BabelNodeObjectTypeProperty | BabelNodeObjectTypeSpreadProperty | BabelNodeOpaqueType | BabelNodeQualifiedTypeIdentifier | BabelNodeStringLiteralTypeAnnotation | BabelNodeStringTypeAnnotation | BabelNodeSymbolTypeAnnotation | BabelNodeThisTypeAnnotation | BabelNodeTupleTypeAnnotation | BabelNodeTypeofTypeAnnotation | BabelNodeTypeAlias | BabelNodeTypeAnnotation | BabelNodeTypeCastE***REMOVED***pression | BabelNodeTypeParameter | BabelNodeTypeParameterDeclaration | BabelNodeTypeParameterInstantiation | BabelNodeUnionTypeAnnotation | BabelNodeVariance | BabelNodeVoidTypeAnnotation | BabelNodeEnumDeclaration | BabelNodeEnumBooleanBody | BabelNodeEnumNumberBody | BabelNodeEnumStringBody | BabelNodeEnumSymbolBody | BabelNodeEnumBooleanMember | BabelNodeEnumNumberMember | BabelNodeEnumStringMember | BabelNodeEnumDefaultedMember | BabelNodeInde***REMOVED***edAccessType | BabelNodeOptionalInde***REMOVED***edAccessType;
type BabelNodeFlowType = BabelNodeAnyTypeAnnotation | BabelNodeArrayTypeAnnotation | BabelNodeBooleanTypeAnnotation | BabelNodeBooleanLiteralTypeAnnotation | BabelNodeNullLiteralTypeAnnotation | BabelNodeE***REMOVED***istsTypeAnnotation | BabelNodeFunctionTypeAnnotation | BabelNodeGenericTypeAnnotation | BabelNodeInterfaceTypeAnnotation | BabelNodeIntersectionTypeAnnotation | BabelNodeMi***REMOVED***edTypeAnnotation | BabelNodeEmptyTypeAnnotation | BabelNodeNullableTypeAnnotation | BabelNodeNumberLiteralTypeAnnotation | BabelNodeNumberTypeAnnotation | BabelNodeObjectTypeAnnotation | BabelNodeStringLiteralTypeAnnotation | BabelNodeStringTypeAnnotation | BabelNodeSymbolTypeAnnotation | BabelNodeThisTypeAnnotation | BabelNodeTupleTypeAnnotation | BabelNodeTypeofTypeAnnotation | BabelNodeUnionTypeAnnotation | BabelNodeVoidTypeAnnotation | BabelNodeInde***REMOVED***edAccessType | BabelNodeOptionalInde***REMOVED***edAccessType;
type BabelNodeFlowBaseAnnotation = BabelNodeAnyTypeAnnotation | BabelNodeBooleanTypeAnnotation | BabelNodeNullLiteralTypeAnnotation | BabelNodeMi***REMOVED***edTypeAnnotation | BabelNodeEmptyTypeAnnotation | BabelNodeNumberTypeAnnotation | BabelNodeStringTypeAnnotation | BabelNodeSymbolTypeAnnotation | BabelNodeThisTypeAnnotation | BabelNodeVoidTypeAnnotation;
type BabelNodeFlowDeclaration = BabelNodeDeclareClass | BabelNodeDeclareFunction | BabelNodeDeclareInterface | BabelNodeDeclareModule | BabelNodeDeclareModuleE***REMOVED***ports | BabelNodeDeclareTypeAlias | BabelNodeDeclareOpaqueType | BabelNodeDeclareVariable | BabelNodeDeclareE***REMOVED***portDeclaration | BabelNodeDeclareE***REMOVED***portAllDeclaration | BabelNodeInterfaceDeclaration | BabelNodeOpaqueType | BabelNodeTypeAlias;
type BabelNodeFlowPredicate = BabelNodeDeclaredPredicate | BabelNodeInferredPredicate;
type BabelNodeEnumBody = BabelNodeEnumBooleanBody | BabelNodeEnumNumberBody | BabelNodeEnumStringBody | BabelNodeEnumSymbolBody;
type BabelNodeEnumMember = BabelNodeEnumBooleanMember | BabelNodeEnumNumberMember | BabelNodeEnumStringMember | BabelNodeEnumDefaultedMember;
type BabelNodeJSX = BabelNodeJSXAttribute | BabelNodeJSXClosingElement | BabelNodeJSXElement | BabelNodeJSXEmptyE***REMOVED***pression | BabelNodeJSXE***REMOVED***pressionContainer | BabelNodeJSXSpreadChild | BabelNodeJSXIdentifier | BabelNodeJSXMemberE***REMOVED***pression | BabelNodeJSXNamespacedName | BabelNodeJSXOpeningElement | BabelNodeJSXSpreadAttribute | BabelNodeJSXTe***REMOVED***t | BabelNodeJSXFragment | BabelNodeJSXOpeningFragment | BabelNodeJSXClosingFragment;
type BabelNodeMiscellaneous = BabelNodeNoop | BabelNodePlaceholder | BabelNodeV8IntrinsicIdentifier;
type BabelNodeTypeScript = BabelNodeTSParameterProperty | BabelNodeTSDeclareFunction | BabelNodeTSDeclareMethod | BabelNodeTSQualifiedName | BabelNodeTSCallSignatureDeclaration | BabelNodeTSConstructSignatureDeclaration | BabelNodeTSPropertySignature | BabelNodeTSMethodSignature | BabelNodeTSInde***REMOVED***Signature | BabelNodeTSAnyKeyword | BabelNodeTSBooleanKeyword | BabelNodeTSBigIntKeyword | BabelNodeTSIntrinsicKeyword | BabelNodeTSNeverKeyword | BabelNodeTSNullKeyword | BabelNodeTSNumberKeyword | BabelNodeTSObjectKeyword | BabelNodeTSStringKeyword | BabelNodeTSSymbolKeyword | BabelNodeTSUndefinedKeyword | BabelNodeTSUnknownKeyword | BabelNodeTSVoidKeyword | BabelNodeTSThisType | BabelNodeTSFunctionType | BabelNodeTSConstructorType | BabelNodeTSTypeReference | BabelNodeTSTypePredicate | BabelNodeTSTypeQuery | BabelNodeTSTypeLiteral | BabelNodeTSArrayType | BabelNodeTSTupleType | BabelNodeTSOptionalType | BabelNodeTSRestType | BabelNodeTSNamedTupleMember | BabelNodeTSUnionType | BabelNodeTSIntersectionType | BabelNodeTSConditionalType | BabelNodeTSInferType | BabelNodeTSParenthesizedType | BabelNodeTSTypeOperator | BabelNodeTSInde***REMOVED***edAccessType | BabelNodeTSMappedType | BabelNodeTSLiteralType | BabelNodeTSE***REMOVED***pressionWithTypeArguments | BabelNodeTSInterfaceDeclaration | BabelNodeTSInterfaceBody | BabelNodeTSTypeAliasDeclaration | BabelNodeTSInstantiationE***REMOVED***pression | BabelNodeTSAsE***REMOVED***pression | BabelNodeTSSatisfiesE***REMOVED***pression | BabelNodeTSTypeAssertion | BabelNodeTSEnumDeclaration | BabelNodeTSEnumMember | BabelNodeTSModuleDeclaration | BabelNodeTSModuleBlock | BabelNodeTSImportType | BabelNodeTSImportEqualsDeclaration | BabelNodeTSE***REMOVED***ternalModuleReference | BabelNodeTSNonNullE***REMOVED***pression | BabelNodeTSE***REMOVED***portAssignment | BabelNodeTSNamespaceE***REMOVED***portDeclaration | BabelNodeTSTypeAnnotation | BabelNodeTSTypeParameterInstantiation | BabelNodeTSTypeParameterDeclaration | BabelNodeTSTypeParameter;
type BabelNodeTSTypeElement = BabelNodeTSCallSignatureDeclaration | BabelNodeTSConstructSignatureDeclaration | BabelNodeTSPropertySignature | BabelNodeTSMethodSignature | BabelNodeTSInde***REMOVED***Signature;
type BabelNodeTSType = BabelNodeTSAnyKeyword | BabelNodeTSBooleanKeyword | BabelNodeTSBigIntKeyword | BabelNodeTSIntrinsicKeyword | BabelNodeTSNeverKeyword | BabelNodeTSNullKeyword | BabelNodeTSNumberKeyword | BabelNodeTSObjectKeyword | BabelNodeTSStringKeyword | BabelNodeTSSymbolKeyword | BabelNodeTSUndefinedKeyword | BabelNodeTSUnknownKeyword | BabelNodeTSVoidKeyword | BabelNodeTSThisType | BabelNodeTSFunctionType | BabelNodeTSConstructorType | BabelNodeTSTypeReference | BabelNodeTSTypePredicate | BabelNodeTSTypeQuery | BabelNodeTSTypeLiteral | BabelNodeTSArrayType | BabelNodeTSTupleType | BabelNodeTSOptionalType | BabelNodeTSRestType | BabelNodeTSUnionType | BabelNodeTSIntersectionType | BabelNodeTSConditionalType | BabelNodeTSInferType | BabelNodeTSParenthesizedType | BabelNodeTSTypeOperator | BabelNodeTSInde***REMOVED***edAccessType | BabelNodeTSMappedType | BabelNodeTSLiteralType | BabelNodeTSE***REMOVED***pressionWithTypeArguments | BabelNodeTSImportType;
type BabelNodeTSBaseType = BabelNodeTSAnyKeyword | BabelNodeTSBooleanKeyword | BabelNodeTSBigIntKeyword | BabelNodeTSIntrinsicKeyword | BabelNodeTSNeverKeyword | BabelNodeTSNullKeyword | BabelNodeTSNumberKeyword | BabelNodeTSObjectKeyword | BabelNodeTSStringKeyword | BabelNodeTSSymbolKeyword | BabelNodeTSUndefinedKeyword | BabelNodeTSUnknownKeyword | BabelNodeTSVoidKeyword | BabelNodeTSThisType | BabelNodeTSLiteralType;
type BabelNodeModuleDeclaration = BabelNodeE***REMOVED***portAllDeclaration | BabelNodeE***REMOVED***portDefaultDeclaration | BabelNodeE***REMOVED***portNamedDeclaration | BabelNodeImportDeclaration;

declare module "@babel/types" {
  declare e***REMOVED***port function arrayE***REMOVED***pression(elements?: Array<null | BabelNodeE***REMOVED***pression | BabelNodeSpreadElement>): BabelNodeArrayE***REMOVED***pression;
  declare e***REMOVED***port function assignmentE***REMOVED***pression(operator: string, left: BabelNodeLVal | BabelNodeOptionalMemberE***REMOVED***pression, right: BabelNodeE***REMOVED***pression): BabelNodeAssignmentE***REMOVED***pression;
  declare e***REMOVED***port function binaryE***REMOVED***pression(operator: "+" | "-" | "/" | "%" | "*" | "**" | "&" | "|" | ">>" | ">>>" | "<<" | "^" | "==" | "===" | "!=" | "!==" | "in" | "instanceof" | ">" | "<" | ">=" | "<=" | "|>", left: BabelNodeE***REMOVED***pression | BabelNodePrivateName, right: BabelNodeE***REMOVED***pression): BabelNodeBinaryE***REMOVED***pression;
  declare e***REMOVED***port function interpreterDirective(value: string): BabelNodeInterpreterDirective;
  declare e***REMOVED***port function directive(value: BabelNodeDirectiveLiteral): BabelNodeDirective;
  declare e***REMOVED***port function directiveLiteral(value: string): BabelNodeDirectiveLiteral;
  declare e***REMOVED***port function blockStatement(body: Array<BabelNodeStatement>, directives?: Array<BabelNodeDirective>): BabelNodeBlockStatement;
  declare e***REMOVED***port function breakStatement(label?: BabelNodeIdentifier): BabelNodeBreakStatement;
  declare e***REMOVED***port function callE***REMOVED***pression(callee: BabelNodeE***REMOVED***pression | BabelNodeSuper | BabelNodeV8IntrinsicIdentifier, _arguments: Array<BabelNodeE***REMOVED***pression | BabelNodeSpreadElement | BabelNodeArgumentPlaceholder>): BabelNodeCallE***REMOVED***pression;
  declare e***REMOVED***port function catchClause(param?: BabelNodeIdentifier | BabelNodeArrayPattern | BabelNodeObjectPattern, body: BabelNodeBlockStatement): BabelNodeCatchClause;
  declare e***REMOVED***port function conditionalE***REMOVED***pression(test: BabelNodeE***REMOVED***pression, consequent: BabelNodeE***REMOVED***pression, alternate: BabelNodeE***REMOVED***pression): BabelNodeConditionalE***REMOVED***pression;
  declare e***REMOVED***port function continueStatement(label?: BabelNodeIdentifier): BabelNodeContinueStatement;
  declare e***REMOVED***port function debuggerStatement(): BabelNodeDebuggerStatement;
  declare e***REMOVED***port function doWhileStatement(test: BabelNodeE***REMOVED***pression, body: BabelNodeStatement): BabelNodeDoWhileStatement;
  declare e***REMOVED***port function emptyStatement(): BabelNodeEmptyStatement;
  declare e***REMOVED***port function e***REMOVED***pressionStatement(e***REMOVED***pression: BabelNodeE***REMOVED***pression): BabelNodeE***REMOVED***pressionStatement;
  declare e***REMOVED***port function file(program: BabelNodeProgram, comments?: Array<BabelNodeCommentBlock | BabelNodeCommentLine>, tokens?: Array<any>): BabelNodeFile;
  declare e***REMOVED***port function forInStatement(left: BabelNodeVariableDeclaration | BabelNodeLVal, right: BabelNodeE***REMOVED***pression, body: BabelNodeStatement): BabelNodeForInStatement;
  declare e***REMOVED***port function forStatement(init?: BabelNodeVariableDeclaration | BabelNodeE***REMOVED***pression, test?: BabelNodeE***REMOVED***pression, update?: BabelNodeE***REMOVED***pression, body: BabelNodeStatement): BabelNodeForStatement;
  declare e***REMOVED***port function functionDeclaration(id?: BabelNodeIdentifier, params: Array<BabelNodeIdentifier | BabelNodePattern | BabelNodeRestElement>, body: BabelNodeBlockStatement, generator?: boolean, async?: boolean): BabelNodeFunctionDeclaration;
  declare e***REMOVED***port function functionE***REMOVED***pression(id?: BabelNodeIdentifier, params: Array<BabelNodeIdentifier | BabelNodePattern | BabelNodeRestElement>, body: BabelNodeBlockStatement, generator?: boolean, async?: boolean): BabelNodeFunctionE***REMOVED***pression;
  declare e***REMOVED***port function identifier(name: string): BabelNodeIdentifier;
  declare e***REMOVED***port function ifStatement(test: BabelNodeE***REMOVED***pression, consequent: BabelNodeStatement, alternate?: BabelNodeStatement): BabelNodeIfStatement;
  declare e***REMOVED***port function labeledStatement(label: BabelNodeIdentifier, body: BabelNodeStatement): BabelNodeLabeledStatement;
  declare e***REMOVED***port function stringLiteral(value: string): BabelNodeStringLiteral;
  declare e***REMOVED***port function numericLiteral(value: number): BabelNodeNumericLiteral;
  declare e***REMOVED***port function nullLiteral(): BabelNodeNullLiteral;
  declare e***REMOVED***port function booleanLiteral(value: boolean): BabelNodeBooleanLiteral;
  declare e***REMOVED***port function regE***REMOVED***pLiteral(pattern: string, flags?: string): BabelNodeRegE***REMOVED***pLiteral;
  declare e***REMOVED***port function logicalE***REMOVED***pression(operator: "||" | "&&" | "??", left: BabelNodeE***REMOVED***pression, right: BabelNodeE***REMOVED***pression): BabelNodeLogicalE***REMOVED***pression;
  declare e***REMOVED***port function memberE***REMOVED***pression(object: BabelNodeE***REMOVED***pression | BabelNodeSuper, property: BabelNodeE***REMOVED***pression | BabelNodeIdentifier | BabelNodePrivateName, computed?: boolean, optional?: boolean): BabelNodeMemberE***REMOVED***pression;
  declare e***REMOVED***port function newE***REMOVED***pression(callee: BabelNodeE***REMOVED***pression | BabelNodeSuper | BabelNodeV8IntrinsicIdentifier, _arguments: Array<BabelNodeE***REMOVED***pression | BabelNodeSpreadElement | BabelNodeArgumentPlaceholder>): BabelNodeNewE***REMOVED***pression;
  declare e***REMOVED***port function program(body: Array<BabelNodeStatement>, directives?: Array<BabelNodeDirective>, sourceType?: "script" | "module", interpreter?: BabelNodeInterpreterDirective): BabelNodeProgram;
  declare e***REMOVED***port function objectE***REMOVED***pression(properties: Array<BabelNodeObjectMethod | BabelNodeObjectProperty | BabelNodeSpreadElement>): BabelNodeObjectE***REMOVED***pression;
  declare e***REMOVED***port function objectMethod(kind?: "method" | "get" | "set", key: BabelNodeE***REMOVED***pression | BabelNodeIdentifier | BabelNodeStringLiteral | BabelNodeNumericLiteral | BabelNodeBigIntLiteral, params: Array<BabelNodeIdentifier | BabelNodePattern | BabelNodeRestElement>, body: BabelNodeBlockStatement, computed?: boolean, generator?: boolean, async?: boolean): BabelNodeObjectMethod;
  declare e***REMOVED***port function objectProperty(key: BabelNodeE***REMOVED***pression | BabelNodeIdentifier | BabelNodeStringLiteral | BabelNodeNumericLiteral | BabelNodeBigIntLiteral | BabelNodeDecimalLiteral | BabelNodePrivateName, value: BabelNodeE***REMOVED***pression | BabelNodePatternLike, computed?: boolean, shorthand?: boolean, decorators?: Array<BabelNodeDecorator>): BabelNodeObjectProperty;
  declare e***REMOVED***port function restElement(argument: BabelNodeLVal): BabelNodeRestElement;
  declare e***REMOVED***port function returnStatement(argument?: BabelNodeE***REMOVED***pression): BabelNodeReturnStatement;
  declare e***REMOVED***port function sequenceE***REMOVED***pression(e***REMOVED***pressions: Array<BabelNodeE***REMOVED***pression>): BabelNodeSequenceE***REMOVED***pression;
  declare e***REMOVED***port function parenthesizedE***REMOVED***pression(e***REMOVED***pression: BabelNodeE***REMOVED***pression): BabelNodeParenthesizedE***REMOVED***pression;
  declare e***REMOVED***port function switchCase(test?: BabelNodeE***REMOVED***pression, consequent: Array<BabelNodeStatement>): BabelNodeSwitchCase;
  declare e***REMOVED***port function switchStatement(discriminant: BabelNodeE***REMOVED***pression, cases: Array<BabelNodeSwitchCase>): BabelNodeSwitchStatement;
  declare e***REMOVED***port function thisE***REMOVED***pression(): BabelNodeThisE***REMOVED***pression;
  declare e***REMOVED***port function throwStatement(argument: BabelNodeE***REMOVED***pression): BabelNodeThrowStatement;
  declare e***REMOVED***port function tryStatement(block: BabelNodeBlockStatement, handler?: BabelNodeCatchClause, finalizer?: BabelNodeBlockStatement): BabelNodeTryStatement;
  declare e***REMOVED***port function unaryE***REMOVED***pression(operator: "void" | "throw" | "delete" | "!" | "+" | "-" | "~" | "typeof", argument: BabelNodeE***REMOVED***pression, prefi***REMOVED***?: boolean): BabelNodeUnaryE***REMOVED***pression;
  declare e***REMOVED***port function updateE***REMOVED***pression(operator: "++" | "--", argument: BabelNodeE***REMOVED***pression, prefi***REMOVED***?: boolean): BabelNodeUpdateE***REMOVED***pression;
  declare e***REMOVED***port function variableDeclaration(kind: "var" | "let" | "const" | "using" | "await using", declarations: Array<BabelNodeVariableDeclarator>): BabelNodeVariableDeclaration;
  declare e***REMOVED***port function variableDeclarator(id: BabelNodeLVal, init?: BabelNodeE***REMOVED***pression): BabelNodeVariableDeclarator;
  declare e***REMOVED***port function whileStatement(test: BabelNodeE***REMOVED***pression, body: BabelNodeStatement): BabelNodeWhileStatement;
  declare e***REMOVED***port function withStatement(object: BabelNodeE***REMOVED***pression, body: BabelNodeStatement): BabelNodeWithStatement;
  declare e***REMOVED***port function assignmentPattern(left: BabelNodeIdentifier | BabelNodeObjectPattern | BabelNodeArrayPattern | BabelNodeMemberE***REMOVED***pression | BabelNodeTSAsE***REMOVED***pression | BabelNodeTSSatisfiesE***REMOVED***pression | BabelNodeTSTypeAssertion | BabelNodeTSNonNullE***REMOVED***pression, right: BabelNodeE***REMOVED***pression): BabelNodeAssignmentPattern;
  declare e***REMOVED***port function arrayPattern(elements: Array<null | BabelNodePatternLike | BabelNodeLVal>): BabelNodeArrayPattern;
  declare e***REMOVED***port function arrowFunctionE***REMOVED***pression(params: Array<BabelNodeIdentifier | BabelNodePattern | BabelNodeRestElement>, body: BabelNodeBlockStatement | BabelNodeE***REMOVED***pression, async?: boolean): BabelNodeArrowFunctionE***REMOVED***pression;
  declare e***REMOVED***port function classBody(body: Array<BabelNodeClassMethod | BabelNodeClassPrivateMethod | BabelNodeClassProperty | BabelNodeClassPrivateProperty | BabelNodeClassAccessorProperty | BabelNodeTSDeclareMethod | BabelNodeTSInde***REMOVED***Signature | BabelNodeStaticBlock>): BabelNodeClassBody;
  declare e***REMOVED***port function classE***REMOVED***pression(id?: BabelNodeIdentifier, superClass?: BabelNodeE***REMOVED***pression, body: BabelNodeClassBody, decorators?: Array<BabelNodeDecorator>): BabelNodeClassE***REMOVED***pression;
  declare e***REMOVED***port function classDeclaration(id?: BabelNodeIdentifier, superClass?: BabelNodeE***REMOVED***pression, body: BabelNodeClassBody, decorators?: Array<BabelNodeDecorator>): BabelNodeClassDeclaration;
  declare e***REMOVED***port function e***REMOVED***portAllDeclaration(source: BabelNodeStringLiteral): BabelNodeE***REMOVED***portAllDeclaration;
  declare e***REMOVED***port function e***REMOVED***portDefaultDeclaration(declaration: BabelNodeTSDeclareFunction | BabelNodeFunctionDeclaration | BabelNodeClassDeclaration | BabelNodeE***REMOVED***pression): BabelNodeE***REMOVED***portDefaultDeclaration;
  declare e***REMOVED***port function e***REMOVED***portNamedDeclaration(declaration?: BabelNodeDeclaration, specifiers?: Array<BabelNodeE***REMOVED***portSpecifier | BabelNodeE***REMOVED***portDefaultSpecifier | BabelNodeE***REMOVED***portNamespaceSpecifier>, source?: BabelNodeStringLiteral): BabelNodeE***REMOVED***portNamedDeclaration;
  declare e***REMOVED***port function e***REMOVED***portSpecifier(local: BabelNodeIdentifier, e***REMOVED***ported: BabelNodeIdentifier | BabelNodeStringLiteral): BabelNodeE***REMOVED***portSpecifier;
  declare e***REMOVED***port function forOfStatement(left: BabelNodeVariableDeclaration | BabelNodeLVal, right: BabelNodeE***REMOVED***pression, body: BabelNodeStatement, _await?: boolean): BabelNodeForOfStatement;
  declare e***REMOVED***port function importDeclaration(specifiers: Array<BabelNodeImportSpecifier | BabelNodeImportDefaultSpecifier | BabelNodeImportNamespaceSpecifier>, source: BabelNodeStringLiteral): BabelNodeImportDeclaration;
  declare e***REMOVED***port function importDefaultSpecifier(local: BabelNodeIdentifier): BabelNodeImportDefaultSpecifier;
  declare e***REMOVED***port function importNamespaceSpecifier(local: BabelNodeIdentifier): BabelNodeImportNamespaceSpecifier;
  declare e***REMOVED***port function importSpecifier(local: BabelNodeIdentifier, imported: BabelNodeIdentifier | BabelNodeStringLiteral): BabelNodeImportSpecifier;
  declare e***REMOVED***port function importE***REMOVED***pression(source: BabelNodeE***REMOVED***pression, options?: BabelNodeE***REMOVED***pression): BabelNodeImportE***REMOVED***pression;
  declare e***REMOVED***port function metaProperty(meta: BabelNodeIdentifier, property: BabelNodeIdentifier): BabelNodeMetaProperty;
  declare e***REMOVED***port function classMethod(kind?: "get" | "set" | "method" | "constructor", key: BabelNodeIdentifier | BabelNodeStringLiteral | BabelNodeNumericLiteral | BabelNodeBigIntLiteral | BabelNodeE***REMOVED***pression, params: Array<BabelNodeIdentifier | BabelNodePattern | BabelNodeRestElement | BabelNodeTSParameterProperty>, body: BabelNodeBlockStatement, computed?: boolean, _static?: boolean, generator?: boolean, async?: boolean): BabelNodeClassMethod;
  declare e***REMOVED***port function objectPattern(properties: Array<BabelNodeRestElement | BabelNodeObjectProperty>): BabelNodeObjectPattern;
  declare e***REMOVED***port function spreadElement(argument: BabelNodeE***REMOVED***pression): BabelNodeSpreadElement;
  declare function _super(): BabelNodeSuper;
  declare e***REMOVED***port { _super as super }
  declare e***REMOVED***port function taggedTemplateE***REMOVED***pression(tag: BabelNodeE***REMOVED***pression, quasi: BabelNodeTemplateLiteral): BabelNodeTaggedTemplateE***REMOVED***pression;
  declare e***REMOVED***port function templateElement(value: { raw: string, cooked?: string }, tail?: boolean): BabelNodeTemplateElement;
  declare e***REMOVED***port function templateLiteral(quasis: Array<BabelNodeTemplateElement>, e***REMOVED***pressions: Array<BabelNodeE***REMOVED***pression | BabelNodeTSType>): BabelNodeTemplateLiteral;
  declare e***REMOVED***port function yieldE***REMOVED***pression(argument?: BabelNodeE***REMOVED***pression, delegate?: boolean): BabelNodeYieldE***REMOVED***pression;
  declare e***REMOVED***port function awaitE***REMOVED***pression(argument: BabelNodeE***REMOVED***pression): BabelNodeAwaitE***REMOVED***pression;
  declare function _import(): BabelNodeImport;
  declare e***REMOVED***port { _import as import }
  declare e***REMOVED***port function bigIntLiteral(value: string): BabelNodeBigIntLiteral;
  declare e***REMOVED***port function e***REMOVED***portNamespaceSpecifier(e***REMOVED***ported: BabelNodeIdentifier): BabelNodeE***REMOVED***portNamespaceSpecifier;
  declare e***REMOVED***port function optionalMemberE***REMOVED***pression(object: BabelNodeE***REMOVED***pression, property: BabelNodeE***REMOVED***pression | BabelNodeIdentifier, computed?: boolean, optional: boolean): BabelNodeOptionalMemberE***REMOVED***pression;
  declare e***REMOVED***port function optionalCallE***REMOVED***pression(callee: BabelNodeE***REMOVED***pression, _arguments: Array<BabelNodeE***REMOVED***pression | BabelNodeSpreadElement | BabelNodeArgumentPlaceholder>, optional: boolean): BabelNodeOptionalCallE***REMOVED***pression;
  declare e***REMOVED***port function classProperty(key: BabelNodeIdentifier | BabelNodeStringLiteral | BabelNodeNumericLiteral | BabelNodeBigIntLiteral | BabelNodeE***REMOVED***pression, value?: BabelNodeE***REMOVED***pression, typeAnnotation?: BabelNodeTypeAnnotation | BabelNodeTSTypeAnnotation | BabelNodeNoop, decorators?: Array<BabelNodeDecorator>, computed?: boolean, _static?: boolean): BabelNodeClassProperty;
  declare e***REMOVED***port function classAccessorProperty(key: BabelNodeIdentifier | BabelNodeStringLiteral | BabelNodeNumericLiteral | BabelNodeBigIntLiteral | BabelNodeE***REMOVED***pression | BabelNodePrivateName, value?: BabelNodeE***REMOVED***pression, typeAnnotation?: BabelNodeTypeAnnotation | BabelNodeTSTypeAnnotation | BabelNodeNoop, decorators?: Array<BabelNodeDecorator>, computed?: boolean, _static?: boolean): BabelNodeClassAccessorProperty;
  declare e***REMOVED***port function classPrivateProperty(key: BabelNodePrivateName, value?: BabelNodeE***REMOVED***pression, decorators?: Array<BabelNodeDecorator>, _static?: boolean): BabelNodeClassPrivateProperty;
  declare e***REMOVED***port function classPrivateMethod(kind?: "get" | "set" | "method", key: BabelNodePrivateName, params: Array<BabelNodeIdentifier | BabelNodePattern | BabelNodeRestElement | BabelNodeTSParameterProperty>, body: BabelNodeBlockStatement, _static?: boolean): BabelNodeClassPrivateMethod;
  declare e***REMOVED***port function privateName(id: BabelNodeIdentifier): BabelNodePrivateName;
  declare e***REMOVED***port function staticBlock(body: Array<BabelNodeStatement>): BabelNodeStaticBlock;
  declare e***REMOVED***port function anyTypeAnnotation(): BabelNodeAnyTypeAnnotation;
  declare e***REMOVED***port function arrayTypeAnnotation(elementType: BabelNodeFlowType): BabelNodeArrayTypeAnnotation;
  declare e***REMOVED***port function booleanTypeAnnotation(): BabelNodeBooleanTypeAnnotation;
  declare e***REMOVED***port function booleanLiteralTypeAnnotation(value: boolean): BabelNodeBooleanLiteralTypeAnnotation;
  declare e***REMOVED***port function nullLiteralTypeAnnotation(): BabelNodeNullLiteralTypeAnnotation;
  declare e***REMOVED***port function classImplements(id: BabelNodeIdentifier, typeParameters?: BabelNodeTypeParameterInstantiation): BabelNodeClassImplements;
  declare e***REMOVED***port function declareClass(id: BabelNodeIdentifier, typeParameters?: BabelNodeTypeParameterDeclaration, _e***REMOVED***tends?: Array<BabelNodeInterfaceE***REMOVED***tends>, body: BabelNodeObjectTypeAnnotation): BabelNodeDeclareClass;
  declare e***REMOVED***port function declareFunction(id: BabelNodeIdentifier): BabelNodeDeclareFunction;
  declare e***REMOVED***port function declareInterface(id: BabelNodeIdentifier, typeParameters?: BabelNodeTypeParameterDeclaration, _e***REMOVED***tends?: Array<BabelNodeInterfaceE***REMOVED***tends>, body: BabelNodeObjectTypeAnnotation): BabelNodeDeclareInterface;
  declare e***REMOVED***port function declareModule(id: BabelNodeIdentifier | BabelNodeStringLiteral, body: BabelNodeBlockStatement, kind?: "CommonJS" | "ES"): BabelNodeDeclareModule;
  declare e***REMOVED***port function declareModuleE***REMOVED***ports(typeAnnotation: BabelNodeTypeAnnotation): BabelNodeDeclareModuleE***REMOVED***ports;
  declare e***REMOVED***port function declareTypeAlias(id: BabelNodeIdentifier, typeParameters?: BabelNodeTypeParameterDeclaration, right: BabelNodeFlowType): BabelNodeDeclareTypeAlias;
  declare e***REMOVED***port function declareOpaqueType(id: BabelNodeIdentifier, typeParameters?: BabelNodeTypeParameterDeclaration, supertype?: BabelNodeFlowType): BabelNodeDeclareOpaqueType;
  declare e***REMOVED***port function declareVariable(id: BabelNodeIdentifier): BabelNodeDeclareVariable;
  declare e***REMOVED***port function declareE***REMOVED***portDeclaration(declaration?: BabelNodeFlow, specifiers?: Array<BabelNodeE***REMOVED***portSpecifier | BabelNodeE***REMOVED***portNamespaceSpecifier>, source?: BabelNodeStringLiteral, attributes?: Array<BabelNodeImportAttribute>): BabelNodeDeclareE***REMOVED***portDeclaration;
  declare e***REMOVED***port function declareE***REMOVED***portAllDeclaration(source: BabelNodeStringLiteral, attributes?: Array<BabelNodeImportAttribute>): BabelNodeDeclareE***REMOVED***portAllDeclaration;
  declare e***REMOVED***port function declaredPredicate(value: BabelNodeFlow): BabelNodeDeclaredPredicate;
  declare e***REMOVED***port function e***REMOVED***istsTypeAnnotation(): BabelNodeE***REMOVED***istsTypeAnnotation;
  declare e***REMOVED***port function functionTypeAnnotation(typeParameters?: BabelNodeTypeParameterDeclaration, params: Array<BabelNodeFunctionTypeParam>, rest?: BabelNodeFunctionTypeParam, returnType: BabelNodeFlowType): BabelNodeFunctionTypeAnnotation;
  declare e***REMOVED***port function functionTypeParam(name?: BabelNodeIdentifier, typeAnnotation: BabelNodeFlowType): BabelNodeFunctionTypeParam;
  declare e***REMOVED***port function genericTypeAnnotation(id: BabelNodeIdentifier | BabelNodeQualifiedTypeIdentifier, typeParameters?: BabelNodeTypeParameterInstantiation): BabelNodeGenericTypeAnnotation;
  declare e***REMOVED***port function inferredPredicate(): BabelNodeInferredPredicate;
  declare e***REMOVED***port function interfaceE***REMOVED***tends(id: BabelNodeIdentifier | BabelNodeQualifiedTypeIdentifier, typeParameters?: BabelNodeTypeParameterInstantiation): BabelNodeInterfaceE***REMOVED***tends;
  declare e***REMOVED***port function interfaceDeclaration(id: BabelNodeIdentifier, typeParameters?: BabelNodeTypeParameterDeclaration, _e***REMOVED***tends?: Array<BabelNodeInterfaceE***REMOVED***tends>, body: BabelNodeObjectTypeAnnotation): BabelNodeInterfaceDeclaration;
  declare e***REMOVED***port function interfaceTypeAnnotation(_e***REMOVED***tends?: Array<BabelNodeInterfaceE***REMOVED***tends>, body: BabelNodeObjectTypeAnnotation): BabelNodeInterfaceTypeAnnotation;
  declare e***REMOVED***port function intersectionTypeAnnotation(types: Array<BabelNodeFlowType>): BabelNodeIntersectionTypeAnnotation;
  declare e***REMOVED***port function mi***REMOVED***edTypeAnnotation(): BabelNodeMi***REMOVED***edTypeAnnotation;
  declare e***REMOVED***port function emptyTypeAnnotation(): BabelNodeEmptyTypeAnnotation;
  declare e***REMOVED***port function nullableTypeAnnotation(typeAnnotation: BabelNodeFlowType): BabelNodeNullableTypeAnnotation;
  declare e***REMOVED***port function numberLiteralTypeAnnotation(value: number): BabelNodeNumberLiteralTypeAnnotation;
  declare e***REMOVED***port function numberTypeAnnotation(): BabelNodeNumberTypeAnnotation;
  declare e***REMOVED***port function objectTypeAnnotation(properties: Array<BabelNodeObjectTypeProperty | BabelNodeObjectTypeSpreadProperty>, inde***REMOVED***ers?: Array<BabelNodeObjectTypeInde***REMOVED***er>, callProperties?: Array<BabelNodeObjectTypeCallProperty>, internalSlots?: Array<BabelNodeObjectTypeInternalSlot>, e***REMOVED***act?: boolean): BabelNodeObjectTypeAnnotation;
  declare e***REMOVED***port function objectTypeInternalSlot(id: BabelNodeIdentifier, value: BabelNodeFlowType, optional: boolean, _static: boolean, method: boolean): BabelNodeObjectTypeInternalSlot;
  declare e***REMOVED***port function objectTypeCallProperty(value: BabelNodeFlowType): BabelNodeObjectTypeCallProperty;
  declare e***REMOVED***port function objectTypeInde***REMOVED***er(id?: BabelNodeIdentifier, key: BabelNodeFlowType, value: BabelNodeFlowType, variance?: BabelNodeVariance): BabelNodeObjectTypeInde***REMOVED***er;
  declare e***REMOVED***port function objectTypeProperty(key: BabelNodeIdentifier | BabelNodeStringLiteral, value: BabelNodeFlowType, variance?: BabelNodeVariance): BabelNodeObjectTypeProperty;
  declare e***REMOVED***port function objectTypeSpreadProperty(argument: BabelNodeFlowType): BabelNodeObjectTypeSpreadProperty;
  declare e***REMOVED***port function opaqueType(id: BabelNodeIdentifier, typeParameters?: BabelNodeTypeParameterDeclaration, supertype?: BabelNodeFlowType, impltype: BabelNodeFlowType): BabelNodeOpaqueType;
  declare e***REMOVED***port function qualifiedTypeIdentifier(id: BabelNodeIdentifier, qualification: BabelNodeIdentifier | BabelNodeQualifiedTypeIdentifier): BabelNodeQualifiedTypeIdentifier;
  declare e***REMOVED***port function stringLiteralTypeAnnotation(value: string): BabelNodeStringLiteralTypeAnnotation;
  declare e***REMOVED***port function stringTypeAnnotation(): BabelNodeStringTypeAnnotation;
  declare e***REMOVED***port function symbolTypeAnnotation(): BabelNodeSymbolTypeAnnotation;
  declare e***REMOVED***port function thisTypeAnnotation(): BabelNodeThisTypeAnnotation;
  declare e***REMOVED***port function tupleTypeAnnotation(types: Array<BabelNodeFlowType>): BabelNodeTupleTypeAnnotation;
  declare e***REMOVED***port function typeofTypeAnnotation(argument: BabelNodeFlowType): BabelNodeTypeofTypeAnnotation;
  declare e***REMOVED***port function typeAlias(id: BabelNodeIdentifier, typeParameters?: BabelNodeTypeParameterDeclaration, right: BabelNodeFlowType): BabelNodeTypeAlias;
  declare e***REMOVED***port function typeAnnotation(typeAnnotation: BabelNodeFlowType): BabelNodeTypeAnnotation;
  declare e***REMOVED***port function typeCastE***REMOVED***pression(e***REMOVED***pression: BabelNodeE***REMOVED***pression, typeAnnotation: BabelNodeTypeAnnotation): BabelNodeTypeCastE***REMOVED***pression;
  declare e***REMOVED***port function typeParameter(bound?: BabelNodeTypeAnnotation, _default?: BabelNodeFlowType, variance?: BabelNodeVariance): BabelNodeTypeParameter;
  declare e***REMOVED***port function typeParameterDeclaration(params: Array<BabelNodeTypeParameter>): BabelNodeTypeParameterDeclaration;
  declare e***REMOVED***port function typeParameterInstantiation(params: Array<BabelNodeFlowType>): BabelNodeTypeParameterInstantiation;
  declare e***REMOVED***port function unionTypeAnnotation(types: Array<BabelNodeFlowType>): BabelNodeUnionTypeAnnotation;
  declare e***REMOVED***port function variance(kind: "minus" | "plus"): BabelNodeVariance;
  declare e***REMOVED***port function voidTypeAnnotation(): BabelNodeVoidTypeAnnotation;
  declare e***REMOVED***port function enumDeclaration(id: BabelNodeIdentifier, body: BabelNodeEnumBooleanBody | BabelNodeEnumNumberBody | BabelNodeEnumStringBody | BabelNodeEnumSymbolBody): BabelNodeEnumDeclaration;
  declare e***REMOVED***port function enumBooleanBody(members: Array<BabelNodeEnumBooleanMember>): BabelNodeEnumBooleanBody;
  declare e***REMOVED***port function enumNumberBody(members: Array<BabelNodeEnumNumberMember>): BabelNodeEnumNumberBody;
  declare e***REMOVED***port function enumStringBody(members: Array<BabelNodeEnumStringMember | BabelNodeEnumDefaultedMember>): BabelNodeEnumStringBody;
  declare e***REMOVED***port function enumSymbolBody(members: Array<BabelNodeEnumDefaultedMember>): BabelNodeEnumSymbolBody;
  declare e***REMOVED***port function enumBooleanMember(id: BabelNodeIdentifier): BabelNodeEnumBooleanMember;
  declare e***REMOVED***port function enumNumberMember(id: BabelNodeIdentifier, init: BabelNodeNumericLiteral): BabelNodeEnumNumberMember;
  declare e***REMOVED***port function enumStringMember(id: BabelNodeIdentifier, init: BabelNodeStringLiteral): BabelNodeEnumStringMember;
  declare e***REMOVED***port function enumDefaultedMember(id: BabelNodeIdentifier): BabelNodeEnumDefaultedMember;
  declare e***REMOVED***port function inde***REMOVED***edAccessType(objectType: BabelNodeFlowType, inde***REMOVED***Type: BabelNodeFlowType): BabelNodeInde***REMOVED***edAccessType;
  declare e***REMOVED***port function optionalInde***REMOVED***edAccessType(objectType: BabelNodeFlowType, inde***REMOVED***Type: BabelNodeFlowType): BabelNodeOptionalInde***REMOVED***edAccessType;
  declare e***REMOVED***port function js***REMOVED***Attribute(name: BabelNodeJSXIdentifier | BabelNodeJSXNamespacedName, value?: BabelNodeJSXElement | BabelNodeJSXFragment | BabelNodeStringLiteral | BabelNodeJSXE***REMOVED***pressionContainer): BabelNodeJSXAttribute;
  declare e***REMOVED***port function js***REMOVED***ClosingElement(name: BabelNodeJSXIdentifier | BabelNodeJSXMemberE***REMOVED***pression | BabelNodeJSXNamespacedName): BabelNodeJSXClosingElement;
  declare e***REMOVED***port function js***REMOVED***Element(openingElement: BabelNodeJSXOpeningElement, closingElement?: BabelNodeJSXClosingElement, children: Array<BabelNodeJSXTe***REMOVED***t | BabelNodeJSXE***REMOVED***pressionContainer | BabelNodeJSXSpreadChild | BabelNodeJSXElement | BabelNodeJSXFragment>, selfClosing?: boolean): BabelNodeJSXElement;
  declare e***REMOVED***port function js***REMOVED***EmptyE***REMOVED***pression(): BabelNodeJSXEmptyE***REMOVED***pression;
  declare e***REMOVED***port function js***REMOVED***E***REMOVED***pressionContainer(e***REMOVED***pression: BabelNodeE***REMOVED***pression | BabelNodeJSXEmptyE***REMOVED***pression): BabelNodeJSXE***REMOVED***pressionContainer;
  declare e***REMOVED***port function js***REMOVED***SpreadChild(e***REMOVED***pression: BabelNodeE***REMOVED***pression): BabelNodeJSXSpreadChild;
  declare e***REMOVED***port function js***REMOVED***Identifier(name: string): BabelNodeJSXIdentifier;
  declare e***REMOVED***port function js***REMOVED***MemberE***REMOVED***pression(object: BabelNodeJSXMemberE***REMOVED***pression | BabelNodeJSXIdentifier, property: BabelNodeJSXIdentifier): BabelNodeJSXMemberE***REMOVED***pression;
  declare e***REMOVED***port function js***REMOVED***NamespacedName(namespace: BabelNodeJSXIdentifier, name: BabelNodeJSXIdentifier): BabelNodeJSXNamespacedName;
  declare e***REMOVED***port function js***REMOVED***OpeningElement(name: BabelNodeJSXIdentifier | BabelNodeJSXMemberE***REMOVED***pression | BabelNodeJSXNamespacedName, attributes: Array<BabelNodeJSXAttribute | BabelNodeJSXSpreadAttribute>, selfClosing?: boolean): BabelNodeJSXOpeningElement;
  declare e***REMOVED***port function js***REMOVED***SpreadAttribute(argument: BabelNodeE***REMOVED***pression): BabelNodeJSXSpreadAttribute;
  declare e***REMOVED***port function js***REMOVED***Te***REMOVED***t(value: string): BabelNodeJSXTe***REMOVED***t;
  declare e***REMOVED***port function js***REMOVED***Fragment(openingFragment: BabelNodeJSXOpeningFragment, closingFragment: BabelNodeJSXClosingFragment, children: Array<BabelNodeJSXTe***REMOVED***t | BabelNodeJSXE***REMOVED***pressionContainer | BabelNodeJSXSpreadChild | BabelNodeJSXElement | BabelNodeJSXFragment>): BabelNodeJSXFragment;
  declare e***REMOVED***port function js***REMOVED***OpeningFragment(): BabelNodeJSXOpeningFragment;
  declare e***REMOVED***port function js***REMOVED***ClosingFragment(): BabelNodeJSXClosingFragment;
  declare e***REMOVED***port function noop(): BabelNodeNoop;
  declare e***REMOVED***port function placeholder(e***REMOVED***pectedNode: "Identifier" | "StringLiteral" | "E***REMOVED***pression" | "Statement" | "Declaration" | "BlockStatement" | "ClassBody" | "Pattern", name: BabelNodeIdentifier): BabelNodePlaceholder;
  declare e***REMOVED***port function v8IntrinsicIdentifier(name: string): BabelNodeV8IntrinsicIdentifier;
  declare e***REMOVED***port function argumentPlaceholder(): BabelNodeArgumentPlaceholder;
  declare e***REMOVED***port function bindE***REMOVED***pression(object: BabelNodeE***REMOVED***pression, callee: BabelNodeE***REMOVED***pression): BabelNodeBindE***REMOVED***pression;
  declare e***REMOVED***port function importAttribute(key: BabelNodeIdentifier | BabelNodeStringLiteral, value: BabelNodeStringLiteral): BabelNodeImportAttribute;
  declare e***REMOVED***port function decorator(e***REMOVED***pression: BabelNodeE***REMOVED***pression): BabelNodeDecorator;
  declare e***REMOVED***port function doE***REMOVED***pression(body: BabelNodeBlockStatement, async?: boolean): BabelNodeDoE***REMOVED***pression;
  declare e***REMOVED***port function e***REMOVED***portDefaultSpecifier(e***REMOVED***ported: BabelNodeIdentifier): BabelNodeE***REMOVED***portDefaultSpecifier;
  declare e***REMOVED***port function recordE***REMOVED***pression(properties: Array<BabelNodeObjectProperty | BabelNodeSpreadElement>): BabelNodeRecordE***REMOVED***pression;
  declare e***REMOVED***port function tupleE***REMOVED***pression(elements?: Array<BabelNodeE***REMOVED***pression | BabelNodeSpreadElement>): BabelNodeTupleE***REMOVED***pression;
  declare e***REMOVED***port function decimalLiteral(value: string): BabelNodeDecimalLiteral;
  declare e***REMOVED***port function moduleE***REMOVED***pression(body: BabelNodeProgram): BabelNodeModuleE***REMOVED***pression;
  declare e***REMOVED***port function topicReference(): BabelNodeTopicReference;
  declare e***REMOVED***port function pipelineTopicE***REMOVED***pression(e***REMOVED***pression: BabelNodeE***REMOVED***pression): BabelNodePipelineTopicE***REMOVED***pression;
  declare e***REMOVED***port function pipelineBareFunction(callee: BabelNodeE***REMOVED***pression): BabelNodePipelineBareFunction;
  declare e***REMOVED***port function pipelinePrimaryTopicReference(): BabelNodePipelinePrimaryTopicReference;
  declare e***REMOVED***port function tsParameterProperty(parameter: BabelNodeIdentifier | BabelNodeAssignmentPattern): BabelNodeTSParameterProperty;
  declare e***REMOVED***port function tsDeclareFunction(id?: BabelNodeIdentifier, typeParameters?: BabelNodeTSTypeParameterDeclaration | BabelNodeNoop, params: Array<BabelNodeIdentifier | BabelNodePattern | BabelNodeRestElement>, returnType?: BabelNodeTSTypeAnnotation | BabelNodeNoop): BabelNodeTSDeclareFunction;
  declare e***REMOVED***port function tsDeclareMethod(decorators?: Array<BabelNodeDecorator>, key: BabelNodeIdentifier | BabelNodeStringLiteral | BabelNodeNumericLiteral | BabelNodeBigIntLiteral | BabelNodeE***REMOVED***pression, typeParameters?: BabelNodeTSTypeParameterDeclaration | BabelNodeNoop, params: Array<BabelNodeIdentifier | BabelNodePattern | BabelNodeRestElement | BabelNodeTSParameterProperty>, returnType?: BabelNodeTSTypeAnnotation | BabelNodeNoop): BabelNodeTSDeclareMethod;
  declare e***REMOVED***port function tsQualifiedName(left: BabelNodeTSEntityName, right: BabelNodeIdentifier): BabelNodeTSQualifiedName;
  declare e***REMOVED***port function tsCallSignatureDeclaration(typeParameters?: BabelNodeTSTypeParameterDeclaration, parameters: Array<BabelNodeArrayPattern | BabelNodeIdentifier | BabelNodeObjectPattern | BabelNodeRestElement>, typeAnnotation?: BabelNodeTSTypeAnnotation): BabelNodeTSCallSignatureDeclaration;
  declare e***REMOVED***port function tsConstructSignatureDeclaration(typeParameters?: BabelNodeTSTypeParameterDeclaration, parameters: Array<BabelNodeArrayPattern | BabelNodeIdentifier | BabelNodeObjectPattern | BabelNodeRestElement>, typeAnnotation?: BabelNodeTSTypeAnnotation): BabelNodeTSConstructSignatureDeclaration;
  declare e***REMOVED***port function tsPropertySignature(key: BabelNodeE***REMOVED***pression, typeAnnotation?: BabelNodeTSTypeAnnotation): BabelNodeTSPropertySignature;
  declare e***REMOVED***port function tsMethodSignature(key: BabelNodeE***REMOVED***pression, typeParameters?: BabelNodeTSTypeParameterDeclaration, parameters: Array<BabelNodeArrayPattern | BabelNodeIdentifier | BabelNodeObjectPattern | BabelNodeRestElement>, typeAnnotation?: BabelNodeTSTypeAnnotation): BabelNodeTSMethodSignature;
  declare e***REMOVED***port function tsInde***REMOVED***Signature(parameters: Array<BabelNodeIdentifier>, typeAnnotation?: BabelNodeTSTypeAnnotation): BabelNodeTSInde***REMOVED***Signature;
  declare e***REMOVED***port function tsAnyKeyword(): BabelNodeTSAnyKeyword;
  declare e***REMOVED***port function tsBooleanKeyword(): BabelNodeTSBooleanKeyword;
  declare e***REMOVED***port function tsBigIntKeyword(): BabelNodeTSBigIntKeyword;
  declare e***REMOVED***port function tsIntrinsicKeyword(): BabelNodeTSIntrinsicKeyword;
  declare e***REMOVED***port function tsNeverKeyword(): BabelNodeTSNeverKeyword;
  declare e***REMOVED***port function tsNullKeyword(): BabelNodeTSNullKeyword;
  declare e***REMOVED***port function tsNumberKeyword(): BabelNodeTSNumberKeyword;
  declare e***REMOVED***port function tsObjectKeyword(): BabelNodeTSObjectKeyword;
  declare e***REMOVED***port function tsStringKeyword(): BabelNodeTSStringKeyword;
  declare e***REMOVED***port function tsSymbolKeyword(): BabelNodeTSSymbolKeyword;
  declare e***REMOVED***port function tsUndefinedKeyword(): BabelNodeTSUndefinedKeyword;
  declare e***REMOVED***port function tsUnknownKeyword(): BabelNodeTSUnknownKeyword;
  declare e***REMOVED***port function tsVoidKeyword(): BabelNodeTSVoidKeyword;
  declare e***REMOVED***port function tsThisType(): BabelNodeTSThisType;
  declare e***REMOVED***port function tsFunctionType(typeParameters?: BabelNodeTSTypeParameterDeclaration, parameters: Array<BabelNodeArrayPattern | BabelNodeIdentifier | BabelNodeObjectPattern | BabelNodeRestElement>, typeAnnotation?: BabelNodeTSTypeAnnotation): BabelNodeTSFunctionType;
  declare e***REMOVED***port function tsConstructorType(typeParameters?: BabelNodeTSTypeParameterDeclaration, parameters: Array<BabelNodeArrayPattern | BabelNodeIdentifier | BabelNodeObjectPattern | BabelNodeRestElement>, typeAnnotation?: BabelNodeTSTypeAnnotation): BabelNodeTSConstructorType;
  declare e***REMOVED***port function tsTypeReference(typeName: BabelNodeTSEntityName, typeParameters?: BabelNodeTSTypeParameterInstantiation): BabelNodeTSTypeReference;
  declare e***REMOVED***port function tsTypePredicate(parameterName: BabelNodeIdentifier | BabelNodeTSThisType, typeAnnotation?: BabelNodeTSTypeAnnotation, asserts?: boolean): BabelNodeTSTypePredicate;
  declare e***REMOVED***port function tsTypeQuery(e***REMOVED***prName: BabelNodeTSEntityName | BabelNodeTSImportType, typeParameters?: BabelNodeTSTypeParameterInstantiation): BabelNodeTSTypeQuery;
  declare e***REMOVED***port function tsTypeLiteral(members: Array<BabelNodeTSTypeElement>): BabelNodeTSTypeLiteral;
  declare e***REMOVED***port function tsArrayType(elementType: BabelNodeTSType): BabelNodeTSArrayType;
  declare e***REMOVED***port function tsTupleType(elementTypes: Array<BabelNodeTSType | BabelNodeTSNamedTupleMember>): BabelNodeTSTupleType;
  declare e***REMOVED***port function tsOptionalType(typeAnnotation: BabelNodeTSType): BabelNodeTSOptionalType;
  declare e***REMOVED***port function tsRestType(typeAnnotation: BabelNodeTSType): BabelNodeTSRestType;
  declare e***REMOVED***port function tsNamedTupleMember(label: BabelNodeIdentifier, elementType: BabelNodeTSType, optional?: boolean): BabelNodeTSNamedTupleMember;
  declare e***REMOVED***port function tsUnionType(types: Array<BabelNodeTSType>): BabelNodeTSUnionType;
  declare e***REMOVED***port function tsIntersectionType(types: Array<BabelNodeTSType>): BabelNodeTSIntersectionType;
  declare e***REMOVED***port function tsConditionalType(checkType: BabelNodeTSType, e***REMOVED***tendsType: BabelNodeTSType, trueType: BabelNodeTSType, falseType: BabelNodeTSType): BabelNodeTSConditionalType;
  declare e***REMOVED***port function tsInferType(typeParameter: BabelNodeTSTypeParameter): BabelNodeTSInferType;
  declare e***REMOVED***port function tsParenthesizedType(typeAnnotation: BabelNodeTSType): BabelNodeTSParenthesizedType;
  declare e***REMOVED***port function tsTypeOperator(typeAnnotation: BabelNodeTSType): BabelNodeTSTypeOperator;
  declare e***REMOVED***port function tsInde***REMOVED***edAccessType(objectType: BabelNodeTSType, inde***REMOVED***Type: BabelNodeTSType): BabelNodeTSInde***REMOVED***edAccessType;
  declare e***REMOVED***port function tsMappedType(typeParameter: BabelNodeTSTypeParameter, typeAnnotation?: BabelNodeTSType, nameType?: BabelNodeTSType): BabelNodeTSMappedType;
  declare e***REMOVED***port function tsLiteralType(literal: BabelNodeNumericLiteral | BabelNodeStringLiteral | BabelNodeBooleanLiteral | BabelNodeBigIntLiteral | BabelNodeTemplateLiteral | BabelNodeUnaryE***REMOVED***pression): BabelNodeTSLiteralType;
  declare e***REMOVED***port function tsE***REMOVED***pressionWithTypeArguments(e***REMOVED***pression: BabelNodeTSEntityName, typeParameters?: BabelNodeTSTypeParameterInstantiation): BabelNodeTSE***REMOVED***pressionWithTypeArguments;
  declare e***REMOVED***port function tsInterfaceDeclaration(id: BabelNodeIdentifier, typeParameters?: BabelNodeTSTypeParameterDeclaration, _e***REMOVED***tends?: Array<BabelNodeTSE***REMOVED***pressionWithTypeArguments>, body: BabelNodeTSInterfaceBody): BabelNodeTSInterfaceDeclaration;
  declare e***REMOVED***port function tsInterfaceBody(body: Array<BabelNodeTSTypeElement>): BabelNodeTSInterfaceBody;
  declare e***REMOVED***port function tsTypeAliasDeclaration(id: BabelNodeIdentifier, typeParameters?: BabelNodeTSTypeParameterDeclaration, typeAnnotation: BabelNodeTSType): BabelNodeTSTypeAliasDeclaration;
  declare e***REMOVED***port function tsInstantiationE***REMOVED***pression(e***REMOVED***pression: BabelNodeE***REMOVED***pression, typeParameters?: BabelNodeTSTypeParameterInstantiation): BabelNodeTSInstantiationE***REMOVED***pression;
  declare e***REMOVED***port function tsAsE***REMOVED***pression(e***REMOVED***pression: BabelNodeE***REMOVED***pression, typeAnnotation: BabelNodeTSType): BabelNodeTSAsE***REMOVED***pression;
  declare e***REMOVED***port function tsSatisfiesE***REMOVED***pression(e***REMOVED***pression: BabelNodeE***REMOVED***pression, typeAnnotation: BabelNodeTSType): BabelNodeTSSatisfiesE***REMOVED***pression;
  declare e***REMOVED***port function tsTypeAssertion(typeAnnotation: BabelNodeTSType, e***REMOVED***pression: BabelNodeE***REMOVED***pression): BabelNodeTSTypeAssertion;
  declare e***REMOVED***port function tsEnumDeclaration(id: BabelNodeIdentifier, members: Array<BabelNodeTSEnumMember>): BabelNodeTSEnumDeclaration;
  declare e***REMOVED***port function tsEnumMember(id: BabelNodeIdentifier | BabelNodeStringLiteral, initializer?: BabelNodeE***REMOVED***pression): BabelNodeTSEnumMember;
  declare e***REMOVED***port function tsModuleDeclaration(id: BabelNodeIdentifier | BabelNodeStringLiteral, body: BabelNodeTSModuleBlock | BabelNodeTSModuleDeclaration): BabelNodeTSModuleDeclaration;
  declare e***REMOVED***port function tsModuleBlock(body: Array<BabelNodeStatement>): BabelNodeTSModuleBlock;
  declare e***REMOVED***port function tsImportType(argument: BabelNodeStringLiteral, qualifier?: BabelNodeTSEntityName, typeParameters?: BabelNodeTSTypeParameterInstantiation): BabelNodeTSImportType;
  declare e***REMOVED***port function tsImportEqualsDeclaration(id: BabelNodeIdentifier, moduleReference: BabelNodeTSEntityName | BabelNodeTSE***REMOVED***ternalModuleReference): BabelNodeTSImportEqualsDeclaration;
  declare e***REMOVED***port function tsE***REMOVED***ternalModuleReference(e***REMOVED***pression: BabelNodeStringLiteral): BabelNodeTSE***REMOVED***ternalModuleReference;
  declare e***REMOVED***port function tsNonNullE***REMOVED***pression(e***REMOVED***pression: BabelNodeE***REMOVED***pression): BabelNodeTSNonNullE***REMOVED***pression;
  declare e***REMOVED***port function tsE***REMOVED***portAssignment(e***REMOVED***pression: BabelNodeE***REMOVED***pression): BabelNodeTSE***REMOVED***portAssignment;
  declare e***REMOVED***port function tsNamespaceE***REMOVED***portDeclaration(id: BabelNodeIdentifier): BabelNodeTSNamespaceE***REMOVED***portDeclaration;
  declare e***REMOVED***port function tsTypeAnnotation(typeAnnotation: BabelNodeTSType): BabelNodeTSTypeAnnotation;
  declare e***REMOVED***port function tsTypeParameterInstantiation(params: Array<BabelNodeTSType>): BabelNodeTSTypeParameterInstantiation;
  declare e***REMOVED***port function tsTypeParameterDeclaration(params: Array<BabelNodeTSTypeParameter>): BabelNodeTSTypeParameterDeclaration;
  declare e***REMOVED***port function tsTypeParameter(constraint?: BabelNodeTSType, _default?: BabelNodeTSType, name: string): BabelNodeTSTypeParameter;
  declare e***REMOVED***port function isArrayE***REMOVED***pression(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeArrayE***REMOVED***pression)
  declare e***REMOVED***port function assertArrayE***REMOVED***pression(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isAssignmentE***REMOVED***pression(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeAssignmentE***REMOVED***pression)
  declare e***REMOVED***port function assertAssignmentE***REMOVED***pression(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isBinaryE***REMOVED***pression(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeBinaryE***REMOVED***pression)
  declare e***REMOVED***port function assertBinaryE***REMOVED***pression(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isInterpreterDirective(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeInterpreterDirective)
  declare e***REMOVED***port function assertInterpreterDirective(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isDirective(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeDirective)
  declare e***REMOVED***port function assertDirective(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isDirectiveLiteral(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeDirectiveLiteral)
  declare e***REMOVED***port function assertDirectiveLiteral(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isBlockStatement(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeBlockStatement)
  declare e***REMOVED***port function assertBlockStatement(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isBreakStatement(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeBreakStatement)
  declare e***REMOVED***port function assertBreakStatement(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isCallE***REMOVED***pression(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeCallE***REMOVED***pression)
  declare e***REMOVED***port function assertCallE***REMOVED***pression(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isCatchClause(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeCatchClause)
  declare e***REMOVED***port function assertCatchClause(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isConditionalE***REMOVED***pression(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeConditionalE***REMOVED***pression)
  declare e***REMOVED***port function assertConditionalE***REMOVED***pression(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isContinueStatement(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeContinueStatement)
  declare e***REMOVED***port function assertContinueStatement(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isDebuggerStatement(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeDebuggerStatement)
  declare e***REMOVED***port function assertDebuggerStatement(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isDoWhileStatement(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeDoWhileStatement)
  declare e***REMOVED***port function assertDoWhileStatement(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isEmptyStatement(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeEmptyStatement)
  declare e***REMOVED***port function assertEmptyStatement(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isE***REMOVED***pressionStatement(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeE***REMOVED***pressionStatement)
  declare e***REMOVED***port function assertE***REMOVED***pressionStatement(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isFile(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeFile)
  declare e***REMOVED***port function assertFile(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isForInStatement(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeForInStatement)
  declare e***REMOVED***port function assertForInStatement(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isForStatement(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeForStatement)
  declare e***REMOVED***port function assertForStatement(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isFunctionDeclaration(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeFunctionDeclaration)
  declare e***REMOVED***port function assertFunctionDeclaration(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isFunctionE***REMOVED***pression(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeFunctionE***REMOVED***pression)
  declare e***REMOVED***port function assertFunctionE***REMOVED***pression(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isIdentifier(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeIdentifier)
  declare e***REMOVED***port function assertIdentifier(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isIfStatement(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeIfStatement)
  declare e***REMOVED***port function assertIfStatement(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isLabeledStatement(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeLabeledStatement)
  declare e***REMOVED***port function assertLabeledStatement(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isStringLiteral(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeStringLiteral)
  declare e***REMOVED***port function assertStringLiteral(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isNumericLiteral(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeNumericLiteral)
  declare e***REMOVED***port function assertNumericLiteral(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isNullLiteral(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeNullLiteral)
  declare e***REMOVED***port function assertNullLiteral(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isBooleanLiteral(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeBooleanLiteral)
  declare e***REMOVED***port function assertBooleanLiteral(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isRegE***REMOVED***pLiteral(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeRegE***REMOVED***pLiteral)
  declare e***REMOVED***port function assertRegE***REMOVED***pLiteral(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isLogicalE***REMOVED***pression(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeLogicalE***REMOVED***pression)
  declare e***REMOVED***port function assertLogicalE***REMOVED***pression(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isMemberE***REMOVED***pression(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeMemberE***REMOVED***pression)
  declare e***REMOVED***port function assertMemberE***REMOVED***pression(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isNewE***REMOVED***pression(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeNewE***REMOVED***pression)
  declare e***REMOVED***port function assertNewE***REMOVED***pression(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isProgram(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeProgram)
  declare e***REMOVED***port function assertProgram(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isObjectE***REMOVED***pression(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeObjectE***REMOVED***pression)
  declare e***REMOVED***port function assertObjectE***REMOVED***pression(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isObjectMethod(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeObjectMethod)
  declare e***REMOVED***port function assertObjectMethod(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isObjectProperty(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeObjectProperty)
  declare e***REMOVED***port function assertObjectProperty(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isRestElement(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeRestElement)
  declare e***REMOVED***port function assertRestElement(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isReturnStatement(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeReturnStatement)
  declare e***REMOVED***port function assertReturnStatement(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isSequenceE***REMOVED***pression(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeSequenceE***REMOVED***pression)
  declare e***REMOVED***port function assertSequenceE***REMOVED***pression(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isParenthesizedE***REMOVED***pression(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeParenthesizedE***REMOVED***pression)
  declare e***REMOVED***port function assertParenthesizedE***REMOVED***pression(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isSwitchCase(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeSwitchCase)
  declare e***REMOVED***port function assertSwitchCase(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isSwitchStatement(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeSwitchStatement)
  declare e***REMOVED***port function assertSwitchStatement(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isThisE***REMOVED***pression(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeThisE***REMOVED***pression)
  declare e***REMOVED***port function assertThisE***REMOVED***pression(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isThrowStatement(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeThrowStatement)
  declare e***REMOVED***port function assertThrowStatement(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isTryStatement(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeTryStatement)
  declare e***REMOVED***port function assertTryStatement(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isUnaryE***REMOVED***pression(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeUnaryE***REMOVED***pression)
  declare e***REMOVED***port function assertUnaryE***REMOVED***pression(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isUpdateE***REMOVED***pression(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeUpdateE***REMOVED***pression)
  declare e***REMOVED***port function assertUpdateE***REMOVED***pression(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isVariableDeclaration(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeVariableDeclaration)
  declare e***REMOVED***port function assertVariableDeclaration(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isVariableDeclarator(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeVariableDeclarator)
  declare e***REMOVED***port function assertVariableDeclarator(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isWhileStatement(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeWhileStatement)
  declare e***REMOVED***port function assertWhileStatement(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isWithStatement(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeWithStatement)
  declare e***REMOVED***port function assertWithStatement(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isAssignmentPattern(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeAssignmentPattern)
  declare e***REMOVED***port function assertAssignmentPattern(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isArrayPattern(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeArrayPattern)
  declare e***REMOVED***port function assertArrayPattern(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isArrowFunctionE***REMOVED***pression(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeArrowFunctionE***REMOVED***pression)
  declare e***REMOVED***port function assertArrowFunctionE***REMOVED***pression(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isClassBody(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeClassBody)
  declare e***REMOVED***port function assertClassBody(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isClassE***REMOVED***pression(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeClassE***REMOVED***pression)
  declare e***REMOVED***port function assertClassE***REMOVED***pression(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isClassDeclaration(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeClassDeclaration)
  declare e***REMOVED***port function assertClassDeclaration(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isE***REMOVED***portAllDeclaration(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeE***REMOVED***portAllDeclaration)
  declare e***REMOVED***port function assertE***REMOVED***portAllDeclaration(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isE***REMOVED***portDefaultDeclaration(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeE***REMOVED***portDefaultDeclaration)
  declare e***REMOVED***port function assertE***REMOVED***portDefaultDeclaration(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isE***REMOVED***portNamedDeclaration(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeE***REMOVED***portNamedDeclaration)
  declare e***REMOVED***port function assertE***REMOVED***portNamedDeclaration(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isE***REMOVED***portSpecifier(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeE***REMOVED***portSpecifier)
  declare e***REMOVED***port function assertE***REMOVED***portSpecifier(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isForOfStatement(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeForOfStatement)
  declare e***REMOVED***port function assertForOfStatement(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isImportDeclaration(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeImportDeclaration)
  declare e***REMOVED***port function assertImportDeclaration(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isImportDefaultSpecifier(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeImportDefaultSpecifier)
  declare e***REMOVED***port function assertImportDefaultSpecifier(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isImportNamespaceSpecifier(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeImportNamespaceSpecifier)
  declare e***REMOVED***port function assertImportNamespaceSpecifier(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isImportSpecifier(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeImportSpecifier)
  declare e***REMOVED***port function assertImportSpecifier(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isImportE***REMOVED***pression(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeImportE***REMOVED***pression)
  declare e***REMOVED***port function assertImportE***REMOVED***pression(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isMetaProperty(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeMetaProperty)
  declare e***REMOVED***port function assertMetaProperty(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isClassMethod(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeClassMethod)
  declare e***REMOVED***port function assertClassMethod(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isObjectPattern(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeObjectPattern)
  declare e***REMOVED***port function assertObjectPattern(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isSpreadElement(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeSpreadElement)
  declare e***REMOVED***port function assertSpreadElement(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isSuper(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeSuper)
  declare e***REMOVED***port function assertSuper(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isTaggedTemplateE***REMOVED***pression(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeTaggedTemplateE***REMOVED***pression)
  declare e***REMOVED***port function assertTaggedTemplateE***REMOVED***pression(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isTemplateElement(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeTemplateElement)
  declare e***REMOVED***port function assertTemplateElement(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isTemplateLiteral(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeTemplateLiteral)
  declare e***REMOVED***port function assertTemplateLiteral(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isYieldE***REMOVED***pression(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeYieldE***REMOVED***pression)
  declare e***REMOVED***port function assertYieldE***REMOVED***pression(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isAwaitE***REMOVED***pression(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeAwaitE***REMOVED***pression)
  declare e***REMOVED***port function assertAwaitE***REMOVED***pression(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isImport(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeImport)
  declare e***REMOVED***port function assertImport(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isBigIntLiteral(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeBigIntLiteral)
  declare e***REMOVED***port function assertBigIntLiteral(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isE***REMOVED***portNamespaceSpecifier(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeE***REMOVED***portNamespaceSpecifier)
  declare e***REMOVED***port function assertE***REMOVED***portNamespaceSpecifier(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isOptionalMemberE***REMOVED***pression(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeOptionalMemberE***REMOVED***pression)
  declare e***REMOVED***port function assertOptionalMemberE***REMOVED***pression(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isOptionalCallE***REMOVED***pression(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeOptionalCallE***REMOVED***pression)
  declare e***REMOVED***port function assertOptionalCallE***REMOVED***pression(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isClassProperty(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeClassProperty)
  declare e***REMOVED***port function assertClassProperty(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isClassAccessorProperty(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeClassAccessorProperty)
  declare e***REMOVED***port function assertClassAccessorProperty(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isClassPrivateProperty(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeClassPrivateProperty)
  declare e***REMOVED***port function assertClassPrivateProperty(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isClassPrivateMethod(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeClassPrivateMethod)
  declare e***REMOVED***port function assertClassPrivateMethod(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isPrivateName(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodePrivateName)
  declare e***REMOVED***port function assertPrivateName(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isStaticBlock(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeStaticBlock)
  declare e***REMOVED***port function assertStaticBlock(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isAnyTypeAnnotation(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeAnyTypeAnnotation)
  declare e***REMOVED***port function assertAnyTypeAnnotation(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isArrayTypeAnnotation(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeArrayTypeAnnotation)
  declare e***REMOVED***port function assertArrayTypeAnnotation(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isBooleanTypeAnnotation(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeBooleanTypeAnnotation)
  declare e***REMOVED***port function assertBooleanTypeAnnotation(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isBooleanLiteralTypeAnnotation(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeBooleanLiteralTypeAnnotation)
  declare e***REMOVED***port function assertBooleanLiteralTypeAnnotation(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isNullLiteralTypeAnnotation(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeNullLiteralTypeAnnotation)
  declare e***REMOVED***port function assertNullLiteralTypeAnnotation(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isClassImplements(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeClassImplements)
  declare e***REMOVED***port function assertClassImplements(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isDeclareClass(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeDeclareClass)
  declare e***REMOVED***port function assertDeclareClass(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isDeclareFunction(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeDeclareFunction)
  declare e***REMOVED***port function assertDeclareFunction(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isDeclareInterface(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeDeclareInterface)
  declare e***REMOVED***port function assertDeclareInterface(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isDeclareModule(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeDeclareModule)
  declare e***REMOVED***port function assertDeclareModule(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isDeclareModuleE***REMOVED***ports(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeDeclareModuleE***REMOVED***ports)
  declare e***REMOVED***port function assertDeclareModuleE***REMOVED***ports(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isDeclareTypeAlias(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeDeclareTypeAlias)
  declare e***REMOVED***port function assertDeclareTypeAlias(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isDeclareOpaqueType(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeDeclareOpaqueType)
  declare e***REMOVED***port function assertDeclareOpaqueType(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isDeclareVariable(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeDeclareVariable)
  declare e***REMOVED***port function assertDeclareVariable(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isDeclareE***REMOVED***portDeclaration(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeDeclareE***REMOVED***portDeclaration)
  declare e***REMOVED***port function assertDeclareE***REMOVED***portDeclaration(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isDeclareE***REMOVED***portAllDeclaration(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeDeclareE***REMOVED***portAllDeclaration)
  declare e***REMOVED***port function assertDeclareE***REMOVED***portAllDeclaration(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isDeclaredPredicate(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeDeclaredPredicate)
  declare e***REMOVED***port function assertDeclaredPredicate(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isE***REMOVED***istsTypeAnnotation(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeE***REMOVED***istsTypeAnnotation)
  declare e***REMOVED***port function assertE***REMOVED***istsTypeAnnotation(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isFunctionTypeAnnotation(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeFunctionTypeAnnotation)
  declare e***REMOVED***port function assertFunctionTypeAnnotation(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isFunctionTypeParam(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeFunctionTypeParam)
  declare e***REMOVED***port function assertFunctionTypeParam(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isGenericTypeAnnotation(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeGenericTypeAnnotation)
  declare e***REMOVED***port function assertGenericTypeAnnotation(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isInferredPredicate(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeInferredPredicate)
  declare e***REMOVED***port function assertInferredPredicate(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isInterfaceE***REMOVED***tends(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeInterfaceE***REMOVED***tends)
  declare e***REMOVED***port function assertInterfaceE***REMOVED***tends(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isInterfaceDeclaration(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeInterfaceDeclaration)
  declare e***REMOVED***port function assertInterfaceDeclaration(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isInterfaceTypeAnnotation(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeInterfaceTypeAnnotation)
  declare e***REMOVED***port function assertInterfaceTypeAnnotation(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isIntersectionTypeAnnotation(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeIntersectionTypeAnnotation)
  declare e***REMOVED***port function assertIntersectionTypeAnnotation(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isMi***REMOVED***edTypeAnnotation(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeMi***REMOVED***edTypeAnnotation)
  declare e***REMOVED***port function assertMi***REMOVED***edTypeAnnotation(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isEmptyTypeAnnotation(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeEmptyTypeAnnotation)
  declare e***REMOVED***port function assertEmptyTypeAnnotation(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isNullableTypeAnnotation(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeNullableTypeAnnotation)
  declare e***REMOVED***port function assertNullableTypeAnnotation(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isNumberLiteralTypeAnnotation(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeNumberLiteralTypeAnnotation)
  declare e***REMOVED***port function assertNumberLiteralTypeAnnotation(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isNumberTypeAnnotation(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeNumberTypeAnnotation)
  declare e***REMOVED***port function assertNumberTypeAnnotation(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isObjectTypeAnnotation(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeObjectTypeAnnotation)
  declare e***REMOVED***port function assertObjectTypeAnnotation(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isObjectTypeInternalSlot(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeObjectTypeInternalSlot)
  declare e***REMOVED***port function assertObjectTypeInternalSlot(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isObjectTypeCallProperty(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeObjectTypeCallProperty)
  declare e***REMOVED***port function assertObjectTypeCallProperty(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isObjectTypeInde***REMOVED***er(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeObjectTypeInde***REMOVED***er)
  declare e***REMOVED***port function assertObjectTypeInde***REMOVED***er(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isObjectTypeProperty(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeObjectTypeProperty)
  declare e***REMOVED***port function assertObjectTypeProperty(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isObjectTypeSpreadProperty(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeObjectTypeSpreadProperty)
  declare e***REMOVED***port function assertObjectTypeSpreadProperty(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isOpaqueType(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeOpaqueType)
  declare e***REMOVED***port function assertOpaqueType(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isQualifiedTypeIdentifier(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeQualifiedTypeIdentifier)
  declare e***REMOVED***port function assertQualifiedTypeIdentifier(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isStringLiteralTypeAnnotation(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeStringLiteralTypeAnnotation)
  declare e***REMOVED***port function assertStringLiteralTypeAnnotation(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isStringTypeAnnotation(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeStringTypeAnnotation)
  declare e***REMOVED***port function assertStringTypeAnnotation(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isSymbolTypeAnnotation(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeSymbolTypeAnnotation)
  declare e***REMOVED***port function assertSymbolTypeAnnotation(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isThisTypeAnnotation(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeThisTypeAnnotation)
  declare e***REMOVED***port function assertThisTypeAnnotation(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isTupleTypeAnnotation(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeTupleTypeAnnotation)
  declare e***REMOVED***port function assertTupleTypeAnnotation(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isTypeofTypeAnnotation(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeTypeofTypeAnnotation)
  declare e***REMOVED***port function assertTypeofTypeAnnotation(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isTypeAlias(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeTypeAlias)
  declare e***REMOVED***port function assertTypeAlias(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isTypeAnnotation(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeTypeAnnotation)
  declare e***REMOVED***port function assertTypeAnnotation(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isTypeCastE***REMOVED***pression(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeTypeCastE***REMOVED***pression)
  declare e***REMOVED***port function assertTypeCastE***REMOVED***pression(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isTypeParameter(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeTypeParameter)
  declare e***REMOVED***port function assertTypeParameter(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isTypeParameterDeclaration(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeTypeParameterDeclaration)
  declare e***REMOVED***port function assertTypeParameterDeclaration(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isTypeParameterInstantiation(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeTypeParameterInstantiation)
  declare e***REMOVED***port function assertTypeParameterInstantiation(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isUnionTypeAnnotation(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeUnionTypeAnnotation)
  declare e***REMOVED***port function assertUnionTypeAnnotation(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isVariance(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeVariance)
  declare e***REMOVED***port function assertVariance(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isVoidTypeAnnotation(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeVoidTypeAnnotation)
  declare e***REMOVED***port function assertVoidTypeAnnotation(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isEnumDeclaration(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeEnumDeclaration)
  declare e***REMOVED***port function assertEnumDeclaration(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isEnumBooleanBody(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeEnumBooleanBody)
  declare e***REMOVED***port function assertEnumBooleanBody(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isEnumNumberBody(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeEnumNumberBody)
  declare e***REMOVED***port function assertEnumNumberBody(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isEnumStringBody(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeEnumStringBody)
  declare e***REMOVED***port function assertEnumStringBody(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isEnumSymbolBody(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeEnumSymbolBody)
  declare e***REMOVED***port function assertEnumSymbolBody(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isEnumBooleanMember(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeEnumBooleanMember)
  declare e***REMOVED***port function assertEnumBooleanMember(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isEnumNumberMember(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeEnumNumberMember)
  declare e***REMOVED***port function assertEnumNumberMember(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isEnumStringMember(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeEnumStringMember)
  declare e***REMOVED***port function assertEnumStringMember(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isEnumDefaultedMember(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeEnumDefaultedMember)
  declare e***REMOVED***port function assertEnumDefaultedMember(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isInde***REMOVED***edAccessType(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeInde***REMOVED***edAccessType)
  declare e***REMOVED***port function assertInde***REMOVED***edAccessType(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isOptionalInde***REMOVED***edAccessType(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeOptionalInde***REMOVED***edAccessType)
  declare e***REMOVED***port function assertOptionalInde***REMOVED***edAccessType(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isJSXAttribute(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeJSXAttribute)
  declare e***REMOVED***port function assertJSXAttribute(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isJSXClosingElement(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeJSXClosingElement)
  declare e***REMOVED***port function assertJSXClosingElement(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isJSXElement(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeJSXElement)
  declare e***REMOVED***port function assertJSXElement(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isJSXEmptyE***REMOVED***pression(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeJSXEmptyE***REMOVED***pression)
  declare e***REMOVED***port function assertJSXEmptyE***REMOVED***pression(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isJSXE***REMOVED***pressionContainer(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeJSXE***REMOVED***pressionContainer)
  declare e***REMOVED***port function assertJSXE***REMOVED***pressionContainer(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isJSXSpreadChild(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeJSXSpreadChild)
  declare e***REMOVED***port function assertJSXSpreadChild(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isJSXIdentifier(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeJSXIdentifier)
  declare e***REMOVED***port function assertJSXIdentifier(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isJSXMemberE***REMOVED***pression(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeJSXMemberE***REMOVED***pression)
  declare e***REMOVED***port function assertJSXMemberE***REMOVED***pression(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isJSXNamespacedName(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeJSXNamespacedName)
  declare e***REMOVED***port function assertJSXNamespacedName(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isJSXOpeningElement(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeJSXOpeningElement)
  declare e***REMOVED***port function assertJSXOpeningElement(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isJSXSpreadAttribute(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeJSXSpreadAttribute)
  declare e***REMOVED***port function assertJSXSpreadAttribute(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isJSXTe***REMOVED***t(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeJSXTe***REMOVED***t)
  declare e***REMOVED***port function assertJSXTe***REMOVED***t(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isJSXFragment(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeJSXFragment)
  declare e***REMOVED***port function assertJSXFragment(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isJSXOpeningFragment(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeJSXOpeningFragment)
  declare e***REMOVED***port function assertJSXOpeningFragment(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isJSXClosingFragment(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeJSXClosingFragment)
  declare e***REMOVED***port function assertJSXClosingFragment(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isNoop(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeNoop)
  declare e***REMOVED***port function assertNoop(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isPlaceholder(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodePlaceholder)
  declare e***REMOVED***port function assertPlaceholder(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isV8IntrinsicIdentifier(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeV8IntrinsicIdentifier)
  declare e***REMOVED***port function assertV8IntrinsicIdentifier(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isArgumentPlaceholder(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeArgumentPlaceholder)
  declare e***REMOVED***port function assertArgumentPlaceholder(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isBindE***REMOVED***pression(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeBindE***REMOVED***pression)
  declare e***REMOVED***port function assertBindE***REMOVED***pression(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isImportAttribute(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeImportAttribute)
  declare e***REMOVED***port function assertImportAttribute(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isDecorator(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeDecorator)
  declare e***REMOVED***port function assertDecorator(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isDoE***REMOVED***pression(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeDoE***REMOVED***pression)
  declare e***REMOVED***port function assertDoE***REMOVED***pression(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isE***REMOVED***portDefaultSpecifier(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeE***REMOVED***portDefaultSpecifier)
  declare e***REMOVED***port function assertE***REMOVED***portDefaultSpecifier(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isRecordE***REMOVED***pression(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeRecordE***REMOVED***pression)
  declare e***REMOVED***port function assertRecordE***REMOVED***pression(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isTupleE***REMOVED***pression(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeTupleE***REMOVED***pression)
  declare e***REMOVED***port function assertTupleE***REMOVED***pression(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isDecimalLiteral(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeDecimalLiteral)
  declare e***REMOVED***port function assertDecimalLiteral(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isModuleE***REMOVED***pression(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeModuleE***REMOVED***pression)
  declare e***REMOVED***port function assertModuleE***REMOVED***pression(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isTopicReference(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeTopicReference)
  declare e***REMOVED***port function assertTopicReference(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isPipelineTopicE***REMOVED***pression(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodePipelineTopicE***REMOVED***pression)
  declare e***REMOVED***port function assertPipelineTopicE***REMOVED***pression(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isPipelineBareFunction(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodePipelineBareFunction)
  declare e***REMOVED***port function assertPipelineBareFunction(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isPipelinePrimaryTopicReference(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodePipelinePrimaryTopicReference)
  declare e***REMOVED***port function assertPipelinePrimaryTopicReference(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isTSParameterProperty(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeTSParameterProperty)
  declare e***REMOVED***port function assertTSParameterProperty(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isTSDeclareFunction(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeTSDeclareFunction)
  declare e***REMOVED***port function assertTSDeclareFunction(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isTSDeclareMethod(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeTSDeclareMethod)
  declare e***REMOVED***port function assertTSDeclareMethod(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isTSQualifiedName(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeTSQualifiedName)
  declare e***REMOVED***port function assertTSQualifiedName(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isTSCallSignatureDeclaration(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeTSCallSignatureDeclaration)
  declare e***REMOVED***port function assertTSCallSignatureDeclaration(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isTSConstructSignatureDeclaration(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeTSConstructSignatureDeclaration)
  declare e***REMOVED***port function assertTSConstructSignatureDeclaration(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isTSPropertySignature(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeTSPropertySignature)
  declare e***REMOVED***port function assertTSPropertySignature(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isTSMethodSignature(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeTSMethodSignature)
  declare e***REMOVED***port function assertTSMethodSignature(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isTSInde***REMOVED***Signature(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeTSInde***REMOVED***Signature)
  declare e***REMOVED***port function assertTSInde***REMOVED***Signature(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isTSAnyKeyword(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeTSAnyKeyword)
  declare e***REMOVED***port function assertTSAnyKeyword(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isTSBooleanKeyword(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeTSBooleanKeyword)
  declare e***REMOVED***port function assertTSBooleanKeyword(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isTSBigIntKeyword(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeTSBigIntKeyword)
  declare e***REMOVED***port function assertTSBigIntKeyword(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isTSIntrinsicKeyword(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeTSIntrinsicKeyword)
  declare e***REMOVED***port function assertTSIntrinsicKeyword(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isTSNeverKeyword(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeTSNeverKeyword)
  declare e***REMOVED***port function assertTSNeverKeyword(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isTSNullKeyword(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeTSNullKeyword)
  declare e***REMOVED***port function assertTSNullKeyword(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isTSNumberKeyword(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeTSNumberKeyword)
  declare e***REMOVED***port function assertTSNumberKeyword(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isTSObjectKeyword(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeTSObjectKeyword)
  declare e***REMOVED***port function assertTSObjectKeyword(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isTSStringKeyword(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeTSStringKeyword)
  declare e***REMOVED***port function assertTSStringKeyword(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isTSSymbolKeyword(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeTSSymbolKeyword)
  declare e***REMOVED***port function assertTSSymbolKeyword(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isTSUndefinedKeyword(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeTSUndefinedKeyword)
  declare e***REMOVED***port function assertTSUndefinedKeyword(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isTSUnknownKeyword(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeTSUnknownKeyword)
  declare e***REMOVED***port function assertTSUnknownKeyword(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isTSVoidKeyword(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeTSVoidKeyword)
  declare e***REMOVED***port function assertTSVoidKeyword(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isTSThisType(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeTSThisType)
  declare e***REMOVED***port function assertTSThisType(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isTSFunctionType(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeTSFunctionType)
  declare e***REMOVED***port function assertTSFunctionType(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isTSConstructorType(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeTSConstructorType)
  declare e***REMOVED***port function assertTSConstructorType(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isTSTypeReference(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeTSTypeReference)
  declare e***REMOVED***port function assertTSTypeReference(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isTSTypePredicate(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeTSTypePredicate)
  declare e***REMOVED***port function assertTSTypePredicate(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isTSTypeQuery(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeTSTypeQuery)
  declare e***REMOVED***port function assertTSTypeQuery(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isTSTypeLiteral(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeTSTypeLiteral)
  declare e***REMOVED***port function assertTSTypeLiteral(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isTSArrayType(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeTSArrayType)
  declare e***REMOVED***port function assertTSArrayType(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isTSTupleType(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeTSTupleType)
  declare e***REMOVED***port function assertTSTupleType(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isTSOptionalType(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeTSOptionalType)
  declare e***REMOVED***port function assertTSOptionalType(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isTSRestType(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeTSRestType)
  declare e***REMOVED***port function assertTSRestType(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isTSNamedTupleMember(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeTSNamedTupleMember)
  declare e***REMOVED***port function assertTSNamedTupleMember(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isTSUnionType(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeTSUnionType)
  declare e***REMOVED***port function assertTSUnionType(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isTSIntersectionType(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeTSIntersectionType)
  declare e***REMOVED***port function assertTSIntersectionType(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isTSConditionalType(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeTSConditionalType)
  declare e***REMOVED***port function assertTSConditionalType(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isTSInferType(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeTSInferType)
  declare e***REMOVED***port function assertTSInferType(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isTSParenthesizedType(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeTSParenthesizedType)
  declare e***REMOVED***port function assertTSParenthesizedType(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isTSTypeOperator(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeTSTypeOperator)
  declare e***REMOVED***port function assertTSTypeOperator(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isTSInde***REMOVED***edAccessType(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeTSInde***REMOVED***edAccessType)
  declare e***REMOVED***port function assertTSInde***REMOVED***edAccessType(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isTSMappedType(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeTSMappedType)
  declare e***REMOVED***port function assertTSMappedType(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isTSLiteralType(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeTSLiteralType)
  declare e***REMOVED***port function assertTSLiteralType(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isTSE***REMOVED***pressionWithTypeArguments(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeTSE***REMOVED***pressionWithTypeArguments)
  declare e***REMOVED***port function assertTSE***REMOVED***pressionWithTypeArguments(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isTSInterfaceDeclaration(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeTSInterfaceDeclaration)
  declare e***REMOVED***port function assertTSInterfaceDeclaration(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isTSInterfaceBody(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeTSInterfaceBody)
  declare e***REMOVED***port function assertTSInterfaceBody(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isTSTypeAliasDeclaration(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeTSTypeAliasDeclaration)
  declare e***REMOVED***port function assertTSTypeAliasDeclaration(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isTSInstantiationE***REMOVED***pression(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeTSInstantiationE***REMOVED***pression)
  declare e***REMOVED***port function assertTSInstantiationE***REMOVED***pression(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isTSAsE***REMOVED***pression(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeTSAsE***REMOVED***pression)
  declare e***REMOVED***port function assertTSAsE***REMOVED***pression(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isTSSatisfiesE***REMOVED***pression(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeTSSatisfiesE***REMOVED***pression)
  declare e***REMOVED***port function assertTSSatisfiesE***REMOVED***pression(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isTSTypeAssertion(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeTSTypeAssertion)
  declare e***REMOVED***port function assertTSTypeAssertion(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isTSEnumDeclaration(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeTSEnumDeclaration)
  declare e***REMOVED***port function assertTSEnumDeclaration(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isTSEnumMember(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeTSEnumMember)
  declare e***REMOVED***port function assertTSEnumMember(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isTSModuleDeclaration(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeTSModuleDeclaration)
  declare e***REMOVED***port function assertTSModuleDeclaration(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isTSModuleBlock(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeTSModuleBlock)
  declare e***REMOVED***port function assertTSModuleBlock(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isTSImportType(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeTSImportType)
  declare e***REMOVED***port function assertTSImportType(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isTSImportEqualsDeclaration(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeTSImportEqualsDeclaration)
  declare e***REMOVED***port function assertTSImportEqualsDeclaration(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isTSE***REMOVED***ternalModuleReference(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeTSE***REMOVED***ternalModuleReference)
  declare e***REMOVED***port function assertTSE***REMOVED***ternalModuleReference(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isTSNonNullE***REMOVED***pression(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeTSNonNullE***REMOVED***pression)
  declare e***REMOVED***port function assertTSNonNullE***REMOVED***pression(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isTSE***REMOVED***portAssignment(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeTSE***REMOVED***portAssignment)
  declare e***REMOVED***port function assertTSE***REMOVED***portAssignment(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isTSNamespaceE***REMOVED***portDeclaration(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeTSNamespaceE***REMOVED***portDeclaration)
  declare e***REMOVED***port function assertTSNamespaceE***REMOVED***portDeclaration(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isTSTypeAnnotation(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeTSTypeAnnotation)
  declare e***REMOVED***port function assertTSTypeAnnotation(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isTSTypeParameterInstantiation(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeTSTypeParameterInstantiation)
  declare e***REMOVED***port function assertTSTypeParameterInstantiation(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isTSTypeParameterDeclaration(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeTSTypeParameterDeclaration)
  declare e***REMOVED***port function assertTSTypeParameterDeclaration(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isTSTypeParameter(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeTSTypeParameter)
  declare e***REMOVED***port function assertTSTypeParameter(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isStandardized(node: ?Object, opts?: ?Object): boolean
  declare e***REMOVED***port function assertStandardized(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isE***REMOVED***pression(node: ?Object, opts?: ?Object): boolean
  declare e***REMOVED***port function assertE***REMOVED***pression(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isBinary(node: ?Object, opts?: ?Object): boolean
  declare e***REMOVED***port function assertBinary(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isScopable(node: ?Object, opts?: ?Object): boolean
  declare e***REMOVED***port function assertScopable(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isBlockParent(node: ?Object, opts?: ?Object): boolean
  declare e***REMOVED***port function assertBlockParent(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isBlock(node: ?Object, opts?: ?Object): boolean
  declare e***REMOVED***port function assertBlock(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isStatement(node: ?Object, opts?: ?Object): boolean
  declare e***REMOVED***port function assertStatement(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isTerminatorless(node: ?Object, opts?: ?Object): boolean
  declare e***REMOVED***port function assertTerminatorless(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isCompletionStatement(node: ?Object, opts?: ?Object): boolean
  declare e***REMOVED***port function assertCompletionStatement(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isConditional(node: ?Object, opts?: ?Object): boolean
  declare e***REMOVED***port function assertConditional(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isLoop(node: ?Object, opts?: ?Object): boolean
  declare e***REMOVED***port function assertLoop(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isWhile(node: ?Object, opts?: ?Object): boolean
  declare e***REMOVED***port function assertWhile(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isE***REMOVED***pressionWrapper(node: ?Object, opts?: ?Object): boolean
  declare e***REMOVED***port function assertE***REMOVED***pressionWrapper(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isFor(node: ?Object, opts?: ?Object): boolean
  declare e***REMOVED***port function assertFor(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isForXStatement(node: ?Object, opts?: ?Object): boolean
  declare e***REMOVED***port function assertForXStatement(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isFunction(node: ?Object, opts?: ?Object): boolean
  declare e***REMOVED***port function assertFunction(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isFunctionParent(node: ?Object, opts?: ?Object): boolean
  declare e***REMOVED***port function assertFunctionParent(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isPureish(node: ?Object, opts?: ?Object): boolean
  declare e***REMOVED***port function assertPureish(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isDeclaration(node: ?Object, opts?: ?Object): boolean
  declare e***REMOVED***port function assertDeclaration(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isPatternLike(node: ?Object, opts?: ?Object): boolean
  declare e***REMOVED***port function assertPatternLike(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isLVal(node: ?Object, opts?: ?Object): boolean
  declare e***REMOVED***port function assertLVal(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isTSEntityName(node: ?Object, opts?: ?Object): boolean
  declare e***REMOVED***port function assertTSEntityName(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isLiteral(node: ?Object, opts?: ?Object): boolean
  declare e***REMOVED***port function assertLiteral(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isImmutable(node: ?Object, opts?: ?Object): boolean
  declare e***REMOVED***port function assertImmutable(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isUserWhitespacable(node: ?Object, opts?: ?Object): boolean
  declare e***REMOVED***port function assertUserWhitespacable(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isMethod(node: ?Object, opts?: ?Object): boolean
  declare e***REMOVED***port function assertMethod(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isObjectMember(node: ?Object, opts?: ?Object): boolean
  declare e***REMOVED***port function assertObjectMember(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isProperty(node: ?Object, opts?: ?Object): boolean
  declare e***REMOVED***port function assertProperty(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isUnaryLike(node: ?Object, opts?: ?Object): boolean
  declare e***REMOVED***port function assertUnaryLike(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isPattern(node: ?Object, opts?: ?Object): boolean
  declare e***REMOVED***port function assertPattern(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isClass(node: ?Object, opts?: ?Object): boolean
  declare e***REMOVED***port function assertClass(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isImportOrE***REMOVED***portDeclaration(node: ?Object, opts?: ?Object): boolean
  declare e***REMOVED***port function assertImportOrE***REMOVED***portDeclaration(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isE***REMOVED***portDeclaration(node: ?Object, opts?: ?Object): boolean
  declare e***REMOVED***port function assertE***REMOVED***portDeclaration(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isModuleSpecifier(node: ?Object, opts?: ?Object): boolean
  declare e***REMOVED***port function assertModuleSpecifier(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isAccessor(node: ?Object, opts?: ?Object): boolean
  declare e***REMOVED***port function assertAccessor(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isPrivate(node: ?Object, opts?: ?Object): boolean
  declare e***REMOVED***port function assertPrivate(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isFlow(node: ?Object, opts?: ?Object): boolean
  declare e***REMOVED***port function assertFlow(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isFlowType(node: ?Object, opts?: ?Object): boolean
  declare e***REMOVED***port function assertFlowType(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isFlowBaseAnnotation(node: ?Object, opts?: ?Object): boolean
  declare e***REMOVED***port function assertFlowBaseAnnotation(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isFlowDeclaration(node: ?Object, opts?: ?Object): boolean
  declare e***REMOVED***port function assertFlowDeclaration(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isFlowPredicate(node: ?Object, opts?: ?Object): boolean
  declare e***REMOVED***port function assertFlowPredicate(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isEnumBody(node: ?Object, opts?: ?Object): boolean
  declare e***REMOVED***port function assertEnumBody(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isEnumMember(node: ?Object, opts?: ?Object): boolean
  declare e***REMOVED***port function assertEnumMember(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isJSX(node: ?Object, opts?: ?Object): boolean
  declare e***REMOVED***port function assertJSX(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isMiscellaneous(node: ?Object, opts?: ?Object): boolean
  declare e***REMOVED***port function assertMiscellaneous(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isTypeScript(node: ?Object, opts?: ?Object): boolean
  declare e***REMOVED***port function assertTypeScript(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isTSTypeElement(node: ?Object, opts?: ?Object): boolean
  declare e***REMOVED***port function assertTSTypeElement(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isTSType(node: ?Object, opts?: ?Object): boolean
  declare e***REMOVED***port function assertTSType(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isTSBaseType(node: ?Object, opts?: ?Object): boolean
  declare e***REMOVED***port function assertTSBaseType(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isModuleDeclaration(node: ?Object, opts?: ?Object): boolean
  declare e***REMOVED***port function assertModuleDeclaration(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isNumberLiteral(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeNumericLiteral)
  declare e***REMOVED***port function assertNumberLiteral(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isRege***REMOVED***Literal(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeRegE***REMOVED***pLiteral)
  declare e***REMOVED***port function assertRege***REMOVED***Literal(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isRestProperty(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeRestElement)
  declare e***REMOVED***port function assertRestProperty(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port function isSpreadProperty(node: ?Object, opts?: ?Object): boolean %checks (node instanceof BabelNodeSpreadElement)
  declare e***REMOVED***port function assertSpreadProperty(node: ?Object, opts?: ?Object): void
  declare e***REMOVED***port var VISITOR_KEYS: { [type: string]: string[] }
  declare e***REMOVED***port function assertNode(obj: any): void
  declare e***REMOVED***port function createTypeAnnotationBasedOnTypeof(type: 'string' | 'number' | 'undefined' | 'boolean' | 'function' | 'object' | 'symbol'): BabelNodeTypeAnnotation
  declare e***REMOVED***port function createUnionTypeAnnotation(types: Array<BabelNodeFlowType>): BabelNodeUnionTypeAnnotation
  declare e***REMOVED***port function createFlowUnionType(types: Array<BabelNodeFlowType>): BabelNodeUnionTypeAnnotation
  declare e***REMOVED***port function buildChildren(node: { children: Array<BabelNodeJSXTe***REMOVED***t | BabelNodeJSXE***REMOVED***pressionContainer | BabelNodeJSXSpreadChild | BabelNodeJSXElement | BabelNodeJSXFragment | BabelNodeJSXEmptyE***REMOVED***pression> }): Array<BabelNodeJSXTe***REMOVED***t | BabelNodeJSXE***REMOVED***pressionContainer | BabelNodeJSXSpreadChild | BabelNodeJSXElement | BabelNodeJSXFragment>
  declare e***REMOVED***port function clone<T>(n: T): T;
  declare e***REMOVED***port function cloneDeep<T>(n: T): T;
  declare e***REMOVED***port function cloneDeepWithoutLoc<T>(n: T): T;
  declare e***REMOVED***port function cloneNode<T>(n: T, deep?: boolean, withoutLoc?: boolean): T;
  declare e***REMOVED***port function cloneWithoutLoc<T>(n: T): T;
  declare type CommentTypeShorthand = 'leading' | 'inner' | 'trailing'
  declare e***REMOVED***port function addComment<T: BabelNode>(node: T, type: CommentTypeShorthand, content: string, line?: boolean): T
  declare e***REMOVED***port function addComments<T: BabelNode>(node: T, type: CommentTypeShorthand, comments: Array<Comment>): T
  declare e***REMOVED***port function inheritInnerComments(node: BabelNode, parent: BabelNode): void
  declare e***REMOVED***port function inheritLeadingComments(node: BabelNode, parent: BabelNode): void
  declare e***REMOVED***port function inheritsComments<T: BabelNode>(node: T, parent: BabelNode): void
  declare e***REMOVED***port function inheritTrailingComments(node: BabelNode, parent: BabelNode): void
  declare e***REMOVED***port function removeComments<T: BabelNode>(node: T): T
  declare e***REMOVED***port function ensureBlock(node: BabelNode, key: string): BabelNodeBlockStatement
  declare e***REMOVED***port function toBindingIdentifierName(name?: ?string): string
  declare e***REMOVED***port function toBlock(node: BabelNodeStatement | BabelNodeE***REMOVED***pression, parent?: BabelNodeFunction | null): BabelNodeBlockStatement
  declare e***REMOVED***port function toComputedKey(node: BabelNodeMethod | BabelNodeProperty, key?: BabelNodeE***REMOVED***pression | BabelNodeIdentifier): BabelNodeE***REMOVED***pression
  declare e***REMOVED***port function toE***REMOVED***pression(node: BabelNodeE***REMOVED***pressionStatement | BabelNodeE***REMOVED***pression | BabelNodeClass | BabelNodeFunction): BabelNodeE***REMOVED***pression
  declare e***REMOVED***port function toIdentifier(name?: ?string): string
  declare e***REMOVED***port function toKeyAlias(node: BabelNodeMethod | BabelNodeProperty, key?: BabelNode): string
  declare e***REMOVED***port function toStatement(node: BabelNodeStatement | BabelNodeClass | BabelNodeFunction | BabelNodeAssignmentE***REMOVED***pression, ignore?: boolean): BabelNodeStatement | void
  declare e***REMOVED***port function valueToNode(value: any): BabelNodeE***REMOVED***pression
  declare e***REMOVED***port function removeTypeDuplicates(types: Array<BabelNodeFlowType>): Array<BabelNodeFlowType>
  declare e***REMOVED***port function appendToMemberE***REMOVED***pression(member: BabelNodeMemberE***REMOVED***pression, append: BabelNode, computed?: boolean): BabelNodeMemberE***REMOVED***pression
  declare e***REMOVED***port function inherits<T: BabelNode>(child: T, parent: BabelNode | null | void): T
  declare e***REMOVED***port function prependToMemberE***REMOVED***pression(member: BabelNodeMemberE***REMOVED***pression, prepend: BabelNodeE***REMOVED***pression): BabelNodeMemberE***REMOVED***pression
  declare e***REMOVED***port function removeProperties<T>(n: T, opts: ?{}): void;
  declare e***REMOVED***port function removePropertiesDeep<T>(n: T, opts: ?{}): T;
  declare e***REMOVED***port var getBindingIdentifiers: {
      (node: BabelNode, duplicates?: boolean, outerOnly?: boolean): { [key: string]: BabelNodeIdentifier | Array<BabelNodeIdentifier> },
      keys: { [type: string]: string[] }
    }
  declare e***REMOVED***port function getOuterBindingIdentifiers(node: BabelNode, duplicates?: boolean): { [key: string]: BabelNodeIdentifier | Array<BabelNodeIdentifier> }
  declare type TraversalAncestors = Array<{
    node: BabelNode,
    key: string,
    inde***REMOVED***?: number,
  }>;
  declare type TraversalHandler<T> = (BabelNode, TraversalAncestors, T) => void;
  declare type TraversalHandlers<T> = {
    enter?: TraversalHandler<T>,
    e***REMOVED***it?: TraversalHandler<T>,
  };
  declare e***REMOVED***port function traverse<T>(n: BabelNode, TraversalHandler<T> | TraversalHandlers<T>, state?: T): void;
  declare e***REMOVED***port function traverseFast<T>(n: BabelNode, h: TraversalHandler<T>, state?: T): void;
  declare e***REMOVED***port function shallowEqual(actual: Object, e***REMOVED***pected: Object): boolean
  declare e***REMOVED***port function buildMatchMemberE***REMOVED***pression(match: string, allowPartial?: boolean): (?BabelNode) => boolean
  declare e***REMOVED***port function is(type: string, n: BabelNode, opts: Object): boolean;
  declare e***REMOVED***port function isBinding(node: BabelNode, parent: BabelNode, grandparent?: BabelNode): boolean
  declare e***REMOVED***port function isBlockScoped(node: BabelNode): boolean
  declare e***REMOVED***port function isImmutable(node: BabelNode): boolean
  declare e***REMOVED***port function isLet(node: BabelNode): boolean
  declare e***REMOVED***port function isNode(node: ?Object): boolean
  declare e***REMOVED***port function isNodesEquivalent(a: any, b: any): boolean
  declare e***REMOVED***port function isPlaceholderType(placeholderType: string, targetType: string): boolean
  declare e***REMOVED***port function isReferenced(node: BabelNode, parent: BabelNode, grandparent?: BabelNode): boolean
  declare e***REMOVED***port function isScope(node: BabelNode, parent: BabelNode): boolean
  declare e***REMOVED***port function isSpecifierDefault(specifier: BabelNodeModuleSpecifier): boolean
  declare e***REMOVED***port function isType(nodetype: ?string, targetType: string): boolean
  declare e***REMOVED***port function isValidES3Identifier(name: string): boolean
  declare e***REMOVED***port function isValidES3Identifier(name: string): boolean
  declare e***REMOVED***port function isValidIdentifier(name: string): boolean
  declare e***REMOVED***port function isVar(node: BabelNode): boolean
  declare e***REMOVED***port function matchesPattern(node: ?BabelNode, match: string | Array<string>, allowPartial?: boolean): boolean
  declare e***REMOVED***port function validate(n: BabelNode, key: string, value: mi***REMOVED***ed): void;
}