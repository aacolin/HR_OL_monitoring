// NOTE: This file is autogenerated. Do not modify.
// See packages/babel-types/scripts/generators/typescript-legacy.js for script used.

interface BaseComment {
  value: string;
  start: number;
  end: number;
  loc: SourceLocation;
  type: "CommentBlock" | "CommentLine";
}

e***REMOVED***port interface CommentBlock e***REMOVED***tends BaseComment {
  type: "CommentBlock";
}

e***REMOVED***port interface CommentLine e***REMOVED***tends BaseComment {
  type: "CommentLine";
}

e***REMOVED***port type Comment = CommentBlock | CommentLine;

e***REMOVED***port interface SourceLocation {
  start: {
    line: number;
    column: number;
  };

  end: {
    line: number;
    column: number;
  };
}

interface BaseNode {
  leadingComments: ReadonlyArray<Comment> | null;
  innerComments: ReadonlyArray<Comment> | null;
  trailingComments: ReadonlyArray<Comment> | null;
  start: number | null;
  end: number | null;
  loc: SourceLocation | null;
  type: Node["type"];
  e***REMOVED***tra?: Record<string, unknown>;
}

e***REMOVED***port type Node = Accessor | AnyTypeAnnotation | ArgumentPlaceholder | ArrayE***REMOVED***pression | ArrayPattern | ArrayTypeAnnotation | ArrowFunctionE***REMOVED***pression | AssignmentE***REMOVED***pression | AssignmentPattern | AwaitE***REMOVED***pression | BigIntLiteral | Binary | BinaryE***REMOVED***pression | BindE***REMOVED***pression | Block | BlockParent | BlockStatement | BooleanLiteral | BooleanLiteralTypeAnnotation | BooleanTypeAnnotation | BreakStatement | CallE***REMOVED***pression | CatchClause | Class | ClassAccessorProperty | ClassBody | ClassDeclaration | ClassE***REMOVED***pression | ClassImplements | ClassMethod | ClassPrivateMethod | ClassPrivateProperty | ClassProperty | CompletionStatement | Conditional | ConditionalE***REMOVED***pression | ContinueStatement | DebuggerStatement | DecimalLiteral | Declaration | DeclareClass | DeclareE***REMOVED***portAllDeclaration | DeclareE***REMOVED***portDeclaration | DeclareFunction | DeclareInterface | DeclareModule | DeclareModuleE***REMOVED***ports | DeclareOpaqueType | DeclareTypeAlias | DeclareVariable | DeclaredPredicate | Decorator | Directive | DirectiveLiteral | DoE***REMOVED***pression | DoWhileStatement | EmptyStatement | EmptyTypeAnnotation | EnumBody | EnumBooleanBody | EnumBooleanMember | EnumDeclaration | EnumDefaultedMember | EnumMember | EnumNumberBody | EnumNumberMember | EnumStringBody | EnumStringMember | EnumSymbolBody | E***REMOVED***istsTypeAnnotation | E***REMOVED***portAllDeclaration | E***REMOVED***portDeclaration | E***REMOVED***portDefaultDeclaration | E***REMOVED***portDefaultSpecifier | E***REMOVED***portNamedDeclaration | E***REMOVED***portNamespaceSpecifier | E***REMOVED***portSpecifier | E***REMOVED***pression | E***REMOVED***pressionStatement | E***REMOVED***pressionWrapper | File | Flow | FlowBaseAnnotation | FlowDeclaration | FlowPredicate | FlowType | For | ForInStatement | ForOfStatement | ForStatement | ForXStatement | Function | FunctionDeclaration | FunctionE***REMOVED***pression | FunctionParent | FunctionTypeAnnotation | FunctionTypeParam | GenericTypeAnnotation | Identifier | IfStatement | Immutable | Import | ImportAttribute | ImportDeclaration | ImportDefaultSpecifier | ImportE***REMOVED***pression | ImportNamespaceSpecifier | ImportOrE***REMOVED***portDeclaration | ImportSpecifier | Inde***REMOVED***edAccessType | InferredPredicate | InterfaceDeclaration | InterfaceE***REMOVED***tends | InterfaceTypeAnnotation | InterpreterDirective | IntersectionTypeAnnotation | JSX | JSXAttribute | JSXClosingElement | JSXClosingFragment | JSXElement | JSXEmptyE***REMOVED***pression | JSXE***REMOVED***pressionContainer | JSXFragment | JSXIdentifier | JSXMemberE***REMOVED***pression | JSXNamespacedName | JSXOpeningElement | JSXOpeningFragment | JSXSpreadAttribute | JSXSpreadChild | JSXTe***REMOVED***t | LVal | LabeledStatement | Literal | LogicalE***REMOVED***pression | Loop | MemberE***REMOVED***pression | MetaProperty | Method | Miscellaneous | Mi***REMOVED***edTypeAnnotation | ModuleDeclaration | ModuleE***REMOVED***pression | ModuleSpecifier | NewE***REMOVED***pression | Noop | NullLiteral | NullLiteralTypeAnnotation | NullableTypeAnnotation | NumberLiteral | NumberLiteralTypeAnnotation | NumberTypeAnnotation | NumericLiteral | ObjectE***REMOVED***pression | ObjectMember | ObjectMethod | ObjectPattern | ObjectProperty | ObjectTypeAnnotation | ObjectTypeCallProperty | ObjectTypeInde***REMOVED***er | ObjectTypeInternalSlot | ObjectTypeProperty | ObjectTypeSpreadProperty | OpaqueType | OptionalCallE***REMOVED***pression | OptionalInde***REMOVED***edAccessType | OptionalMemberE***REMOVED***pression | ParenthesizedE***REMOVED***pression | Pattern | PatternLike | PipelineBareFunction | PipelinePrimaryTopicReference | PipelineTopicE***REMOVED***pression | Placeholder | Private | PrivateName | Program | Property | Pureish | QualifiedTypeIdentifier | RecordE***REMOVED***pression | RegE***REMOVED***pLiteral | Rege***REMOVED***Literal | RestElement | RestProperty | ReturnStatement | Scopable | SequenceE***REMOVED***pression | SpreadElement | SpreadProperty | Standardized | Statement | StaticBlock | StringLiteral | StringLiteralTypeAnnotation | StringTypeAnnotation | Super | SwitchCase | SwitchStatement | SymbolTypeAnnotation | TSAnyKeyword | TSArrayType | TSAsE***REMOVED***pression | TSBaseType | TSBigIntKeyword | TSBooleanKeyword | TSCallSignatureDeclaration | TSConditionalType | TSConstructSignatureDeclaration | TSConstructorType | TSDeclareFunction | TSDeclareMethod | TSEntityName | TSEnumDeclaration | TSEnumMember | TSE***REMOVED***portAssignment | TSE***REMOVED***pressionWithTypeArguments | TSE***REMOVED***ternalModuleReference | TSFunctionType | TSImportEqualsDeclaration | TSImportType | TSInde***REMOVED***Signature | TSInde***REMOVED***edAccessType | TSInferType | TSInstantiationE***REMOVED***pression | TSInterfaceBody | TSInterfaceDeclaration | TSIntersectionType | TSIntrinsicKeyword | TSLiteralType | TSMappedType | TSMethodSignature | TSModuleBlock | TSModuleDeclaration | TSNamedTupleMember | TSNamespaceE***REMOVED***portDeclaration | TSNeverKeyword | TSNonNullE***REMOVED***pression | TSNullKeyword | TSNumberKeyword | TSObjectKeyword | TSOptionalType | TSParameterProperty | TSParenthesizedType | TSPropertySignature | TSQualifiedName | TSRestType | TSSatisfiesE***REMOVED***pression | TSStringKeyword | TSSymbolKeyword | TSThisType | TSTupleType | TSType | TSTypeAliasDeclaration | TSTypeAnnotation | TSTypeAssertion | TSTypeElement | TSTypeLiteral | TSTypeOperator | TSTypeParameter | TSTypeParameterDeclaration | TSTypeParameterInstantiation | TSTypePredicate | TSTypeQuery | TSTypeReference | TSUndefinedKeyword | TSUnionType | TSUnknownKeyword | TSVoidKeyword | TaggedTemplateE***REMOVED***pression | TemplateElement | TemplateLiteral | Terminatorless | ThisE***REMOVED***pression | ThisTypeAnnotation | ThrowStatement | TopicReference | TryStatement | TupleE***REMOVED***pression | TupleTypeAnnotation | TypeAlias | TypeAnnotation | TypeCastE***REMOVED***pression | TypeParameter | TypeParameterDeclaration | TypeParameterInstantiation | TypeScript | TypeofTypeAnnotation | UnaryE***REMOVED***pression | UnaryLike | UnionTypeAnnotation | UpdateE***REMOVED***pression | UserWhitespacable | V8IntrinsicIdentifier | VariableDeclaration | VariableDeclarator | Variance | VoidTypeAnnotation | While | WhileStatement | WithStatement | YieldE***REMOVED***pression;

e***REMOVED***port interface ArrayE***REMOVED***pression e***REMOVED***tends BaseNode {
  type: "ArrayE***REMOVED***pression";
  elements: Array<null | E***REMOVED***pression | SpreadElement>;
}

e***REMOVED***port interface AssignmentE***REMOVED***pression e***REMOVED***tends BaseNode {
  type: "AssignmentE***REMOVED***pression";
  operator: string;
  left: LVal | OptionalMemberE***REMOVED***pression;
  right: E***REMOVED***pression;
}

e***REMOVED***port interface BinaryE***REMOVED***pression e***REMOVED***tends BaseNode {
  type: "BinaryE***REMOVED***pression";
  operator: "+" | "-" | "/" | "%" | "*" | "**" | "&" | "|" | ">>" | ">>>" | "<<" | "^" | "==" | "===" | "!=" | "!==" | "in" | "instanceof" | ">" | "<" | ">=" | "<=" | "|>";
  left: E***REMOVED***pression | PrivateName;
  right: E***REMOVED***pression;
}

e***REMOVED***port interface InterpreterDirective e***REMOVED***tends BaseNode {
  type: "InterpreterDirective";
  value: string;
}

e***REMOVED***port interface Directive e***REMOVED***tends BaseNode {
  type: "Directive";
  value: DirectiveLiteral;
}

e***REMOVED***port interface DirectiveLiteral e***REMOVED***tends BaseNode {
  type: "DirectiveLiteral";
  value: string;
}

e***REMOVED***port interface BlockStatement e***REMOVED***tends BaseNode {
  type: "BlockStatement";
  body: Array<Statement>;
  directives: Array<Directive>;
}

e***REMOVED***port interface BreakStatement e***REMOVED***tends BaseNode {
  type: "BreakStatement";
  label: Identifier | null;
}

e***REMOVED***port interface CallE***REMOVED***pression e***REMOVED***tends BaseNode {
  type: "CallE***REMOVED***pression";
  callee: E***REMOVED***pression | Super | V8IntrinsicIdentifier;
  arguments: Array<E***REMOVED***pression | SpreadElement | ArgumentPlaceholder>;
  optional: boolean | null;
  typeArguments: TypeParameterInstantiation | null;
  typeParameters: TSTypeParameterInstantiation | null;
}

e***REMOVED***port interface CatchClause e***REMOVED***tends BaseNode {
  type: "CatchClause";
  param: Identifier | ArrayPattern | ObjectPattern | null;
  body: BlockStatement;
}

e***REMOVED***port interface ConditionalE***REMOVED***pression e***REMOVED***tends BaseNode {
  type: "ConditionalE***REMOVED***pression";
  test: E***REMOVED***pression;
  consequent: E***REMOVED***pression;
  alternate: E***REMOVED***pression;
}

e***REMOVED***port interface ContinueStatement e***REMOVED***tends BaseNode {
  type: "ContinueStatement";
  label: Identifier | null;
}

e***REMOVED***port interface DebuggerStatement e***REMOVED***tends BaseNode {
  type: "DebuggerStatement";
}

e***REMOVED***port interface DoWhileStatement e***REMOVED***tends BaseNode {
  type: "DoWhileStatement";
  test: E***REMOVED***pression;
  body: Statement;
}

e***REMOVED***port interface EmptyStatement e***REMOVED***tends BaseNode {
  type: "EmptyStatement";
}

e***REMOVED***port interface E***REMOVED***pressionStatement e***REMOVED***tends BaseNode {
  type: "E***REMOVED***pressionStatement";
  e***REMOVED***pression: E***REMOVED***pression;
}

e***REMOVED***port interface File e***REMOVED***tends BaseNode {
  type: "File";
  program: Program;
  comments: Array<CommentBlock | CommentLine> | null;
  tokens: Array<any> | null;
}

e***REMOVED***port interface ForInStatement e***REMOVED***tends BaseNode {
  type: "ForInStatement";
  left: VariableDeclaration | LVal;
  right: E***REMOVED***pression;
  body: Statement;
}

e***REMOVED***port interface ForStatement e***REMOVED***tends BaseNode {
  type: "ForStatement";
  init: VariableDeclaration | E***REMOVED***pression | null;
  test: E***REMOVED***pression | null;
  update: E***REMOVED***pression | null;
  body: Statement;
}

e***REMOVED***port interface FunctionDeclaration e***REMOVED***tends BaseNode {
  type: "FunctionDeclaration";
  id: Identifier | null;
  params: Array<Identifier | Pattern | RestElement>;
  body: BlockStatement;
  generator: boolean;
  async: boolean;
  declare: boolean | null;
  predicate: DeclaredPredicate | InferredPredicate | null;
  returnType: TypeAnnotation | TSTypeAnnotation | Noop | null;
  typeParameters: TypeParameterDeclaration | TSTypeParameterDeclaration | Noop | null;
}

e***REMOVED***port interface FunctionE***REMOVED***pression e***REMOVED***tends BaseNode {
  type: "FunctionE***REMOVED***pression";
  id: Identifier | null;
  params: Array<Identifier | Pattern | RestElement>;
  body: BlockStatement;
  generator: boolean;
  async: boolean;
  predicate: DeclaredPredicate | InferredPredicate | null;
  returnType: TypeAnnotation | TSTypeAnnotation | Noop | null;
  typeParameters: TypeParameterDeclaration | TSTypeParameterDeclaration | Noop | null;
}

e***REMOVED***port interface Identifier e***REMOVED***tends BaseNode {
  type: "Identifier";
  name: string;
  decorators: Array<Decorator> | null;
  optional: boolean | null;
  typeAnnotation: TypeAnnotation | TSTypeAnnotation | Noop | null;
}

e***REMOVED***port interface IfStatement e***REMOVED***tends BaseNode {
  type: "IfStatement";
  test: E***REMOVED***pression;
  consequent: Statement;
  alternate: Statement | null;
}

e***REMOVED***port interface LabeledStatement e***REMOVED***tends BaseNode {
  type: "LabeledStatement";
  label: Identifier;
  body: Statement;
}

e***REMOVED***port interface StringLiteral e***REMOVED***tends BaseNode {
  type: "StringLiteral";
  value: string;
}

e***REMOVED***port interface NumericLiteral e***REMOVED***tends BaseNode {
  type: "NumericLiteral";
  value: number;
}

e***REMOVED***port interface NullLiteral e***REMOVED***tends BaseNode {
  type: "NullLiteral";
}

e***REMOVED***port interface BooleanLiteral e***REMOVED***tends BaseNode {
  type: "BooleanLiteral";
  value: boolean;
}

e***REMOVED***port interface RegE***REMOVED***pLiteral e***REMOVED***tends BaseNode {
  type: "RegE***REMOVED***pLiteral";
  pattern: string;
  flags: string;
}

e***REMOVED***port interface LogicalE***REMOVED***pression e***REMOVED***tends BaseNode {
  type: "LogicalE***REMOVED***pression";
  operator: "||" | "&&" | "??";
  left: E***REMOVED***pression;
  right: E***REMOVED***pression;
}

e***REMOVED***port interface MemberE***REMOVED***pression e***REMOVED***tends BaseNode {
  type: "MemberE***REMOVED***pression";
  object: E***REMOVED***pression | Super;
  property: E***REMOVED***pression | Identifier | PrivateName;
  computed: boolean;
  optional: boolean | null;
}

e***REMOVED***port interface NewE***REMOVED***pression e***REMOVED***tends BaseNode {
  type: "NewE***REMOVED***pression";
  callee: E***REMOVED***pression | Super | V8IntrinsicIdentifier;
  arguments: Array<E***REMOVED***pression | SpreadElement | ArgumentPlaceholder>;
  optional: boolean | null;
  typeArguments: TypeParameterInstantiation | null;
  typeParameters: TSTypeParameterInstantiation | null;
}

e***REMOVED***port interface Program e***REMOVED***tends BaseNode {
  type: "Program";
  body: Array<Statement>;
  directives: Array<Directive>;
  sourceType: "script" | "module";
  interpreter: InterpreterDirective | null;
}

e***REMOVED***port interface ObjectE***REMOVED***pression e***REMOVED***tends BaseNode {
  type: "ObjectE***REMOVED***pression";
  properties: Array<ObjectMethod | ObjectProperty | SpreadElement>;
}

e***REMOVED***port interface ObjectMethod e***REMOVED***tends BaseNode {
  type: "ObjectMethod";
  kind: "method" | "get" | "set";
  key: E***REMOVED***pression | Identifier | StringLiteral | NumericLiteral | BigIntLiteral;
  params: Array<Identifier | Pattern | RestElement>;
  body: BlockStatement;
  computed: boolean;
  generator: boolean;
  async: boolean;
  decorators: Array<Decorator> | null;
  returnType: TypeAnnotation | TSTypeAnnotation | Noop | null;
  typeParameters: TypeParameterDeclaration | TSTypeParameterDeclaration | Noop | null;
}

e***REMOVED***port interface ObjectProperty e***REMOVED***tends BaseNode {
  type: "ObjectProperty";
  key: E***REMOVED***pression | Identifier | StringLiteral | NumericLiteral | BigIntLiteral | DecimalLiteral | PrivateName;
  value: E***REMOVED***pression | PatternLike;
  computed: boolean;
  shorthand: boolean;
  decorators: Array<Decorator> | null;
}

e***REMOVED***port interface RestElement e***REMOVED***tends BaseNode {
  type: "RestElement";
  argument: LVal;
  decorators: Array<Decorator> | null;
  optional: boolean | null;
  typeAnnotation: TypeAnnotation | TSTypeAnnotation | Noop | null;
}

e***REMOVED***port interface ReturnStatement e***REMOVED***tends BaseNode {
  type: "ReturnStatement";
  argument: E***REMOVED***pression | null;
}

e***REMOVED***port interface SequenceE***REMOVED***pression e***REMOVED***tends BaseNode {
  type: "SequenceE***REMOVED***pression";
  e***REMOVED***pressions: Array<E***REMOVED***pression>;
}

e***REMOVED***port interface ParenthesizedE***REMOVED***pression e***REMOVED***tends BaseNode {
  type: "ParenthesizedE***REMOVED***pression";
  e***REMOVED***pression: E***REMOVED***pression;
}

e***REMOVED***port interface SwitchCase e***REMOVED***tends BaseNode {
  type: "SwitchCase";
  test: E***REMOVED***pression | null;
  consequent: Array<Statement>;
}

e***REMOVED***port interface SwitchStatement e***REMOVED***tends BaseNode {
  type: "SwitchStatement";
  discriminant: E***REMOVED***pression;
  cases: Array<SwitchCase>;
}

e***REMOVED***port interface ThisE***REMOVED***pression e***REMOVED***tends BaseNode {
  type: "ThisE***REMOVED***pression";
}

e***REMOVED***port interface ThrowStatement e***REMOVED***tends BaseNode {
  type: "ThrowStatement";
  argument: E***REMOVED***pression;
}

e***REMOVED***port interface TryStatement e***REMOVED***tends BaseNode {
  type: "TryStatement";
  block: BlockStatement;
  handler: CatchClause | null;
  finalizer: BlockStatement | null;
}

e***REMOVED***port interface UnaryE***REMOVED***pression e***REMOVED***tends BaseNode {
  type: "UnaryE***REMOVED***pression";
  operator: "void" | "throw" | "delete" | "!" | "+" | "-" | "~" | "typeof";
  argument: E***REMOVED***pression;
  prefi***REMOVED***: boolean;
}

e***REMOVED***port interface UpdateE***REMOVED***pression e***REMOVED***tends BaseNode {
  type: "UpdateE***REMOVED***pression";
  operator: "++" | "--";
  argument: E***REMOVED***pression;
  prefi***REMOVED***: boolean;
}

e***REMOVED***port interface VariableDeclaration e***REMOVED***tends BaseNode {
  type: "VariableDeclaration";
  kind: "var" | "let" | "const" | "using" | "await using";
  declarations: Array<VariableDeclarator>;
  declare: boolean | null;
}

e***REMOVED***port interface VariableDeclarator e***REMOVED***tends BaseNode {
  type: "VariableDeclarator";
  id: LVal;
  init: E***REMOVED***pression | null;
  definite: boolean | null;
}

e***REMOVED***port interface WhileStatement e***REMOVED***tends BaseNode {
  type: "WhileStatement";
  test: E***REMOVED***pression;
  body: Statement;
}

e***REMOVED***port interface WithStatement e***REMOVED***tends BaseNode {
  type: "WithStatement";
  object: E***REMOVED***pression;
  body: Statement;
}

e***REMOVED***port interface AssignmentPattern e***REMOVED***tends BaseNode {
  type: "AssignmentPattern";
  left: Identifier | ObjectPattern | ArrayPattern | MemberE***REMOVED***pression | TSAsE***REMOVED***pression | TSSatisfiesE***REMOVED***pression | TSTypeAssertion | TSNonNullE***REMOVED***pression;
  right: E***REMOVED***pression;
  decorators: Array<Decorator> | null;
  optional: boolean | null;
  typeAnnotation: TypeAnnotation | TSTypeAnnotation | Noop | null;
}

e***REMOVED***port interface ArrayPattern e***REMOVED***tends BaseNode {
  type: "ArrayPattern";
  elements: Array<null | PatternLike | LVal>;
  decorators: Array<Decorator> | null;
  optional: boolean | null;
  typeAnnotation: TypeAnnotation | TSTypeAnnotation | Noop | null;
}

e***REMOVED***port interface ArrowFunctionE***REMOVED***pression e***REMOVED***tends BaseNode {
  type: "ArrowFunctionE***REMOVED***pression";
  params: Array<Identifier | Pattern | RestElement>;
  body: BlockStatement | E***REMOVED***pression;
  async: boolean;
  e***REMOVED***pression: boolean;
  generator: boolean;
  predicate: DeclaredPredicate | InferredPredicate | null;
  returnType: TypeAnnotation | TSTypeAnnotation | Noop | null;
  typeParameters: TypeParameterDeclaration | TSTypeParameterDeclaration | Noop | null;
}

e***REMOVED***port interface ClassBody e***REMOVED***tends BaseNode {
  type: "ClassBody";
  body: Array<ClassMethod | ClassPrivateMethod | ClassProperty | ClassPrivateProperty | ClassAccessorProperty | TSDeclareMethod | TSInde***REMOVED***Signature | StaticBlock>;
}

e***REMOVED***port interface ClassE***REMOVED***pression e***REMOVED***tends BaseNode {
  type: "ClassE***REMOVED***pression";
  id: Identifier | null;
  superClass: E***REMOVED***pression | null;
  body: ClassBody;
  decorators: Array<Decorator> | null;
  implements: Array<TSE***REMOVED***pressionWithTypeArguments | ClassImplements> | null;
  mi***REMOVED***ins: InterfaceE***REMOVED***tends | null;
  superTypeParameters: TypeParameterInstantiation | TSTypeParameterInstantiation | null;
  typeParameters: TypeParameterDeclaration | TSTypeParameterDeclaration | Noop | null;
}

e***REMOVED***port interface ClassDeclaration e***REMOVED***tends BaseNode {
  type: "ClassDeclaration";
  id: Identifier | null;
  superClass: E***REMOVED***pression | null;
  body: ClassBody;
  decorators: Array<Decorator> | null;
  abstract: boolean | null;
  declare: boolean | null;
  implements: Array<TSE***REMOVED***pressionWithTypeArguments | ClassImplements> | null;
  mi***REMOVED***ins: InterfaceE***REMOVED***tends | null;
  superTypeParameters: TypeParameterInstantiation | TSTypeParameterInstantiation | null;
  typeParameters: TypeParameterDeclaration | TSTypeParameterDeclaration | Noop | null;
}

e***REMOVED***port interface E***REMOVED***portAllDeclaration e***REMOVED***tends BaseNode {
  type: "E***REMOVED***portAllDeclaration";
  source: StringLiteral;
  assertions: Array<ImportAttribute> | null;
  attributes: Array<ImportAttribute> | null;
  e***REMOVED***portKind: "type" | "value" | null;
}

e***REMOVED***port interface E***REMOVED***portDefaultDeclaration e***REMOVED***tends BaseNode {
  type: "E***REMOVED***portDefaultDeclaration";
  declaration: TSDeclareFunction | FunctionDeclaration | ClassDeclaration | E***REMOVED***pression;
  e***REMOVED***portKind: "value" | null;
}

e***REMOVED***port interface E***REMOVED***portNamedDeclaration e***REMOVED***tends BaseNode {
  type: "E***REMOVED***portNamedDeclaration";
  declaration: Declaration | null;
  specifiers: Array<E***REMOVED***portSpecifier | E***REMOVED***portDefaultSpecifier | E***REMOVED***portNamespaceSpecifier>;
  source: StringLiteral | null;
  assertions: Array<ImportAttribute> | null;
  attributes: Array<ImportAttribute> | null;
  e***REMOVED***portKind: "type" | "value" | null;
}

e***REMOVED***port interface E***REMOVED***portSpecifier e***REMOVED***tends BaseNode {
  type: "E***REMOVED***portSpecifier";
  local: Identifier;
  e***REMOVED***ported: Identifier | StringLiteral;
  e***REMOVED***portKind: "type" | "value" | null;
}

e***REMOVED***port interface ForOfStatement e***REMOVED***tends BaseNode {
  type: "ForOfStatement";
  left: VariableDeclaration | LVal;
  right: E***REMOVED***pression;
  body: Statement;
  await: boolean;
}

e***REMOVED***port interface ImportDeclaration e***REMOVED***tends BaseNode {
  type: "ImportDeclaration";
  specifiers: Array<ImportSpecifier | ImportDefaultSpecifier | ImportNamespaceSpecifier>;
  source: StringLiteral;
  assertions: Array<ImportAttribute> | null;
  attributes: Array<ImportAttribute> | null;
  importKind: "type" | "typeof" | "value" | null;
  module: boolean | null;
  phase: "source" | "defer" | null;
}

e***REMOVED***port interface ImportDefaultSpecifier e***REMOVED***tends BaseNode {
  type: "ImportDefaultSpecifier";
  local: Identifier;
}

e***REMOVED***port interface ImportNamespaceSpecifier e***REMOVED***tends BaseNode {
  type: "ImportNamespaceSpecifier";
  local: Identifier;
}

e***REMOVED***port interface ImportSpecifier e***REMOVED***tends BaseNode {
  type: "ImportSpecifier";
  local: Identifier;
  imported: Identifier | StringLiteral;
  importKind: "type" | "typeof" | "value" | null;
}

e***REMOVED***port interface ImportE***REMOVED***pression e***REMOVED***tends BaseNode {
  type: "ImportE***REMOVED***pression";
  source: E***REMOVED***pression;
  options: E***REMOVED***pression | null;
  phase: "source" | "defer" | null;
}

e***REMOVED***port interface MetaProperty e***REMOVED***tends BaseNode {
  type: "MetaProperty";
  meta: Identifier;
  property: Identifier;
}

e***REMOVED***port interface ClassMethod e***REMOVED***tends BaseNode {
  type: "ClassMethod";
  kind: "get" | "set" | "method" | "constructor";
  key: Identifier | StringLiteral | NumericLiteral | BigIntLiteral | E***REMOVED***pression;
  params: Array<Identifier | Pattern | RestElement | TSParameterProperty>;
  body: BlockStatement;
  computed: boolean;
  static: boolean;
  generator: boolean;
  async: boolean;
  abstract: boolean | null;
  access: "public" | "private" | "protected" | null;
  accessibility: "public" | "private" | "protected" | null;
  decorators: Array<Decorator> | null;
  optional: boolean | null;
  override: boolean;
  returnType: TypeAnnotation | TSTypeAnnotation | Noop | null;
  typeParameters: TypeParameterDeclaration | TSTypeParameterDeclaration | Noop | null;
}

e***REMOVED***port interface ObjectPattern e***REMOVED***tends BaseNode {
  type: "ObjectPattern";
  properties: Array<RestElement | ObjectProperty>;
  decorators: Array<Decorator> | null;
  optional: boolean | null;
  typeAnnotation: TypeAnnotation | TSTypeAnnotation | Noop | null;
}

e***REMOVED***port interface SpreadElement e***REMOVED***tends BaseNode {
  type: "SpreadElement";
  argument: E***REMOVED***pression;
}

e***REMOVED***port interface Super e***REMOVED***tends BaseNode {
  type: "Super";
}

e***REMOVED***port interface TaggedTemplateE***REMOVED***pression e***REMOVED***tends BaseNode {
  type: "TaggedTemplateE***REMOVED***pression";
  tag: E***REMOVED***pression;
  quasi: TemplateLiteral;
  typeParameters: TypeParameterInstantiation | TSTypeParameterInstantiation | null;
}

e***REMOVED***port interface TemplateElement e***REMOVED***tends BaseNode {
  type: "TemplateElement";
  value: { raw: string, cooked?: string };
  tail: boolean;
}

e***REMOVED***port interface TemplateLiteral e***REMOVED***tends BaseNode {
  type: "TemplateLiteral";
  quasis: Array<TemplateElement>;
  e***REMOVED***pressions: Array<E***REMOVED***pression | TSType>;
}

e***REMOVED***port interface YieldE***REMOVED***pression e***REMOVED***tends BaseNode {
  type: "YieldE***REMOVED***pression";
  argument: E***REMOVED***pression | null;
  delegate: boolean;
}

e***REMOVED***port interface AwaitE***REMOVED***pression e***REMOVED***tends BaseNode {
  type: "AwaitE***REMOVED***pression";
  argument: E***REMOVED***pression;
}

e***REMOVED***port interface Import e***REMOVED***tends BaseNode {
  type: "Import";
}

e***REMOVED***port interface BigIntLiteral e***REMOVED***tends BaseNode {
  type: "BigIntLiteral";
  value: string;
}

e***REMOVED***port interface E***REMOVED***portNamespaceSpecifier e***REMOVED***tends BaseNode {
  type: "E***REMOVED***portNamespaceSpecifier";
  e***REMOVED***ported: Identifier;
}

e***REMOVED***port interface OptionalMemberE***REMOVED***pression e***REMOVED***tends BaseNode {
  type: "OptionalMemberE***REMOVED***pression";
  object: E***REMOVED***pression;
  property: E***REMOVED***pression | Identifier;
  computed: boolean;
  optional: boolean;
}

e***REMOVED***port interface OptionalCallE***REMOVED***pression e***REMOVED***tends BaseNode {
  type: "OptionalCallE***REMOVED***pression";
  callee: E***REMOVED***pression;
  arguments: Array<E***REMOVED***pression | SpreadElement | ArgumentPlaceholder>;
  optional: boolean;
  typeArguments: TypeParameterInstantiation | null;
  typeParameters: TSTypeParameterInstantiation | null;
}

e***REMOVED***port interface ClassProperty e***REMOVED***tends BaseNode {
  type: "ClassProperty";
  key: Identifier | StringLiteral | NumericLiteral | BigIntLiteral | E***REMOVED***pression;
  value: E***REMOVED***pression | null;
  typeAnnotation: TypeAnnotation | TSTypeAnnotation | Noop | null;
  decorators: Array<Decorator> | null;
  computed: boolean;
  static: boolean;
  abstract: boolean | null;
  accessibility: "public" | "private" | "protected" | null;
  declare: boolean | null;
  definite: boolean | null;
  optional: boolean | null;
  override: boolean;
  readonly: boolean | null;
  variance: Variance | null;
}

e***REMOVED***port interface ClassAccessorProperty e***REMOVED***tends BaseNode {
  type: "ClassAccessorProperty";
  key: Identifier | StringLiteral | NumericLiteral | BigIntLiteral | E***REMOVED***pression | PrivateName;
  value: E***REMOVED***pression | null;
  typeAnnotation: TypeAnnotation | TSTypeAnnotation | Noop | null;
  decorators: Array<Decorator> | null;
  computed: boolean;
  static: boolean;
  abstract: boolean | null;
  accessibility: "public" | "private" | "protected" | null;
  declare: boolean | null;
  definite: boolean | null;
  optional: boolean | null;
  override: boolean;
  readonly: boolean | null;
  variance: Variance | null;
}

e***REMOVED***port interface ClassPrivateProperty e***REMOVED***tends BaseNode {
  type: "ClassPrivateProperty";
  key: PrivateName;
  value: E***REMOVED***pression | null;
  decorators: Array<Decorator> | null;
  static: boolean;
  definite: boolean | null;
  readonly: boolean | null;
  typeAnnotation: TypeAnnotation | TSTypeAnnotation | Noop | null;
  variance: Variance | null;
}

e***REMOVED***port interface ClassPrivateMethod e***REMOVED***tends BaseNode {
  type: "ClassPrivateMethod";
  kind: "get" | "set" | "method";
  key: PrivateName;
  params: Array<Identifier | Pattern | RestElement | TSParameterProperty>;
  body: BlockStatement;
  static: boolean;
  abstract: boolean | null;
  access: "public" | "private" | "protected" | null;
  accessibility: "public" | "private" | "protected" | null;
  async: boolean;
  computed: boolean;
  decorators: Array<Decorator> | null;
  generator: boolean;
  optional: boolean | null;
  override: boolean;
  returnType: TypeAnnotation | TSTypeAnnotation | Noop | null;
  typeParameters: TypeParameterDeclaration | TSTypeParameterDeclaration | Noop | null;
}

e***REMOVED***port interface PrivateName e***REMOVED***tends BaseNode {
  type: "PrivateName";
  id: Identifier;
}

e***REMOVED***port interface StaticBlock e***REMOVED***tends BaseNode {
  type: "StaticBlock";
  body: Array<Statement>;
}

e***REMOVED***port interface AnyTypeAnnotation e***REMOVED***tends BaseNode {
  type: "AnyTypeAnnotation";
}

e***REMOVED***port interface ArrayTypeAnnotation e***REMOVED***tends BaseNode {
  type: "ArrayTypeAnnotation";
  elementType: FlowType;
}

e***REMOVED***port interface BooleanTypeAnnotation e***REMOVED***tends BaseNode {
  type: "BooleanTypeAnnotation";
}

e***REMOVED***port interface BooleanLiteralTypeAnnotation e***REMOVED***tends BaseNode {
  type: "BooleanLiteralTypeAnnotation";
  value: boolean;
}

e***REMOVED***port interface NullLiteralTypeAnnotation e***REMOVED***tends BaseNode {
  type: "NullLiteralTypeAnnotation";
}

e***REMOVED***port interface ClassImplements e***REMOVED***tends BaseNode {
  type: "ClassImplements";
  id: Identifier;
  typeParameters: TypeParameterInstantiation | null;
}

e***REMOVED***port interface DeclareClass e***REMOVED***tends BaseNode {
  type: "DeclareClass";
  id: Identifier;
  typeParameters: TypeParameterDeclaration | null;
  e***REMOVED***tends: Array<InterfaceE***REMOVED***tends> | null;
  body: ObjectTypeAnnotation;
  implements: Array<ClassImplements> | null;
  mi***REMOVED***ins: Array<InterfaceE***REMOVED***tends> | null;
}

e***REMOVED***port interface DeclareFunction e***REMOVED***tends BaseNode {
  type: "DeclareFunction";
  id: Identifier;
  predicate: DeclaredPredicate | null;
}

e***REMOVED***port interface DeclareInterface e***REMOVED***tends BaseNode {
  type: "DeclareInterface";
  id: Identifier;
  typeParameters: TypeParameterDeclaration | null;
  e***REMOVED***tends: Array<InterfaceE***REMOVED***tends> | null;
  body: ObjectTypeAnnotation;
}

e***REMOVED***port interface DeclareModule e***REMOVED***tends BaseNode {
  type: "DeclareModule";
  id: Identifier | StringLiteral;
  body: BlockStatement;
  kind: "CommonJS" | "ES" | null;
}

e***REMOVED***port interface DeclareModuleE***REMOVED***ports e***REMOVED***tends BaseNode {
  type: "DeclareModuleE***REMOVED***ports";
  typeAnnotation: TypeAnnotation;
}

e***REMOVED***port interface DeclareTypeAlias e***REMOVED***tends BaseNode {
  type: "DeclareTypeAlias";
  id: Identifier;
  typeParameters: TypeParameterDeclaration | null;
  right: FlowType;
}

e***REMOVED***port interface DeclareOpaqueType e***REMOVED***tends BaseNode {
  type: "DeclareOpaqueType";
  id: Identifier;
  typeParameters: TypeParameterDeclaration | null;
  supertype: FlowType | null;
  impltype: FlowType | null;
}

e***REMOVED***port interface DeclareVariable e***REMOVED***tends BaseNode {
  type: "DeclareVariable";
  id: Identifier;
}

e***REMOVED***port interface DeclareE***REMOVED***portDeclaration e***REMOVED***tends BaseNode {
  type: "DeclareE***REMOVED***portDeclaration";
  declaration: Flow | null;
  specifiers: Array<E***REMOVED***portSpecifier | E***REMOVED***portNamespaceSpecifier> | null;
  source: StringLiteral | null;
  attributes: Array<ImportAttribute> | null;
  assertions: Array<ImportAttribute> | null;
  default: boolean | null;
}

e***REMOVED***port interface DeclareE***REMOVED***portAllDeclaration e***REMOVED***tends BaseNode {
  type: "DeclareE***REMOVED***portAllDeclaration";
  source: StringLiteral;
  attributes: Array<ImportAttribute> | null;
  assertions: Array<ImportAttribute> | null;
  e***REMOVED***portKind: "type" | "value" | null;
}

e***REMOVED***port interface DeclaredPredicate e***REMOVED***tends BaseNode {
  type: "DeclaredPredicate";
  value: Flow;
}

e***REMOVED***port interface E***REMOVED***istsTypeAnnotation e***REMOVED***tends BaseNode {
  type: "E***REMOVED***istsTypeAnnotation";
}

e***REMOVED***port interface FunctionTypeAnnotation e***REMOVED***tends BaseNode {
  type: "FunctionTypeAnnotation";
  typeParameters: TypeParameterDeclaration | null;
  params: Array<FunctionTypeParam>;
  rest: FunctionTypeParam | null;
  returnType: FlowType;
  this: FunctionTypeParam | null;
}

e***REMOVED***port interface FunctionTypeParam e***REMOVED***tends BaseNode {
  type: "FunctionTypeParam";
  name: Identifier | null;
  typeAnnotation: FlowType;
  optional: boolean | null;
}

e***REMOVED***port interface GenericTypeAnnotation e***REMOVED***tends BaseNode {
  type: "GenericTypeAnnotation";
  id: Identifier | QualifiedTypeIdentifier;
  typeParameters: TypeParameterInstantiation | null;
}

e***REMOVED***port interface InferredPredicate e***REMOVED***tends BaseNode {
  type: "InferredPredicate";
}

e***REMOVED***port interface InterfaceE***REMOVED***tends e***REMOVED***tends BaseNode {
  type: "InterfaceE***REMOVED***tends";
  id: Identifier | QualifiedTypeIdentifier;
  typeParameters: TypeParameterInstantiation | null;
}

e***REMOVED***port interface InterfaceDeclaration e***REMOVED***tends BaseNode {
  type: "InterfaceDeclaration";
  id: Identifier;
  typeParameters: TypeParameterDeclaration | null;
  e***REMOVED***tends: Array<InterfaceE***REMOVED***tends> | null;
  body: ObjectTypeAnnotation;
}

e***REMOVED***port interface InterfaceTypeAnnotation e***REMOVED***tends BaseNode {
  type: "InterfaceTypeAnnotation";
  e***REMOVED***tends: Array<InterfaceE***REMOVED***tends> | null;
  body: ObjectTypeAnnotation;
}

e***REMOVED***port interface IntersectionTypeAnnotation e***REMOVED***tends BaseNode {
  type: "IntersectionTypeAnnotation";
  types: Array<FlowType>;
}

e***REMOVED***port interface Mi***REMOVED***edTypeAnnotation e***REMOVED***tends BaseNode {
  type: "Mi***REMOVED***edTypeAnnotation";
}

e***REMOVED***port interface EmptyTypeAnnotation e***REMOVED***tends BaseNode {
  type: "EmptyTypeAnnotation";
}

e***REMOVED***port interface NullableTypeAnnotation e***REMOVED***tends BaseNode {
  type: "NullableTypeAnnotation";
  typeAnnotation: FlowType;
}

e***REMOVED***port interface NumberLiteralTypeAnnotation e***REMOVED***tends BaseNode {
  type: "NumberLiteralTypeAnnotation";
  value: number;
}

e***REMOVED***port interface NumberTypeAnnotation e***REMOVED***tends BaseNode {
  type: "NumberTypeAnnotation";
}

e***REMOVED***port interface ObjectTypeAnnotation e***REMOVED***tends BaseNode {
  type: "ObjectTypeAnnotation";
  properties: Array<ObjectTypeProperty | ObjectTypeSpreadProperty>;
  inde***REMOVED***ers: Array<ObjectTypeInde***REMOVED***er>;
  callProperties: Array<ObjectTypeCallProperty>;
  internalSlots: Array<ObjectTypeInternalSlot>;
  e***REMOVED***act: boolean;
  ine***REMOVED***act: boolean | null;
}

e***REMOVED***port interface ObjectTypeInternalSlot e***REMOVED***tends BaseNode {
  type: "ObjectTypeInternalSlot";
  id: Identifier;
  value: FlowType;
  optional: boolean;
  static: boolean;
  method: boolean;
}

e***REMOVED***port interface ObjectTypeCallProperty e***REMOVED***tends BaseNode {
  type: "ObjectTypeCallProperty";
  value: FlowType;
  static: boolean;
}

e***REMOVED***port interface ObjectTypeInde***REMOVED***er e***REMOVED***tends BaseNode {
  type: "ObjectTypeInde***REMOVED***er";
  id: Identifier | null;
  key: FlowType;
  value: FlowType;
  variance: Variance | null;
  static: boolean;
}

e***REMOVED***port interface ObjectTypeProperty e***REMOVED***tends BaseNode {
  type: "ObjectTypeProperty";
  key: Identifier | StringLiteral;
  value: FlowType;
  variance: Variance | null;
  kind: "init" | "get" | "set";
  method: boolean;
  optional: boolean;
  proto: boolean;
  static: boolean;
}

e***REMOVED***port interface ObjectTypeSpreadProperty e***REMOVED***tends BaseNode {
  type: "ObjectTypeSpreadProperty";
  argument: FlowType;
}

e***REMOVED***port interface OpaqueType e***REMOVED***tends BaseNode {
  type: "OpaqueType";
  id: Identifier;
  typeParameters: TypeParameterDeclaration | null;
  supertype: FlowType | null;
  impltype: FlowType;
}

e***REMOVED***port interface QualifiedTypeIdentifier e***REMOVED***tends BaseNode {
  type: "QualifiedTypeIdentifier";
  id: Identifier;
  qualification: Identifier | QualifiedTypeIdentifier;
}

e***REMOVED***port interface StringLiteralTypeAnnotation e***REMOVED***tends BaseNode {
  type: "StringLiteralTypeAnnotation";
  value: string;
}

e***REMOVED***port interface StringTypeAnnotation e***REMOVED***tends BaseNode {
  type: "StringTypeAnnotation";
}

e***REMOVED***port interface SymbolTypeAnnotation e***REMOVED***tends BaseNode {
  type: "SymbolTypeAnnotation";
}

e***REMOVED***port interface ThisTypeAnnotation e***REMOVED***tends BaseNode {
  type: "ThisTypeAnnotation";
}

e***REMOVED***port interface TupleTypeAnnotation e***REMOVED***tends BaseNode {
  type: "TupleTypeAnnotation";
  types: Array<FlowType>;
}

e***REMOVED***port interface TypeofTypeAnnotation e***REMOVED***tends BaseNode {
  type: "TypeofTypeAnnotation";
  argument: FlowType;
}

e***REMOVED***port interface TypeAlias e***REMOVED***tends BaseNode {
  type: "TypeAlias";
  id: Identifier;
  typeParameters: TypeParameterDeclaration | null;
  right: FlowType;
}

e***REMOVED***port interface TypeAnnotation e***REMOVED***tends BaseNode {
  type: "TypeAnnotation";
  typeAnnotation: FlowType;
}

e***REMOVED***port interface TypeCastE***REMOVED***pression e***REMOVED***tends BaseNode {
  type: "TypeCastE***REMOVED***pression";
  e***REMOVED***pression: E***REMOVED***pression;
  typeAnnotation: TypeAnnotation;
}

e***REMOVED***port interface TypeParameter e***REMOVED***tends BaseNode {
  type: "TypeParameter";
  bound: TypeAnnotation | null;
  default: FlowType | null;
  variance: Variance | null;
  name: string;
}

e***REMOVED***port interface TypeParameterDeclaration e***REMOVED***tends BaseNode {
  type: "TypeParameterDeclaration";
  params: Array<TypeParameter>;
}

e***REMOVED***port interface TypeParameterInstantiation e***REMOVED***tends BaseNode {
  type: "TypeParameterInstantiation";
  params: Array<FlowType>;
}

e***REMOVED***port interface UnionTypeAnnotation e***REMOVED***tends BaseNode {
  type: "UnionTypeAnnotation";
  types: Array<FlowType>;
}

e***REMOVED***port interface Variance e***REMOVED***tends BaseNode {
  type: "Variance";
  kind: "minus" | "plus";
}

e***REMOVED***port interface VoidTypeAnnotation e***REMOVED***tends BaseNode {
  type: "VoidTypeAnnotation";
}

e***REMOVED***port interface EnumDeclaration e***REMOVED***tends BaseNode {
  type: "EnumDeclaration";
  id: Identifier;
  body: EnumBooleanBody | EnumNumberBody | EnumStringBody | EnumSymbolBody;
}

e***REMOVED***port interface EnumBooleanBody e***REMOVED***tends BaseNode {
  type: "EnumBooleanBody";
  members: Array<EnumBooleanMember>;
  e***REMOVED***plicitType: boolean;
  hasUnknownMembers: boolean;
}

e***REMOVED***port interface EnumNumberBody e***REMOVED***tends BaseNode {
  type: "EnumNumberBody";
  members: Array<EnumNumberMember>;
  e***REMOVED***plicitType: boolean;
  hasUnknownMembers: boolean;
}

e***REMOVED***port interface EnumStringBody e***REMOVED***tends BaseNode {
  type: "EnumStringBody";
  members: Array<EnumStringMember | EnumDefaultedMember>;
  e***REMOVED***plicitType: boolean;
  hasUnknownMembers: boolean;
}

e***REMOVED***port interface EnumSymbolBody e***REMOVED***tends BaseNode {
  type: "EnumSymbolBody";
  members: Array<EnumDefaultedMember>;
  hasUnknownMembers: boolean;
}

e***REMOVED***port interface EnumBooleanMember e***REMOVED***tends BaseNode {
  type: "EnumBooleanMember";
  id: Identifier;
  init: BooleanLiteral;
}

e***REMOVED***port interface EnumNumberMember e***REMOVED***tends BaseNode {
  type: "EnumNumberMember";
  id: Identifier;
  init: NumericLiteral;
}

e***REMOVED***port interface EnumStringMember e***REMOVED***tends BaseNode {
  type: "EnumStringMember";
  id: Identifier;
  init: StringLiteral;
}

e***REMOVED***port interface EnumDefaultedMember e***REMOVED***tends BaseNode {
  type: "EnumDefaultedMember";
  id: Identifier;
}

e***REMOVED***port interface Inde***REMOVED***edAccessType e***REMOVED***tends BaseNode {
  type: "Inde***REMOVED***edAccessType";
  objectType: FlowType;
  inde***REMOVED***Type: FlowType;
}

e***REMOVED***port interface OptionalInde***REMOVED***edAccessType e***REMOVED***tends BaseNode {
  type: "OptionalInde***REMOVED***edAccessType";
  objectType: FlowType;
  inde***REMOVED***Type: FlowType;
  optional: boolean;
}

e***REMOVED***port interface JSXAttribute e***REMOVED***tends BaseNode {
  type: "JSXAttribute";
  name: JSXIdentifier | JSXNamespacedName;
  value: JSXElement | JSXFragment | StringLiteral | JSXE***REMOVED***pressionContainer | null;
}

e***REMOVED***port interface JSXClosingElement e***REMOVED***tends BaseNode {
  type: "JSXClosingElement";
  name: JSXIdentifier | JSXMemberE***REMOVED***pression | JSXNamespacedName;
}

e***REMOVED***port interface JSXElement e***REMOVED***tends BaseNode {
  type: "JSXElement";
  openingElement: JSXOpeningElement;
  closingElement: JSXClosingElement | null;
  children: Array<JSXTe***REMOVED***t | JSXE***REMOVED***pressionContainer | JSXSpreadChild | JSXElement | JSXFragment>;
  selfClosing: boolean | null;
}

e***REMOVED***port interface JSXEmptyE***REMOVED***pression e***REMOVED***tends BaseNode {
  type: "JSXEmptyE***REMOVED***pression";
}

e***REMOVED***port interface JSXE***REMOVED***pressionContainer e***REMOVED***tends BaseNode {
  type: "JSXE***REMOVED***pressionContainer";
  e***REMOVED***pression: E***REMOVED***pression | JSXEmptyE***REMOVED***pression;
}

e***REMOVED***port interface JSXSpreadChild e***REMOVED***tends BaseNode {
  type: "JSXSpreadChild";
  e***REMOVED***pression: E***REMOVED***pression;
}

e***REMOVED***port interface JSXIdentifier e***REMOVED***tends BaseNode {
  type: "JSXIdentifier";
  name: string;
}

e***REMOVED***port interface JSXMemberE***REMOVED***pression e***REMOVED***tends BaseNode {
  type: "JSXMemberE***REMOVED***pression";
  object: JSXMemberE***REMOVED***pression | JSXIdentifier;
  property: JSXIdentifier;
}

e***REMOVED***port interface JSXNamespacedName e***REMOVED***tends BaseNode {
  type: "JSXNamespacedName";
  namespace: JSXIdentifier;
  name: JSXIdentifier;
}

e***REMOVED***port interface JSXOpeningElement e***REMOVED***tends BaseNode {
  type: "JSXOpeningElement";
  name: JSXIdentifier | JSXMemberE***REMOVED***pression | JSXNamespacedName;
  attributes: Array<JSXAttribute | JSXSpreadAttribute>;
  selfClosing: boolean;
  typeParameters: TypeParameterInstantiation | TSTypeParameterInstantiation | null;
}

e***REMOVED***port interface JSXSpreadAttribute e***REMOVED***tends BaseNode {
  type: "JSXSpreadAttribute";
  argument: E***REMOVED***pression;
}

e***REMOVED***port interface JSXTe***REMOVED***t e***REMOVED***tends BaseNode {
  type: "JSXTe***REMOVED***t";
  value: string;
}

e***REMOVED***port interface JSXFragment e***REMOVED***tends BaseNode {
  type: "JSXFragment";
  openingFragment: JSXOpeningFragment;
  closingFragment: JSXClosingFragment;
  children: Array<JSXTe***REMOVED***t | JSXE***REMOVED***pressionContainer | JSXSpreadChild | JSXElement | JSXFragment>;
}

e***REMOVED***port interface JSXOpeningFragment e***REMOVED***tends BaseNode {
  type: "JSXOpeningFragment";
}

e***REMOVED***port interface JSXClosingFragment e***REMOVED***tends BaseNode {
  type: "JSXClosingFragment";
}

e***REMOVED***port interface Noop e***REMOVED***tends BaseNode {
  type: "Noop";
}

e***REMOVED***port interface Placeholder e***REMOVED***tends BaseNode {
  type: "Placeholder";
  e***REMOVED***pectedNode: "Identifier" | "StringLiteral" | "E***REMOVED***pression" | "Statement" | "Declaration" | "BlockStatement" | "ClassBody" | "Pattern";
  name: Identifier;
  decorators: Array<Decorator> | null;
  optional: boolean | null;
  typeAnnotation: TypeAnnotation | TSTypeAnnotation | Noop | null;
}

e***REMOVED***port interface V8IntrinsicIdentifier e***REMOVED***tends BaseNode {
  type: "V8IntrinsicIdentifier";
  name: string;
}

e***REMOVED***port interface ArgumentPlaceholder e***REMOVED***tends BaseNode {
  type: "ArgumentPlaceholder";
}

e***REMOVED***port interface BindE***REMOVED***pression e***REMOVED***tends BaseNode {
  type: "BindE***REMOVED***pression";
  object: E***REMOVED***pression;
  callee: E***REMOVED***pression;
}

e***REMOVED***port interface ImportAttribute e***REMOVED***tends BaseNode {
  type: "ImportAttribute";
  key: Identifier | StringLiteral;
  value: StringLiteral;
}

e***REMOVED***port interface Decorator e***REMOVED***tends BaseNode {
  type: "Decorator";
  e***REMOVED***pression: E***REMOVED***pression;
}

e***REMOVED***port interface DoE***REMOVED***pression e***REMOVED***tends BaseNode {
  type: "DoE***REMOVED***pression";
  body: BlockStatement;
  async: boolean;
}

e***REMOVED***port interface E***REMOVED***portDefaultSpecifier e***REMOVED***tends BaseNode {
  type: "E***REMOVED***portDefaultSpecifier";
  e***REMOVED***ported: Identifier;
}

e***REMOVED***port interface RecordE***REMOVED***pression e***REMOVED***tends BaseNode {
  type: "RecordE***REMOVED***pression";
  properties: Array<ObjectProperty | SpreadElement>;
}

e***REMOVED***port interface TupleE***REMOVED***pression e***REMOVED***tends BaseNode {
  type: "TupleE***REMOVED***pression";
  elements: Array<E***REMOVED***pression | SpreadElement>;
}

e***REMOVED***port interface DecimalLiteral e***REMOVED***tends BaseNode {
  type: "DecimalLiteral";
  value: string;
}

e***REMOVED***port interface ModuleE***REMOVED***pression e***REMOVED***tends BaseNode {
  type: "ModuleE***REMOVED***pression";
  body: Program;
}

e***REMOVED***port interface TopicReference e***REMOVED***tends BaseNode {
  type: "TopicReference";
}

e***REMOVED***port interface PipelineTopicE***REMOVED***pression e***REMOVED***tends BaseNode {
  type: "PipelineTopicE***REMOVED***pression";
  e***REMOVED***pression: E***REMOVED***pression;
}

e***REMOVED***port interface PipelineBareFunction e***REMOVED***tends BaseNode {
  type: "PipelineBareFunction";
  callee: E***REMOVED***pression;
}

e***REMOVED***port interface PipelinePrimaryTopicReference e***REMOVED***tends BaseNode {
  type: "PipelinePrimaryTopicReference";
}

e***REMOVED***port interface TSParameterProperty e***REMOVED***tends BaseNode {
  type: "TSParameterProperty";
  parameter: Identifier | AssignmentPattern;
  accessibility: "public" | "private" | "protected" | null;
  decorators: Array<Decorator> | null;
  override: boolean | null;
  readonly: boolean | null;
}

e***REMOVED***port interface TSDeclareFunction e***REMOVED***tends BaseNode {
  type: "TSDeclareFunction";
  id: Identifier | null;
  typeParameters: TSTypeParameterDeclaration | Noop | null;
  params: Array<Identifier | Pattern | RestElement>;
  returnType: TSTypeAnnotation | Noop | null;
  async: boolean;
  declare: boolean | null;
  generator: boolean;
}

e***REMOVED***port interface TSDeclareMethod e***REMOVED***tends BaseNode {
  type: "TSDeclareMethod";
  decorators: Array<Decorator> | null;
  key: Identifier | StringLiteral | NumericLiteral | BigIntLiteral | E***REMOVED***pression;
  typeParameters: TSTypeParameterDeclaration | Noop | null;
  params: Array<Identifier | Pattern | RestElement | TSParameterProperty>;
  returnType: TSTypeAnnotation | Noop | null;
  abstract: boolean | null;
  access: "public" | "private" | "protected" | null;
  accessibility: "public" | "private" | "protected" | null;
  async: boolean;
  computed: boolean;
  generator: boolean;
  kind: "get" | "set" | "method" | "constructor";
  optional: boolean | null;
  override: boolean;
  static: boolean;
}

e***REMOVED***port interface TSQualifiedName e***REMOVED***tends BaseNode {
  type: "TSQualifiedName";
  left: TSEntityName;
  right: Identifier;
}

e***REMOVED***port interface TSCallSignatureDeclaration e***REMOVED***tends BaseNode {
  type: "TSCallSignatureDeclaration";
  typeParameters: TSTypeParameterDeclaration | null;
  parameters: Array<ArrayPattern | Identifier | ObjectPattern | RestElement>;
  typeAnnotation: TSTypeAnnotation | null;
}

e***REMOVED***port interface TSConstructSignatureDeclaration e***REMOVED***tends BaseNode {
  type: "TSConstructSignatureDeclaration";
  typeParameters: TSTypeParameterDeclaration | null;
  parameters: Array<ArrayPattern | Identifier | ObjectPattern | RestElement>;
  typeAnnotation: TSTypeAnnotation | null;
}

e***REMOVED***port interface TSPropertySignature e***REMOVED***tends BaseNode {
  type: "TSPropertySignature";
  key: E***REMOVED***pression;
  typeAnnotation: TSTypeAnnotation | null;
  computed: boolean;
  kind: "get" | "set";
  optional: boolean | null;
  readonly: boolean | null;
}

e***REMOVED***port interface TSMethodSignature e***REMOVED***tends BaseNode {
  type: "TSMethodSignature";
  key: E***REMOVED***pression;
  typeParameters: TSTypeParameterDeclaration | null;
  parameters: Array<ArrayPattern | Identifier | ObjectPattern | RestElement>;
  typeAnnotation: TSTypeAnnotation | null;
  computed: boolean;
  kind: "method" | "get" | "set";
  optional: boolean | null;
}

e***REMOVED***port interface TSInde***REMOVED***Signature e***REMOVED***tends BaseNode {
  type: "TSInde***REMOVED***Signature";
  parameters: Array<Identifier>;
  typeAnnotation: TSTypeAnnotation | null;
  readonly: boolean | null;
  static: boolean | null;
}

e***REMOVED***port interface TSAnyKeyword e***REMOVED***tends BaseNode {
  type: "TSAnyKeyword";
}

e***REMOVED***port interface TSBooleanKeyword e***REMOVED***tends BaseNode {
  type: "TSBooleanKeyword";
}

e***REMOVED***port interface TSBigIntKeyword e***REMOVED***tends BaseNode {
  type: "TSBigIntKeyword";
}

e***REMOVED***port interface TSIntrinsicKeyword e***REMOVED***tends BaseNode {
  type: "TSIntrinsicKeyword";
}

e***REMOVED***port interface TSNeverKeyword e***REMOVED***tends BaseNode {
  type: "TSNeverKeyword";
}

e***REMOVED***port interface TSNullKeyword e***REMOVED***tends BaseNode {
  type: "TSNullKeyword";
}

e***REMOVED***port interface TSNumberKeyword e***REMOVED***tends BaseNode {
  type: "TSNumberKeyword";
}

e***REMOVED***port interface TSObjectKeyword e***REMOVED***tends BaseNode {
  type: "TSObjectKeyword";
}

e***REMOVED***port interface TSStringKeyword e***REMOVED***tends BaseNode {
  type: "TSStringKeyword";
}

e***REMOVED***port interface TSSymbolKeyword e***REMOVED***tends BaseNode {
  type: "TSSymbolKeyword";
}

e***REMOVED***port interface TSUndefinedKeyword e***REMOVED***tends BaseNode {
  type: "TSUndefinedKeyword";
}

e***REMOVED***port interface TSUnknownKeyword e***REMOVED***tends BaseNode {
  type: "TSUnknownKeyword";
}

e***REMOVED***port interface TSVoidKeyword e***REMOVED***tends BaseNode {
  type: "TSVoidKeyword";
}

e***REMOVED***port interface TSThisType e***REMOVED***tends BaseNode {
  type: "TSThisType";
}

e***REMOVED***port interface TSFunctionType e***REMOVED***tends BaseNode {
  type: "TSFunctionType";
  typeParameters: TSTypeParameterDeclaration | null;
  parameters: Array<ArrayPattern | Identifier | ObjectPattern | RestElement>;
  typeAnnotation: TSTypeAnnotation | null;
}

e***REMOVED***port interface TSConstructorType e***REMOVED***tends BaseNode {
  type: "TSConstructorType";
  typeParameters: TSTypeParameterDeclaration | null;
  parameters: Array<ArrayPattern | Identifier | ObjectPattern | RestElement>;
  typeAnnotation: TSTypeAnnotation | null;
  abstract: boolean | null;
}

e***REMOVED***port interface TSTypeReference e***REMOVED***tends BaseNode {
  type: "TSTypeReference";
  typeName: TSEntityName;
  typeParameters: TSTypeParameterInstantiation | null;
}

e***REMOVED***port interface TSTypePredicate e***REMOVED***tends BaseNode {
  type: "TSTypePredicate";
  parameterName: Identifier | TSThisType;
  typeAnnotation: TSTypeAnnotation | null;
  asserts: boolean | null;
}

e***REMOVED***port interface TSTypeQuery e***REMOVED***tends BaseNode {
  type: "TSTypeQuery";
  e***REMOVED***prName: TSEntityName | TSImportType;
  typeParameters: TSTypeParameterInstantiation | null;
}

e***REMOVED***port interface TSTypeLiteral e***REMOVED***tends BaseNode {
  type: "TSTypeLiteral";
  members: Array<TSTypeElement>;
}

e***REMOVED***port interface TSArrayType e***REMOVED***tends BaseNode {
  type: "TSArrayType";
  elementType: TSType;
}

e***REMOVED***port interface TSTupleType e***REMOVED***tends BaseNode {
  type: "TSTupleType";
  elementTypes: Array<TSType | TSNamedTupleMember>;
}

e***REMOVED***port interface TSOptionalType e***REMOVED***tends BaseNode {
  type: "TSOptionalType";
  typeAnnotation: TSType;
}

e***REMOVED***port interface TSRestType e***REMOVED***tends BaseNode {
  type: "TSRestType";
  typeAnnotation: TSType;
}

e***REMOVED***port interface TSNamedTupleMember e***REMOVED***tends BaseNode {
  type: "TSNamedTupleMember";
  label: Identifier;
  elementType: TSType;
  optional: boolean;
}

e***REMOVED***port interface TSUnionType e***REMOVED***tends BaseNode {
  type: "TSUnionType";
  types: Array<TSType>;
}

e***REMOVED***port interface TSIntersectionType e***REMOVED***tends BaseNode {
  type: "TSIntersectionType";
  types: Array<TSType>;
}

e***REMOVED***port interface TSConditionalType e***REMOVED***tends BaseNode {
  type: "TSConditionalType";
  checkType: TSType;
  e***REMOVED***tendsType: TSType;
  trueType: TSType;
  falseType: TSType;
}

e***REMOVED***port interface TSInferType e***REMOVED***tends BaseNode {
  type: "TSInferType";
  typeParameter: TSTypeParameter;
}

e***REMOVED***port interface TSParenthesizedType e***REMOVED***tends BaseNode {
  type: "TSParenthesizedType";
  typeAnnotation: TSType;
}

e***REMOVED***port interface TSTypeOperator e***REMOVED***tends BaseNode {
  type: "TSTypeOperator";
  typeAnnotation: TSType;
  operator: string;
}

e***REMOVED***port interface TSInde***REMOVED***edAccessType e***REMOVED***tends BaseNode {
  type: "TSInde***REMOVED***edAccessType";
  objectType: TSType;
  inde***REMOVED***Type: TSType;
}

e***REMOVED***port interface TSMappedType e***REMOVED***tends BaseNode {
  type: "TSMappedType";
  typeParameter: TSTypeParameter;
  typeAnnotation: TSType | null;
  nameType: TSType | null;
  optional: true | false | "+" | "-" | null;
  readonly: true | false | "+" | "-" | null;
}

e***REMOVED***port interface TSLiteralType e***REMOVED***tends BaseNode {
  type: "TSLiteralType";
  literal: NumericLiteral | StringLiteral | BooleanLiteral | BigIntLiteral | TemplateLiteral | UnaryE***REMOVED***pression;
}

e***REMOVED***port interface TSE***REMOVED***pressionWithTypeArguments e***REMOVED***tends BaseNode {
  type: "TSE***REMOVED***pressionWithTypeArguments";
  e***REMOVED***pression: TSEntityName;
  typeParameters: TSTypeParameterInstantiation | null;
}

e***REMOVED***port interface TSInterfaceDeclaration e***REMOVED***tends BaseNode {
  type: "TSInterfaceDeclaration";
  id: Identifier;
  typeParameters: TSTypeParameterDeclaration | null;
  e***REMOVED***tends: Array<TSE***REMOVED***pressionWithTypeArguments> | null;
  body: TSInterfaceBody;
  declare: boolean | null;
}

e***REMOVED***port interface TSInterfaceBody e***REMOVED***tends BaseNode {
  type: "TSInterfaceBody";
  body: Array<TSTypeElement>;
}

e***REMOVED***port interface TSTypeAliasDeclaration e***REMOVED***tends BaseNode {
  type: "TSTypeAliasDeclaration";
  id: Identifier;
  typeParameters: TSTypeParameterDeclaration | null;
  typeAnnotation: TSType;
  declare: boolean | null;
}

e***REMOVED***port interface TSInstantiationE***REMOVED***pression e***REMOVED***tends BaseNode {
  type: "TSInstantiationE***REMOVED***pression";
  e***REMOVED***pression: E***REMOVED***pression;
  typeParameters: TSTypeParameterInstantiation | null;
}

e***REMOVED***port interface TSAsE***REMOVED***pression e***REMOVED***tends BaseNode {
  type: "TSAsE***REMOVED***pression";
  e***REMOVED***pression: E***REMOVED***pression;
  typeAnnotation: TSType;
}

e***REMOVED***port interface TSSatisfiesE***REMOVED***pression e***REMOVED***tends BaseNode {
  type: "TSSatisfiesE***REMOVED***pression";
  e***REMOVED***pression: E***REMOVED***pression;
  typeAnnotation: TSType;
}

e***REMOVED***port interface TSTypeAssertion e***REMOVED***tends BaseNode {
  type: "TSTypeAssertion";
  typeAnnotation: TSType;
  e***REMOVED***pression: E***REMOVED***pression;
}

e***REMOVED***port interface TSEnumDeclaration e***REMOVED***tends BaseNode {
  type: "TSEnumDeclaration";
  id: Identifier;
  members: Array<TSEnumMember>;
  const: boolean | null;
  declare: boolean | null;
  initializer: E***REMOVED***pression | null;
}

e***REMOVED***port interface TSEnumMember e***REMOVED***tends BaseNode {
  type: "TSEnumMember";
  id: Identifier | StringLiteral;
  initializer: E***REMOVED***pression | null;
}

e***REMOVED***port interface TSModuleDeclaration e***REMOVED***tends BaseNode {
  type: "TSModuleDeclaration";
  id: Identifier | StringLiteral;
  body: TSModuleBlock | TSModuleDeclaration;
  declare: boolean | null;
  global: boolean | null;
  kind: "global" | "module" | "namespace";
}

e***REMOVED***port interface TSModuleBlock e***REMOVED***tends BaseNode {
  type: "TSModuleBlock";
  body: Array<Statement>;
}

e***REMOVED***port interface TSImportType e***REMOVED***tends BaseNode {
  type: "TSImportType";
  argument: StringLiteral;
  qualifier: TSEntityName | null;
  typeParameters: TSTypeParameterInstantiation | null;
  options: E***REMOVED***pression | null;
}

e***REMOVED***port interface TSImportEqualsDeclaration e***REMOVED***tends BaseNode {
  type: "TSImportEqualsDeclaration";
  id: Identifier;
  moduleReference: TSEntityName | TSE***REMOVED***ternalModuleReference;
  importKind: "type" | "value" | null;
  isE***REMOVED***port: boolean;
}

e***REMOVED***port interface TSE***REMOVED***ternalModuleReference e***REMOVED***tends BaseNode {
  type: "TSE***REMOVED***ternalModuleReference";
  e***REMOVED***pression: StringLiteral;
}

e***REMOVED***port interface TSNonNullE***REMOVED***pression e***REMOVED***tends BaseNode {
  type: "TSNonNullE***REMOVED***pression";
  e***REMOVED***pression: E***REMOVED***pression;
}

e***REMOVED***port interface TSE***REMOVED***portAssignment e***REMOVED***tends BaseNode {
  type: "TSE***REMOVED***portAssignment";
  e***REMOVED***pression: E***REMOVED***pression;
}

e***REMOVED***port interface TSNamespaceE***REMOVED***portDeclaration e***REMOVED***tends BaseNode {
  type: "TSNamespaceE***REMOVED***portDeclaration";
  id: Identifier;
}

e***REMOVED***port interface TSTypeAnnotation e***REMOVED***tends BaseNode {
  type: "TSTypeAnnotation";
  typeAnnotation: TSType;
}

e***REMOVED***port interface TSTypeParameterInstantiation e***REMOVED***tends BaseNode {
  type: "TSTypeParameterInstantiation";
  params: Array<TSType>;
}

e***REMOVED***port interface TSTypeParameterDeclaration e***REMOVED***tends BaseNode {
  type: "TSTypeParameterDeclaration";
  params: Array<TSTypeParameter>;
}

e***REMOVED***port interface TSTypeParameter e***REMOVED***tends BaseNode {
  type: "TSTypeParameter";
  constraint: TSType | null;
  default: TSType | null;
  name: string;
  const: boolean | null;
  in: boolean | null;
  out: boolean | null;
}

/**
 * @deprecated Use `NumericLiteral`
 */
e***REMOVED***port type NumberLiteral = NumericLiteral;

/**
 * @deprecated Use `RegE***REMOVED***pLiteral`
 */
e***REMOVED***port type Rege***REMOVED***Literal = RegE***REMOVED***pLiteral;

/**
 * @deprecated Use `RestElement`
 */
e***REMOVED***port type RestProperty = RestElement;

/**
 * @deprecated Use `SpreadElement`
 */
e***REMOVED***port type SpreadProperty = SpreadElement;

e***REMOVED***port type Standardized = ArrayE***REMOVED***pression | AssignmentE***REMOVED***pression | BinaryE***REMOVED***pression | InterpreterDirective | Directive | DirectiveLiteral | BlockStatement | BreakStatement | CallE***REMOVED***pression | CatchClause | ConditionalE***REMOVED***pression | ContinueStatement | DebuggerStatement | DoWhileStatement | EmptyStatement | E***REMOVED***pressionStatement | File | ForInStatement | ForStatement | FunctionDeclaration | FunctionE***REMOVED***pression | Identifier | IfStatement | LabeledStatement | StringLiteral | NumericLiteral | NullLiteral | BooleanLiteral | RegE***REMOVED***pLiteral | LogicalE***REMOVED***pression | MemberE***REMOVED***pression | NewE***REMOVED***pression | Program | ObjectE***REMOVED***pression | ObjectMethod | ObjectProperty | RestElement | ReturnStatement | SequenceE***REMOVED***pression | ParenthesizedE***REMOVED***pression | SwitchCase | SwitchStatement | ThisE***REMOVED***pression | ThrowStatement | TryStatement | UnaryE***REMOVED***pression | UpdateE***REMOVED***pression | VariableDeclaration | VariableDeclarator | WhileStatement | WithStatement | AssignmentPattern | ArrayPattern | ArrowFunctionE***REMOVED***pression | ClassBody | ClassE***REMOVED***pression | ClassDeclaration | E***REMOVED***portAllDeclaration | E***REMOVED***portDefaultDeclaration | E***REMOVED***portNamedDeclaration | E***REMOVED***portSpecifier | ForOfStatement | ImportDeclaration | ImportDefaultSpecifier | ImportNamespaceSpecifier | ImportSpecifier | ImportE***REMOVED***pression | MetaProperty | ClassMethod | ObjectPattern | SpreadElement | Super | TaggedTemplateE***REMOVED***pression | TemplateElement | TemplateLiteral | YieldE***REMOVED***pression | AwaitE***REMOVED***pression | Import | BigIntLiteral | E***REMOVED***portNamespaceSpecifier | OptionalMemberE***REMOVED***pression | OptionalCallE***REMOVED***pression | ClassProperty | ClassAccessorProperty | ClassPrivateProperty | ClassPrivateMethod | PrivateName | StaticBlock;
e***REMOVED***port type E***REMOVED***pression = ArrayE***REMOVED***pression | AssignmentE***REMOVED***pression | BinaryE***REMOVED***pression | CallE***REMOVED***pression | ConditionalE***REMOVED***pression | FunctionE***REMOVED***pression | Identifier | StringLiteral | NumericLiteral | NullLiteral | BooleanLiteral | RegE***REMOVED***pLiteral | LogicalE***REMOVED***pression | MemberE***REMOVED***pression | NewE***REMOVED***pression | ObjectE***REMOVED***pression | SequenceE***REMOVED***pression | ParenthesizedE***REMOVED***pression | ThisE***REMOVED***pression | UnaryE***REMOVED***pression | UpdateE***REMOVED***pression | ArrowFunctionE***REMOVED***pression | ClassE***REMOVED***pression | ImportE***REMOVED***pression | MetaProperty | Super | TaggedTemplateE***REMOVED***pression | TemplateLiteral | YieldE***REMOVED***pression | AwaitE***REMOVED***pression | Import | BigIntLiteral | OptionalMemberE***REMOVED***pression | OptionalCallE***REMOVED***pression | TypeCastE***REMOVED***pression | JSXElement | JSXFragment | BindE***REMOVED***pression | DoE***REMOVED***pression | RecordE***REMOVED***pression | TupleE***REMOVED***pression | DecimalLiteral | ModuleE***REMOVED***pression | TopicReference | PipelineTopicE***REMOVED***pression | PipelineBareFunction | PipelinePrimaryTopicReference | TSInstantiationE***REMOVED***pression | TSAsE***REMOVED***pression | TSSatisfiesE***REMOVED***pression | TSTypeAssertion | TSNonNullE***REMOVED***pression;
e***REMOVED***port type Binary = BinaryE***REMOVED***pression | LogicalE***REMOVED***pression;
e***REMOVED***port type Scopable = BlockStatement | CatchClause | DoWhileStatement | ForInStatement | ForStatement | FunctionDeclaration | FunctionE***REMOVED***pression | Program | ObjectMethod | SwitchStatement | WhileStatement | ArrowFunctionE***REMOVED***pression | ClassE***REMOVED***pression | ClassDeclaration | ForOfStatement | ClassMethod | ClassPrivateMethod | StaticBlock | TSModuleBlock;
e***REMOVED***port type BlockParent = BlockStatement | CatchClause | DoWhileStatement | ForInStatement | ForStatement | FunctionDeclaration | FunctionE***REMOVED***pression | Program | ObjectMethod | SwitchStatement | WhileStatement | ArrowFunctionE***REMOVED***pression | ForOfStatement | ClassMethod | ClassPrivateMethod | StaticBlock | TSModuleBlock;
e***REMOVED***port type Block = BlockStatement | Program | TSModuleBlock;
e***REMOVED***port type Statement = BlockStatement | BreakStatement | ContinueStatement | DebuggerStatement | DoWhileStatement | EmptyStatement | E***REMOVED***pressionStatement | ForInStatement | ForStatement | FunctionDeclaration | IfStatement | LabeledStatement | ReturnStatement | SwitchStatement | ThrowStatement | TryStatement | VariableDeclaration | WhileStatement | WithStatement | ClassDeclaration | E***REMOVED***portAllDeclaration | E***REMOVED***portDefaultDeclaration | E***REMOVED***portNamedDeclaration | ForOfStatement | ImportDeclaration | DeclareClass | DeclareFunction | DeclareInterface | DeclareModule | DeclareModuleE***REMOVED***ports | DeclareTypeAlias | DeclareOpaqueType | DeclareVariable | DeclareE***REMOVED***portDeclaration | DeclareE***REMOVED***portAllDeclaration | InterfaceDeclaration | OpaqueType | TypeAlias | EnumDeclaration | TSDeclareFunction | TSInterfaceDeclaration | TSTypeAliasDeclaration | TSEnumDeclaration | TSModuleDeclaration | TSImportEqualsDeclaration | TSE***REMOVED***portAssignment | TSNamespaceE***REMOVED***portDeclaration;
e***REMOVED***port type Terminatorless = BreakStatement | ContinueStatement | ReturnStatement | ThrowStatement | YieldE***REMOVED***pression | AwaitE***REMOVED***pression;
e***REMOVED***port type CompletionStatement = BreakStatement | ContinueStatement | ReturnStatement | ThrowStatement;
e***REMOVED***port type Conditional = ConditionalE***REMOVED***pression | IfStatement;
e***REMOVED***port type Loop = DoWhileStatement | ForInStatement | ForStatement | WhileStatement | ForOfStatement;
e***REMOVED***port type While = DoWhileStatement | WhileStatement;
e***REMOVED***port type E***REMOVED***pressionWrapper = E***REMOVED***pressionStatement | ParenthesizedE***REMOVED***pression | TypeCastE***REMOVED***pression;
e***REMOVED***port type For = ForInStatement | ForStatement | ForOfStatement;
e***REMOVED***port type ForXStatement = ForInStatement | ForOfStatement;
e***REMOVED***port type Function = FunctionDeclaration | FunctionE***REMOVED***pression | ObjectMethod | ArrowFunctionE***REMOVED***pression | ClassMethod | ClassPrivateMethod;
e***REMOVED***port type FunctionParent = FunctionDeclaration | FunctionE***REMOVED***pression | ObjectMethod | ArrowFunctionE***REMOVED***pression | ClassMethod | ClassPrivateMethod | StaticBlock | TSModuleBlock;
e***REMOVED***port type Pureish = FunctionDeclaration | FunctionE***REMOVED***pression | StringLiteral | NumericLiteral | NullLiteral | BooleanLiteral | RegE***REMOVED***pLiteral | ArrowFunctionE***REMOVED***pression | BigIntLiteral | DecimalLiteral;
e***REMOVED***port type Declaration = FunctionDeclaration | VariableDeclaration | ClassDeclaration | E***REMOVED***portAllDeclaration | E***REMOVED***portDefaultDeclaration | E***REMOVED***portNamedDeclaration | ImportDeclaration | DeclareClass | DeclareFunction | DeclareInterface | DeclareModule | DeclareModuleE***REMOVED***ports | DeclareTypeAlias | DeclareOpaqueType | DeclareVariable | DeclareE***REMOVED***portDeclaration | DeclareE***REMOVED***portAllDeclaration | InterfaceDeclaration | OpaqueType | TypeAlias | EnumDeclaration | TSDeclareFunction | TSInterfaceDeclaration | TSTypeAliasDeclaration | TSEnumDeclaration | TSModuleDeclaration;
e***REMOVED***port type PatternLike = Identifier | RestElement | AssignmentPattern | ArrayPattern | ObjectPattern | TSAsE***REMOVED***pression | TSSatisfiesE***REMOVED***pression | TSTypeAssertion | TSNonNullE***REMOVED***pression;
e***REMOVED***port type LVal = Identifier | MemberE***REMOVED***pression | RestElement | AssignmentPattern | ArrayPattern | ObjectPattern | TSParameterProperty | TSAsE***REMOVED***pression | TSSatisfiesE***REMOVED***pression | TSTypeAssertion | TSNonNullE***REMOVED***pression;
e***REMOVED***port type TSEntityName = Identifier | TSQualifiedName;
e***REMOVED***port type Literal = StringLiteral | NumericLiteral | NullLiteral | BooleanLiteral | RegE***REMOVED***pLiteral | TemplateLiteral | BigIntLiteral | DecimalLiteral;
e***REMOVED***port type Immutable = StringLiteral | NumericLiteral | NullLiteral | BooleanLiteral | BigIntLiteral | JSXAttribute | JSXClosingElement | JSXElement | JSXE***REMOVED***pressionContainer | JSXSpreadChild | JSXOpeningElement | JSXTe***REMOVED***t | JSXFragment | JSXOpeningFragment | JSXClosingFragment | DecimalLiteral;
e***REMOVED***port type UserWhitespacable = ObjectMethod | ObjectProperty | ObjectTypeInternalSlot | ObjectTypeCallProperty | ObjectTypeInde***REMOVED***er | ObjectTypeProperty | ObjectTypeSpreadProperty;
e***REMOVED***port type Method = ObjectMethod | ClassMethod | ClassPrivateMethod;
e***REMOVED***port type ObjectMember = ObjectMethod | ObjectProperty;
e***REMOVED***port type Property = ObjectProperty | ClassProperty | ClassAccessorProperty | ClassPrivateProperty;
e***REMOVED***port type UnaryLike = UnaryE***REMOVED***pression | SpreadElement;
e***REMOVED***port type Pattern = AssignmentPattern | ArrayPattern | ObjectPattern;
e***REMOVED***port type Class = ClassE***REMOVED***pression | ClassDeclaration;
e***REMOVED***port type ImportOrE***REMOVED***portDeclaration = E***REMOVED***portAllDeclaration | E***REMOVED***portDefaultDeclaration | E***REMOVED***portNamedDeclaration | ImportDeclaration;
e***REMOVED***port type E***REMOVED***portDeclaration = E***REMOVED***portAllDeclaration | E***REMOVED***portDefaultDeclaration | E***REMOVED***portNamedDeclaration;
e***REMOVED***port type ModuleSpecifier = E***REMOVED***portSpecifier | ImportDefaultSpecifier | ImportNamespaceSpecifier | ImportSpecifier | E***REMOVED***portNamespaceSpecifier | E***REMOVED***portDefaultSpecifier;
e***REMOVED***port type Accessor = ClassAccessorProperty;
e***REMOVED***port type Private = ClassPrivateProperty | ClassPrivateMethod | PrivateName;
e***REMOVED***port type Flow = AnyTypeAnnotation | ArrayTypeAnnotation | BooleanTypeAnnotation | BooleanLiteralTypeAnnotation | NullLiteralTypeAnnotation | ClassImplements | DeclareClass | DeclareFunction | DeclareInterface | DeclareModule | DeclareModuleE***REMOVED***ports | DeclareTypeAlias | DeclareOpaqueType | DeclareVariable | DeclareE***REMOVED***portDeclaration | DeclareE***REMOVED***portAllDeclaration | DeclaredPredicate | E***REMOVED***istsTypeAnnotation | FunctionTypeAnnotation | FunctionTypeParam | GenericTypeAnnotation | InferredPredicate | InterfaceE***REMOVED***tends | InterfaceDeclaration | InterfaceTypeAnnotation | IntersectionTypeAnnotation | Mi***REMOVED***edTypeAnnotation | EmptyTypeAnnotation | NullableTypeAnnotation | NumberLiteralTypeAnnotation | NumberTypeAnnotation | ObjectTypeAnnotation | ObjectTypeInternalSlot | ObjectTypeCallProperty | ObjectTypeInde***REMOVED***er | ObjectTypeProperty | ObjectTypeSpreadProperty | OpaqueType | QualifiedTypeIdentifier | StringLiteralTypeAnnotation | StringTypeAnnotation | SymbolTypeAnnotation | ThisTypeAnnotation | TupleTypeAnnotation | TypeofTypeAnnotation | TypeAlias | TypeAnnotation | TypeCastE***REMOVED***pression | TypeParameter | TypeParameterDeclaration | TypeParameterInstantiation | UnionTypeAnnotation | Variance | VoidTypeAnnotation | EnumDeclaration | EnumBooleanBody | EnumNumberBody | EnumStringBody | EnumSymbolBody | EnumBooleanMember | EnumNumberMember | EnumStringMember | EnumDefaultedMember | Inde***REMOVED***edAccessType | OptionalInde***REMOVED***edAccessType;
e***REMOVED***port type FlowType = AnyTypeAnnotation | ArrayTypeAnnotation | BooleanTypeAnnotation | BooleanLiteralTypeAnnotation | NullLiteralTypeAnnotation | E***REMOVED***istsTypeAnnotation | FunctionTypeAnnotation | GenericTypeAnnotation | InterfaceTypeAnnotation | IntersectionTypeAnnotation | Mi***REMOVED***edTypeAnnotation | EmptyTypeAnnotation | NullableTypeAnnotation | NumberLiteralTypeAnnotation | NumberTypeAnnotation | ObjectTypeAnnotation | StringLiteralTypeAnnotation | StringTypeAnnotation | SymbolTypeAnnotation | ThisTypeAnnotation | TupleTypeAnnotation | TypeofTypeAnnotation | UnionTypeAnnotation | VoidTypeAnnotation | Inde***REMOVED***edAccessType | OptionalInde***REMOVED***edAccessType;
e***REMOVED***port type FlowBaseAnnotation = AnyTypeAnnotation | BooleanTypeAnnotation | NullLiteralTypeAnnotation | Mi***REMOVED***edTypeAnnotation | EmptyTypeAnnotation | NumberTypeAnnotation | StringTypeAnnotation | SymbolTypeAnnotation | ThisTypeAnnotation | VoidTypeAnnotation;
e***REMOVED***port type FlowDeclaration = DeclareClass | DeclareFunction | DeclareInterface | DeclareModule | DeclareModuleE***REMOVED***ports | DeclareTypeAlias | DeclareOpaqueType | DeclareVariable | DeclareE***REMOVED***portDeclaration | DeclareE***REMOVED***portAllDeclaration | InterfaceDeclaration | OpaqueType | TypeAlias;
e***REMOVED***port type FlowPredicate = DeclaredPredicate | InferredPredicate;
e***REMOVED***port type EnumBody = EnumBooleanBody | EnumNumberBody | EnumStringBody | EnumSymbolBody;
e***REMOVED***port type EnumMember = EnumBooleanMember | EnumNumberMember | EnumStringMember | EnumDefaultedMember;
e***REMOVED***port type JSX = JSXAttribute | JSXClosingElement | JSXElement | JSXEmptyE***REMOVED***pression | JSXE***REMOVED***pressionContainer | JSXSpreadChild | JSXIdentifier | JSXMemberE***REMOVED***pression | JSXNamespacedName | JSXOpeningElement | JSXSpreadAttribute | JSXTe***REMOVED***t | JSXFragment | JSXOpeningFragment | JSXClosingFragment;
e***REMOVED***port type Miscellaneous = Noop | Placeholder | V8IntrinsicIdentifier;
e***REMOVED***port type TypeScript = TSParameterProperty | TSDeclareFunction | TSDeclareMethod | TSQualifiedName | TSCallSignatureDeclaration | TSConstructSignatureDeclaration | TSPropertySignature | TSMethodSignature | TSInde***REMOVED***Signature | TSAnyKeyword | TSBooleanKeyword | TSBigIntKeyword | TSIntrinsicKeyword | TSNeverKeyword | TSNullKeyword | TSNumberKeyword | TSObjectKeyword | TSStringKeyword | TSSymbolKeyword | TSUndefinedKeyword | TSUnknownKeyword | TSVoidKeyword | TSThisType | TSFunctionType | TSConstructorType | TSTypeReference | TSTypePredicate | TSTypeQuery | TSTypeLiteral | TSArrayType | TSTupleType | TSOptionalType | TSRestType | TSNamedTupleMember | TSUnionType | TSIntersectionType | TSConditionalType | TSInferType | TSParenthesizedType | TSTypeOperator | TSInde***REMOVED***edAccessType | TSMappedType | TSLiteralType | TSE***REMOVED***pressionWithTypeArguments | TSInterfaceDeclaration | TSInterfaceBody | TSTypeAliasDeclaration | TSInstantiationE***REMOVED***pression | TSAsE***REMOVED***pression | TSSatisfiesE***REMOVED***pression | TSTypeAssertion | TSEnumDeclaration | TSEnumMember | TSModuleDeclaration | TSModuleBlock | TSImportType | TSImportEqualsDeclaration | TSE***REMOVED***ternalModuleReference | TSNonNullE***REMOVED***pression | TSE***REMOVED***portAssignment | TSNamespaceE***REMOVED***portDeclaration | TSTypeAnnotation | TSTypeParameterInstantiation | TSTypeParameterDeclaration | TSTypeParameter;
e***REMOVED***port type TSTypeElement = TSCallSignatureDeclaration | TSConstructSignatureDeclaration | TSPropertySignature | TSMethodSignature | TSInde***REMOVED***Signature;
e***REMOVED***port type TSType = TSAnyKeyword | TSBooleanKeyword | TSBigIntKeyword | TSIntrinsicKeyword | TSNeverKeyword | TSNullKeyword | TSNumberKeyword | TSObjectKeyword | TSStringKeyword | TSSymbolKeyword | TSUndefinedKeyword | TSUnknownKeyword | TSVoidKeyword | TSThisType | TSFunctionType | TSConstructorType | TSTypeReference | TSTypePredicate | TSTypeQuery | TSTypeLiteral | TSArrayType | TSTupleType | TSOptionalType | TSRestType | TSUnionType | TSIntersectionType | TSConditionalType | TSInferType | TSParenthesizedType | TSTypeOperator | TSInde***REMOVED***edAccessType | TSMappedType | TSLiteralType | TSE***REMOVED***pressionWithTypeArguments | TSImportType;
e***REMOVED***port type TSBaseType = TSAnyKeyword | TSBooleanKeyword | TSBigIntKeyword | TSIntrinsicKeyword | TSNeverKeyword | TSNullKeyword | TSNumberKeyword | TSObjectKeyword | TSStringKeyword | TSSymbolKeyword | TSUndefinedKeyword | TSUnknownKeyword | TSVoidKeyword | TSThisType | TSLiteralType;
e***REMOVED***port type ModuleDeclaration = E***REMOVED***portAllDeclaration | E***REMOVED***portDefaultDeclaration | E***REMOVED***portNamedDeclaration | ImportDeclaration;

e***REMOVED***port interface Aliases {
  Standardized: Standardized;
  E***REMOVED***pression: E***REMOVED***pression;
  Binary: Binary;
  Scopable: Scopable;
  BlockParent: BlockParent;
  Block: Block;
  Statement: Statement;
  Terminatorless: Terminatorless;
  CompletionStatement: CompletionStatement;
  Conditional: Conditional;
  Loop: Loop;
  While: While;
  E***REMOVED***pressionWrapper: E***REMOVED***pressionWrapper;
  For: For;
  ForXStatement: ForXStatement;
  Function: Function;
  FunctionParent: FunctionParent;
  Pureish: Pureish;
  Declaration: Declaration;
  PatternLike: PatternLike;
  LVal: LVal;
  TSEntityName: TSEntityName;
  Literal: Literal;
  Immutable: Immutable;
  UserWhitespacable: UserWhitespacable;
  Method: Method;
  ObjectMember: ObjectMember;
  Property: Property;
  UnaryLike: UnaryLike;
  Pattern: Pattern;
  Class: Class;
  ImportOrE***REMOVED***portDeclaration: ImportOrE***REMOVED***portDeclaration;
  E***REMOVED***portDeclaration: E***REMOVED***portDeclaration;
  ModuleSpecifier: ModuleSpecifier;
  Accessor: Accessor;
  Private: Private;
  Flow: Flow;
  FlowType: FlowType;
  FlowBaseAnnotation: FlowBaseAnnotation;
  FlowDeclaration: FlowDeclaration;
  FlowPredicate: FlowPredicate;
  EnumBody: EnumBody;
  EnumMember: EnumMember;
  JSX: JSX;
  Miscellaneous: Miscellaneous;
  TypeScript: TypeScript;
  TSTypeElement: TSTypeElement;
  TSType: TSType;
  TSBaseType: TSBaseType;
  ModuleDeclaration: ModuleDeclaration;
}

e***REMOVED***port function arrayE***REMOVED***pression(elements?: Array<null | E***REMOVED***pression | SpreadElement>): ArrayE***REMOVED***pression;
e***REMOVED***port function assignmentE***REMOVED***pression(operator: string, left: LVal | OptionalMemberE***REMOVED***pression, right: E***REMOVED***pression): AssignmentE***REMOVED***pression;
e***REMOVED***port function binaryE***REMOVED***pression(operator: "+" | "-" | "/" | "%" | "*" | "**" | "&" | "|" | ">>" | ">>>" | "<<" | "^" | "==" | "===" | "!=" | "!==" | "in" | "instanceof" | ">" | "<" | ">=" | "<=" | "|>", left: E***REMOVED***pression | PrivateName, right: E***REMOVED***pression): BinaryE***REMOVED***pression;
e***REMOVED***port function interpreterDirective(value: string): InterpreterDirective;
e***REMOVED***port function directive(value: DirectiveLiteral): Directive;
e***REMOVED***port function directiveLiteral(value: string): DirectiveLiteral;
e***REMOVED***port function blockStatement(body: Array<Statement>, directives?: Array<Directive>): BlockStatement;
e***REMOVED***port function breakStatement(label?: Identifier | null): BreakStatement;
e***REMOVED***port function callE***REMOVED***pression(callee: E***REMOVED***pression | Super | V8IntrinsicIdentifier, _arguments: Array<E***REMOVED***pression | SpreadElement | ArgumentPlaceholder>): CallE***REMOVED***pression;
e***REMOVED***port function catchClause(param: Identifier | ArrayPattern | ObjectPattern | null | undefined, body: BlockStatement): CatchClause;
e***REMOVED***port function conditionalE***REMOVED***pression(test: E***REMOVED***pression, consequent: E***REMOVED***pression, alternate: E***REMOVED***pression): ConditionalE***REMOVED***pression;
e***REMOVED***port function continueStatement(label?: Identifier | null): ContinueStatement;
e***REMOVED***port function debuggerStatement(): DebuggerStatement;
e***REMOVED***port function doWhileStatement(test: E***REMOVED***pression, body: Statement): DoWhileStatement;
e***REMOVED***port function emptyStatement(): EmptyStatement;
e***REMOVED***port function e***REMOVED***pressionStatement(e***REMOVED***pression: E***REMOVED***pression): E***REMOVED***pressionStatement;
e***REMOVED***port function file(program: Program, comments?: Array<CommentBlock | CommentLine> | null, tokens?: Array<any> | null): File;
e***REMOVED***port function forInStatement(left: VariableDeclaration | LVal, right: E***REMOVED***pression, body: Statement): ForInStatement;
e***REMOVED***port function forStatement(init: VariableDeclaration | E***REMOVED***pression | null | undefined, test: E***REMOVED***pression | null | undefined, update: E***REMOVED***pression | null | undefined, body: Statement): ForStatement;
e***REMOVED***port function functionDeclaration(id: Identifier | null | undefined, params: Array<Identifier | Pattern | RestElement>, body: BlockStatement, generator?: boolean, async?: boolean): FunctionDeclaration;
e***REMOVED***port function functionE***REMOVED***pression(id: Identifier | null | undefined, params: Array<Identifier | Pattern | RestElement>, body: BlockStatement, generator?: boolean, async?: boolean): FunctionE***REMOVED***pression;
e***REMOVED***port function identifier(name: string): Identifier;
e***REMOVED***port function ifStatement(test: E***REMOVED***pression, consequent: Statement, alternate?: Statement | null): IfStatement;
e***REMOVED***port function labeledStatement(label: Identifier, body: Statement): LabeledStatement;
e***REMOVED***port function stringLiteral(value: string): StringLiteral;
e***REMOVED***port function numericLiteral(value: number): NumericLiteral;
e***REMOVED***port function nullLiteral(): NullLiteral;
e***REMOVED***port function booleanLiteral(value: boolean): BooleanLiteral;
e***REMOVED***port function regE***REMOVED***pLiteral(pattern: string, flags?: string): RegE***REMOVED***pLiteral;
e***REMOVED***port function logicalE***REMOVED***pression(operator: "||" | "&&" | "??", left: E***REMOVED***pression, right: E***REMOVED***pression): LogicalE***REMOVED***pression;
e***REMOVED***port function memberE***REMOVED***pression(object: E***REMOVED***pression | Super, property: E***REMOVED***pression | Identifier | PrivateName, computed?: boolean, optional?: boolean | null): MemberE***REMOVED***pression;
e***REMOVED***port function newE***REMOVED***pression(callee: E***REMOVED***pression | Super | V8IntrinsicIdentifier, _arguments: Array<E***REMOVED***pression | SpreadElement | ArgumentPlaceholder>): NewE***REMOVED***pression;
e***REMOVED***port function program(body: Array<Statement>, directives?: Array<Directive>, sourceType?: "script" | "module", interpreter?: InterpreterDirective | null): Program;
e***REMOVED***port function objectE***REMOVED***pression(properties: Array<ObjectMethod | ObjectProperty | SpreadElement>): ObjectE***REMOVED***pression;
e***REMOVED***port function objectMethod(kind: "method" | "get" | "set" | undefined, key: E***REMOVED***pression | Identifier | StringLiteral | NumericLiteral | BigIntLiteral, params: Array<Identifier | Pattern | RestElement>, body: BlockStatement, computed?: boolean, generator?: boolean, async?: boolean): ObjectMethod;
e***REMOVED***port function objectProperty(key: E***REMOVED***pression | Identifier | StringLiteral | NumericLiteral | BigIntLiteral | DecimalLiteral | PrivateName, value: E***REMOVED***pression | PatternLike, computed?: boolean, shorthand?: boolean, decorators?: Array<Decorator> | null): ObjectProperty;
e***REMOVED***port function restElement(argument: LVal): RestElement;
e***REMOVED***port function returnStatement(argument?: E***REMOVED***pression | null): ReturnStatement;
e***REMOVED***port function sequenceE***REMOVED***pression(e***REMOVED***pressions: Array<E***REMOVED***pression>): SequenceE***REMOVED***pression;
e***REMOVED***port function parenthesizedE***REMOVED***pression(e***REMOVED***pression: E***REMOVED***pression): ParenthesizedE***REMOVED***pression;
e***REMOVED***port function switchCase(test: E***REMOVED***pression | null | undefined, consequent: Array<Statement>): SwitchCase;
e***REMOVED***port function switchStatement(discriminant: E***REMOVED***pression, cases: Array<SwitchCase>): SwitchStatement;
e***REMOVED***port function thisE***REMOVED***pression(): ThisE***REMOVED***pression;
e***REMOVED***port function throwStatement(argument: E***REMOVED***pression): ThrowStatement;
e***REMOVED***port function tryStatement(block: BlockStatement, handler?: CatchClause | null, finalizer?: BlockStatement | null): TryStatement;
e***REMOVED***port function unaryE***REMOVED***pression(operator: "void" | "throw" | "delete" | "!" | "+" | "-" | "~" | "typeof", argument: E***REMOVED***pression, prefi***REMOVED***?: boolean): UnaryE***REMOVED***pression;
e***REMOVED***port function updateE***REMOVED***pression(operator: "++" | "--", argument: E***REMOVED***pression, prefi***REMOVED***?: boolean): UpdateE***REMOVED***pression;
e***REMOVED***port function variableDeclaration(kind: "var" | "let" | "const" | "using" | "await using", declarations: Array<VariableDeclarator>): VariableDeclaration;
e***REMOVED***port function variableDeclarator(id: LVal, init?: E***REMOVED***pression | null): VariableDeclarator;
e***REMOVED***port function whileStatement(test: E***REMOVED***pression, body: Statement): WhileStatement;
e***REMOVED***port function withStatement(object: E***REMOVED***pression, body: Statement): WithStatement;
e***REMOVED***port function assignmentPattern(left: Identifier | ObjectPattern | ArrayPattern | MemberE***REMOVED***pression | TSAsE***REMOVED***pression | TSSatisfiesE***REMOVED***pression | TSTypeAssertion | TSNonNullE***REMOVED***pression, right: E***REMOVED***pression): AssignmentPattern;
e***REMOVED***port function arrayPattern(elements: Array<null | PatternLike | LVal>): ArrayPattern;
e***REMOVED***port function arrowFunctionE***REMOVED***pression(params: Array<Identifier | Pattern | RestElement>, body: BlockStatement | E***REMOVED***pression, async?: boolean): ArrowFunctionE***REMOVED***pression;
e***REMOVED***port function classBody(body: Array<ClassMethod | ClassPrivateMethod | ClassProperty | ClassPrivateProperty | ClassAccessorProperty | TSDeclareMethod | TSInde***REMOVED***Signature | StaticBlock>): ClassBody;
e***REMOVED***port function classE***REMOVED***pression(id: Identifier | null | undefined, superClass: E***REMOVED***pression | null | undefined, body: ClassBody, decorators?: Array<Decorator> | null): ClassE***REMOVED***pression;
e***REMOVED***port function classDeclaration(id: Identifier | null | undefined, superClass: E***REMOVED***pression | null | undefined, body: ClassBody, decorators?: Array<Decorator> | null): ClassDeclaration;
e***REMOVED***port function e***REMOVED***portAllDeclaration(source: StringLiteral): E***REMOVED***portAllDeclaration;
e***REMOVED***port function e***REMOVED***portDefaultDeclaration(declaration: TSDeclareFunction | FunctionDeclaration | ClassDeclaration | E***REMOVED***pression): E***REMOVED***portDefaultDeclaration;
e***REMOVED***port function e***REMOVED***portNamedDeclaration(declaration?: Declaration | null, specifiers?: Array<E***REMOVED***portSpecifier | E***REMOVED***portDefaultSpecifier | E***REMOVED***portNamespaceSpecifier>, source?: StringLiteral | null): E***REMOVED***portNamedDeclaration;
e***REMOVED***port function e***REMOVED***portSpecifier(local: Identifier, e***REMOVED***ported: Identifier | StringLiteral): E***REMOVED***portSpecifier;
e***REMOVED***port function forOfStatement(left: VariableDeclaration | LVal, right: E***REMOVED***pression, body: Statement, _await?: boolean): ForOfStatement;
e***REMOVED***port function importDeclaration(specifiers: Array<ImportSpecifier | ImportDefaultSpecifier | ImportNamespaceSpecifier>, source: StringLiteral): ImportDeclaration;
e***REMOVED***port function importDefaultSpecifier(local: Identifier): ImportDefaultSpecifier;
e***REMOVED***port function importNamespaceSpecifier(local: Identifier): ImportNamespaceSpecifier;
e***REMOVED***port function importSpecifier(local: Identifier, imported: Identifier | StringLiteral): ImportSpecifier;
e***REMOVED***port function importE***REMOVED***pression(source: E***REMOVED***pression, options?: E***REMOVED***pression | null): ImportE***REMOVED***pression;
e***REMOVED***port function metaProperty(meta: Identifier, property: Identifier): MetaProperty;
e***REMOVED***port function classMethod(kind: "get" | "set" | "method" | "constructor" | undefined, key: Identifier | StringLiteral | NumericLiteral | BigIntLiteral | E***REMOVED***pression, params: Array<Identifier | Pattern | RestElement | TSParameterProperty>, body: BlockStatement, computed?: boolean, _static?: boolean, generator?: boolean, async?: boolean): ClassMethod;
e***REMOVED***port function objectPattern(properties: Array<RestElement | ObjectProperty>): ObjectPattern;
e***REMOVED***port function spreadElement(argument: E***REMOVED***pression): SpreadElement;
declare function _super(): Super;
e***REMOVED***port { _super as super}
e***REMOVED***port function taggedTemplateE***REMOVED***pression(tag: E***REMOVED***pression, quasi: TemplateLiteral): TaggedTemplateE***REMOVED***pression;
e***REMOVED***port function templateElement(value: { raw: string, cooked?: string }, tail?: boolean): TemplateElement;
e***REMOVED***port function templateLiteral(quasis: Array<TemplateElement>, e***REMOVED***pressions: Array<E***REMOVED***pression | TSType>): TemplateLiteral;
e***REMOVED***port function yieldE***REMOVED***pression(argument?: E***REMOVED***pression | null, delegate?: boolean): YieldE***REMOVED***pression;
e***REMOVED***port function awaitE***REMOVED***pression(argument: E***REMOVED***pression): AwaitE***REMOVED***pression;
declare function _import(): Import;
e***REMOVED***port { _import as import}
e***REMOVED***port function bigIntLiteral(value: string): BigIntLiteral;
e***REMOVED***port function e***REMOVED***portNamespaceSpecifier(e***REMOVED***ported: Identifier): E***REMOVED***portNamespaceSpecifier;
e***REMOVED***port function optionalMemberE***REMOVED***pression(object: E***REMOVED***pression, property: E***REMOVED***pression | Identifier, computed: boolean | undefined, optional: boolean): OptionalMemberE***REMOVED***pression;
e***REMOVED***port function optionalCallE***REMOVED***pression(callee: E***REMOVED***pression, _arguments: Array<E***REMOVED***pression | SpreadElement | ArgumentPlaceholder>, optional: boolean): OptionalCallE***REMOVED***pression;
e***REMOVED***port function classProperty(key: Identifier | StringLiteral | NumericLiteral | BigIntLiteral | E***REMOVED***pression, value?: E***REMOVED***pression | null, typeAnnotation?: TypeAnnotation | TSTypeAnnotation | Noop | null, decorators?: Array<Decorator> | null, computed?: boolean, _static?: boolean): ClassProperty;
e***REMOVED***port function classAccessorProperty(key: Identifier | StringLiteral | NumericLiteral | BigIntLiteral | E***REMOVED***pression | PrivateName, value?: E***REMOVED***pression | null, typeAnnotation?: TypeAnnotation | TSTypeAnnotation | Noop | null, decorators?: Array<Decorator> | null, computed?: boolean, _static?: boolean): ClassAccessorProperty;
e***REMOVED***port function classPrivateProperty(key: PrivateName, value?: E***REMOVED***pression | null, decorators?: Array<Decorator> | null, _static?: boolean): ClassPrivateProperty;
e***REMOVED***port function classPrivateMethod(kind: "get" | "set" | "method" | undefined, key: PrivateName, params: Array<Identifier | Pattern | RestElement | TSParameterProperty>, body: BlockStatement, _static?: boolean): ClassPrivateMethod;
e***REMOVED***port function privateName(id: Identifier): PrivateName;
e***REMOVED***port function staticBlock(body: Array<Statement>): StaticBlock;
e***REMOVED***port function anyTypeAnnotation(): AnyTypeAnnotation;
e***REMOVED***port function arrayTypeAnnotation(elementType: FlowType): ArrayTypeAnnotation;
e***REMOVED***port function booleanTypeAnnotation(): BooleanTypeAnnotation;
e***REMOVED***port function booleanLiteralTypeAnnotation(value: boolean): BooleanLiteralTypeAnnotation;
e***REMOVED***port function nullLiteralTypeAnnotation(): NullLiteralTypeAnnotation;
e***REMOVED***port function classImplements(id: Identifier, typeParameters?: TypeParameterInstantiation | null): ClassImplements;
e***REMOVED***port function declareClass(id: Identifier, typeParameters: TypeParameterDeclaration | null | undefined, _e***REMOVED***tends: Array<InterfaceE***REMOVED***tends> | null | undefined, body: ObjectTypeAnnotation): DeclareClass;
e***REMOVED***port function declareFunction(id: Identifier): DeclareFunction;
e***REMOVED***port function declareInterface(id: Identifier, typeParameters: TypeParameterDeclaration | null | undefined, _e***REMOVED***tends: Array<InterfaceE***REMOVED***tends> | null | undefined, body: ObjectTypeAnnotation): DeclareInterface;
e***REMOVED***port function declareModule(id: Identifier | StringLiteral, body: BlockStatement, kind?: "CommonJS" | "ES" | null): DeclareModule;
e***REMOVED***port function declareModuleE***REMOVED***ports(typeAnnotation: TypeAnnotation): DeclareModuleE***REMOVED***ports;
e***REMOVED***port function declareTypeAlias(id: Identifier, typeParameters: TypeParameterDeclaration | null | undefined, right: FlowType): DeclareTypeAlias;
e***REMOVED***port function declareOpaqueType(id: Identifier, typeParameters?: TypeParameterDeclaration | null, supertype?: FlowType | null): DeclareOpaqueType;
e***REMOVED***port function declareVariable(id: Identifier): DeclareVariable;
e***REMOVED***port function declareE***REMOVED***portDeclaration(declaration?: Flow | null, specifiers?: Array<E***REMOVED***portSpecifier | E***REMOVED***portNamespaceSpecifier> | null, source?: StringLiteral | null, attributes?: Array<ImportAttribute> | null): DeclareE***REMOVED***portDeclaration;
e***REMOVED***port function declareE***REMOVED***portAllDeclaration(source: StringLiteral, attributes?: Array<ImportAttribute> | null): DeclareE***REMOVED***portAllDeclaration;
e***REMOVED***port function declaredPredicate(value: Flow): DeclaredPredicate;
e***REMOVED***port function e***REMOVED***istsTypeAnnotation(): E***REMOVED***istsTypeAnnotation;
e***REMOVED***port function functionTypeAnnotation(typeParameters: TypeParameterDeclaration | null | undefined, params: Array<FunctionTypeParam>, rest: FunctionTypeParam | null | undefined, returnType: FlowType): FunctionTypeAnnotation;
e***REMOVED***port function functionTypeParam(name: Identifier | null | undefined, typeAnnotation: FlowType): FunctionTypeParam;
e***REMOVED***port function genericTypeAnnotation(id: Identifier | QualifiedTypeIdentifier, typeParameters?: TypeParameterInstantiation | null): GenericTypeAnnotation;
e***REMOVED***port function inferredPredicate(): InferredPredicate;
e***REMOVED***port function interfaceE***REMOVED***tends(id: Identifier | QualifiedTypeIdentifier, typeParameters?: TypeParameterInstantiation | null): InterfaceE***REMOVED***tends;
e***REMOVED***port function interfaceDeclaration(id: Identifier, typeParameters: TypeParameterDeclaration | null | undefined, _e***REMOVED***tends: Array<InterfaceE***REMOVED***tends> | null | undefined, body: ObjectTypeAnnotation): InterfaceDeclaration;
e***REMOVED***port function interfaceTypeAnnotation(_e***REMOVED***tends: Array<InterfaceE***REMOVED***tends> | null | undefined, body: ObjectTypeAnnotation): InterfaceTypeAnnotation;
e***REMOVED***port function intersectionTypeAnnotation(types: Array<FlowType>): IntersectionTypeAnnotation;
e***REMOVED***port function mi***REMOVED***edTypeAnnotation(): Mi***REMOVED***edTypeAnnotation;
e***REMOVED***port function emptyTypeAnnotation(): EmptyTypeAnnotation;
e***REMOVED***port function nullableTypeAnnotation(typeAnnotation: FlowType): NullableTypeAnnotation;
e***REMOVED***port function numberLiteralTypeAnnotation(value: number): NumberLiteralTypeAnnotation;
e***REMOVED***port function numberTypeAnnotation(): NumberTypeAnnotation;
e***REMOVED***port function objectTypeAnnotation(properties: Array<ObjectTypeProperty | ObjectTypeSpreadProperty>, inde***REMOVED***ers?: Array<ObjectTypeInde***REMOVED***er>, callProperties?: Array<ObjectTypeCallProperty>, internalSlots?: Array<ObjectTypeInternalSlot>, e***REMOVED***act?: boolean): ObjectTypeAnnotation;
e***REMOVED***port function objectTypeInternalSlot(id: Identifier, value: FlowType, optional: boolean, _static: boolean, method: boolean): ObjectTypeInternalSlot;
e***REMOVED***port function objectTypeCallProperty(value: FlowType): ObjectTypeCallProperty;
e***REMOVED***port function objectTypeInde***REMOVED***er(id: Identifier | null | undefined, key: FlowType, value: FlowType, variance?: Variance | null): ObjectTypeInde***REMOVED***er;
e***REMOVED***port function objectTypeProperty(key: Identifier | StringLiteral, value: FlowType, variance?: Variance | null): ObjectTypeProperty;
e***REMOVED***port function objectTypeSpreadProperty(argument: FlowType): ObjectTypeSpreadProperty;
e***REMOVED***port function opaqueType(id: Identifier, typeParameters: TypeParameterDeclaration | null | undefined, supertype: FlowType | null | undefined, impltype: FlowType): OpaqueType;
e***REMOVED***port function qualifiedTypeIdentifier(id: Identifier, qualification: Identifier | QualifiedTypeIdentifier): QualifiedTypeIdentifier;
e***REMOVED***port function stringLiteralTypeAnnotation(value: string): StringLiteralTypeAnnotation;
e***REMOVED***port function stringTypeAnnotation(): StringTypeAnnotation;
e***REMOVED***port function symbolTypeAnnotation(): SymbolTypeAnnotation;
e***REMOVED***port function thisTypeAnnotation(): ThisTypeAnnotation;
e***REMOVED***port function tupleTypeAnnotation(types: Array<FlowType>): TupleTypeAnnotation;
e***REMOVED***port function typeofTypeAnnotation(argument: FlowType): TypeofTypeAnnotation;
e***REMOVED***port function typeAlias(id: Identifier, typeParameters: TypeParameterDeclaration | null | undefined, right: FlowType): TypeAlias;
e***REMOVED***port function typeAnnotation(typeAnnotation: FlowType): TypeAnnotation;
e***REMOVED***port function typeCastE***REMOVED***pression(e***REMOVED***pression: E***REMOVED***pression, typeAnnotation: TypeAnnotation): TypeCastE***REMOVED***pression;
e***REMOVED***port function typeParameter(bound?: TypeAnnotation | null, _default?: FlowType | null, variance?: Variance | null): TypeParameter;
e***REMOVED***port function typeParameterDeclaration(params: Array<TypeParameter>): TypeParameterDeclaration;
e***REMOVED***port function typeParameterInstantiation(params: Array<FlowType>): TypeParameterInstantiation;
e***REMOVED***port function unionTypeAnnotation(types: Array<FlowType>): UnionTypeAnnotation;
e***REMOVED***port function variance(kind: "minus" | "plus"): Variance;
e***REMOVED***port function voidTypeAnnotation(): VoidTypeAnnotation;
e***REMOVED***port function enumDeclaration(id: Identifier, body: EnumBooleanBody | EnumNumberBody | EnumStringBody | EnumSymbolBody): EnumDeclaration;
e***REMOVED***port function enumBooleanBody(members: Array<EnumBooleanMember>): EnumBooleanBody;
e***REMOVED***port function enumNumberBody(members: Array<EnumNumberMember>): EnumNumberBody;
e***REMOVED***port function enumStringBody(members: Array<EnumStringMember | EnumDefaultedMember>): EnumStringBody;
e***REMOVED***port function enumSymbolBody(members: Array<EnumDefaultedMember>): EnumSymbolBody;
e***REMOVED***port function enumBooleanMember(id: Identifier): EnumBooleanMember;
e***REMOVED***port function enumNumberMember(id: Identifier, init: NumericLiteral): EnumNumberMember;
e***REMOVED***port function enumStringMember(id: Identifier, init: StringLiteral): EnumStringMember;
e***REMOVED***port function enumDefaultedMember(id: Identifier): EnumDefaultedMember;
e***REMOVED***port function inde***REMOVED***edAccessType(objectType: FlowType, inde***REMOVED***Type: FlowType): Inde***REMOVED***edAccessType;
e***REMOVED***port function optionalInde***REMOVED***edAccessType(objectType: FlowType, inde***REMOVED***Type: FlowType): OptionalInde***REMOVED***edAccessType;
e***REMOVED***port function js***REMOVED***Attribute(name: JSXIdentifier | JSXNamespacedName, value?: JSXElement | JSXFragment | StringLiteral | JSXE***REMOVED***pressionContainer | null): JSXAttribute;
e***REMOVED***port function js***REMOVED***ClosingElement(name: JSXIdentifier | JSXMemberE***REMOVED***pression | JSXNamespacedName): JSXClosingElement;
e***REMOVED***port function js***REMOVED***Element(openingElement: JSXOpeningElement, closingElement: JSXClosingElement | null | undefined, children: Array<JSXTe***REMOVED***t | JSXE***REMOVED***pressionContainer | JSXSpreadChild | JSXElement | JSXFragment>, selfClosing?: boolean | null): JSXElement;
e***REMOVED***port function js***REMOVED***EmptyE***REMOVED***pression(): JSXEmptyE***REMOVED***pression;
e***REMOVED***port function js***REMOVED***E***REMOVED***pressionContainer(e***REMOVED***pression: E***REMOVED***pression | JSXEmptyE***REMOVED***pression): JSXE***REMOVED***pressionContainer;
e***REMOVED***port function js***REMOVED***SpreadChild(e***REMOVED***pression: E***REMOVED***pression): JSXSpreadChild;
e***REMOVED***port function js***REMOVED***Identifier(name: string): JSXIdentifier;
e***REMOVED***port function js***REMOVED***MemberE***REMOVED***pression(object: JSXMemberE***REMOVED***pression | JSXIdentifier, property: JSXIdentifier): JSXMemberE***REMOVED***pression;
e***REMOVED***port function js***REMOVED***NamespacedName(namespace: JSXIdentifier, name: JSXIdentifier): JSXNamespacedName;
e***REMOVED***port function js***REMOVED***OpeningElement(name: JSXIdentifier | JSXMemberE***REMOVED***pression | JSXNamespacedName, attributes: Array<JSXAttribute | JSXSpreadAttribute>, selfClosing?: boolean): JSXOpeningElement;
e***REMOVED***port function js***REMOVED***SpreadAttribute(argument: E***REMOVED***pression): JSXSpreadAttribute;
e***REMOVED***port function js***REMOVED***Te***REMOVED***t(value: string): JSXTe***REMOVED***t;
e***REMOVED***port function js***REMOVED***Fragment(openingFragment: JSXOpeningFragment, closingFragment: JSXClosingFragment, children: Array<JSXTe***REMOVED***t | JSXE***REMOVED***pressionContainer | JSXSpreadChild | JSXElement | JSXFragment>): JSXFragment;
e***REMOVED***port function js***REMOVED***OpeningFragment(): JSXOpeningFragment;
e***REMOVED***port function js***REMOVED***ClosingFragment(): JSXClosingFragment;
e***REMOVED***port function noop(): Noop;
e***REMOVED***port function placeholder(e***REMOVED***pectedNode: "Identifier" | "StringLiteral" | "E***REMOVED***pression" | "Statement" | "Declaration" | "BlockStatement" | "ClassBody" | "Pattern", name: Identifier): Placeholder;
e***REMOVED***port function v8IntrinsicIdentifier(name: string): V8IntrinsicIdentifier;
e***REMOVED***port function argumentPlaceholder(): ArgumentPlaceholder;
e***REMOVED***port function bindE***REMOVED***pression(object: E***REMOVED***pression, callee: E***REMOVED***pression): BindE***REMOVED***pression;
e***REMOVED***port function importAttribute(key: Identifier | StringLiteral, value: StringLiteral): ImportAttribute;
e***REMOVED***port function decorator(e***REMOVED***pression: E***REMOVED***pression): Decorator;
e***REMOVED***port function doE***REMOVED***pression(body: BlockStatement, async?: boolean): DoE***REMOVED***pression;
e***REMOVED***port function e***REMOVED***portDefaultSpecifier(e***REMOVED***ported: Identifier): E***REMOVED***portDefaultSpecifier;
e***REMOVED***port function recordE***REMOVED***pression(properties: Array<ObjectProperty | SpreadElement>): RecordE***REMOVED***pression;
e***REMOVED***port function tupleE***REMOVED***pression(elements?: Array<E***REMOVED***pression | SpreadElement>): TupleE***REMOVED***pression;
e***REMOVED***port function decimalLiteral(value: string): DecimalLiteral;
e***REMOVED***port function moduleE***REMOVED***pression(body: Program): ModuleE***REMOVED***pression;
e***REMOVED***port function topicReference(): TopicReference;
e***REMOVED***port function pipelineTopicE***REMOVED***pression(e***REMOVED***pression: E***REMOVED***pression): PipelineTopicE***REMOVED***pression;
e***REMOVED***port function pipelineBareFunction(callee: E***REMOVED***pression): PipelineBareFunction;
e***REMOVED***port function pipelinePrimaryTopicReference(): PipelinePrimaryTopicReference;
e***REMOVED***port function tsParameterProperty(parameter: Identifier | AssignmentPattern): TSParameterProperty;
e***REMOVED***port function tsDeclareFunction(id: Identifier | null | undefined, typeParameters: TSTypeParameterDeclaration | Noop | null | undefined, params: Array<Identifier | Pattern | RestElement>, returnType?: TSTypeAnnotation | Noop | null): TSDeclareFunction;
e***REMOVED***port function tsDeclareMethod(decorators: Array<Decorator> | null | undefined, key: Identifier | StringLiteral | NumericLiteral | BigIntLiteral | E***REMOVED***pression, typeParameters: TSTypeParameterDeclaration | Noop | null | undefined, params: Array<Identifier | Pattern | RestElement | TSParameterProperty>, returnType?: TSTypeAnnotation | Noop | null): TSDeclareMethod;
e***REMOVED***port function tsQualifiedName(left: TSEntityName, right: Identifier): TSQualifiedName;
e***REMOVED***port function tsCallSignatureDeclaration(typeParameters: TSTypeParameterDeclaration | null | undefined, parameters: Array<ArrayPattern | Identifier | ObjectPattern | RestElement>, typeAnnotation?: TSTypeAnnotation | null): TSCallSignatureDeclaration;
e***REMOVED***port function tsConstructSignatureDeclaration(typeParameters: TSTypeParameterDeclaration | null | undefined, parameters: Array<ArrayPattern | Identifier | ObjectPattern | RestElement>, typeAnnotation?: TSTypeAnnotation | null): TSConstructSignatureDeclaration;
e***REMOVED***port function tsPropertySignature(key: E***REMOVED***pression, typeAnnotation?: TSTypeAnnotation | null): TSPropertySignature;
e***REMOVED***port function tsMethodSignature(key: E***REMOVED***pression, typeParameters: TSTypeParameterDeclaration | null | undefined, parameters: Array<ArrayPattern | Identifier | ObjectPattern | RestElement>, typeAnnotation?: TSTypeAnnotation | null): TSMethodSignature;
e***REMOVED***port function tsInde***REMOVED***Signature(parameters: Array<Identifier>, typeAnnotation?: TSTypeAnnotation | null): TSInde***REMOVED***Signature;
e***REMOVED***port function tsAnyKeyword(): TSAnyKeyword;
e***REMOVED***port function tsBooleanKeyword(): TSBooleanKeyword;
e***REMOVED***port function tsBigIntKeyword(): TSBigIntKeyword;
e***REMOVED***port function tsIntrinsicKeyword(): TSIntrinsicKeyword;
e***REMOVED***port function tsNeverKeyword(): TSNeverKeyword;
e***REMOVED***port function tsNullKeyword(): TSNullKeyword;
e***REMOVED***port function tsNumberKeyword(): TSNumberKeyword;
e***REMOVED***port function tsObjectKeyword(): TSObjectKeyword;
e***REMOVED***port function tsStringKeyword(): TSStringKeyword;
e***REMOVED***port function tsSymbolKeyword(): TSSymbolKeyword;
e***REMOVED***port function tsUndefinedKeyword(): TSUndefinedKeyword;
e***REMOVED***port function tsUnknownKeyword(): TSUnknownKeyword;
e***REMOVED***port function tsVoidKeyword(): TSVoidKeyword;
e***REMOVED***port function tsThisType(): TSThisType;
e***REMOVED***port function tsFunctionType(typeParameters: TSTypeParameterDeclaration | null | undefined, parameters: Array<ArrayPattern | Identifier | ObjectPattern | RestElement>, typeAnnotation?: TSTypeAnnotation | null): TSFunctionType;
e***REMOVED***port function tsConstructorType(typeParameters: TSTypeParameterDeclaration | null | undefined, parameters: Array<ArrayPattern | Identifier | ObjectPattern | RestElement>, typeAnnotation?: TSTypeAnnotation | null): TSConstructorType;
e***REMOVED***port function tsTypeReference(typeName: TSEntityName, typeParameters?: TSTypeParameterInstantiation | null): TSTypeReference;
e***REMOVED***port function tsTypePredicate(parameterName: Identifier | TSThisType, typeAnnotation?: TSTypeAnnotation | null, asserts?: boolean | null): TSTypePredicate;
e***REMOVED***port function tsTypeQuery(e***REMOVED***prName: TSEntityName | TSImportType, typeParameters?: TSTypeParameterInstantiation | null): TSTypeQuery;
e***REMOVED***port function tsTypeLiteral(members: Array<TSTypeElement>): TSTypeLiteral;
e***REMOVED***port function tsArrayType(elementType: TSType): TSArrayType;
e***REMOVED***port function tsTupleType(elementTypes: Array<TSType | TSNamedTupleMember>): TSTupleType;
e***REMOVED***port function tsOptionalType(typeAnnotation: TSType): TSOptionalType;
e***REMOVED***port function tsRestType(typeAnnotation: TSType): TSRestType;
e***REMOVED***port function tsNamedTupleMember(label: Identifier, elementType: TSType, optional?: boolean): TSNamedTupleMember;
e***REMOVED***port function tsUnionType(types: Array<TSType>): TSUnionType;
e***REMOVED***port function tsIntersectionType(types: Array<TSType>): TSIntersectionType;
e***REMOVED***port function tsConditionalType(checkType: TSType, e***REMOVED***tendsType: TSType, trueType: TSType, falseType: TSType): TSConditionalType;
e***REMOVED***port function tsInferType(typeParameter: TSTypeParameter): TSInferType;
e***REMOVED***port function tsParenthesizedType(typeAnnotation: TSType): TSParenthesizedType;
e***REMOVED***port function tsTypeOperator(typeAnnotation: TSType): TSTypeOperator;
e***REMOVED***port function tsInde***REMOVED***edAccessType(objectType: TSType, inde***REMOVED***Type: TSType): TSInde***REMOVED***edAccessType;
e***REMOVED***port function tsMappedType(typeParameter: TSTypeParameter, typeAnnotation?: TSType | null, nameType?: TSType | null): TSMappedType;
e***REMOVED***port function tsLiteralType(literal: NumericLiteral | StringLiteral | BooleanLiteral | BigIntLiteral | TemplateLiteral | UnaryE***REMOVED***pression): TSLiteralType;
e***REMOVED***port function tsE***REMOVED***pressionWithTypeArguments(e***REMOVED***pression: TSEntityName, typeParameters?: TSTypeParameterInstantiation | null): TSE***REMOVED***pressionWithTypeArguments;
e***REMOVED***port function tsInterfaceDeclaration(id: Identifier, typeParameters: TSTypeParameterDeclaration | null | undefined, _e***REMOVED***tends: Array<TSE***REMOVED***pressionWithTypeArguments> | null | undefined, body: TSInterfaceBody): TSInterfaceDeclaration;
e***REMOVED***port function tsInterfaceBody(body: Array<TSTypeElement>): TSInterfaceBody;
e***REMOVED***port function tsTypeAliasDeclaration(id: Identifier, typeParameters: TSTypeParameterDeclaration | null | undefined, typeAnnotation: TSType): TSTypeAliasDeclaration;
e***REMOVED***port function tsInstantiationE***REMOVED***pression(e***REMOVED***pression: E***REMOVED***pression, typeParameters?: TSTypeParameterInstantiation | null): TSInstantiationE***REMOVED***pression;
e***REMOVED***port function tsAsE***REMOVED***pression(e***REMOVED***pression: E***REMOVED***pression, typeAnnotation: TSType): TSAsE***REMOVED***pression;
e***REMOVED***port function tsSatisfiesE***REMOVED***pression(e***REMOVED***pression: E***REMOVED***pression, typeAnnotation: TSType): TSSatisfiesE***REMOVED***pression;
e***REMOVED***port function tsTypeAssertion(typeAnnotation: TSType, e***REMOVED***pression: E***REMOVED***pression): TSTypeAssertion;
e***REMOVED***port function tsEnumDeclaration(id: Identifier, members: Array<TSEnumMember>): TSEnumDeclaration;
e***REMOVED***port function tsEnumMember(id: Identifier | StringLiteral, initializer?: E***REMOVED***pression | null): TSEnumMember;
e***REMOVED***port function tsModuleDeclaration(id: Identifier | StringLiteral, body: TSModuleBlock | TSModuleDeclaration): TSModuleDeclaration;
e***REMOVED***port function tsModuleBlock(body: Array<Statement>): TSModuleBlock;
e***REMOVED***port function tsImportType(argument: StringLiteral, qualifier?: TSEntityName | null, typeParameters?: TSTypeParameterInstantiation | null): TSImportType;
e***REMOVED***port function tsImportEqualsDeclaration(id: Identifier, moduleReference: TSEntityName | TSE***REMOVED***ternalModuleReference): TSImportEqualsDeclaration;
e***REMOVED***port function tsE***REMOVED***ternalModuleReference(e***REMOVED***pression: StringLiteral): TSE***REMOVED***ternalModuleReference;
e***REMOVED***port function tsNonNullE***REMOVED***pression(e***REMOVED***pression: E***REMOVED***pression): TSNonNullE***REMOVED***pression;
e***REMOVED***port function tsE***REMOVED***portAssignment(e***REMOVED***pression: E***REMOVED***pression): TSE***REMOVED***portAssignment;
e***REMOVED***port function tsNamespaceE***REMOVED***portDeclaration(id: Identifier): TSNamespaceE***REMOVED***portDeclaration;
e***REMOVED***port function tsTypeAnnotation(typeAnnotation: TSType): TSTypeAnnotation;
e***REMOVED***port function tsTypeParameterInstantiation(params: Array<TSType>): TSTypeParameterInstantiation;
e***REMOVED***port function tsTypeParameterDeclaration(params: Array<TSTypeParameter>): TSTypeParameterDeclaration;
e***REMOVED***port function tsTypeParameter(constraint: TSType | null | undefined, _default: TSType | null | undefined, name: string): TSTypeParameter;
e***REMOVED***port function isAccessor(node: object | null | undefined, opts?: object | null): node is Accessor;
e***REMOVED***port function assertAccessor(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isAnyTypeAnnotation(node: object | null | undefined, opts?: object | null): node is AnyTypeAnnotation;
e***REMOVED***port function assertAnyTypeAnnotation(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isArgumentPlaceholder(node: object | null | undefined, opts?: object | null): node is ArgumentPlaceholder;
e***REMOVED***port function assertArgumentPlaceholder(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isArrayE***REMOVED***pression(node: object | null | undefined, opts?: object | null): node is ArrayE***REMOVED***pression;
e***REMOVED***port function assertArrayE***REMOVED***pression(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isArrayPattern(node: object | null | undefined, opts?: object | null): node is ArrayPattern;
e***REMOVED***port function assertArrayPattern(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isArrayTypeAnnotation(node: object | null | undefined, opts?: object | null): node is ArrayTypeAnnotation;
e***REMOVED***port function assertArrayTypeAnnotation(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isArrowFunctionE***REMOVED***pression(node: object | null | undefined, opts?: object | null): node is ArrowFunctionE***REMOVED***pression;
e***REMOVED***port function assertArrowFunctionE***REMOVED***pression(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isAssignmentE***REMOVED***pression(node: object | null | undefined, opts?: object | null): node is AssignmentE***REMOVED***pression;
e***REMOVED***port function assertAssignmentE***REMOVED***pression(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isAssignmentPattern(node: object | null | undefined, opts?: object | null): node is AssignmentPattern;
e***REMOVED***port function assertAssignmentPattern(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isAwaitE***REMOVED***pression(node: object | null | undefined, opts?: object | null): node is AwaitE***REMOVED***pression;
e***REMOVED***port function assertAwaitE***REMOVED***pression(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isBigIntLiteral(node: object | null | undefined, opts?: object | null): node is BigIntLiteral;
e***REMOVED***port function assertBigIntLiteral(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isBinary(node: object | null | undefined, opts?: object | null): node is Binary;
e***REMOVED***port function assertBinary(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isBinaryE***REMOVED***pression(node: object | null | undefined, opts?: object | null): node is BinaryE***REMOVED***pression;
e***REMOVED***port function assertBinaryE***REMOVED***pression(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isBindE***REMOVED***pression(node: object | null | undefined, opts?: object | null): node is BindE***REMOVED***pression;
e***REMOVED***port function assertBindE***REMOVED***pression(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isBlock(node: object | null | undefined, opts?: object | null): node is Block;
e***REMOVED***port function assertBlock(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isBlockParent(node: object | null | undefined, opts?: object | null): node is BlockParent;
e***REMOVED***port function assertBlockParent(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isBlockStatement(node: object | null | undefined, opts?: object | null): node is BlockStatement;
e***REMOVED***port function assertBlockStatement(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isBooleanLiteral(node: object | null | undefined, opts?: object | null): node is BooleanLiteral;
e***REMOVED***port function assertBooleanLiteral(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isBooleanLiteralTypeAnnotation(node: object | null | undefined, opts?: object | null): node is BooleanLiteralTypeAnnotation;
e***REMOVED***port function assertBooleanLiteralTypeAnnotation(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isBooleanTypeAnnotation(node: object | null | undefined, opts?: object | null): node is BooleanTypeAnnotation;
e***REMOVED***port function assertBooleanTypeAnnotation(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isBreakStatement(node: object | null | undefined, opts?: object | null): node is BreakStatement;
e***REMOVED***port function assertBreakStatement(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isCallE***REMOVED***pression(node: object | null | undefined, opts?: object | null): node is CallE***REMOVED***pression;
e***REMOVED***port function assertCallE***REMOVED***pression(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isCatchClause(node: object | null | undefined, opts?: object | null): node is CatchClause;
e***REMOVED***port function assertCatchClause(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isClass(node: object | null | undefined, opts?: object | null): node is Class;
e***REMOVED***port function assertClass(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isClassAccessorProperty(node: object | null | undefined, opts?: object | null): node is ClassAccessorProperty;
e***REMOVED***port function assertClassAccessorProperty(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isClassBody(node: object | null | undefined, opts?: object | null): node is ClassBody;
e***REMOVED***port function assertClassBody(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isClassDeclaration(node: object | null | undefined, opts?: object | null): node is ClassDeclaration;
e***REMOVED***port function assertClassDeclaration(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isClassE***REMOVED***pression(node: object | null | undefined, opts?: object | null): node is ClassE***REMOVED***pression;
e***REMOVED***port function assertClassE***REMOVED***pression(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isClassImplements(node: object | null | undefined, opts?: object | null): node is ClassImplements;
e***REMOVED***port function assertClassImplements(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isClassMethod(node: object | null | undefined, opts?: object | null): node is ClassMethod;
e***REMOVED***port function assertClassMethod(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isClassPrivateMethod(node: object | null | undefined, opts?: object | null): node is ClassPrivateMethod;
e***REMOVED***port function assertClassPrivateMethod(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isClassPrivateProperty(node: object | null | undefined, opts?: object | null): node is ClassPrivateProperty;
e***REMOVED***port function assertClassPrivateProperty(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isClassProperty(node: object | null | undefined, opts?: object | null): node is ClassProperty;
e***REMOVED***port function assertClassProperty(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isCompletionStatement(node: object | null | undefined, opts?: object | null): node is CompletionStatement;
e***REMOVED***port function assertCompletionStatement(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isConditional(node: object | null | undefined, opts?: object | null): node is Conditional;
e***REMOVED***port function assertConditional(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isConditionalE***REMOVED***pression(node: object | null | undefined, opts?: object | null): node is ConditionalE***REMOVED***pression;
e***REMOVED***port function assertConditionalE***REMOVED***pression(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isContinueStatement(node: object | null | undefined, opts?: object | null): node is ContinueStatement;
e***REMOVED***port function assertContinueStatement(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isDebuggerStatement(node: object | null | undefined, opts?: object | null): node is DebuggerStatement;
e***REMOVED***port function assertDebuggerStatement(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isDecimalLiteral(node: object | null | undefined, opts?: object | null): node is DecimalLiteral;
e***REMOVED***port function assertDecimalLiteral(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isDeclaration(node: object | null | undefined, opts?: object | null): node is Declaration;
e***REMOVED***port function assertDeclaration(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isDeclareClass(node: object | null | undefined, opts?: object | null): node is DeclareClass;
e***REMOVED***port function assertDeclareClass(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isDeclareE***REMOVED***portAllDeclaration(node: object | null | undefined, opts?: object | null): node is DeclareE***REMOVED***portAllDeclaration;
e***REMOVED***port function assertDeclareE***REMOVED***portAllDeclaration(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isDeclareE***REMOVED***portDeclaration(node: object | null | undefined, opts?: object | null): node is DeclareE***REMOVED***portDeclaration;
e***REMOVED***port function assertDeclareE***REMOVED***portDeclaration(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isDeclareFunction(node: object | null | undefined, opts?: object | null): node is DeclareFunction;
e***REMOVED***port function assertDeclareFunction(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isDeclareInterface(node: object | null | undefined, opts?: object | null): node is DeclareInterface;
e***REMOVED***port function assertDeclareInterface(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isDeclareModule(node: object | null | undefined, opts?: object | null): node is DeclareModule;
e***REMOVED***port function assertDeclareModule(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isDeclareModuleE***REMOVED***ports(node: object | null | undefined, opts?: object | null): node is DeclareModuleE***REMOVED***ports;
e***REMOVED***port function assertDeclareModuleE***REMOVED***ports(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isDeclareOpaqueType(node: object | null | undefined, opts?: object | null): node is DeclareOpaqueType;
e***REMOVED***port function assertDeclareOpaqueType(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isDeclareTypeAlias(node: object | null | undefined, opts?: object | null): node is DeclareTypeAlias;
e***REMOVED***port function assertDeclareTypeAlias(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isDeclareVariable(node: object | null | undefined, opts?: object | null): node is DeclareVariable;
e***REMOVED***port function assertDeclareVariable(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isDeclaredPredicate(node: object | null | undefined, opts?: object | null): node is DeclaredPredicate;
e***REMOVED***port function assertDeclaredPredicate(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isDecorator(node: object | null | undefined, opts?: object | null): node is Decorator;
e***REMOVED***port function assertDecorator(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isDirective(node: object | null | undefined, opts?: object | null): node is Directive;
e***REMOVED***port function assertDirective(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isDirectiveLiteral(node: object | null | undefined, opts?: object | null): node is DirectiveLiteral;
e***REMOVED***port function assertDirectiveLiteral(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isDoE***REMOVED***pression(node: object | null | undefined, opts?: object | null): node is DoE***REMOVED***pression;
e***REMOVED***port function assertDoE***REMOVED***pression(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isDoWhileStatement(node: object | null | undefined, opts?: object | null): node is DoWhileStatement;
e***REMOVED***port function assertDoWhileStatement(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isEmptyStatement(node: object | null | undefined, opts?: object | null): node is EmptyStatement;
e***REMOVED***port function assertEmptyStatement(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isEmptyTypeAnnotation(node: object | null | undefined, opts?: object | null): node is EmptyTypeAnnotation;
e***REMOVED***port function assertEmptyTypeAnnotation(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isEnumBody(node: object | null | undefined, opts?: object | null): node is EnumBody;
e***REMOVED***port function assertEnumBody(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isEnumBooleanBody(node: object | null | undefined, opts?: object | null): node is EnumBooleanBody;
e***REMOVED***port function assertEnumBooleanBody(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isEnumBooleanMember(node: object | null | undefined, opts?: object | null): node is EnumBooleanMember;
e***REMOVED***port function assertEnumBooleanMember(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isEnumDeclaration(node: object | null | undefined, opts?: object | null): node is EnumDeclaration;
e***REMOVED***port function assertEnumDeclaration(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isEnumDefaultedMember(node: object | null | undefined, opts?: object | null): node is EnumDefaultedMember;
e***REMOVED***port function assertEnumDefaultedMember(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isEnumMember(node: object | null | undefined, opts?: object | null): node is EnumMember;
e***REMOVED***port function assertEnumMember(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isEnumNumberBody(node: object | null | undefined, opts?: object | null): node is EnumNumberBody;
e***REMOVED***port function assertEnumNumberBody(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isEnumNumberMember(node: object | null | undefined, opts?: object | null): node is EnumNumberMember;
e***REMOVED***port function assertEnumNumberMember(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isEnumStringBody(node: object | null | undefined, opts?: object | null): node is EnumStringBody;
e***REMOVED***port function assertEnumStringBody(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isEnumStringMember(node: object | null | undefined, opts?: object | null): node is EnumStringMember;
e***REMOVED***port function assertEnumStringMember(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isEnumSymbolBody(node: object | null | undefined, opts?: object | null): node is EnumSymbolBody;
e***REMOVED***port function assertEnumSymbolBody(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isE***REMOVED***istsTypeAnnotation(node: object | null | undefined, opts?: object | null): node is E***REMOVED***istsTypeAnnotation;
e***REMOVED***port function assertE***REMOVED***istsTypeAnnotation(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isE***REMOVED***portAllDeclaration(node: object | null | undefined, opts?: object | null): node is E***REMOVED***portAllDeclaration;
e***REMOVED***port function assertE***REMOVED***portAllDeclaration(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isE***REMOVED***portDeclaration(node: object | null | undefined, opts?: object | null): node is E***REMOVED***portDeclaration;
e***REMOVED***port function assertE***REMOVED***portDeclaration(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isE***REMOVED***portDefaultDeclaration(node: object | null | undefined, opts?: object | null): node is E***REMOVED***portDefaultDeclaration;
e***REMOVED***port function assertE***REMOVED***portDefaultDeclaration(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isE***REMOVED***portDefaultSpecifier(node: object | null | undefined, opts?: object | null): node is E***REMOVED***portDefaultSpecifier;
e***REMOVED***port function assertE***REMOVED***portDefaultSpecifier(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isE***REMOVED***portNamedDeclaration(node: object | null | undefined, opts?: object | null): node is E***REMOVED***portNamedDeclaration;
e***REMOVED***port function assertE***REMOVED***portNamedDeclaration(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isE***REMOVED***portNamespaceSpecifier(node: object | null | undefined, opts?: object | null): node is E***REMOVED***portNamespaceSpecifier;
e***REMOVED***port function assertE***REMOVED***portNamespaceSpecifier(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isE***REMOVED***portSpecifier(node: object | null | undefined, opts?: object | null): node is E***REMOVED***portSpecifier;
e***REMOVED***port function assertE***REMOVED***portSpecifier(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isE***REMOVED***pression(node: object | null | undefined, opts?: object | null): node is E***REMOVED***pression;
e***REMOVED***port function assertE***REMOVED***pression(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isE***REMOVED***pressionStatement(node: object | null | undefined, opts?: object | null): node is E***REMOVED***pressionStatement;
e***REMOVED***port function assertE***REMOVED***pressionStatement(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isE***REMOVED***pressionWrapper(node: object | null | undefined, opts?: object | null): node is E***REMOVED***pressionWrapper;
e***REMOVED***port function assertE***REMOVED***pressionWrapper(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isFile(node: object | null | undefined, opts?: object | null): node is File;
e***REMOVED***port function assertFile(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isFlow(node: object | null | undefined, opts?: object | null): node is Flow;
e***REMOVED***port function assertFlow(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isFlowBaseAnnotation(node: object | null | undefined, opts?: object | null): node is FlowBaseAnnotation;
e***REMOVED***port function assertFlowBaseAnnotation(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isFlowDeclaration(node: object | null | undefined, opts?: object | null): node is FlowDeclaration;
e***REMOVED***port function assertFlowDeclaration(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isFlowPredicate(node: object | null | undefined, opts?: object | null): node is FlowPredicate;
e***REMOVED***port function assertFlowPredicate(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isFlowType(node: object | null | undefined, opts?: object | null): node is FlowType;
e***REMOVED***port function assertFlowType(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isFor(node: object | null | undefined, opts?: object | null): node is For;
e***REMOVED***port function assertFor(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isForInStatement(node: object | null | undefined, opts?: object | null): node is ForInStatement;
e***REMOVED***port function assertForInStatement(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isForOfStatement(node: object | null | undefined, opts?: object | null): node is ForOfStatement;
e***REMOVED***port function assertForOfStatement(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isForStatement(node: object | null | undefined, opts?: object | null): node is ForStatement;
e***REMOVED***port function assertForStatement(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isForXStatement(node: object | null | undefined, opts?: object | null): node is ForXStatement;
e***REMOVED***port function assertForXStatement(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isFunction(node: object | null | undefined, opts?: object | null): node is Function;
e***REMOVED***port function assertFunction(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isFunctionDeclaration(node: object | null | undefined, opts?: object | null): node is FunctionDeclaration;
e***REMOVED***port function assertFunctionDeclaration(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isFunctionE***REMOVED***pression(node: object | null | undefined, opts?: object | null): node is FunctionE***REMOVED***pression;
e***REMOVED***port function assertFunctionE***REMOVED***pression(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isFunctionParent(node: object | null | undefined, opts?: object | null): node is FunctionParent;
e***REMOVED***port function assertFunctionParent(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isFunctionTypeAnnotation(node: object | null | undefined, opts?: object | null): node is FunctionTypeAnnotation;
e***REMOVED***port function assertFunctionTypeAnnotation(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isFunctionTypeParam(node: object | null | undefined, opts?: object | null): node is FunctionTypeParam;
e***REMOVED***port function assertFunctionTypeParam(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isGenericTypeAnnotation(node: object | null | undefined, opts?: object | null): node is GenericTypeAnnotation;
e***REMOVED***port function assertGenericTypeAnnotation(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isIdentifier(node: object | null | undefined, opts?: object | null): node is Identifier;
e***REMOVED***port function assertIdentifier(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isIfStatement(node: object | null | undefined, opts?: object | null): node is IfStatement;
e***REMOVED***port function assertIfStatement(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isImmutable(node: object | null | undefined, opts?: object | null): node is Immutable;
e***REMOVED***port function assertImmutable(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isImport(node: object | null | undefined, opts?: object | null): node is Import;
e***REMOVED***port function assertImport(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isImportAttribute(node: object | null | undefined, opts?: object | null): node is ImportAttribute;
e***REMOVED***port function assertImportAttribute(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isImportDeclaration(node: object | null | undefined, opts?: object | null): node is ImportDeclaration;
e***REMOVED***port function assertImportDeclaration(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isImportDefaultSpecifier(node: object | null | undefined, opts?: object | null): node is ImportDefaultSpecifier;
e***REMOVED***port function assertImportDefaultSpecifier(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isImportE***REMOVED***pression(node: object | null | undefined, opts?: object | null): node is ImportE***REMOVED***pression;
e***REMOVED***port function assertImportE***REMOVED***pression(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isImportNamespaceSpecifier(node: object | null | undefined, opts?: object | null): node is ImportNamespaceSpecifier;
e***REMOVED***port function assertImportNamespaceSpecifier(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isImportOrE***REMOVED***portDeclaration(node: object | null | undefined, opts?: object | null): node is ImportOrE***REMOVED***portDeclaration;
e***REMOVED***port function assertImportOrE***REMOVED***portDeclaration(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isImportSpecifier(node: object | null | undefined, opts?: object | null): node is ImportSpecifier;
e***REMOVED***port function assertImportSpecifier(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isInde***REMOVED***edAccessType(node: object | null | undefined, opts?: object | null): node is Inde***REMOVED***edAccessType;
e***REMOVED***port function assertInde***REMOVED***edAccessType(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isInferredPredicate(node: object | null | undefined, opts?: object | null): node is InferredPredicate;
e***REMOVED***port function assertInferredPredicate(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isInterfaceDeclaration(node: object | null | undefined, opts?: object | null): node is InterfaceDeclaration;
e***REMOVED***port function assertInterfaceDeclaration(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isInterfaceE***REMOVED***tends(node: object | null | undefined, opts?: object | null): node is InterfaceE***REMOVED***tends;
e***REMOVED***port function assertInterfaceE***REMOVED***tends(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isInterfaceTypeAnnotation(node: object | null | undefined, opts?: object | null): node is InterfaceTypeAnnotation;
e***REMOVED***port function assertInterfaceTypeAnnotation(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isInterpreterDirective(node: object | null | undefined, opts?: object | null): node is InterpreterDirective;
e***REMOVED***port function assertInterpreterDirective(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isIntersectionTypeAnnotation(node: object | null | undefined, opts?: object | null): node is IntersectionTypeAnnotation;
e***REMOVED***port function assertIntersectionTypeAnnotation(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isJSX(node: object | null | undefined, opts?: object | null): node is JSX;
e***REMOVED***port function assertJSX(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isJSXAttribute(node: object | null | undefined, opts?: object | null): node is JSXAttribute;
e***REMOVED***port function assertJSXAttribute(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isJSXClosingElement(node: object | null | undefined, opts?: object | null): node is JSXClosingElement;
e***REMOVED***port function assertJSXClosingElement(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isJSXClosingFragment(node: object | null | undefined, opts?: object | null): node is JSXClosingFragment;
e***REMOVED***port function assertJSXClosingFragment(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isJSXElement(node: object | null | undefined, opts?: object | null): node is JSXElement;
e***REMOVED***port function assertJSXElement(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isJSXEmptyE***REMOVED***pression(node: object | null | undefined, opts?: object | null): node is JSXEmptyE***REMOVED***pression;
e***REMOVED***port function assertJSXEmptyE***REMOVED***pression(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isJSXE***REMOVED***pressionContainer(node: object | null | undefined, opts?: object | null): node is JSXE***REMOVED***pressionContainer;
e***REMOVED***port function assertJSXE***REMOVED***pressionContainer(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isJSXFragment(node: object | null | undefined, opts?: object | null): node is JSXFragment;
e***REMOVED***port function assertJSXFragment(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isJSXIdentifier(node: object | null | undefined, opts?: object | null): node is JSXIdentifier;
e***REMOVED***port function assertJSXIdentifier(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isJSXMemberE***REMOVED***pression(node: object | null | undefined, opts?: object | null): node is JSXMemberE***REMOVED***pression;
e***REMOVED***port function assertJSXMemberE***REMOVED***pression(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isJSXNamespacedName(node: object | null | undefined, opts?: object | null): node is JSXNamespacedName;
e***REMOVED***port function assertJSXNamespacedName(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isJSXOpeningElement(node: object | null | undefined, opts?: object | null): node is JSXOpeningElement;
e***REMOVED***port function assertJSXOpeningElement(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isJSXOpeningFragment(node: object | null | undefined, opts?: object | null): node is JSXOpeningFragment;
e***REMOVED***port function assertJSXOpeningFragment(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isJSXSpreadAttribute(node: object | null | undefined, opts?: object | null): node is JSXSpreadAttribute;
e***REMOVED***port function assertJSXSpreadAttribute(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isJSXSpreadChild(node: object | null | undefined, opts?: object | null): node is JSXSpreadChild;
e***REMOVED***port function assertJSXSpreadChild(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isJSXTe***REMOVED***t(node: object | null | undefined, opts?: object | null): node is JSXTe***REMOVED***t;
e***REMOVED***port function assertJSXTe***REMOVED***t(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isLVal(node: object | null | undefined, opts?: object | null): node is LVal;
e***REMOVED***port function assertLVal(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isLabeledStatement(node: object | null | undefined, opts?: object | null): node is LabeledStatement;
e***REMOVED***port function assertLabeledStatement(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isLiteral(node: object | null | undefined, opts?: object | null): node is Literal;
e***REMOVED***port function assertLiteral(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isLogicalE***REMOVED***pression(node: object | null | undefined, opts?: object | null): node is LogicalE***REMOVED***pression;
e***REMOVED***port function assertLogicalE***REMOVED***pression(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isLoop(node: object | null | undefined, opts?: object | null): node is Loop;
e***REMOVED***port function assertLoop(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isMemberE***REMOVED***pression(node: object | null | undefined, opts?: object | null): node is MemberE***REMOVED***pression;
e***REMOVED***port function assertMemberE***REMOVED***pression(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isMetaProperty(node: object | null | undefined, opts?: object | null): node is MetaProperty;
e***REMOVED***port function assertMetaProperty(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isMethod(node: object | null | undefined, opts?: object | null): node is Method;
e***REMOVED***port function assertMethod(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isMiscellaneous(node: object | null | undefined, opts?: object | null): node is Miscellaneous;
e***REMOVED***port function assertMiscellaneous(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isMi***REMOVED***edTypeAnnotation(node: object | null | undefined, opts?: object | null): node is Mi***REMOVED***edTypeAnnotation;
e***REMOVED***port function assertMi***REMOVED***edTypeAnnotation(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isModuleDeclaration(node: object | null | undefined, opts?: object | null): node is ModuleDeclaration;
e***REMOVED***port function assertModuleDeclaration(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isModuleE***REMOVED***pression(node: object | null | undefined, opts?: object | null): node is ModuleE***REMOVED***pression;
e***REMOVED***port function assertModuleE***REMOVED***pression(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isModuleSpecifier(node: object | null | undefined, opts?: object | null): node is ModuleSpecifier;
e***REMOVED***port function assertModuleSpecifier(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isNewE***REMOVED***pression(node: object | null | undefined, opts?: object | null): node is NewE***REMOVED***pression;
e***REMOVED***port function assertNewE***REMOVED***pression(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isNoop(node: object | null | undefined, opts?: object | null): node is Noop;
e***REMOVED***port function assertNoop(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isNullLiteral(node: object | null | undefined, opts?: object | null): node is NullLiteral;
e***REMOVED***port function assertNullLiteral(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isNullLiteralTypeAnnotation(node: object | null | undefined, opts?: object | null): node is NullLiteralTypeAnnotation;
e***REMOVED***port function assertNullLiteralTypeAnnotation(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isNullableTypeAnnotation(node: object | null | undefined, opts?: object | null): node is NullableTypeAnnotation;
e***REMOVED***port function assertNullableTypeAnnotation(node: object | null | undefined, opts?: object | null): void;
/** @deprecated Use `isNumericLiteral` */
e***REMOVED***port function isNumberLiteral(node: object | null | undefined, opts?: object | null): node is NumericLiteral;
/** @deprecated Use `assertNumericLiteral` */
e***REMOVED***port function assertNumberLiteral(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isNumberLiteralTypeAnnotation(node: object | null | undefined, opts?: object | null): node is NumberLiteralTypeAnnotation;
e***REMOVED***port function assertNumberLiteralTypeAnnotation(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isNumberTypeAnnotation(node: object | null | undefined, opts?: object | null): node is NumberTypeAnnotation;
e***REMOVED***port function assertNumberTypeAnnotation(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isNumericLiteral(node: object | null | undefined, opts?: object | null): node is NumericLiteral;
e***REMOVED***port function assertNumericLiteral(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isObjectE***REMOVED***pression(node: object | null | undefined, opts?: object | null): node is ObjectE***REMOVED***pression;
e***REMOVED***port function assertObjectE***REMOVED***pression(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isObjectMember(node: object | null | undefined, opts?: object | null): node is ObjectMember;
e***REMOVED***port function assertObjectMember(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isObjectMethod(node: object | null | undefined, opts?: object | null): node is ObjectMethod;
e***REMOVED***port function assertObjectMethod(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isObjectPattern(node: object | null | undefined, opts?: object | null): node is ObjectPattern;
e***REMOVED***port function assertObjectPattern(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isObjectProperty(node: object | null | undefined, opts?: object | null): node is ObjectProperty;
e***REMOVED***port function assertObjectProperty(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isObjectTypeAnnotation(node: object | null | undefined, opts?: object | null): node is ObjectTypeAnnotation;
e***REMOVED***port function assertObjectTypeAnnotation(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isObjectTypeCallProperty(node: object | null | undefined, opts?: object | null): node is ObjectTypeCallProperty;
e***REMOVED***port function assertObjectTypeCallProperty(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isObjectTypeInde***REMOVED***er(node: object | null | undefined, opts?: object | null): node is ObjectTypeInde***REMOVED***er;
e***REMOVED***port function assertObjectTypeInde***REMOVED***er(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isObjectTypeInternalSlot(node: object | null | undefined, opts?: object | null): node is ObjectTypeInternalSlot;
e***REMOVED***port function assertObjectTypeInternalSlot(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isObjectTypeProperty(node: object | null | undefined, opts?: object | null): node is ObjectTypeProperty;
e***REMOVED***port function assertObjectTypeProperty(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isObjectTypeSpreadProperty(node: object | null | undefined, opts?: object | null): node is ObjectTypeSpreadProperty;
e***REMOVED***port function assertObjectTypeSpreadProperty(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isOpaqueType(node: object | null | undefined, opts?: object | null): node is OpaqueType;
e***REMOVED***port function assertOpaqueType(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isOptionalCallE***REMOVED***pression(node: object | null | undefined, opts?: object | null): node is OptionalCallE***REMOVED***pression;
e***REMOVED***port function assertOptionalCallE***REMOVED***pression(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isOptionalInde***REMOVED***edAccessType(node: object | null | undefined, opts?: object | null): node is OptionalInde***REMOVED***edAccessType;
e***REMOVED***port function assertOptionalInde***REMOVED***edAccessType(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isOptionalMemberE***REMOVED***pression(node: object | null | undefined, opts?: object | null): node is OptionalMemberE***REMOVED***pression;
e***REMOVED***port function assertOptionalMemberE***REMOVED***pression(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isParenthesizedE***REMOVED***pression(node: object | null | undefined, opts?: object | null): node is ParenthesizedE***REMOVED***pression;
e***REMOVED***port function assertParenthesizedE***REMOVED***pression(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isPattern(node: object | null | undefined, opts?: object | null): node is Pattern;
e***REMOVED***port function assertPattern(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isPatternLike(node: object | null | undefined, opts?: object | null): node is PatternLike;
e***REMOVED***port function assertPatternLike(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isPipelineBareFunction(node: object | null | undefined, opts?: object | null): node is PipelineBareFunction;
e***REMOVED***port function assertPipelineBareFunction(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isPipelinePrimaryTopicReference(node: object | null | undefined, opts?: object | null): node is PipelinePrimaryTopicReference;
e***REMOVED***port function assertPipelinePrimaryTopicReference(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isPipelineTopicE***REMOVED***pression(node: object | null | undefined, opts?: object | null): node is PipelineTopicE***REMOVED***pression;
e***REMOVED***port function assertPipelineTopicE***REMOVED***pression(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isPlaceholder(node: object | null | undefined, opts?: object | null): node is Placeholder;
e***REMOVED***port function assertPlaceholder(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isPrivate(node: object | null | undefined, opts?: object | null): node is Private;
e***REMOVED***port function assertPrivate(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isPrivateName(node: object | null | undefined, opts?: object | null): node is PrivateName;
e***REMOVED***port function assertPrivateName(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isProgram(node: object | null | undefined, opts?: object | null): node is Program;
e***REMOVED***port function assertProgram(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isProperty(node: object | null | undefined, opts?: object | null): node is Property;
e***REMOVED***port function assertProperty(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isPureish(node: object | null | undefined, opts?: object | null): node is Pureish;
e***REMOVED***port function assertPureish(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isQualifiedTypeIdentifier(node: object | null | undefined, opts?: object | null): node is QualifiedTypeIdentifier;
e***REMOVED***port function assertQualifiedTypeIdentifier(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isRecordE***REMOVED***pression(node: object | null | undefined, opts?: object | null): node is RecordE***REMOVED***pression;
e***REMOVED***port function assertRecordE***REMOVED***pression(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isRegE***REMOVED***pLiteral(node: object | null | undefined, opts?: object | null): node is RegE***REMOVED***pLiteral;
e***REMOVED***port function assertRegE***REMOVED***pLiteral(node: object | null | undefined, opts?: object | null): void;
/** @deprecated Use `isRegE***REMOVED***pLiteral` */
e***REMOVED***port function isRege***REMOVED***Literal(node: object | null | undefined, opts?: object | null): node is RegE***REMOVED***pLiteral;
/** @deprecated Use `assertRegE***REMOVED***pLiteral` */
e***REMOVED***port function assertRege***REMOVED***Literal(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isRestElement(node: object | null | undefined, opts?: object | null): node is RestElement;
e***REMOVED***port function assertRestElement(node: object | null | undefined, opts?: object | null): void;
/** @deprecated Use `isRestElement` */
e***REMOVED***port function isRestProperty(node: object | null | undefined, opts?: object | null): node is RestElement;
/** @deprecated Use `assertRestElement` */
e***REMOVED***port function assertRestProperty(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isReturnStatement(node: object | null | undefined, opts?: object | null): node is ReturnStatement;
e***REMOVED***port function assertReturnStatement(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isScopable(node: object | null | undefined, opts?: object | null): node is Scopable;
e***REMOVED***port function assertScopable(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isSequenceE***REMOVED***pression(node: object | null | undefined, opts?: object | null): node is SequenceE***REMOVED***pression;
e***REMOVED***port function assertSequenceE***REMOVED***pression(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isSpreadElement(node: object | null | undefined, opts?: object | null): node is SpreadElement;
e***REMOVED***port function assertSpreadElement(node: object | null | undefined, opts?: object | null): void;
/** @deprecated Use `isSpreadElement` */
e***REMOVED***port function isSpreadProperty(node: object | null | undefined, opts?: object | null): node is SpreadElement;
/** @deprecated Use `assertSpreadElement` */
e***REMOVED***port function assertSpreadProperty(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isStandardized(node: object | null | undefined, opts?: object | null): node is Standardized;
e***REMOVED***port function assertStandardized(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isStatement(node: object | null | undefined, opts?: object | null): node is Statement;
e***REMOVED***port function assertStatement(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isStaticBlock(node: object | null | undefined, opts?: object | null): node is StaticBlock;
e***REMOVED***port function assertStaticBlock(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isStringLiteral(node: object | null | undefined, opts?: object | null): node is StringLiteral;
e***REMOVED***port function assertStringLiteral(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isStringLiteralTypeAnnotation(node: object | null | undefined, opts?: object | null): node is StringLiteralTypeAnnotation;
e***REMOVED***port function assertStringLiteralTypeAnnotation(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isStringTypeAnnotation(node: object | null | undefined, opts?: object | null): node is StringTypeAnnotation;
e***REMOVED***port function assertStringTypeAnnotation(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isSuper(node: object | null | undefined, opts?: object | null): node is Super;
e***REMOVED***port function assertSuper(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isSwitchCase(node: object | null | undefined, opts?: object | null): node is SwitchCase;
e***REMOVED***port function assertSwitchCase(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isSwitchStatement(node: object | null | undefined, opts?: object | null): node is SwitchStatement;
e***REMOVED***port function assertSwitchStatement(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isSymbolTypeAnnotation(node: object | null | undefined, opts?: object | null): node is SymbolTypeAnnotation;
e***REMOVED***port function assertSymbolTypeAnnotation(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isTSAnyKeyword(node: object | null | undefined, opts?: object | null): node is TSAnyKeyword;
e***REMOVED***port function assertTSAnyKeyword(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isTSArrayType(node: object | null | undefined, opts?: object | null): node is TSArrayType;
e***REMOVED***port function assertTSArrayType(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isTSAsE***REMOVED***pression(node: object | null | undefined, opts?: object | null): node is TSAsE***REMOVED***pression;
e***REMOVED***port function assertTSAsE***REMOVED***pression(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isTSBaseType(node: object | null | undefined, opts?: object | null): node is TSBaseType;
e***REMOVED***port function assertTSBaseType(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isTSBigIntKeyword(node: object | null | undefined, opts?: object | null): node is TSBigIntKeyword;
e***REMOVED***port function assertTSBigIntKeyword(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isTSBooleanKeyword(node: object | null | undefined, opts?: object | null): node is TSBooleanKeyword;
e***REMOVED***port function assertTSBooleanKeyword(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isTSCallSignatureDeclaration(node: object | null | undefined, opts?: object | null): node is TSCallSignatureDeclaration;
e***REMOVED***port function assertTSCallSignatureDeclaration(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isTSConditionalType(node: object | null | undefined, opts?: object | null): node is TSConditionalType;
e***REMOVED***port function assertTSConditionalType(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isTSConstructSignatureDeclaration(node: object | null | undefined, opts?: object | null): node is TSConstructSignatureDeclaration;
e***REMOVED***port function assertTSConstructSignatureDeclaration(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isTSConstructorType(node: object | null | undefined, opts?: object | null): node is TSConstructorType;
e***REMOVED***port function assertTSConstructorType(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isTSDeclareFunction(node: object | null | undefined, opts?: object | null): node is TSDeclareFunction;
e***REMOVED***port function assertTSDeclareFunction(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isTSDeclareMethod(node: object | null | undefined, opts?: object | null): node is TSDeclareMethod;
e***REMOVED***port function assertTSDeclareMethod(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isTSEntityName(node: object | null | undefined, opts?: object | null): node is TSEntityName;
e***REMOVED***port function assertTSEntityName(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isTSEnumDeclaration(node: object | null | undefined, opts?: object | null): node is TSEnumDeclaration;
e***REMOVED***port function assertTSEnumDeclaration(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isTSEnumMember(node: object | null | undefined, opts?: object | null): node is TSEnumMember;
e***REMOVED***port function assertTSEnumMember(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isTSE***REMOVED***portAssignment(node: object | null | undefined, opts?: object | null): node is TSE***REMOVED***portAssignment;
e***REMOVED***port function assertTSE***REMOVED***portAssignment(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isTSE***REMOVED***pressionWithTypeArguments(node: object | null | undefined, opts?: object | null): node is TSE***REMOVED***pressionWithTypeArguments;
e***REMOVED***port function assertTSE***REMOVED***pressionWithTypeArguments(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isTSE***REMOVED***ternalModuleReference(node: object | null | undefined, opts?: object | null): node is TSE***REMOVED***ternalModuleReference;
e***REMOVED***port function assertTSE***REMOVED***ternalModuleReference(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isTSFunctionType(node: object | null | undefined, opts?: object | null): node is TSFunctionType;
e***REMOVED***port function assertTSFunctionType(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isTSImportEqualsDeclaration(node: object | null | undefined, opts?: object | null): node is TSImportEqualsDeclaration;
e***REMOVED***port function assertTSImportEqualsDeclaration(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isTSImportType(node: object | null | undefined, opts?: object | null): node is TSImportType;
e***REMOVED***port function assertTSImportType(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isTSInde***REMOVED***Signature(node: object | null | undefined, opts?: object | null): node is TSInde***REMOVED***Signature;
e***REMOVED***port function assertTSInde***REMOVED***Signature(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isTSInde***REMOVED***edAccessType(node: object | null | undefined, opts?: object | null): node is TSInde***REMOVED***edAccessType;
e***REMOVED***port function assertTSInde***REMOVED***edAccessType(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isTSInferType(node: object | null | undefined, opts?: object | null): node is TSInferType;
e***REMOVED***port function assertTSInferType(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isTSInstantiationE***REMOVED***pression(node: object | null | undefined, opts?: object | null): node is TSInstantiationE***REMOVED***pression;
e***REMOVED***port function assertTSInstantiationE***REMOVED***pression(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isTSInterfaceBody(node: object | null | undefined, opts?: object | null): node is TSInterfaceBody;
e***REMOVED***port function assertTSInterfaceBody(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isTSInterfaceDeclaration(node: object | null | undefined, opts?: object | null): node is TSInterfaceDeclaration;
e***REMOVED***port function assertTSInterfaceDeclaration(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isTSIntersectionType(node: object | null | undefined, opts?: object | null): node is TSIntersectionType;
e***REMOVED***port function assertTSIntersectionType(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isTSIntrinsicKeyword(node: object | null | undefined, opts?: object | null): node is TSIntrinsicKeyword;
e***REMOVED***port function assertTSIntrinsicKeyword(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isTSLiteralType(node: object | null | undefined, opts?: object | null): node is TSLiteralType;
e***REMOVED***port function assertTSLiteralType(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isTSMappedType(node: object | null | undefined, opts?: object | null): node is TSMappedType;
e***REMOVED***port function assertTSMappedType(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isTSMethodSignature(node: object | null | undefined, opts?: object | null): node is TSMethodSignature;
e***REMOVED***port function assertTSMethodSignature(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isTSModuleBlock(node: object | null | undefined, opts?: object | null): node is TSModuleBlock;
e***REMOVED***port function assertTSModuleBlock(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isTSModuleDeclaration(node: object | null | undefined, opts?: object | null): node is TSModuleDeclaration;
e***REMOVED***port function assertTSModuleDeclaration(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isTSNamedTupleMember(node: object | null | undefined, opts?: object | null): node is TSNamedTupleMember;
e***REMOVED***port function assertTSNamedTupleMember(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isTSNamespaceE***REMOVED***portDeclaration(node: object | null | undefined, opts?: object | null): node is TSNamespaceE***REMOVED***portDeclaration;
e***REMOVED***port function assertTSNamespaceE***REMOVED***portDeclaration(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isTSNeverKeyword(node: object | null | undefined, opts?: object | null): node is TSNeverKeyword;
e***REMOVED***port function assertTSNeverKeyword(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isTSNonNullE***REMOVED***pression(node: object | null | undefined, opts?: object | null): node is TSNonNullE***REMOVED***pression;
e***REMOVED***port function assertTSNonNullE***REMOVED***pression(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isTSNullKeyword(node: object | null | undefined, opts?: object | null): node is TSNullKeyword;
e***REMOVED***port function assertTSNullKeyword(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isTSNumberKeyword(node: object | null | undefined, opts?: object | null): node is TSNumberKeyword;
e***REMOVED***port function assertTSNumberKeyword(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isTSObjectKeyword(node: object | null | undefined, opts?: object | null): node is TSObjectKeyword;
e***REMOVED***port function assertTSObjectKeyword(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isTSOptionalType(node: object | null | undefined, opts?: object | null): node is TSOptionalType;
e***REMOVED***port function assertTSOptionalType(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isTSParameterProperty(node: object | null | undefined, opts?: object | null): node is TSParameterProperty;
e***REMOVED***port function assertTSParameterProperty(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isTSParenthesizedType(node: object | null | undefined, opts?: object | null): node is TSParenthesizedType;
e***REMOVED***port function assertTSParenthesizedType(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isTSPropertySignature(node: object | null | undefined, opts?: object | null): node is TSPropertySignature;
e***REMOVED***port function assertTSPropertySignature(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isTSQualifiedName(node: object | null | undefined, opts?: object | null): node is TSQualifiedName;
e***REMOVED***port function assertTSQualifiedName(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isTSRestType(node: object | null | undefined, opts?: object | null): node is TSRestType;
e***REMOVED***port function assertTSRestType(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isTSSatisfiesE***REMOVED***pression(node: object | null | undefined, opts?: object | null): node is TSSatisfiesE***REMOVED***pression;
e***REMOVED***port function assertTSSatisfiesE***REMOVED***pression(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isTSStringKeyword(node: object | null | undefined, opts?: object | null): node is TSStringKeyword;
e***REMOVED***port function assertTSStringKeyword(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isTSSymbolKeyword(node: object | null | undefined, opts?: object | null): node is TSSymbolKeyword;
e***REMOVED***port function assertTSSymbolKeyword(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isTSThisType(node: object | null | undefined, opts?: object | null): node is TSThisType;
e***REMOVED***port function assertTSThisType(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isTSTupleType(node: object | null | undefined, opts?: object | null): node is TSTupleType;
e***REMOVED***port function assertTSTupleType(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isTSType(node: object | null | undefined, opts?: object | null): node is TSType;
e***REMOVED***port function assertTSType(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isTSTypeAliasDeclaration(node: object | null | undefined, opts?: object | null): node is TSTypeAliasDeclaration;
e***REMOVED***port function assertTSTypeAliasDeclaration(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isTSTypeAnnotation(node: object | null | undefined, opts?: object | null): node is TSTypeAnnotation;
e***REMOVED***port function assertTSTypeAnnotation(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isTSTypeAssertion(node: object | null | undefined, opts?: object | null): node is TSTypeAssertion;
e***REMOVED***port function assertTSTypeAssertion(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isTSTypeElement(node: object | null | undefined, opts?: object | null): node is TSTypeElement;
e***REMOVED***port function assertTSTypeElement(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isTSTypeLiteral(node: object | null | undefined, opts?: object | null): node is TSTypeLiteral;
e***REMOVED***port function assertTSTypeLiteral(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isTSTypeOperator(node: object | null | undefined, opts?: object | null): node is TSTypeOperator;
e***REMOVED***port function assertTSTypeOperator(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isTSTypeParameter(node: object | null | undefined, opts?: object | null): node is TSTypeParameter;
e***REMOVED***port function assertTSTypeParameter(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isTSTypeParameterDeclaration(node: object | null | undefined, opts?: object | null): node is TSTypeParameterDeclaration;
e***REMOVED***port function assertTSTypeParameterDeclaration(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isTSTypeParameterInstantiation(node: object | null | undefined, opts?: object | null): node is TSTypeParameterInstantiation;
e***REMOVED***port function assertTSTypeParameterInstantiation(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isTSTypePredicate(node: object | null | undefined, opts?: object | null): node is TSTypePredicate;
e***REMOVED***port function assertTSTypePredicate(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isTSTypeQuery(node: object | null | undefined, opts?: object | null): node is TSTypeQuery;
e***REMOVED***port function assertTSTypeQuery(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isTSTypeReference(node: object | null | undefined, opts?: object | null): node is TSTypeReference;
e***REMOVED***port function assertTSTypeReference(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isTSUndefinedKeyword(node: object | null | undefined, opts?: object | null): node is TSUndefinedKeyword;
e***REMOVED***port function assertTSUndefinedKeyword(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isTSUnionType(node: object | null | undefined, opts?: object | null): node is TSUnionType;
e***REMOVED***port function assertTSUnionType(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isTSUnknownKeyword(node: object | null | undefined, opts?: object | null): node is TSUnknownKeyword;
e***REMOVED***port function assertTSUnknownKeyword(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isTSVoidKeyword(node: object | null | undefined, opts?: object | null): node is TSVoidKeyword;
e***REMOVED***port function assertTSVoidKeyword(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isTaggedTemplateE***REMOVED***pression(node: object | null | undefined, opts?: object | null): node is TaggedTemplateE***REMOVED***pression;
e***REMOVED***port function assertTaggedTemplateE***REMOVED***pression(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isTemplateElement(node: object | null | undefined, opts?: object | null): node is TemplateElement;
e***REMOVED***port function assertTemplateElement(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isTemplateLiteral(node: object | null | undefined, opts?: object | null): node is TemplateLiteral;
e***REMOVED***port function assertTemplateLiteral(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isTerminatorless(node: object | null | undefined, opts?: object | null): node is Terminatorless;
e***REMOVED***port function assertTerminatorless(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isThisE***REMOVED***pression(node: object | null | undefined, opts?: object | null): node is ThisE***REMOVED***pression;
e***REMOVED***port function assertThisE***REMOVED***pression(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isThisTypeAnnotation(node: object | null | undefined, opts?: object | null): node is ThisTypeAnnotation;
e***REMOVED***port function assertThisTypeAnnotation(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isThrowStatement(node: object | null | undefined, opts?: object | null): node is ThrowStatement;
e***REMOVED***port function assertThrowStatement(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isTopicReference(node: object | null | undefined, opts?: object | null): node is TopicReference;
e***REMOVED***port function assertTopicReference(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isTryStatement(node: object | null | undefined, opts?: object | null): node is TryStatement;
e***REMOVED***port function assertTryStatement(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isTupleE***REMOVED***pression(node: object | null | undefined, opts?: object | null): node is TupleE***REMOVED***pression;
e***REMOVED***port function assertTupleE***REMOVED***pression(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isTupleTypeAnnotation(node: object | null | undefined, opts?: object | null): node is TupleTypeAnnotation;
e***REMOVED***port function assertTupleTypeAnnotation(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isTypeAlias(node: object | null | undefined, opts?: object | null): node is TypeAlias;
e***REMOVED***port function assertTypeAlias(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isTypeAnnotation(node: object | null | undefined, opts?: object | null): node is TypeAnnotation;
e***REMOVED***port function assertTypeAnnotation(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isTypeCastE***REMOVED***pression(node: object | null | undefined, opts?: object | null): node is TypeCastE***REMOVED***pression;
e***REMOVED***port function assertTypeCastE***REMOVED***pression(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isTypeParameter(node: object | null | undefined, opts?: object | null): node is TypeParameter;
e***REMOVED***port function assertTypeParameter(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isTypeParameterDeclaration(node: object | null | undefined, opts?: object | null): node is TypeParameterDeclaration;
e***REMOVED***port function assertTypeParameterDeclaration(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isTypeParameterInstantiation(node: object | null | undefined, opts?: object | null): node is TypeParameterInstantiation;
e***REMOVED***port function assertTypeParameterInstantiation(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isTypeScript(node: object | null | undefined, opts?: object | null): node is TypeScript;
e***REMOVED***port function assertTypeScript(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isTypeofTypeAnnotation(node: object | null | undefined, opts?: object | null): node is TypeofTypeAnnotation;
e***REMOVED***port function assertTypeofTypeAnnotation(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isUnaryE***REMOVED***pression(node: object | null | undefined, opts?: object | null): node is UnaryE***REMOVED***pression;
e***REMOVED***port function assertUnaryE***REMOVED***pression(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isUnaryLike(node: object | null | undefined, opts?: object | null): node is UnaryLike;
e***REMOVED***port function assertUnaryLike(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isUnionTypeAnnotation(node: object | null | undefined, opts?: object | null): node is UnionTypeAnnotation;
e***REMOVED***port function assertUnionTypeAnnotation(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isUpdateE***REMOVED***pression(node: object | null | undefined, opts?: object | null): node is UpdateE***REMOVED***pression;
e***REMOVED***port function assertUpdateE***REMOVED***pression(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isUserWhitespacable(node: object | null | undefined, opts?: object | null): node is UserWhitespacable;
e***REMOVED***port function assertUserWhitespacable(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isV8IntrinsicIdentifier(node: object | null | undefined, opts?: object | null): node is V8IntrinsicIdentifier;
e***REMOVED***port function assertV8IntrinsicIdentifier(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isVariableDeclaration(node: object | null | undefined, opts?: object | null): node is VariableDeclaration;
e***REMOVED***port function assertVariableDeclaration(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isVariableDeclarator(node: object | null | undefined, opts?: object | null): node is VariableDeclarator;
e***REMOVED***port function assertVariableDeclarator(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isVariance(node: object | null | undefined, opts?: object | null): node is Variance;
e***REMOVED***port function assertVariance(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isVoidTypeAnnotation(node: object | null | undefined, opts?: object | null): node is VoidTypeAnnotation;
e***REMOVED***port function assertVoidTypeAnnotation(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isWhile(node: object | null | undefined, opts?: object | null): node is While;
e***REMOVED***port function assertWhile(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isWhileStatement(node: object | null | undefined, opts?: object | null): node is WhileStatement;
e***REMOVED***port function assertWhileStatement(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isWithStatement(node: object | null | undefined, opts?: object | null): node is WithStatement;
e***REMOVED***port function assertWithStatement(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function isYieldE***REMOVED***pression(node: object | null | undefined, opts?: object | null): node is YieldE***REMOVED***pression;
e***REMOVED***port function assertYieldE***REMOVED***pression(node: object | null | undefined, opts?: object | null): void;
e***REMOVED***port function assertNode(obj: any): void
e***REMOVED***port function createTypeAnnotationBasedOnTypeof(type: 'string' | 'number' | 'undefined' | 'boolean' | 'function' | 'object' | 'symbol'): StringTypeAnnotation | VoidTypeAnnotation | NumberTypeAnnotation | BooleanTypeAnnotation | GenericTypeAnnotation
e***REMOVED***port function createUnionTypeAnnotation<T e***REMOVED***tends FlowType>(types: [T]): T
e***REMOVED***port function createFlowUnionType<T e***REMOVED***tends FlowType>(types: [T]): T
e***REMOVED***port function createUnionTypeAnnotation(types: ReadonlyArray<FlowType>): UnionTypeAnnotation
e***REMOVED***port function createFlowUnionType(types: ReadonlyArray<FlowType>): UnionTypeAnnotation
e***REMOVED***port function buildChildren(node: { children: ReadonlyArray<JSXTe***REMOVED***t | JSXE***REMOVED***pressionContainer | JSXSpreadChild | JSXElement | JSXFragment | JSXEmptyE***REMOVED***pression> }): JSXElement['children']
e***REMOVED***port function clone<T e***REMOVED***tends Node>(n: T): T;
e***REMOVED***port function cloneDeep<T e***REMOVED***tends Node>(n: T): T;
e***REMOVED***port function cloneDeepWithoutLoc<T e***REMOVED***tends Node>(n: T): T;
e***REMOVED***port function cloneNode<T e***REMOVED***tends Node>(n: T, deep?: boolean, withoutLoc?: boolean): T;
e***REMOVED***port function cloneWithoutLoc<T e***REMOVED***tends Node>(n: T): T;
e***REMOVED***port type CommentTypeShorthand = 'leading' | 'inner' | 'trailing'
e***REMOVED***port function addComment<T e***REMOVED***tends Node>(node: T, type: CommentTypeShorthand, content: string, line?: boolean): T
e***REMOVED***port function addComments<T e***REMOVED***tends Node>(node: T, type: CommentTypeShorthand, comments: ReadonlyArray<Comment>): T
e***REMOVED***port function inheritInnerComments(node: Node, parent: Node): void
e***REMOVED***port function inheritLeadingComments(node: Node, parent: Node): void
e***REMOVED***port function inheritsComments<T e***REMOVED***tends Node>(node: T, parent: Node): void
e***REMOVED***port function inheritTrailingComments(node: Node, parent: Node): void
e***REMOVED***port function removeComments<T e***REMOVED***tends Node>(node: T): T
e***REMOVED***port function ensureBlock(node: E***REMOVED***tract<Node, { body: BlockStatement | Statement | E***REMOVED***pression }>): BlockStatement
e***REMOVED***port function ensureBlock<K e***REMOVED***tends keyof E***REMOVED***tract<Node, { body: BlockStatement | Statement | E***REMOVED***pression }> = 'body'>(node: E***REMOVED***tract<Node, Record<K, BlockStatement | Statement | E***REMOVED***pression>>, key: K): BlockStatement
e***REMOVED***port function toBindingIdentifierName(name: { toString(): string } | null | undefined): string
e***REMOVED***port function toBlock(node: Statement | E***REMOVED***pression, parent?: Function | null): BlockStatement
e***REMOVED***port function toComputedKey<T e***REMOVED***tends E***REMOVED***tract<Node, { computed: boolean | null }>>(node: T, key?: E***REMOVED***pression | Identifier): E***REMOVED***pression
e***REMOVED***port function toE***REMOVED***pression(node: Function): FunctionE***REMOVED***pression
e***REMOVED***port function toE***REMOVED***pression(node: Class): ClassE***REMOVED***pression
e***REMOVED***port function toE***REMOVED***pression(node: E***REMOVED***pressionStatement | E***REMOVED***pression | Class | Function): E***REMOVED***pression
e***REMOVED***port function toIdentifier(name: { toString(): string } | null | undefined): string
e***REMOVED***port function toKeyAlias(node: Method | Property, key?: Node): string
e***REMOVED***port function toSequenceE***REMOVED***pression(nodes: ReadonlyArray<Node>, scope: { push(value: { id: LVal; kind: 'var'; init?: E***REMOVED***pression}): void; buildUndefinedNode(): Node }): SequenceE***REMOVED***pression | undefined
e***REMOVED***port function toStatement(node: AssignmentE***REMOVED***pression, ignore?: boolean): E***REMOVED***pressionStatement
e***REMOVED***port function toStatement(node: Statement | AssignmentE***REMOVED***pression, ignore?: boolean): Statement
e***REMOVED***port function toStatement(node: Class, ignore: true): ClassDeclaration | undefined
e***REMOVED***port function toStatement(node: Class, ignore?: boolean): ClassDeclaration
e***REMOVED***port function toStatement(node: Function, ignore: true): FunctionDeclaration | undefined
e***REMOVED***port function toStatement(node: Function, ignore?: boolean): FunctionDeclaration
e***REMOVED***port function toStatement(node: Statement | Class | Function | AssignmentE***REMOVED***pression, ignore: true): Statement | undefined
e***REMOVED***port function toStatement(node: Statement | Class | Function | AssignmentE***REMOVED***pression, ignore?: boolean): Statement
e***REMOVED***port function valueToNode(value: undefined): Identifier
e***REMOVED***port function valueToNode(value: boolean): BooleanLiteral
e***REMOVED***port function valueToNode(value: null): NullLiteral
e***REMOVED***port function valueToNode(value: string): StringLiteral
e***REMOVED***port function valueToNode(value: number): NumericLiteral | BinaryE***REMOVED***pression | UnaryE***REMOVED***pression
e***REMOVED***port function valueToNode(value: RegE***REMOVED***p): RegE***REMOVED***pLiteral
e***REMOVED***port function valueToNode(value: ReadonlyArray<undefined | boolean | null | string | number | RegE***REMOVED***p | object>): ArrayE***REMOVED***pression
e***REMOVED***port function valueToNode(value: object): ObjectE***REMOVED***pression
e***REMOVED***port function valueToNode(value: undefined | boolean | null | string | number | RegE***REMOVED***p | object): E***REMOVED***pression
e***REMOVED***port function removeTypeDuplicates(types: ReadonlyArray<FlowType | false | null | undefined>): FlowType[]
e***REMOVED***port function appendToMemberE***REMOVED***pression<T e***REMOVED***tends Pick<MemberE***REMOVED***pression, 'object' | 'property'>>(member: T, append: MemberE***REMOVED***pression['property'], computed?: boolean): T
e***REMOVED***port function inherits<T e***REMOVED***tends Node | null | undefined>(child: T, parent: Node | null | undefined): T
e***REMOVED***port function prependToMemberE***REMOVED***pression<T e***REMOVED***tends Pick<MemberE***REMOVED***pression, 'object' | 'property'>>(member: T, prepend: MemberE***REMOVED***pression['object']): T
e***REMOVED***port function removeProperties(
  n: Node,
  opts?: { preserveComments: boolean } | null
): void;
e***REMOVED***port function removePropertiesDeep<T e***REMOVED***tends Node>(
  n: T,
  opts?: { preserveComments: boolean } | null
): T;
e***REMOVED***port function getBindingIdentifiers(node: Node, duplicates: true, outerOnly?: boolean): Record<string, Array<Identifier>>
e***REMOVED***port function getBindingIdentifiers(node: Node, duplicates?: false, outerOnly?: boolean): Record<string, Identifier>
e***REMOVED***port function getBindingIdentifiers(node: Node, duplicates: boolean, outerOnly?: boolean): Record<string, Identifier | Array<Identifier>>
e***REMOVED***port function getOuterBindingIdentifiers(node: Node, duplicates: true): Record<string, Array<Identifier>>
e***REMOVED***port function getOuterBindingIdentifiers(node: Node, duplicates?: false): Record<string, Identifier>
e***REMOVED***port function getOuterBindingIdentifiers(node: Node, duplicates: boolean): Record<string, Identifier | Array<Identifier>>
e***REMOVED***port type TraversalAncestors = ReadonlyArray<{
  node: Node,
  key: string,
  inde***REMOVED***?: number,
}>;
e***REMOVED***port type TraversalHandler<T> = (
  this: undefined, node: Node, parent: TraversalAncestors, type: T
) => void;
e***REMOVED***port type TraversalHandlers<T> = {
  enter?: TraversalHandler<T>,
  e***REMOVED***it?: TraversalHandler<T>,
};
e***REMOVED***port function traverse<T>(n: Node, h: TraversalHandler<T> | TraversalHandlers<T>, state?: T): void;
e***REMOVED***port function traverseFast<T>(n: Node, h: TraversalHandler<T>, state?: T): void;
e***REMOVED***port function shallowEqual<T e***REMOVED***tends object>(actual: object, e***REMOVED***pected: T): actual is T
e***REMOVED***port function buildMatchMemberE***REMOVED***pression(match: string, allowPartial?: boolean): (node: Node | null | undefined) => node is MemberE***REMOVED***pression
e***REMOVED***port function is<T e***REMOVED***tends Node['type']>(type: T, n: Node | null | undefined, required?: undefined): n is E***REMOVED***tract<Node, { type: T }>
e***REMOVED***port function is<T e***REMOVED***tends Node['type'], P e***REMOVED***tends E***REMOVED***tract<Node, { type: T }>>(type: T, n: Node | null | undefined, required: Partial<P>): n is P
e***REMOVED***port function is<P e***REMOVED***tends Node>(type: string, n: Node | null | undefined, required: Partial<P>): n is P
e***REMOVED***port function is(type: string, n: Node | null | undefined, required?: Partial<Node>): n is Node
e***REMOVED***port function isBinding(node: Node, parent: Node, grandparent?: Node): boolean
e***REMOVED***port function isBlockScoped(node: Node): node is FunctionDeclaration | ClassDeclaration | VariableDeclaration
e***REMOVED***port function isImmutable(node: Node): node is Immutable
e***REMOVED***port function isLet(node: Node): node is VariableDeclaration
e***REMOVED***port function isNode(node: object | null | undefined): node is Node
e***REMOVED***port function isNodesEquivalent<T e***REMOVED***tends Partial<Node>>(a: T, b: any): b is T
e***REMOVED***port function isNodesEquivalent(a: any, b: any): boolean
e***REMOVED***port function isPlaceholderType(placeholderType: Node['type'], targetType: Node['type']): boolean
e***REMOVED***port function isReferenced(node: Node, parent: Node, grandparent?: Node): boolean
e***REMOVED***port function isScope(node: Node, parent: Node): node is Scopable
e***REMOVED***port function isSpecifierDefault(specifier: ModuleSpecifier): boolean
e***REMOVED***port function isType<T e***REMOVED***tends Node['type']>(nodetype: string, targetType: T): nodetype is T
e***REMOVED***port function isType(nodetype: string | null | undefined, targetType: string): boolean
e***REMOVED***port function isValidES3Identifier(name: string): boolean
e***REMOVED***port function isValidIdentifier(name: string): boolean
e***REMOVED***port function isVar(node: Node): node is VariableDeclaration
e***REMOVED***port function matchesPattern(node: Node | null | undefined, match: string | ReadonlyArray<string>, allowPartial?: boolean): node is MemberE***REMOVED***pression
e***REMOVED***port function validate<T e***REMOVED***tends Node, K e***REMOVED***tends keyof T>(n: Node | null | undefined, key: K, value: T[K]): void;
e***REMOVED***port function validate(n: Node, key: string, value: any): void;