"use strict";

Object.defineProperty(e***REMOVED***ports, "__esModule", {
  value: true
});
e***REMOVED***ports.isAccessor = isAccessor;
e***REMOVED***ports.isAnyTypeAnnotation = isAnyTypeAnnotation;
e***REMOVED***ports.isArgumentPlaceholder = isArgumentPlaceholder;
e***REMOVED***ports.isArrayE***REMOVED***pression = isArrayE***REMOVED***pression;
e***REMOVED***ports.isArrayPattern = isArrayPattern;
e***REMOVED***ports.isArrayTypeAnnotation = isArrayTypeAnnotation;
e***REMOVED***ports.isArrowFunctionE***REMOVED***pression = isArrowFunctionE***REMOVED***pression;
e***REMOVED***ports.isAssignmentE***REMOVED***pression = isAssignmentE***REMOVED***pression;
e***REMOVED***ports.isAssignmentPattern = isAssignmentPattern;
e***REMOVED***ports.isAwaitE***REMOVED***pression = isAwaitE***REMOVED***pression;
e***REMOVED***ports.isBigIntLiteral = isBigIntLiteral;
e***REMOVED***ports.isBinary = isBinary;
e***REMOVED***ports.isBinaryE***REMOVED***pression = isBinaryE***REMOVED***pression;
e***REMOVED***ports.isBindE***REMOVED***pression = isBindE***REMOVED***pression;
e***REMOVED***ports.isBlock = isBlock;
e***REMOVED***ports.isBlockParent = isBlockParent;
e***REMOVED***ports.isBlockStatement = isBlockStatement;
e***REMOVED***ports.isBooleanLiteral = isBooleanLiteral;
e***REMOVED***ports.isBooleanLiteralTypeAnnotation = isBooleanLiteralTypeAnnotation;
e***REMOVED***ports.isBooleanTypeAnnotation = isBooleanTypeAnnotation;
e***REMOVED***ports.isBreakStatement = isBreakStatement;
e***REMOVED***ports.isCallE***REMOVED***pression = isCallE***REMOVED***pression;
e***REMOVED***ports.isCatchClause = isCatchClause;
e***REMOVED***ports.isClass = isClass;
e***REMOVED***ports.isClassAccessorProperty = isClassAccessorProperty;
e***REMOVED***ports.isClassBody = isClassBody;
e***REMOVED***ports.isClassDeclaration = isClassDeclaration;
e***REMOVED***ports.isClassE***REMOVED***pression = isClassE***REMOVED***pression;
e***REMOVED***ports.isClassImplements = isClassImplements;
e***REMOVED***ports.isClassMethod = isClassMethod;
e***REMOVED***ports.isClassPrivateMethod = isClassPrivateMethod;
e***REMOVED***ports.isClassPrivateProperty = isClassPrivateProperty;
e***REMOVED***ports.isClassProperty = isClassProperty;
e***REMOVED***ports.isCompletionStatement = isCompletionStatement;
e***REMOVED***ports.isConditional = isConditional;
e***REMOVED***ports.isConditionalE***REMOVED***pression = isConditionalE***REMOVED***pression;
e***REMOVED***ports.isContinueStatement = isContinueStatement;
e***REMOVED***ports.isDebuggerStatement = isDebuggerStatement;
e***REMOVED***ports.isDecimalLiteral = isDecimalLiteral;
e***REMOVED***ports.isDeclaration = isDeclaration;
e***REMOVED***ports.isDeclareClass = isDeclareClass;
e***REMOVED***ports.isDeclareE***REMOVED***portAllDeclaration = isDeclareE***REMOVED***portAllDeclaration;
e***REMOVED***ports.isDeclareE***REMOVED***portDeclaration = isDeclareE***REMOVED***portDeclaration;
e***REMOVED***ports.isDeclareFunction = isDeclareFunction;
e***REMOVED***ports.isDeclareInterface = isDeclareInterface;
e***REMOVED***ports.isDeclareModule = isDeclareModule;
e***REMOVED***ports.isDeclareModuleE***REMOVED***ports = isDeclareModuleE***REMOVED***ports;
e***REMOVED***ports.isDeclareOpaqueType = isDeclareOpaqueType;
e***REMOVED***ports.isDeclareTypeAlias = isDeclareTypeAlias;
e***REMOVED***ports.isDeclareVariable = isDeclareVariable;
e***REMOVED***ports.isDeclaredPredicate = isDeclaredPredicate;
e***REMOVED***ports.isDecorator = isDecorator;
e***REMOVED***ports.isDirective = isDirective;
e***REMOVED***ports.isDirectiveLiteral = isDirectiveLiteral;
e***REMOVED***ports.isDoE***REMOVED***pression = isDoE***REMOVED***pression;
e***REMOVED***ports.isDoWhileStatement = isDoWhileStatement;
e***REMOVED***ports.isEmptyStatement = isEmptyStatement;
e***REMOVED***ports.isEmptyTypeAnnotation = isEmptyTypeAnnotation;
e***REMOVED***ports.isEnumBody = isEnumBody;
e***REMOVED***ports.isEnumBooleanBody = isEnumBooleanBody;
e***REMOVED***ports.isEnumBooleanMember = isEnumBooleanMember;
e***REMOVED***ports.isEnumDeclaration = isEnumDeclaration;
e***REMOVED***ports.isEnumDefaultedMember = isEnumDefaultedMember;
e***REMOVED***ports.isEnumMember = isEnumMember;
e***REMOVED***ports.isEnumNumberBody = isEnumNumberBody;
e***REMOVED***ports.isEnumNumberMember = isEnumNumberMember;
e***REMOVED***ports.isEnumStringBody = isEnumStringBody;
e***REMOVED***ports.isEnumStringMember = isEnumStringMember;
e***REMOVED***ports.isEnumSymbolBody = isEnumSymbolBody;
e***REMOVED***ports.isE***REMOVED***istsTypeAnnotation = isE***REMOVED***istsTypeAnnotation;
e***REMOVED***ports.isE***REMOVED***portAllDeclaration = isE***REMOVED***portAllDeclaration;
e***REMOVED***ports.isE***REMOVED***portDeclaration = isE***REMOVED***portDeclaration;
e***REMOVED***ports.isE***REMOVED***portDefaultDeclaration = isE***REMOVED***portDefaultDeclaration;
e***REMOVED***ports.isE***REMOVED***portDefaultSpecifier = isE***REMOVED***portDefaultSpecifier;
e***REMOVED***ports.isE***REMOVED***portNamedDeclaration = isE***REMOVED***portNamedDeclaration;
e***REMOVED***ports.isE***REMOVED***portNamespaceSpecifier = isE***REMOVED***portNamespaceSpecifier;
e***REMOVED***ports.isE***REMOVED***portSpecifier = isE***REMOVED***portSpecifier;
e***REMOVED***ports.isE***REMOVED***pression = isE***REMOVED***pression;
e***REMOVED***ports.isE***REMOVED***pressionStatement = isE***REMOVED***pressionStatement;
e***REMOVED***ports.isE***REMOVED***pressionWrapper = isE***REMOVED***pressionWrapper;
e***REMOVED***ports.isFile = isFile;
e***REMOVED***ports.isFlow = isFlow;
e***REMOVED***ports.isFlowBaseAnnotation = isFlowBaseAnnotation;
e***REMOVED***ports.isFlowDeclaration = isFlowDeclaration;
e***REMOVED***ports.isFlowPredicate = isFlowPredicate;
e***REMOVED***ports.isFlowType = isFlowType;
e***REMOVED***ports.isFor = isFor;
e***REMOVED***ports.isForInStatement = isForInStatement;
e***REMOVED***ports.isForOfStatement = isForOfStatement;
e***REMOVED***ports.isForStatement = isForStatement;
e***REMOVED***ports.isForXStatement = isForXStatement;
e***REMOVED***ports.isFunction = isFunction;
e***REMOVED***ports.isFunctionDeclaration = isFunctionDeclaration;
e***REMOVED***ports.isFunctionE***REMOVED***pression = isFunctionE***REMOVED***pression;
e***REMOVED***ports.isFunctionParent = isFunctionParent;
e***REMOVED***ports.isFunctionTypeAnnotation = isFunctionTypeAnnotation;
e***REMOVED***ports.isFunctionTypeParam = isFunctionTypeParam;
e***REMOVED***ports.isGenericTypeAnnotation = isGenericTypeAnnotation;
e***REMOVED***ports.isIdentifier = isIdentifier;
e***REMOVED***ports.isIfStatement = isIfStatement;
e***REMOVED***ports.isImmutable = isImmutable;
e***REMOVED***ports.isImport = isImport;
e***REMOVED***ports.isImportAttribute = isImportAttribute;
e***REMOVED***ports.isImportDeclaration = isImportDeclaration;
e***REMOVED***ports.isImportDefaultSpecifier = isImportDefaultSpecifier;
e***REMOVED***ports.isImportE***REMOVED***pression = isImportE***REMOVED***pression;
e***REMOVED***ports.isImportNamespaceSpecifier = isImportNamespaceSpecifier;
e***REMOVED***ports.isImportOrE***REMOVED***portDeclaration = isImportOrE***REMOVED***portDeclaration;
e***REMOVED***ports.isImportSpecifier = isImportSpecifier;
e***REMOVED***ports.isInde***REMOVED***edAccessType = isInde***REMOVED***edAccessType;
e***REMOVED***ports.isInferredPredicate = isInferredPredicate;
e***REMOVED***ports.isInterfaceDeclaration = isInterfaceDeclaration;
e***REMOVED***ports.isInterfaceE***REMOVED***tends = isInterfaceE***REMOVED***tends;
e***REMOVED***ports.isInterfaceTypeAnnotation = isInterfaceTypeAnnotation;
e***REMOVED***ports.isInterpreterDirective = isInterpreterDirective;
e***REMOVED***ports.isIntersectionTypeAnnotation = isIntersectionTypeAnnotation;
e***REMOVED***ports.isJSX = isJSX;
e***REMOVED***ports.isJSXAttribute = isJSXAttribute;
e***REMOVED***ports.isJSXClosingElement = isJSXClosingElement;
e***REMOVED***ports.isJSXClosingFragment = isJSXClosingFragment;
e***REMOVED***ports.isJSXElement = isJSXElement;
e***REMOVED***ports.isJSXEmptyE***REMOVED***pression = isJSXEmptyE***REMOVED***pression;
e***REMOVED***ports.isJSXE***REMOVED***pressionContainer = isJSXE***REMOVED***pressionContainer;
e***REMOVED***ports.isJSXFragment = isJSXFragment;
e***REMOVED***ports.isJSXIdentifier = isJSXIdentifier;
e***REMOVED***ports.isJSXMemberE***REMOVED***pression = isJSXMemberE***REMOVED***pression;
e***REMOVED***ports.isJSXNamespacedName = isJSXNamespacedName;
e***REMOVED***ports.isJSXOpeningElement = isJSXOpeningElement;
e***REMOVED***ports.isJSXOpeningFragment = isJSXOpeningFragment;
e***REMOVED***ports.isJSXSpreadAttribute = isJSXSpreadAttribute;
e***REMOVED***ports.isJSXSpreadChild = isJSXSpreadChild;
e***REMOVED***ports.isJSXTe***REMOVED***t = isJSXTe***REMOVED***t;
e***REMOVED***ports.isLVal = isLVal;
e***REMOVED***ports.isLabeledStatement = isLabeledStatement;
e***REMOVED***ports.isLiteral = isLiteral;
e***REMOVED***ports.isLogicalE***REMOVED***pression = isLogicalE***REMOVED***pression;
e***REMOVED***ports.isLoop = isLoop;
e***REMOVED***ports.isMemberE***REMOVED***pression = isMemberE***REMOVED***pression;
e***REMOVED***ports.isMetaProperty = isMetaProperty;
e***REMOVED***ports.isMethod = isMethod;
e***REMOVED***ports.isMiscellaneous = isMiscellaneous;
e***REMOVED***ports.isMi***REMOVED***edTypeAnnotation = isMi***REMOVED***edTypeAnnotation;
e***REMOVED***ports.isModuleDeclaration = isModuleDeclaration;
e***REMOVED***ports.isModuleE***REMOVED***pression = isModuleE***REMOVED***pression;
e***REMOVED***ports.isModuleSpecifier = isModuleSpecifier;
e***REMOVED***ports.isNewE***REMOVED***pression = isNewE***REMOVED***pression;
e***REMOVED***ports.isNoop = isNoop;
e***REMOVED***ports.isNullLiteral = isNullLiteral;
e***REMOVED***ports.isNullLiteralTypeAnnotation = isNullLiteralTypeAnnotation;
e***REMOVED***ports.isNullableTypeAnnotation = isNullableTypeAnnotation;
e***REMOVED***ports.isNumberLiteral = isNumberLiteral;
e***REMOVED***ports.isNumberLiteralTypeAnnotation = isNumberLiteralTypeAnnotation;
e***REMOVED***ports.isNumberTypeAnnotation = isNumberTypeAnnotation;
e***REMOVED***ports.isNumericLiteral = isNumericLiteral;
e***REMOVED***ports.isObjectE***REMOVED***pression = isObjectE***REMOVED***pression;
e***REMOVED***ports.isObjectMember = isObjectMember;
e***REMOVED***ports.isObjectMethod = isObjectMethod;
e***REMOVED***ports.isObjectPattern = isObjectPattern;
e***REMOVED***ports.isObjectProperty = isObjectProperty;
e***REMOVED***ports.isObjectTypeAnnotation = isObjectTypeAnnotation;
e***REMOVED***ports.isObjectTypeCallProperty = isObjectTypeCallProperty;
e***REMOVED***ports.isObjectTypeInde***REMOVED***er = isObjectTypeInde***REMOVED***er;
e***REMOVED***ports.isObjectTypeInternalSlot = isObjectTypeInternalSlot;
e***REMOVED***ports.isObjectTypeProperty = isObjectTypeProperty;
e***REMOVED***ports.isObjectTypeSpreadProperty = isObjectTypeSpreadProperty;
e***REMOVED***ports.isOpaqueType = isOpaqueType;
e***REMOVED***ports.isOptionalCallE***REMOVED***pression = isOptionalCallE***REMOVED***pression;
e***REMOVED***ports.isOptionalInde***REMOVED***edAccessType = isOptionalInde***REMOVED***edAccessType;
e***REMOVED***ports.isOptionalMemberE***REMOVED***pression = isOptionalMemberE***REMOVED***pression;
e***REMOVED***ports.isParenthesizedE***REMOVED***pression = isParenthesizedE***REMOVED***pression;
e***REMOVED***ports.isPattern = isPattern;
e***REMOVED***ports.isPatternLike = isPatternLike;
e***REMOVED***ports.isPipelineBareFunction = isPipelineBareFunction;
e***REMOVED***ports.isPipelinePrimaryTopicReference = isPipelinePrimaryTopicReference;
e***REMOVED***ports.isPipelineTopicE***REMOVED***pression = isPipelineTopicE***REMOVED***pression;
e***REMOVED***ports.isPlaceholder = isPlaceholder;
e***REMOVED***ports.isPrivate = isPrivate;
e***REMOVED***ports.isPrivateName = isPrivateName;
e***REMOVED***ports.isProgram = isProgram;
e***REMOVED***ports.isProperty = isProperty;
e***REMOVED***ports.isPureish = isPureish;
e***REMOVED***ports.isQualifiedTypeIdentifier = isQualifiedTypeIdentifier;
e***REMOVED***ports.isRecordE***REMOVED***pression = isRecordE***REMOVED***pression;
e***REMOVED***ports.isRegE***REMOVED***pLiteral = isRegE***REMOVED***pLiteral;
e***REMOVED***ports.isRege***REMOVED***Literal = isRege***REMOVED***Literal;
e***REMOVED***ports.isRestElement = isRestElement;
e***REMOVED***ports.isRestProperty = isRestProperty;
e***REMOVED***ports.isReturnStatement = isReturnStatement;
e***REMOVED***ports.isScopable = isScopable;
e***REMOVED***ports.isSequenceE***REMOVED***pression = isSequenceE***REMOVED***pression;
e***REMOVED***ports.isSpreadElement = isSpreadElement;
e***REMOVED***ports.isSpreadProperty = isSpreadProperty;
e***REMOVED***ports.isStandardized = isStandardized;
e***REMOVED***ports.isStatement = isStatement;
e***REMOVED***ports.isStaticBlock = isStaticBlock;
e***REMOVED***ports.isStringLiteral = isStringLiteral;
e***REMOVED***ports.isStringLiteralTypeAnnotation = isStringLiteralTypeAnnotation;
e***REMOVED***ports.isStringTypeAnnotation = isStringTypeAnnotation;
e***REMOVED***ports.isSuper = isSuper;
e***REMOVED***ports.isSwitchCase = isSwitchCase;
e***REMOVED***ports.isSwitchStatement = isSwitchStatement;
e***REMOVED***ports.isSymbolTypeAnnotation = isSymbolTypeAnnotation;
e***REMOVED***ports.isTSAnyKeyword = isTSAnyKeyword;
e***REMOVED***ports.isTSArrayType = isTSArrayType;
e***REMOVED***ports.isTSAsE***REMOVED***pression = isTSAsE***REMOVED***pression;
e***REMOVED***ports.isTSBaseType = isTSBaseType;
e***REMOVED***ports.isTSBigIntKeyword = isTSBigIntKeyword;
e***REMOVED***ports.isTSBooleanKeyword = isTSBooleanKeyword;
e***REMOVED***ports.isTSCallSignatureDeclaration = isTSCallSignatureDeclaration;
e***REMOVED***ports.isTSConditionalType = isTSConditionalType;
e***REMOVED***ports.isTSConstructSignatureDeclaration = isTSConstructSignatureDeclaration;
e***REMOVED***ports.isTSConstructorType = isTSConstructorType;
e***REMOVED***ports.isTSDeclareFunction = isTSDeclareFunction;
e***REMOVED***ports.isTSDeclareMethod = isTSDeclareMethod;
e***REMOVED***ports.isTSEntityName = isTSEntityName;
e***REMOVED***ports.isTSEnumDeclaration = isTSEnumDeclaration;
e***REMOVED***ports.isTSEnumMember = isTSEnumMember;
e***REMOVED***ports.isTSE***REMOVED***portAssignment = isTSE***REMOVED***portAssignment;
e***REMOVED***ports.isTSE***REMOVED***pressionWithTypeArguments = isTSE***REMOVED***pressionWithTypeArguments;
e***REMOVED***ports.isTSE***REMOVED***ternalModuleReference = isTSE***REMOVED***ternalModuleReference;
e***REMOVED***ports.isTSFunctionType = isTSFunctionType;
e***REMOVED***ports.isTSImportEqualsDeclaration = isTSImportEqualsDeclaration;
e***REMOVED***ports.isTSImportType = isTSImportType;
e***REMOVED***ports.isTSInde***REMOVED***Signature = isTSInde***REMOVED***Signature;
e***REMOVED***ports.isTSInde***REMOVED***edAccessType = isTSInde***REMOVED***edAccessType;
e***REMOVED***ports.isTSInferType = isTSInferType;
e***REMOVED***ports.isTSInstantiationE***REMOVED***pression = isTSInstantiationE***REMOVED***pression;
e***REMOVED***ports.isTSInterfaceBody = isTSInterfaceBody;
e***REMOVED***ports.isTSInterfaceDeclaration = isTSInterfaceDeclaration;
e***REMOVED***ports.isTSIntersectionType = isTSIntersectionType;
e***REMOVED***ports.isTSIntrinsicKeyword = isTSIntrinsicKeyword;
e***REMOVED***ports.isTSLiteralType = isTSLiteralType;
e***REMOVED***ports.isTSMappedType = isTSMappedType;
e***REMOVED***ports.isTSMethodSignature = isTSMethodSignature;
e***REMOVED***ports.isTSModuleBlock = isTSModuleBlock;
e***REMOVED***ports.isTSModuleDeclaration = isTSModuleDeclaration;
e***REMOVED***ports.isTSNamedTupleMember = isTSNamedTupleMember;
e***REMOVED***ports.isTSNamespaceE***REMOVED***portDeclaration = isTSNamespaceE***REMOVED***portDeclaration;
e***REMOVED***ports.isTSNeverKeyword = isTSNeverKeyword;
e***REMOVED***ports.isTSNonNullE***REMOVED***pression = isTSNonNullE***REMOVED***pression;
e***REMOVED***ports.isTSNullKeyword = isTSNullKeyword;
e***REMOVED***ports.isTSNumberKeyword = isTSNumberKeyword;
e***REMOVED***ports.isTSObjectKeyword = isTSObjectKeyword;
e***REMOVED***ports.isTSOptionalType = isTSOptionalType;
e***REMOVED***ports.isTSParameterProperty = isTSParameterProperty;
e***REMOVED***ports.isTSParenthesizedType = isTSParenthesizedType;
e***REMOVED***ports.isTSPropertySignature = isTSPropertySignature;
e***REMOVED***ports.isTSQualifiedName = isTSQualifiedName;
e***REMOVED***ports.isTSRestType = isTSRestType;
e***REMOVED***ports.isTSSatisfiesE***REMOVED***pression = isTSSatisfiesE***REMOVED***pression;
e***REMOVED***ports.isTSStringKeyword = isTSStringKeyword;
e***REMOVED***ports.isTSSymbolKeyword = isTSSymbolKeyword;
e***REMOVED***ports.isTSThisType = isTSThisType;
e***REMOVED***ports.isTSTupleType = isTSTupleType;
e***REMOVED***ports.isTSType = isTSType;
e***REMOVED***ports.isTSTypeAliasDeclaration = isTSTypeAliasDeclaration;
e***REMOVED***ports.isTSTypeAnnotation = isTSTypeAnnotation;
e***REMOVED***ports.isTSTypeAssertion = isTSTypeAssertion;
e***REMOVED***ports.isTSTypeElement = isTSTypeElement;
e***REMOVED***ports.isTSTypeLiteral = isTSTypeLiteral;
e***REMOVED***ports.isTSTypeOperator = isTSTypeOperator;
e***REMOVED***ports.isTSTypeParameter = isTSTypeParameter;
e***REMOVED***ports.isTSTypeParameterDeclaration = isTSTypeParameterDeclaration;
e***REMOVED***ports.isTSTypeParameterInstantiation = isTSTypeParameterInstantiation;
e***REMOVED***ports.isTSTypePredicate = isTSTypePredicate;
e***REMOVED***ports.isTSTypeQuery = isTSTypeQuery;
e***REMOVED***ports.isTSTypeReference = isTSTypeReference;
e***REMOVED***ports.isTSUndefinedKeyword = isTSUndefinedKeyword;
e***REMOVED***ports.isTSUnionType = isTSUnionType;
e***REMOVED***ports.isTSUnknownKeyword = isTSUnknownKeyword;
e***REMOVED***ports.isTSVoidKeyword = isTSVoidKeyword;
e***REMOVED***ports.isTaggedTemplateE***REMOVED***pression = isTaggedTemplateE***REMOVED***pression;
e***REMOVED***ports.isTemplateElement = isTemplateElement;
e***REMOVED***ports.isTemplateLiteral = isTemplateLiteral;
e***REMOVED***ports.isTerminatorless = isTerminatorless;
e***REMOVED***ports.isThisE***REMOVED***pression = isThisE***REMOVED***pression;
e***REMOVED***ports.isThisTypeAnnotation = isThisTypeAnnotation;
e***REMOVED***ports.isThrowStatement = isThrowStatement;
e***REMOVED***ports.isTopicReference = isTopicReference;
e***REMOVED***ports.isTryStatement = isTryStatement;
e***REMOVED***ports.isTupleE***REMOVED***pression = isTupleE***REMOVED***pression;
e***REMOVED***ports.isTupleTypeAnnotation = isTupleTypeAnnotation;
e***REMOVED***ports.isTypeAlias = isTypeAlias;
e***REMOVED***ports.isTypeAnnotation = isTypeAnnotation;
e***REMOVED***ports.isTypeCastE***REMOVED***pression = isTypeCastE***REMOVED***pression;
e***REMOVED***ports.isTypeParameter = isTypeParameter;
e***REMOVED***ports.isTypeParameterDeclaration = isTypeParameterDeclaration;
e***REMOVED***ports.isTypeParameterInstantiation = isTypeParameterInstantiation;
e***REMOVED***ports.isTypeScript = isTypeScript;
e***REMOVED***ports.isTypeofTypeAnnotation = isTypeofTypeAnnotation;
e***REMOVED***ports.isUnaryE***REMOVED***pression = isUnaryE***REMOVED***pression;
e***REMOVED***ports.isUnaryLike = isUnaryLike;
e***REMOVED***ports.isUnionTypeAnnotation = isUnionTypeAnnotation;
e***REMOVED***ports.isUpdateE***REMOVED***pression = isUpdateE***REMOVED***pression;
e***REMOVED***ports.isUserWhitespacable = isUserWhitespacable;
e***REMOVED***ports.isV8IntrinsicIdentifier = isV8IntrinsicIdentifier;
e***REMOVED***ports.isVariableDeclaration = isVariableDeclaration;
e***REMOVED***ports.isVariableDeclarator = isVariableDeclarator;
e***REMOVED***ports.isVariance = isVariance;
e***REMOVED***ports.isVoidTypeAnnotation = isVoidTypeAnnotation;
e***REMOVED***ports.isWhile = isWhile;
e***REMOVED***ports.isWhileStatement = isWhileStatement;
e***REMOVED***ports.isWithStatement = isWithStatement;
e***REMOVED***ports.isYieldE***REMOVED***pression = isYieldE***REMOVED***pression;
var _shallowEqual = require("../../utils/shallowEqual.js");
var _deprecationWarning = require("../../utils/deprecationWarning.js");
function isArrayE***REMOVED***pression(node, opts) {
  if (!node) return false;
  if (node.type !== "ArrayE***REMOVED***pression") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isAssignmentE***REMOVED***pression(node, opts) {
  if (!node) return false;
  if (node.type !== "AssignmentE***REMOVED***pression") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isBinaryE***REMOVED***pression(node, opts) {
  if (!node) return false;
  if (node.type !== "BinaryE***REMOVED***pression") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isInterpreterDirective(node, opts) {
  if (!node) return false;
  if (node.type !== "InterpreterDirective") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isDirective(node, opts) {
  if (!node) return false;
  if (node.type !== "Directive") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isDirectiveLiteral(node, opts) {
  if (!node) return false;
  if (node.type !== "DirectiveLiteral") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isBlockStatement(node, opts) {
  if (!node) return false;
  if (node.type !== "BlockStatement") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isBreakStatement(node, opts) {
  if (!node) return false;
  if (node.type !== "BreakStatement") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isCallE***REMOVED***pression(node, opts) {
  if (!node) return false;
  if (node.type !== "CallE***REMOVED***pression") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isCatchClause(node, opts) {
  if (!node) return false;
  if (node.type !== "CatchClause") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isConditionalE***REMOVED***pression(node, opts) {
  if (!node) return false;
  if (node.type !== "ConditionalE***REMOVED***pression") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isContinueStatement(node, opts) {
  if (!node) return false;
  if (node.type !== "ContinueStatement") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isDebuggerStatement(node, opts) {
  if (!node) return false;
  if (node.type !== "DebuggerStatement") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isDoWhileStatement(node, opts) {
  if (!node) return false;
  if (node.type !== "DoWhileStatement") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isEmptyStatement(node, opts) {
  if (!node) return false;
  if (node.type !== "EmptyStatement") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isE***REMOVED***pressionStatement(node, opts) {
  if (!node) return false;
  if (node.type !== "E***REMOVED***pressionStatement") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isFile(node, opts) {
  if (!node) return false;
  if (node.type !== "File") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isForInStatement(node, opts) {
  if (!node) return false;
  if (node.type !== "ForInStatement") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isForStatement(node, opts) {
  if (!node) return false;
  if (node.type !== "ForStatement") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isFunctionDeclaration(node, opts) {
  if (!node) return false;
  if (node.type !== "FunctionDeclaration") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isFunctionE***REMOVED***pression(node, opts) {
  if (!node) return false;
  if (node.type !== "FunctionE***REMOVED***pression") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isIdentifier(node, opts) {
  if (!node) return false;
  if (node.type !== "Identifier") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isIfStatement(node, opts) {
  if (!node) return false;
  if (node.type !== "IfStatement") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isLabeledStatement(node, opts) {
  if (!node) return false;
  if (node.type !== "LabeledStatement") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isStringLiteral(node, opts) {
  if (!node) return false;
  if (node.type !== "StringLiteral") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isNumericLiteral(node, opts) {
  if (!node) return false;
  if (node.type !== "NumericLiteral") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isNullLiteral(node, opts) {
  if (!node) return false;
  if (node.type !== "NullLiteral") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isBooleanLiteral(node, opts) {
  if (!node) return false;
  if (node.type !== "BooleanLiteral") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isRegE***REMOVED***pLiteral(node, opts) {
  if (!node) return false;
  if (node.type !== "RegE***REMOVED***pLiteral") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isLogicalE***REMOVED***pression(node, opts) {
  if (!node) return false;
  if (node.type !== "LogicalE***REMOVED***pression") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isMemberE***REMOVED***pression(node, opts) {
  if (!node) return false;
  if (node.type !== "MemberE***REMOVED***pression") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isNewE***REMOVED***pression(node, opts) {
  if (!node) return false;
  if (node.type !== "NewE***REMOVED***pression") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isProgram(node, opts) {
  if (!node) return false;
  if (node.type !== "Program") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isObjectE***REMOVED***pression(node, opts) {
  if (!node) return false;
  if (node.type !== "ObjectE***REMOVED***pression") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isObjectMethod(node, opts) {
  if (!node) return false;
  if (node.type !== "ObjectMethod") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isObjectProperty(node, opts) {
  if (!node) return false;
  if (node.type !== "ObjectProperty") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isRestElement(node, opts) {
  if (!node) return false;
  if (node.type !== "RestElement") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isReturnStatement(node, opts) {
  if (!node) return false;
  if (node.type !== "ReturnStatement") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isSequenceE***REMOVED***pression(node, opts) {
  if (!node) return false;
  if (node.type !== "SequenceE***REMOVED***pression") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isParenthesizedE***REMOVED***pression(node, opts) {
  if (!node) return false;
  if (node.type !== "ParenthesizedE***REMOVED***pression") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isSwitchCase(node, opts) {
  if (!node) return false;
  if (node.type !== "SwitchCase") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isSwitchStatement(node, opts) {
  if (!node) return false;
  if (node.type !== "SwitchStatement") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isThisE***REMOVED***pression(node, opts) {
  if (!node) return false;
  if (node.type !== "ThisE***REMOVED***pression") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isThrowStatement(node, opts) {
  if (!node) return false;
  if (node.type !== "ThrowStatement") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isTryStatement(node, opts) {
  if (!node) return false;
  if (node.type !== "TryStatement") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isUnaryE***REMOVED***pression(node, opts) {
  if (!node) return false;
  if (node.type !== "UnaryE***REMOVED***pression") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isUpdateE***REMOVED***pression(node, opts) {
  if (!node) return false;
  if (node.type !== "UpdateE***REMOVED***pression") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isVariableDeclaration(node, opts) {
  if (!node) return false;
  if (node.type !== "VariableDeclaration") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isVariableDeclarator(node, opts) {
  if (!node) return false;
  if (node.type !== "VariableDeclarator") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isWhileStatement(node, opts) {
  if (!node) return false;
  if (node.type !== "WhileStatement") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isWithStatement(node, opts) {
  if (!node) return false;
  if (node.type !== "WithStatement") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isAssignmentPattern(node, opts) {
  if (!node) return false;
  if (node.type !== "AssignmentPattern") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isArrayPattern(node, opts) {
  if (!node) return false;
  if (node.type !== "ArrayPattern") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isArrowFunctionE***REMOVED***pression(node, opts) {
  if (!node) return false;
  if (node.type !== "ArrowFunctionE***REMOVED***pression") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isClassBody(node, opts) {
  if (!node) return false;
  if (node.type !== "ClassBody") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isClassE***REMOVED***pression(node, opts) {
  if (!node) return false;
  if (node.type !== "ClassE***REMOVED***pression") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isClassDeclaration(node, opts) {
  if (!node) return false;
  if (node.type !== "ClassDeclaration") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isE***REMOVED***portAllDeclaration(node, opts) {
  if (!node) return false;
  if (node.type !== "E***REMOVED***portAllDeclaration") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isE***REMOVED***portDefaultDeclaration(node, opts) {
  if (!node) return false;
  if (node.type !== "E***REMOVED***portDefaultDeclaration") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isE***REMOVED***portNamedDeclaration(node, opts) {
  if (!node) return false;
  if (node.type !== "E***REMOVED***portNamedDeclaration") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isE***REMOVED***portSpecifier(node, opts) {
  if (!node) return false;
  if (node.type !== "E***REMOVED***portSpecifier") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isForOfStatement(node, opts) {
  if (!node) return false;
  if (node.type !== "ForOfStatement") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isImportDeclaration(node, opts) {
  if (!node) return false;
  if (node.type !== "ImportDeclaration") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isImportDefaultSpecifier(node, opts) {
  if (!node) return false;
  if (node.type !== "ImportDefaultSpecifier") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isImportNamespaceSpecifier(node, opts) {
  if (!node) return false;
  if (node.type !== "ImportNamespaceSpecifier") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isImportSpecifier(node, opts) {
  if (!node) return false;
  if (node.type !== "ImportSpecifier") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isImportE***REMOVED***pression(node, opts) {
  if (!node) return false;
  if (node.type !== "ImportE***REMOVED***pression") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isMetaProperty(node, opts) {
  if (!node) return false;
  if (node.type !== "MetaProperty") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isClassMethod(node, opts) {
  if (!node) return false;
  if (node.type !== "ClassMethod") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isObjectPattern(node, opts) {
  if (!node) return false;
  if (node.type !== "ObjectPattern") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isSpreadElement(node, opts) {
  if (!node) return false;
  if (node.type !== "SpreadElement") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isSuper(node, opts) {
  if (!node) return false;
  if (node.type !== "Super") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isTaggedTemplateE***REMOVED***pression(node, opts) {
  if (!node) return false;
  if (node.type !== "TaggedTemplateE***REMOVED***pression") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isTemplateElement(node, opts) {
  if (!node) return false;
  if (node.type !== "TemplateElement") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isTemplateLiteral(node, opts) {
  if (!node) return false;
  if (node.type !== "TemplateLiteral") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isYieldE***REMOVED***pression(node, opts) {
  if (!node) return false;
  if (node.type !== "YieldE***REMOVED***pression") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isAwaitE***REMOVED***pression(node, opts) {
  if (!node) return false;
  if (node.type !== "AwaitE***REMOVED***pression") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isImport(node, opts) {
  if (!node) return false;
  if (node.type !== "Import") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isBigIntLiteral(node, opts) {
  if (!node) return false;
  if (node.type !== "BigIntLiteral") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isE***REMOVED***portNamespaceSpecifier(node, opts) {
  if (!node) return false;
  if (node.type !== "E***REMOVED***portNamespaceSpecifier") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isOptionalMemberE***REMOVED***pression(node, opts) {
  if (!node) return false;
  if (node.type !== "OptionalMemberE***REMOVED***pression") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isOptionalCallE***REMOVED***pression(node, opts) {
  if (!node) return false;
  if (node.type !== "OptionalCallE***REMOVED***pression") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isClassProperty(node, opts) {
  if (!node) return false;
  if (node.type !== "ClassProperty") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isClassAccessorProperty(node, opts) {
  if (!node) return false;
  if (node.type !== "ClassAccessorProperty") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isClassPrivateProperty(node, opts) {
  if (!node) return false;
  if (node.type !== "ClassPrivateProperty") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isClassPrivateMethod(node, opts) {
  if (!node) return false;
  if (node.type !== "ClassPrivateMethod") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isPrivateName(node, opts) {
  if (!node) return false;
  if (node.type !== "PrivateName") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isStaticBlock(node, opts) {
  if (!node) return false;
  if (node.type !== "StaticBlock") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isAnyTypeAnnotation(node, opts) {
  if (!node) return false;
  if (node.type !== "AnyTypeAnnotation") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isArrayTypeAnnotation(node, opts) {
  if (!node) return false;
  if (node.type !== "ArrayTypeAnnotation") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isBooleanTypeAnnotation(node, opts) {
  if (!node) return false;
  if (node.type !== "BooleanTypeAnnotation") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isBooleanLiteralTypeAnnotation(node, opts) {
  if (!node) return false;
  if (node.type !== "BooleanLiteralTypeAnnotation") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isNullLiteralTypeAnnotation(node, opts) {
  if (!node) return false;
  if (node.type !== "NullLiteralTypeAnnotation") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isClassImplements(node, opts) {
  if (!node) return false;
  if (node.type !== "ClassImplements") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isDeclareClass(node, opts) {
  if (!node) return false;
  if (node.type !== "DeclareClass") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isDeclareFunction(node, opts) {
  if (!node) return false;
  if (node.type !== "DeclareFunction") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isDeclareInterface(node, opts) {
  if (!node) return false;
  if (node.type !== "DeclareInterface") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isDeclareModule(node, opts) {
  if (!node) return false;
  if (node.type !== "DeclareModule") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isDeclareModuleE***REMOVED***ports(node, opts) {
  if (!node) return false;
  if (node.type !== "DeclareModuleE***REMOVED***ports") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isDeclareTypeAlias(node, opts) {
  if (!node) return false;
  if (node.type !== "DeclareTypeAlias") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isDeclareOpaqueType(node, opts) {
  if (!node) return false;
  if (node.type !== "DeclareOpaqueType") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isDeclareVariable(node, opts) {
  if (!node) return false;
  if (node.type !== "DeclareVariable") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isDeclareE***REMOVED***portDeclaration(node, opts) {
  if (!node) return false;
  if (node.type !== "DeclareE***REMOVED***portDeclaration") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isDeclareE***REMOVED***portAllDeclaration(node, opts) {
  if (!node) return false;
  if (node.type !== "DeclareE***REMOVED***portAllDeclaration") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isDeclaredPredicate(node, opts) {
  if (!node) return false;
  if (node.type !== "DeclaredPredicate") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isE***REMOVED***istsTypeAnnotation(node, opts) {
  if (!node) return false;
  if (node.type !== "E***REMOVED***istsTypeAnnotation") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isFunctionTypeAnnotation(node, opts) {
  if (!node) return false;
  if (node.type !== "FunctionTypeAnnotation") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isFunctionTypeParam(node, opts) {
  if (!node) return false;
  if (node.type !== "FunctionTypeParam") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isGenericTypeAnnotation(node, opts) {
  if (!node) return false;
  if (node.type !== "GenericTypeAnnotation") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isInferredPredicate(node, opts) {
  if (!node) return false;
  if (node.type !== "InferredPredicate") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isInterfaceE***REMOVED***tends(node, opts) {
  if (!node) return false;
  if (node.type !== "InterfaceE***REMOVED***tends") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isInterfaceDeclaration(node, opts) {
  if (!node) return false;
  if (node.type !== "InterfaceDeclaration") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isInterfaceTypeAnnotation(node, opts) {
  if (!node) return false;
  if (node.type !== "InterfaceTypeAnnotation") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isIntersectionTypeAnnotation(node, opts) {
  if (!node) return false;
  if (node.type !== "IntersectionTypeAnnotation") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isMi***REMOVED***edTypeAnnotation(node, opts) {
  if (!node) return false;
  if (node.type !== "Mi***REMOVED***edTypeAnnotation") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isEmptyTypeAnnotation(node, opts) {
  if (!node) return false;
  if (node.type !== "EmptyTypeAnnotation") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isNullableTypeAnnotation(node, opts) {
  if (!node) return false;
  if (node.type !== "NullableTypeAnnotation") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isNumberLiteralTypeAnnotation(node, opts) {
  if (!node) return false;
  if (node.type !== "NumberLiteralTypeAnnotation") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isNumberTypeAnnotation(node, opts) {
  if (!node) return false;
  if (node.type !== "NumberTypeAnnotation") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isObjectTypeAnnotation(node, opts) {
  if (!node) return false;
  if (node.type !== "ObjectTypeAnnotation") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isObjectTypeInternalSlot(node, opts) {
  if (!node) return false;
  if (node.type !== "ObjectTypeInternalSlot") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isObjectTypeCallProperty(node, opts) {
  if (!node) return false;
  if (node.type !== "ObjectTypeCallProperty") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isObjectTypeInde***REMOVED***er(node, opts) {
  if (!node) return false;
  if (node.type !== "ObjectTypeInde***REMOVED***er") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isObjectTypeProperty(node, opts) {
  if (!node) return false;
  if (node.type !== "ObjectTypeProperty") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isObjectTypeSpreadProperty(node, opts) {
  if (!node) return false;
  if (node.type !== "ObjectTypeSpreadProperty") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isOpaqueType(node, opts) {
  if (!node) return false;
  if (node.type !== "OpaqueType") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isQualifiedTypeIdentifier(node, opts) {
  if (!node) return false;
  if (node.type !== "QualifiedTypeIdentifier") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isStringLiteralTypeAnnotation(node, opts) {
  if (!node) return false;
  if (node.type !== "StringLiteralTypeAnnotation") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isStringTypeAnnotation(node, opts) {
  if (!node) return false;
  if (node.type !== "StringTypeAnnotation") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isSymbolTypeAnnotation(node, opts) {
  if (!node) return false;
  if (node.type !== "SymbolTypeAnnotation") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isThisTypeAnnotation(node, opts) {
  if (!node) return false;
  if (node.type !== "ThisTypeAnnotation") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isTupleTypeAnnotation(node, opts) {
  if (!node) return false;
  if (node.type !== "TupleTypeAnnotation") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isTypeofTypeAnnotation(node, opts) {
  if (!node) return false;
  if (node.type !== "TypeofTypeAnnotation") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isTypeAlias(node, opts) {
  if (!node) return false;
  if (node.type !== "TypeAlias") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isTypeAnnotation(node, opts) {
  if (!node) return false;
  if (node.type !== "TypeAnnotation") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isTypeCastE***REMOVED***pression(node, opts) {
  if (!node) return false;
  if (node.type !== "TypeCastE***REMOVED***pression") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isTypeParameter(node, opts) {
  if (!node) return false;
  if (node.type !== "TypeParameter") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isTypeParameterDeclaration(node, opts) {
  if (!node) return false;
  if (node.type !== "TypeParameterDeclaration") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isTypeParameterInstantiation(node, opts) {
  if (!node) return false;
  if (node.type !== "TypeParameterInstantiation") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isUnionTypeAnnotation(node, opts) {
  if (!node) return false;
  if (node.type !== "UnionTypeAnnotation") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isVariance(node, opts) {
  if (!node) return false;
  if (node.type !== "Variance") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isVoidTypeAnnotation(node, opts) {
  if (!node) return false;
  if (node.type !== "VoidTypeAnnotation") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isEnumDeclaration(node, opts) {
  if (!node) return false;
  if (node.type !== "EnumDeclaration") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isEnumBooleanBody(node, opts) {
  if (!node) return false;
  if (node.type !== "EnumBooleanBody") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isEnumNumberBody(node, opts) {
  if (!node) return false;
  if (node.type !== "EnumNumberBody") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isEnumStringBody(node, opts) {
  if (!node) return false;
  if (node.type !== "EnumStringBody") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isEnumSymbolBody(node, opts) {
  if (!node) return false;
  if (node.type !== "EnumSymbolBody") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isEnumBooleanMember(node, opts) {
  if (!node) return false;
  if (node.type !== "EnumBooleanMember") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isEnumNumberMember(node, opts) {
  if (!node) return false;
  if (node.type !== "EnumNumberMember") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isEnumStringMember(node, opts) {
  if (!node) return false;
  if (node.type !== "EnumStringMember") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isEnumDefaultedMember(node, opts) {
  if (!node) return false;
  if (node.type !== "EnumDefaultedMember") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isInde***REMOVED***edAccessType(node, opts) {
  if (!node) return false;
  if (node.type !== "Inde***REMOVED***edAccessType") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isOptionalInde***REMOVED***edAccessType(node, opts) {
  if (!node) return false;
  if (node.type !== "OptionalInde***REMOVED***edAccessType") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isJSXAttribute(node, opts) {
  if (!node) return false;
  if (node.type !== "JSXAttribute") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isJSXClosingElement(node, opts) {
  if (!node) return false;
  if (node.type !== "JSXClosingElement") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isJSXElement(node, opts) {
  if (!node) return false;
  if (node.type !== "JSXElement") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isJSXEmptyE***REMOVED***pression(node, opts) {
  if (!node) return false;
  if (node.type !== "JSXEmptyE***REMOVED***pression") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isJSXE***REMOVED***pressionContainer(node, opts) {
  if (!node) return false;
  if (node.type !== "JSXE***REMOVED***pressionContainer") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isJSXSpreadChild(node, opts) {
  if (!node) return false;
  if (node.type !== "JSXSpreadChild") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isJSXIdentifier(node, opts) {
  if (!node) return false;
  if (node.type !== "JSXIdentifier") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isJSXMemberE***REMOVED***pression(node, opts) {
  if (!node) return false;
  if (node.type !== "JSXMemberE***REMOVED***pression") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isJSXNamespacedName(node, opts) {
  if (!node) return false;
  if (node.type !== "JSXNamespacedName") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isJSXOpeningElement(node, opts) {
  if (!node) return false;
  if (node.type !== "JSXOpeningElement") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isJSXSpreadAttribute(node, opts) {
  if (!node) return false;
  if (node.type !== "JSXSpreadAttribute") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isJSXTe***REMOVED***t(node, opts) {
  if (!node) return false;
  if (node.type !== "JSXTe***REMOVED***t") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isJSXFragment(node, opts) {
  if (!node) return false;
  if (node.type !== "JSXFragment") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isJSXOpeningFragment(node, opts) {
  if (!node) return false;
  if (node.type !== "JSXOpeningFragment") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isJSXClosingFragment(node, opts) {
  if (!node) return false;
  if (node.type !== "JSXClosingFragment") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isNoop(node, opts) {
  if (!node) return false;
  if (node.type !== "Noop") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isPlaceholder(node, opts) {
  if (!node) return false;
  if (node.type !== "Placeholder") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isV8IntrinsicIdentifier(node, opts) {
  if (!node) return false;
  if (node.type !== "V8IntrinsicIdentifier") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isArgumentPlaceholder(node, opts) {
  if (!node) return false;
  if (node.type !== "ArgumentPlaceholder") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isBindE***REMOVED***pression(node, opts) {
  if (!node) return false;
  if (node.type !== "BindE***REMOVED***pression") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isImportAttribute(node, opts) {
  if (!node) return false;
  if (node.type !== "ImportAttribute") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isDecorator(node, opts) {
  if (!node) return false;
  if (node.type !== "Decorator") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isDoE***REMOVED***pression(node, opts) {
  if (!node) return false;
  if (node.type !== "DoE***REMOVED***pression") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isE***REMOVED***portDefaultSpecifier(node, opts) {
  if (!node) return false;
  if (node.type !== "E***REMOVED***portDefaultSpecifier") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isRecordE***REMOVED***pression(node, opts) {
  if (!node) return false;
  if (node.type !== "RecordE***REMOVED***pression") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isTupleE***REMOVED***pression(node, opts) {
  if (!node) return false;
  if (node.type !== "TupleE***REMOVED***pression") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isDecimalLiteral(node, opts) {
  if (!node) return false;
  if (node.type !== "DecimalLiteral") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isModuleE***REMOVED***pression(node, opts) {
  if (!node) return false;
  if (node.type !== "ModuleE***REMOVED***pression") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isTopicReference(node, opts) {
  if (!node) return false;
  if (node.type !== "TopicReference") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isPipelineTopicE***REMOVED***pression(node, opts) {
  if (!node) return false;
  if (node.type !== "PipelineTopicE***REMOVED***pression") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isPipelineBareFunction(node, opts) {
  if (!node) return false;
  if (node.type !== "PipelineBareFunction") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isPipelinePrimaryTopicReference(node, opts) {
  if (!node) return false;
  if (node.type !== "PipelinePrimaryTopicReference") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isTSParameterProperty(node, opts) {
  if (!node) return false;
  if (node.type !== "TSParameterProperty") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isTSDeclareFunction(node, opts) {
  if (!node) return false;
  if (node.type !== "TSDeclareFunction") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isTSDeclareMethod(node, opts) {
  if (!node) return false;
  if (node.type !== "TSDeclareMethod") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isTSQualifiedName(node, opts) {
  if (!node) return false;
  if (node.type !== "TSQualifiedName") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isTSCallSignatureDeclaration(node, opts) {
  if (!node) return false;
  if (node.type !== "TSCallSignatureDeclaration") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isTSConstructSignatureDeclaration(node, opts) {
  if (!node) return false;
  if (node.type !== "TSConstructSignatureDeclaration") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isTSPropertySignature(node, opts) {
  if (!node) return false;
  if (node.type !== "TSPropertySignature") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isTSMethodSignature(node, opts) {
  if (!node) return false;
  if (node.type !== "TSMethodSignature") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isTSInde***REMOVED***Signature(node, opts) {
  if (!node) return false;
  if (node.type !== "TSInde***REMOVED***Signature") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isTSAnyKeyword(node, opts) {
  if (!node) return false;
  if (node.type !== "TSAnyKeyword") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isTSBooleanKeyword(node, opts) {
  if (!node) return false;
  if (node.type !== "TSBooleanKeyword") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isTSBigIntKeyword(node, opts) {
  if (!node) return false;
  if (node.type !== "TSBigIntKeyword") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isTSIntrinsicKeyword(node, opts) {
  if (!node) return false;
  if (node.type !== "TSIntrinsicKeyword") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isTSNeverKeyword(node, opts) {
  if (!node) return false;
  if (node.type !== "TSNeverKeyword") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isTSNullKeyword(node, opts) {
  if (!node) return false;
  if (node.type !== "TSNullKeyword") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isTSNumberKeyword(node, opts) {
  if (!node) return false;
  if (node.type !== "TSNumberKeyword") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isTSObjectKeyword(node, opts) {
  if (!node) return false;
  if (node.type !== "TSObjectKeyword") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isTSStringKeyword(node, opts) {
  if (!node) return false;
  if (node.type !== "TSStringKeyword") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isTSSymbolKeyword(node, opts) {
  if (!node) return false;
  if (node.type !== "TSSymbolKeyword") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isTSUndefinedKeyword(node, opts) {
  if (!node) return false;
  if (node.type !== "TSUndefinedKeyword") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isTSUnknownKeyword(node, opts) {
  if (!node) return false;
  if (node.type !== "TSUnknownKeyword") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isTSVoidKeyword(node, opts) {
  if (!node) return false;
  if (node.type !== "TSVoidKeyword") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isTSThisType(node, opts) {
  if (!node) return false;
  if (node.type !== "TSThisType") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isTSFunctionType(node, opts) {
  if (!node) return false;
  if (node.type !== "TSFunctionType") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isTSConstructorType(node, opts) {
  if (!node) return false;
  if (node.type !== "TSConstructorType") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isTSTypeReference(node, opts) {
  if (!node) return false;
  if (node.type !== "TSTypeReference") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isTSTypePredicate(node, opts) {
  if (!node) return false;
  if (node.type !== "TSTypePredicate") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isTSTypeQuery(node, opts) {
  if (!node) return false;
  if (node.type !== "TSTypeQuery") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isTSTypeLiteral(node, opts) {
  if (!node) return false;
  if (node.type !== "TSTypeLiteral") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isTSArrayType(node, opts) {
  if (!node) return false;
  if (node.type !== "TSArrayType") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isTSTupleType(node, opts) {
  if (!node) return false;
  if (node.type !== "TSTupleType") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isTSOptionalType(node, opts) {
  if (!node) return false;
  if (node.type !== "TSOptionalType") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isTSRestType(node, opts) {
  if (!node) return false;
  if (node.type !== "TSRestType") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isTSNamedTupleMember(node, opts) {
  if (!node) return false;
  if (node.type !== "TSNamedTupleMember") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isTSUnionType(node, opts) {
  if (!node) return false;
  if (node.type !== "TSUnionType") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isTSIntersectionType(node, opts) {
  if (!node) return false;
  if (node.type !== "TSIntersectionType") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isTSConditionalType(node, opts) {
  if (!node) return false;
  if (node.type !== "TSConditionalType") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isTSInferType(node, opts) {
  if (!node) return false;
  if (node.type !== "TSInferType") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isTSParenthesizedType(node, opts) {
  if (!node) return false;
  if (node.type !== "TSParenthesizedType") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isTSTypeOperator(node, opts) {
  if (!node) return false;
  if (node.type !== "TSTypeOperator") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isTSInde***REMOVED***edAccessType(node, opts) {
  if (!node) return false;
  if (node.type !== "TSInde***REMOVED***edAccessType") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isTSMappedType(node, opts) {
  if (!node) return false;
  if (node.type !== "TSMappedType") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isTSLiteralType(node, opts) {
  if (!node) return false;
  if (node.type !== "TSLiteralType") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isTSE***REMOVED***pressionWithTypeArguments(node, opts) {
  if (!node) return false;
  if (node.type !== "TSE***REMOVED***pressionWithTypeArguments") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isTSInterfaceDeclaration(node, opts) {
  if (!node) return false;
  if (node.type !== "TSInterfaceDeclaration") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isTSInterfaceBody(node, opts) {
  if (!node) return false;
  if (node.type !== "TSInterfaceBody") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isTSTypeAliasDeclaration(node, opts) {
  if (!node) return false;
  if (node.type !== "TSTypeAliasDeclaration") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isTSInstantiationE***REMOVED***pression(node, opts) {
  if (!node) return false;
  if (node.type !== "TSInstantiationE***REMOVED***pression") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isTSAsE***REMOVED***pression(node, opts) {
  if (!node) return false;
  if (node.type !== "TSAsE***REMOVED***pression") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isTSSatisfiesE***REMOVED***pression(node, opts) {
  if (!node) return false;
  if (node.type !== "TSSatisfiesE***REMOVED***pression") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isTSTypeAssertion(node, opts) {
  if (!node) return false;
  if (node.type !== "TSTypeAssertion") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isTSEnumDeclaration(node, opts) {
  if (!node) return false;
  if (node.type !== "TSEnumDeclaration") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isTSEnumMember(node, opts) {
  if (!node) return false;
  if (node.type !== "TSEnumMember") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isTSModuleDeclaration(node, opts) {
  if (!node) return false;
  if (node.type !== "TSModuleDeclaration") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isTSModuleBlock(node, opts) {
  if (!node) return false;
  if (node.type !== "TSModuleBlock") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isTSImportType(node, opts) {
  if (!node) return false;
  if (node.type !== "TSImportType") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isTSImportEqualsDeclaration(node, opts) {
  if (!node) return false;
  if (node.type !== "TSImportEqualsDeclaration") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isTSE***REMOVED***ternalModuleReference(node, opts) {
  if (!node) return false;
  if (node.type !== "TSE***REMOVED***ternalModuleReference") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isTSNonNullE***REMOVED***pression(node, opts) {
  if (!node) return false;
  if (node.type !== "TSNonNullE***REMOVED***pression") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isTSE***REMOVED***portAssignment(node, opts) {
  if (!node) return false;
  if (node.type !== "TSE***REMOVED***portAssignment") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isTSNamespaceE***REMOVED***portDeclaration(node, opts) {
  if (!node) return false;
  if (node.type !== "TSNamespaceE***REMOVED***portDeclaration") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isTSTypeAnnotation(node, opts) {
  if (!node) return false;
  if (node.type !== "TSTypeAnnotation") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isTSTypeParameterInstantiation(node, opts) {
  if (!node) return false;
  if (node.type !== "TSTypeParameterInstantiation") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isTSTypeParameterDeclaration(node, opts) {
  if (!node) return false;
  if (node.type !== "TSTypeParameterDeclaration") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isTSTypeParameter(node, opts) {
  if (!node) return false;
  if (node.type !== "TSTypeParameter") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isStandardized(node, opts) {
  if (!node) return false;
  switch (node.type) {
    case "ArrayE***REMOVED***pression":
    case "AssignmentE***REMOVED***pression":
    case "BinaryE***REMOVED***pression":
    case "InterpreterDirective":
    case "Directive":
    case "DirectiveLiteral":
    case "BlockStatement":
    case "BreakStatement":
    case "CallE***REMOVED***pression":
    case "CatchClause":
    case "ConditionalE***REMOVED***pression":
    case "ContinueStatement":
    case "DebuggerStatement":
    case "DoWhileStatement":
    case "EmptyStatement":
    case "E***REMOVED***pressionStatement":
    case "File":
    case "ForInStatement":
    case "ForStatement":
    case "FunctionDeclaration":
    case "FunctionE***REMOVED***pression":
    case "Identifier":
    case "IfStatement":
    case "LabeledStatement":
    case "StringLiteral":
    case "NumericLiteral":
    case "NullLiteral":
    case "BooleanLiteral":
    case "RegE***REMOVED***pLiteral":
    case "LogicalE***REMOVED***pression":
    case "MemberE***REMOVED***pression":
    case "NewE***REMOVED***pression":
    case "Program":
    case "ObjectE***REMOVED***pression":
    case "ObjectMethod":
    case "ObjectProperty":
    case "RestElement":
    case "ReturnStatement":
    case "SequenceE***REMOVED***pression":
    case "ParenthesizedE***REMOVED***pression":
    case "SwitchCase":
    case "SwitchStatement":
    case "ThisE***REMOVED***pression":
    case "ThrowStatement":
    case "TryStatement":
    case "UnaryE***REMOVED***pression":
    case "UpdateE***REMOVED***pression":
    case "VariableDeclaration":
    case "VariableDeclarator":
    case "WhileStatement":
    case "WithStatement":
    case "AssignmentPattern":
    case "ArrayPattern":
    case "ArrowFunctionE***REMOVED***pression":
    case "ClassBody":
    case "ClassE***REMOVED***pression":
    case "ClassDeclaration":
    case "E***REMOVED***portAllDeclaration":
    case "E***REMOVED***portDefaultDeclaration":
    case "E***REMOVED***portNamedDeclaration":
    case "E***REMOVED***portSpecifier":
    case "ForOfStatement":
    case "ImportDeclaration":
    case "ImportDefaultSpecifier":
    case "ImportNamespaceSpecifier":
    case "ImportSpecifier":
    case "ImportE***REMOVED***pression":
    case "MetaProperty":
    case "ClassMethod":
    case "ObjectPattern":
    case "SpreadElement":
    case "Super":
    case "TaggedTemplateE***REMOVED***pression":
    case "TemplateElement":
    case "TemplateLiteral":
    case "YieldE***REMOVED***pression":
    case "AwaitE***REMOVED***pression":
    case "Import":
    case "BigIntLiteral":
    case "E***REMOVED***portNamespaceSpecifier":
    case "OptionalMemberE***REMOVED***pression":
    case "OptionalCallE***REMOVED***pression":
    case "ClassProperty":
    case "ClassAccessorProperty":
    case "ClassPrivateProperty":
    case "ClassPrivateMethod":
    case "PrivateName":
    case "StaticBlock":
      break;
    case "Placeholder":
      switch (node.e***REMOVED***pectedNode) {
        case "Identifier":
        case "StringLiteral":
        case "BlockStatement":
        case "ClassBody":
          break;
        default:
          return false;
      }
      break;
    default:
      return false;
  }
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isE***REMOVED***pression(node, opts) {
  if (!node) return false;
  switch (node.type) {
    case "ArrayE***REMOVED***pression":
    case "AssignmentE***REMOVED***pression":
    case "BinaryE***REMOVED***pression":
    case "CallE***REMOVED***pression":
    case "ConditionalE***REMOVED***pression":
    case "FunctionE***REMOVED***pression":
    case "Identifier":
    case "StringLiteral":
    case "NumericLiteral":
    case "NullLiteral":
    case "BooleanLiteral":
    case "RegE***REMOVED***pLiteral":
    case "LogicalE***REMOVED***pression":
    case "MemberE***REMOVED***pression":
    case "NewE***REMOVED***pression":
    case "ObjectE***REMOVED***pression":
    case "SequenceE***REMOVED***pression":
    case "ParenthesizedE***REMOVED***pression":
    case "ThisE***REMOVED***pression":
    case "UnaryE***REMOVED***pression":
    case "UpdateE***REMOVED***pression":
    case "ArrowFunctionE***REMOVED***pression":
    case "ClassE***REMOVED***pression":
    case "ImportE***REMOVED***pression":
    case "MetaProperty":
    case "Super":
    case "TaggedTemplateE***REMOVED***pression":
    case "TemplateLiteral":
    case "YieldE***REMOVED***pression":
    case "AwaitE***REMOVED***pression":
    case "Import":
    case "BigIntLiteral":
    case "OptionalMemberE***REMOVED***pression":
    case "OptionalCallE***REMOVED***pression":
    case "TypeCastE***REMOVED***pression":
    case "JSXElement":
    case "JSXFragment":
    case "BindE***REMOVED***pression":
    case "DoE***REMOVED***pression":
    case "RecordE***REMOVED***pression":
    case "TupleE***REMOVED***pression":
    case "DecimalLiteral":
    case "ModuleE***REMOVED***pression":
    case "TopicReference":
    case "PipelineTopicE***REMOVED***pression":
    case "PipelineBareFunction":
    case "PipelinePrimaryTopicReference":
    case "TSInstantiationE***REMOVED***pression":
    case "TSAsE***REMOVED***pression":
    case "TSSatisfiesE***REMOVED***pression":
    case "TSTypeAssertion":
    case "TSNonNullE***REMOVED***pression":
      break;
    case "Placeholder":
      switch (node.e***REMOVED***pectedNode) {
        case "E***REMOVED***pression":
        case "Identifier":
        case "StringLiteral":
          break;
        default:
          return false;
      }
      break;
    default:
      return false;
  }
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isBinary(node, opts) {
  if (!node) return false;
  switch (node.type) {
    case "BinaryE***REMOVED***pression":
    case "LogicalE***REMOVED***pression":
      break;
    default:
      return false;
  }
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isScopable(node, opts) {
  if (!node) return false;
  switch (node.type) {
    case "BlockStatement":
    case "CatchClause":
    case "DoWhileStatement":
    case "ForInStatement":
    case "ForStatement":
    case "FunctionDeclaration":
    case "FunctionE***REMOVED***pression":
    case "Program":
    case "ObjectMethod":
    case "SwitchStatement":
    case "WhileStatement":
    case "ArrowFunctionE***REMOVED***pression":
    case "ClassE***REMOVED***pression":
    case "ClassDeclaration":
    case "ForOfStatement":
    case "ClassMethod":
    case "ClassPrivateMethod":
    case "StaticBlock":
    case "TSModuleBlock":
      break;
    case "Placeholder":
      if (node.e***REMOVED***pectedNode === "BlockStatement") break;
    default:
      return false;
  }
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isBlockParent(node, opts) {
  if (!node) return false;
  switch (node.type) {
    case "BlockStatement":
    case "CatchClause":
    case "DoWhileStatement":
    case "ForInStatement":
    case "ForStatement":
    case "FunctionDeclaration":
    case "FunctionE***REMOVED***pression":
    case "Program":
    case "ObjectMethod":
    case "SwitchStatement":
    case "WhileStatement":
    case "ArrowFunctionE***REMOVED***pression":
    case "ForOfStatement":
    case "ClassMethod":
    case "ClassPrivateMethod":
    case "StaticBlock":
    case "TSModuleBlock":
      break;
    case "Placeholder":
      if (node.e***REMOVED***pectedNode === "BlockStatement") break;
    default:
      return false;
  }
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isBlock(node, opts) {
  if (!node) return false;
  switch (node.type) {
    case "BlockStatement":
    case "Program":
    case "TSModuleBlock":
      break;
    case "Placeholder":
      if (node.e***REMOVED***pectedNode === "BlockStatement") break;
    default:
      return false;
  }
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isStatement(node, opts) {
  if (!node) return false;
  switch (node.type) {
    case "BlockStatement":
    case "BreakStatement":
    case "ContinueStatement":
    case "DebuggerStatement":
    case "DoWhileStatement":
    case "EmptyStatement":
    case "E***REMOVED***pressionStatement":
    case "ForInStatement":
    case "ForStatement":
    case "FunctionDeclaration":
    case "IfStatement":
    case "LabeledStatement":
    case "ReturnStatement":
    case "SwitchStatement":
    case "ThrowStatement":
    case "TryStatement":
    case "VariableDeclaration":
    case "WhileStatement":
    case "WithStatement":
    case "ClassDeclaration":
    case "E***REMOVED***portAllDeclaration":
    case "E***REMOVED***portDefaultDeclaration":
    case "E***REMOVED***portNamedDeclaration":
    case "ForOfStatement":
    case "ImportDeclaration":
    case "DeclareClass":
    case "DeclareFunction":
    case "DeclareInterface":
    case "DeclareModule":
    case "DeclareModuleE***REMOVED***ports":
    case "DeclareTypeAlias":
    case "DeclareOpaqueType":
    case "DeclareVariable":
    case "DeclareE***REMOVED***portDeclaration":
    case "DeclareE***REMOVED***portAllDeclaration":
    case "InterfaceDeclaration":
    case "OpaqueType":
    case "TypeAlias":
    case "EnumDeclaration":
    case "TSDeclareFunction":
    case "TSInterfaceDeclaration":
    case "TSTypeAliasDeclaration":
    case "TSEnumDeclaration":
    case "TSModuleDeclaration":
    case "TSImportEqualsDeclaration":
    case "TSE***REMOVED***portAssignment":
    case "TSNamespaceE***REMOVED***portDeclaration":
      break;
    case "Placeholder":
      switch (node.e***REMOVED***pectedNode) {
        case "Statement":
        case "Declaration":
        case "BlockStatement":
          break;
        default:
          return false;
      }
      break;
    default:
      return false;
  }
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isTerminatorless(node, opts) {
  if (!node) return false;
  switch (node.type) {
    case "BreakStatement":
    case "ContinueStatement":
    case "ReturnStatement":
    case "ThrowStatement":
    case "YieldE***REMOVED***pression":
    case "AwaitE***REMOVED***pression":
      break;
    default:
      return false;
  }
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isCompletionStatement(node, opts) {
  if (!node) return false;
  switch (node.type) {
    case "BreakStatement":
    case "ContinueStatement":
    case "ReturnStatement":
    case "ThrowStatement":
      break;
    default:
      return false;
  }
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isConditional(node, opts) {
  if (!node) return false;
  switch (node.type) {
    case "ConditionalE***REMOVED***pression":
    case "IfStatement":
      break;
    default:
      return false;
  }
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isLoop(node, opts) {
  if (!node) return false;
  switch (node.type) {
    case "DoWhileStatement":
    case "ForInStatement":
    case "ForStatement":
    case "WhileStatement":
    case "ForOfStatement":
      break;
    default:
      return false;
  }
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isWhile(node, opts) {
  if (!node) return false;
  switch (node.type) {
    case "DoWhileStatement":
    case "WhileStatement":
      break;
    default:
      return false;
  }
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isE***REMOVED***pressionWrapper(node, opts) {
  if (!node) return false;
  switch (node.type) {
    case "E***REMOVED***pressionStatement":
    case "ParenthesizedE***REMOVED***pression":
    case "TypeCastE***REMOVED***pression":
      break;
    default:
      return false;
  }
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isFor(node, opts) {
  if (!node) return false;
  switch (node.type) {
    case "ForInStatement":
    case "ForStatement":
    case "ForOfStatement":
      break;
    default:
      return false;
  }
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isForXStatement(node, opts) {
  if (!node) return false;
  switch (node.type) {
    case "ForInStatement":
    case "ForOfStatement":
      break;
    default:
      return false;
  }
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isFunction(node, opts) {
  if (!node) return false;
  switch (node.type) {
    case "FunctionDeclaration":
    case "FunctionE***REMOVED***pression":
    case "ObjectMethod":
    case "ArrowFunctionE***REMOVED***pression":
    case "ClassMethod":
    case "ClassPrivateMethod":
      break;
    default:
      return false;
  }
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isFunctionParent(node, opts) {
  if (!node) return false;
  switch (node.type) {
    case "FunctionDeclaration":
    case "FunctionE***REMOVED***pression":
    case "ObjectMethod":
    case "ArrowFunctionE***REMOVED***pression":
    case "ClassMethod":
    case "ClassPrivateMethod":
    case "StaticBlock":
    case "TSModuleBlock":
      break;
    default:
      return false;
  }
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isPureish(node, opts) {
  if (!node) return false;
  switch (node.type) {
    case "FunctionDeclaration":
    case "FunctionE***REMOVED***pression":
    case "StringLiteral":
    case "NumericLiteral":
    case "NullLiteral":
    case "BooleanLiteral":
    case "RegE***REMOVED***pLiteral":
    case "ArrowFunctionE***REMOVED***pression":
    case "BigIntLiteral":
    case "DecimalLiteral":
      break;
    case "Placeholder":
      if (node.e***REMOVED***pectedNode === "StringLiteral") break;
    default:
      return false;
  }
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isDeclaration(node, opts) {
  if (!node) return false;
  switch (node.type) {
    case "FunctionDeclaration":
    case "VariableDeclaration":
    case "ClassDeclaration":
    case "E***REMOVED***portAllDeclaration":
    case "E***REMOVED***portDefaultDeclaration":
    case "E***REMOVED***portNamedDeclaration":
    case "ImportDeclaration":
    case "DeclareClass":
    case "DeclareFunction":
    case "DeclareInterface":
    case "DeclareModule":
    case "DeclareModuleE***REMOVED***ports":
    case "DeclareTypeAlias":
    case "DeclareOpaqueType":
    case "DeclareVariable":
    case "DeclareE***REMOVED***portDeclaration":
    case "DeclareE***REMOVED***portAllDeclaration":
    case "InterfaceDeclaration":
    case "OpaqueType":
    case "TypeAlias":
    case "EnumDeclaration":
    case "TSDeclareFunction":
    case "TSInterfaceDeclaration":
    case "TSTypeAliasDeclaration":
    case "TSEnumDeclaration":
    case "TSModuleDeclaration":
      break;
    case "Placeholder":
      if (node.e***REMOVED***pectedNode === "Declaration") break;
    default:
      return false;
  }
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isPatternLike(node, opts) {
  if (!node) return false;
  switch (node.type) {
    case "Identifier":
    case "RestElement":
    case "AssignmentPattern":
    case "ArrayPattern":
    case "ObjectPattern":
    case "TSAsE***REMOVED***pression":
    case "TSSatisfiesE***REMOVED***pression":
    case "TSTypeAssertion":
    case "TSNonNullE***REMOVED***pression":
      break;
    case "Placeholder":
      switch (node.e***REMOVED***pectedNode) {
        case "Pattern":
        case "Identifier":
          break;
        default:
          return false;
      }
      break;
    default:
      return false;
  }
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isLVal(node, opts) {
  if (!node) return false;
  switch (node.type) {
    case "Identifier":
    case "MemberE***REMOVED***pression":
    case "RestElement":
    case "AssignmentPattern":
    case "ArrayPattern":
    case "ObjectPattern":
    case "TSParameterProperty":
    case "TSAsE***REMOVED***pression":
    case "TSSatisfiesE***REMOVED***pression":
    case "TSTypeAssertion":
    case "TSNonNullE***REMOVED***pression":
      break;
    case "Placeholder":
      switch (node.e***REMOVED***pectedNode) {
        case "Pattern":
        case "Identifier":
          break;
        default:
          return false;
      }
      break;
    default:
      return false;
  }
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isTSEntityName(node, opts) {
  if (!node) return false;
  switch (node.type) {
    case "Identifier":
    case "TSQualifiedName":
      break;
    case "Placeholder":
      if (node.e***REMOVED***pectedNode === "Identifier") break;
    default:
      return false;
  }
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isLiteral(node, opts) {
  if (!node) return false;
  switch (node.type) {
    case "StringLiteral":
    case "NumericLiteral":
    case "NullLiteral":
    case "BooleanLiteral":
    case "RegE***REMOVED***pLiteral":
    case "TemplateLiteral":
    case "BigIntLiteral":
    case "DecimalLiteral":
      break;
    case "Placeholder":
      if (node.e***REMOVED***pectedNode === "StringLiteral") break;
    default:
      return false;
  }
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isImmutable(node, opts) {
  if (!node) return false;
  switch (node.type) {
    case "StringLiteral":
    case "NumericLiteral":
    case "NullLiteral":
    case "BooleanLiteral":
    case "BigIntLiteral":
    case "JSXAttribute":
    case "JSXClosingElement":
    case "JSXElement":
    case "JSXE***REMOVED***pressionContainer":
    case "JSXSpreadChild":
    case "JSXOpeningElement":
    case "JSXTe***REMOVED***t":
    case "JSXFragment":
    case "JSXOpeningFragment":
    case "JSXClosingFragment":
    case "DecimalLiteral":
      break;
    case "Placeholder":
      if (node.e***REMOVED***pectedNode === "StringLiteral") break;
    default:
      return false;
  }
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isUserWhitespacable(node, opts) {
  if (!node) return false;
  switch (node.type) {
    case "ObjectMethod":
    case "ObjectProperty":
    case "ObjectTypeInternalSlot":
    case "ObjectTypeCallProperty":
    case "ObjectTypeInde***REMOVED***er":
    case "ObjectTypeProperty":
    case "ObjectTypeSpreadProperty":
      break;
    default:
      return false;
  }
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isMethod(node, opts) {
  if (!node) return false;
  switch (node.type) {
    case "ObjectMethod":
    case "ClassMethod":
    case "ClassPrivateMethod":
      break;
    default:
      return false;
  }
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isObjectMember(node, opts) {
  if (!node) return false;
  switch (node.type) {
    case "ObjectMethod":
    case "ObjectProperty":
      break;
    default:
      return false;
  }
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isProperty(node, opts) {
  if (!node) return false;
  switch (node.type) {
    case "ObjectProperty":
    case "ClassProperty":
    case "ClassAccessorProperty":
    case "ClassPrivateProperty":
      break;
    default:
      return false;
  }
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isUnaryLike(node, opts) {
  if (!node) return false;
  switch (node.type) {
    case "UnaryE***REMOVED***pression":
    case "SpreadElement":
      break;
    default:
      return false;
  }
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isPattern(node, opts) {
  if (!node) return false;
  switch (node.type) {
    case "AssignmentPattern":
    case "ArrayPattern":
    case "ObjectPattern":
      break;
    case "Placeholder":
      if (node.e***REMOVED***pectedNode === "Pattern") break;
    default:
      return false;
  }
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isClass(node, opts) {
  if (!node) return false;
  switch (node.type) {
    case "ClassE***REMOVED***pression":
    case "ClassDeclaration":
      break;
    default:
      return false;
  }
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isImportOrE***REMOVED***portDeclaration(node, opts) {
  if (!node) return false;
  switch (node.type) {
    case "E***REMOVED***portAllDeclaration":
    case "E***REMOVED***portDefaultDeclaration":
    case "E***REMOVED***portNamedDeclaration":
    case "ImportDeclaration":
      break;
    default:
      return false;
  }
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isE***REMOVED***portDeclaration(node, opts) {
  if (!node) return false;
  switch (node.type) {
    case "E***REMOVED***portAllDeclaration":
    case "E***REMOVED***portDefaultDeclaration":
    case "E***REMOVED***portNamedDeclaration":
      break;
    default:
      return false;
  }
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isModuleSpecifier(node, opts) {
  if (!node) return false;
  switch (node.type) {
    case "E***REMOVED***portSpecifier":
    case "ImportDefaultSpecifier":
    case "ImportNamespaceSpecifier":
    case "ImportSpecifier":
    case "E***REMOVED***portNamespaceSpecifier":
    case "E***REMOVED***portDefaultSpecifier":
      break;
    default:
      return false;
  }
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isAccessor(node, opts) {
  if (!node) return false;
  switch (node.type) {
    case "ClassAccessorProperty":
      break;
    default:
      return false;
  }
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isPrivate(node, opts) {
  if (!node) return false;
  switch (node.type) {
    case "ClassPrivateProperty":
    case "ClassPrivateMethod":
    case "PrivateName":
      break;
    default:
      return false;
  }
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isFlow(node, opts) {
  if (!node) return false;
  switch (node.type) {
    case "AnyTypeAnnotation":
    case "ArrayTypeAnnotation":
    case "BooleanTypeAnnotation":
    case "BooleanLiteralTypeAnnotation":
    case "NullLiteralTypeAnnotation":
    case "ClassImplements":
    case "DeclareClass":
    case "DeclareFunction":
    case "DeclareInterface":
    case "DeclareModule":
    case "DeclareModuleE***REMOVED***ports":
    case "DeclareTypeAlias":
    case "DeclareOpaqueType":
    case "DeclareVariable":
    case "DeclareE***REMOVED***portDeclaration":
    case "DeclareE***REMOVED***portAllDeclaration":
    case "DeclaredPredicate":
    case "E***REMOVED***istsTypeAnnotation":
    case "FunctionTypeAnnotation":
    case "FunctionTypeParam":
    case "GenericTypeAnnotation":
    case "InferredPredicate":
    case "InterfaceE***REMOVED***tends":
    case "InterfaceDeclaration":
    case "InterfaceTypeAnnotation":
    case "IntersectionTypeAnnotation":
    case "Mi***REMOVED***edTypeAnnotation":
    case "EmptyTypeAnnotation":
    case "NullableTypeAnnotation":
    case "NumberLiteralTypeAnnotation":
    case "NumberTypeAnnotation":
    case "ObjectTypeAnnotation":
    case "ObjectTypeInternalSlot":
    case "ObjectTypeCallProperty":
    case "ObjectTypeInde***REMOVED***er":
    case "ObjectTypeProperty":
    case "ObjectTypeSpreadProperty":
    case "OpaqueType":
    case "QualifiedTypeIdentifier":
    case "StringLiteralTypeAnnotation":
    case "StringTypeAnnotation":
    case "SymbolTypeAnnotation":
    case "ThisTypeAnnotation":
    case "TupleTypeAnnotation":
    case "TypeofTypeAnnotation":
    case "TypeAlias":
    case "TypeAnnotation":
    case "TypeCastE***REMOVED***pression":
    case "TypeParameter":
    case "TypeParameterDeclaration":
    case "TypeParameterInstantiation":
    case "UnionTypeAnnotation":
    case "Variance":
    case "VoidTypeAnnotation":
    case "EnumDeclaration":
    case "EnumBooleanBody":
    case "EnumNumberBody":
    case "EnumStringBody":
    case "EnumSymbolBody":
    case "EnumBooleanMember":
    case "EnumNumberMember":
    case "EnumStringMember":
    case "EnumDefaultedMember":
    case "Inde***REMOVED***edAccessType":
    case "OptionalInde***REMOVED***edAccessType":
      break;
    default:
      return false;
  }
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isFlowType(node, opts) {
  if (!node) return false;
  switch (node.type) {
    case "AnyTypeAnnotation":
    case "ArrayTypeAnnotation":
    case "BooleanTypeAnnotation":
    case "BooleanLiteralTypeAnnotation":
    case "NullLiteralTypeAnnotation":
    case "E***REMOVED***istsTypeAnnotation":
    case "FunctionTypeAnnotation":
    case "GenericTypeAnnotation":
    case "InterfaceTypeAnnotation":
    case "IntersectionTypeAnnotation":
    case "Mi***REMOVED***edTypeAnnotation":
    case "EmptyTypeAnnotation":
    case "NullableTypeAnnotation":
    case "NumberLiteralTypeAnnotation":
    case "NumberTypeAnnotation":
    case "ObjectTypeAnnotation":
    case "StringLiteralTypeAnnotation":
    case "StringTypeAnnotation":
    case "SymbolTypeAnnotation":
    case "ThisTypeAnnotation":
    case "TupleTypeAnnotation":
    case "TypeofTypeAnnotation":
    case "UnionTypeAnnotation":
    case "VoidTypeAnnotation":
    case "Inde***REMOVED***edAccessType":
    case "OptionalInde***REMOVED***edAccessType":
      break;
    default:
      return false;
  }
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isFlowBaseAnnotation(node, opts) {
  if (!node) return false;
  switch (node.type) {
    case "AnyTypeAnnotation":
    case "BooleanTypeAnnotation":
    case "NullLiteralTypeAnnotation":
    case "Mi***REMOVED***edTypeAnnotation":
    case "EmptyTypeAnnotation":
    case "NumberTypeAnnotation":
    case "StringTypeAnnotation":
    case "SymbolTypeAnnotation":
    case "ThisTypeAnnotation":
    case "VoidTypeAnnotation":
      break;
    default:
      return false;
  }
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isFlowDeclaration(node, opts) {
  if (!node) return false;
  switch (node.type) {
    case "DeclareClass":
    case "DeclareFunction":
    case "DeclareInterface":
    case "DeclareModule":
    case "DeclareModuleE***REMOVED***ports":
    case "DeclareTypeAlias":
    case "DeclareOpaqueType":
    case "DeclareVariable":
    case "DeclareE***REMOVED***portDeclaration":
    case "DeclareE***REMOVED***portAllDeclaration":
    case "InterfaceDeclaration":
    case "OpaqueType":
    case "TypeAlias":
      break;
    default:
      return false;
  }
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isFlowPredicate(node, opts) {
  if (!node) return false;
  switch (node.type) {
    case "DeclaredPredicate":
    case "InferredPredicate":
      break;
    default:
      return false;
  }
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isEnumBody(node, opts) {
  if (!node) return false;
  switch (node.type) {
    case "EnumBooleanBody":
    case "EnumNumberBody":
    case "EnumStringBody":
    case "EnumSymbolBody":
      break;
    default:
      return false;
  }
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isEnumMember(node, opts) {
  if (!node) return false;
  switch (node.type) {
    case "EnumBooleanMember":
    case "EnumNumberMember":
    case "EnumStringMember":
    case "EnumDefaultedMember":
      break;
    default:
      return false;
  }
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isJSX(node, opts) {
  if (!node) return false;
  switch (node.type) {
    case "JSXAttribute":
    case "JSXClosingElement":
    case "JSXElement":
    case "JSXEmptyE***REMOVED***pression":
    case "JSXE***REMOVED***pressionContainer":
    case "JSXSpreadChild":
    case "JSXIdentifier":
    case "JSXMemberE***REMOVED***pression":
    case "JSXNamespacedName":
    case "JSXOpeningElement":
    case "JSXSpreadAttribute":
    case "JSXTe***REMOVED***t":
    case "JSXFragment":
    case "JSXOpeningFragment":
    case "JSXClosingFragment":
      break;
    default:
      return false;
  }
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isMiscellaneous(node, opts) {
  if (!node) return false;
  switch (node.type) {
    case "Noop":
    case "Placeholder":
    case "V8IntrinsicIdentifier":
      break;
    default:
      return false;
  }
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isTypeScript(node, opts) {
  if (!node) return false;
  switch (node.type) {
    case "TSParameterProperty":
    case "TSDeclareFunction":
    case "TSDeclareMethod":
    case "TSQualifiedName":
    case "TSCallSignatureDeclaration":
    case "TSConstructSignatureDeclaration":
    case "TSPropertySignature":
    case "TSMethodSignature":
    case "TSInde***REMOVED***Signature":
    case "TSAnyKeyword":
    case "TSBooleanKeyword":
    case "TSBigIntKeyword":
    case "TSIntrinsicKeyword":
    case "TSNeverKeyword":
    case "TSNullKeyword":
    case "TSNumberKeyword":
    case "TSObjectKeyword":
    case "TSStringKeyword":
    case "TSSymbolKeyword":
    case "TSUndefinedKeyword":
    case "TSUnknownKeyword":
    case "TSVoidKeyword":
    case "TSThisType":
    case "TSFunctionType":
    case "TSConstructorType":
    case "TSTypeReference":
    case "TSTypePredicate":
    case "TSTypeQuery":
    case "TSTypeLiteral":
    case "TSArrayType":
    case "TSTupleType":
    case "TSOptionalType":
    case "TSRestType":
    case "TSNamedTupleMember":
    case "TSUnionType":
    case "TSIntersectionType":
    case "TSConditionalType":
    case "TSInferType":
    case "TSParenthesizedType":
    case "TSTypeOperator":
    case "TSInde***REMOVED***edAccessType":
    case "TSMappedType":
    case "TSLiteralType":
    case "TSE***REMOVED***pressionWithTypeArguments":
    case "TSInterfaceDeclaration":
    case "TSInterfaceBody":
    case "TSTypeAliasDeclaration":
    case "TSInstantiationE***REMOVED***pression":
    case "TSAsE***REMOVED***pression":
    case "TSSatisfiesE***REMOVED***pression":
    case "TSTypeAssertion":
    case "TSEnumDeclaration":
    case "TSEnumMember":
    case "TSModuleDeclaration":
    case "TSModuleBlock":
    case "TSImportType":
    case "TSImportEqualsDeclaration":
    case "TSE***REMOVED***ternalModuleReference":
    case "TSNonNullE***REMOVED***pression":
    case "TSE***REMOVED***portAssignment":
    case "TSNamespaceE***REMOVED***portDeclaration":
    case "TSTypeAnnotation":
    case "TSTypeParameterInstantiation":
    case "TSTypeParameterDeclaration":
    case "TSTypeParameter":
      break;
    default:
      return false;
  }
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isTSTypeElement(node, opts) {
  if (!node) return false;
  switch (node.type) {
    case "TSCallSignatureDeclaration":
    case "TSConstructSignatureDeclaration":
    case "TSPropertySignature":
    case "TSMethodSignature":
    case "TSInde***REMOVED***Signature":
      break;
    default:
      return false;
  }
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isTSType(node, opts) {
  if (!node) return false;
  switch (node.type) {
    case "TSAnyKeyword":
    case "TSBooleanKeyword":
    case "TSBigIntKeyword":
    case "TSIntrinsicKeyword":
    case "TSNeverKeyword":
    case "TSNullKeyword":
    case "TSNumberKeyword":
    case "TSObjectKeyword":
    case "TSStringKeyword":
    case "TSSymbolKeyword":
    case "TSUndefinedKeyword":
    case "TSUnknownKeyword":
    case "TSVoidKeyword":
    case "TSThisType":
    case "TSFunctionType":
    case "TSConstructorType":
    case "TSTypeReference":
    case "TSTypePredicate":
    case "TSTypeQuery":
    case "TSTypeLiteral":
    case "TSArrayType":
    case "TSTupleType":
    case "TSOptionalType":
    case "TSRestType":
    case "TSUnionType":
    case "TSIntersectionType":
    case "TSConditionalType":
    case "TSInferType":
    case "TSParenthesizedType":
    case "TSTypeOperator":
    case "TSInde***REMOVED***edAccessType":
    case "TSMappedType":
    case "TSLiteralType":
    case "TSE***REMOVED***pressionWithTypeArguments":
    case "TSImportType":
      break;
    default:
      return false;
  }
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isTSBaseType(node, opts) {
  if (!node) return false;
  switch (node.type) {
    case "TSAnyKeyword":
    case "TSBooleanKeyword":
    case "TSBigIntKeyword":
    case "TSIntrinsicKeyword":
    case "TSNeverKeyword":
    case "TSNullKeyword":
    case "TSNumberKeyword":
    case "TSObjectKeyword":
    case "TSStringKeyword":
    case "TSSymbolKeyword":
    case "TSUndefinedKeyword":
    case "TSUnknownKeyword":
    case "TSVoidKeyword":
    case "TSThisType":
    case "TSLiteralType":
      break;
    default:
      return false;
  }
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isNumberLiteral(node, opts) {
  (0, _deprecationWarning.default)("isNumberLiteral", "isNumericLiteral");
  if (!node) return false;
  if (node.type !== "NumberLiteral") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isRege***REMOVED***Literal(node, opts) {
  (0, _deprecationWarning.default)("isRege***REMOVED***Literal", "isRegE***REMOVED***pLiteral");
  if (!node) return false;
  if (node.type !== "Rege***REMOVED***Literal") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isRestProperty(node, opts) {
  (0, _deprecationWarning.default)("isRestProperty", "isRestElement");
  if (!node) return false;
  if (node.type !== "RestProperty") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isSpreadProperty(node, opts) {
  (0, _deprecationWarning.default)("isSpreadProperty", "isSpreadElement");
  if (!node) return false;
  if (node.type !== "SpreadProperty") return false;
  return opts == null || (0, _shallowEqual.default)(node, opts);
}
function isModuleDeclaration(node, opts) {
  (0, _deprecationWarning.default)("isModuleDeclaration", "isImportOrE***REMOVED***portDeclaration");
  return isImportOrE***REMOVED***portDeclaration(node, opts);
}

//# sourceMappingURL=inde***REMOVED***.js.map
