"use strict";

Object.defineProperty(e***REMOVED***ports, "__esModule", {
  value: true
});
e***REMOVED***ports.assertAccessor = assertAccessor;
e***REMOVED***ports.assertAnyTypeAnnotation = assertAnyTypeAnnotation;
e***REMOVED***ports.assertArgumentPlaceholder = assertArgumentPlaceholder;
e***REMOVED***ports.assertArrayE***REMOVED***pression = assertArrayE***REMOVED***pression;
e***REMOVED***ports.assertArrayPattern = assertArrayPattern;
e***REMOVED***ports.assertArrayTypeAnnotation = assertArrayTypeAnnotation;
e***REMOVED***ports.assertArrowFunctionE***REMOVED***pression = assertArrowFunctionE***REMOVED***pression;
e***REMOVED***ports.assertAssignmentE***REMOVED***pression = assertAssignmentE***REMOVED***pression;
e***REMOVED***ports.assertAssignmentPattern = assertAssignmentPattern;
e***REMOVED***ports.assertAwaitE***REMOVED***pression = assertAwaitE***REMOVED***pression;
e***REMOVED***ports.assertBigIntLiteral = assertBigIntLiteral;
e***REMOVED***ports.assertBinary = assertBinary;
e***REMOVED***ports.assertBinaryE***REMOVED***pression = assertBinaryE***REMOVED***pression;
e***REMOVED***ports.assertBindE***REMOVED***pression = assertBindE***REMOVED***pression;
e***REMOVED***ports.assertBlock = assertBlock;
e***REMOVED***ports.assertBlockParent = assertBlockParent;
e***REMOVED***ports.assertBlockStatement = assertBlockStatement;
e***REMOVED***ports.assertBooleanLiteral = assertBooleanLiteral;
e***REMOVED***ports.assertBooleanLiteralTypeAnnotation = assertBooleanLiteralTypeAnnotation;
e***REMOVED***ports.assertBooleanTypeAnnotation = assertBooleanTypeAnnotation;
e***REMOVED***ports.assertBreakStatement = assertBreakStatement;
e***REMOVED***ports.assertCallE***REMOVED***pression = assertCallE***REMOVED***pression;
e***REMOVED***ports.assertCatchClause = assertCatchClause;
e***REMOVED***ports.assertClass = assertClass;
e***REMOVED***ports.assertClassAccessorProperty = assertClassAccessorProperty;
e***REMOVED***ports.assertClassBody = assertClassBody;
e***REMOVED***ports.assertClassDeclaration = assertClassDeclaration;
e***REMOVED***ports.assertClassE***REMOVED***pression = assertClassE***REMOVED***pression;
e***REMOVED***ports.assertClassImplements = assertClassImplements;
e***REMOVED***ports.assertClassMethod = assertClassMethod;
e***REMOVED***ports.assertClassPrivateMethod = assertClassPrivateMethod;
e***REMOVED***ports.assertClassPrivateProperty = assertClassPrivateProperty;
e***REMOVED***ports.assertClassProperty = assertClassProperty;
e***REMOVED***ports.assertCompletionStatement = assertCompletionStatement;
e***REMOVED***ports.assertConditional = assertConditional;
e***REMOVED***ports.assertConditionalE***REMOVED***pression = assertConditionalE***REMOVED***pression;
e***REMOVED***ports.assertContinueStatement = assertContinueStatement;
e***REMOVED***ports.assertDebuggerStatement = assertDebuggerStatement;
e***REMOVED***ports.assertDecimalLiteral = assertDecimalLiteral;
e***REMOVED***ports.assertDeclaration = assertDeclaration;
e***REMOVED***ports.assertDeclareClass = assertDeclareClass;
e***REMOVED***ports.assertDeclareE***REMOVED***portAllDeclaration = assertDeclareE***REMOVED***portAllDeclaration;
e***REMOVED***ports.assertDeclareE***REMOVED***portDeclaration = assertDeclareE***REMOVED***portDeclaration;
e***REMOVED***ports.assertDeclareFunction = assertDeclareFunction;
e***REMOVED***ports.assertDeclareInterface = assertDeclareInterface;
e***REMOVED***ports.assertDeclareModule = assertDeclareModule;
e***REMOVED***ports.assertDeclareModuleE***REMOVED***ports = assertDeclareModuleE***REMOVED***ports;
e***REMOVED***ports.assertDeclareOpaqueType = assertDeclareOpaqueType;
e***REMOVED***ports.assertDeclareTypeAlias = assertDeclareTypeAlias;
e***REMOVED***ports.assertDeclareVariable = assertDeclareVariable;
e***REMOVED***ports.assertDeclaredPredicate = assertDeclaredPredicate;
e***REMOVED***ports.assertDecorator = assertDecorator;
e***REMOVED***ports.assertDirective = assertDirective;
e***REMOVED***ports.assertDirectiveLiteral = assertDirectiveLiteral;
e***REMOVED***ports.assertDoE***REMOVED***pression = assertDoE***REMOVED***pression;
e***REMOVED***ports.assertDoWhileStatement = assertDoWhileStatement;
e***REMOVED***ports.assertEmptyStatement = assertEmptyStatement;
e***REMOVED***ports.assertEmptyTypeAnnotation = assertEmptyTypeAnnotation;
e***REMOVED***ports.assertEnumBody = assertEnumBody;
e***REMOVED***ports.assertEnumBooleanBody = assertEnumBooleanBody;
e***REMOVED***ports.assertEnumBooleanMember = assertEnumBooleanMember;
e***REMOVED***ports.assertEnumDeclaration = assertEnumDeclaration;
e***REMOVED***ports.assertEnumDefaultedMember = assertEnumDefaultedMember;
e***REMOVED***ports.assertEnumMember = assertEnumMember;
e***REMOVED***ports.assertEnumNumberBody = assertEnumNumberBody;
e***REMOVED***ports.assertEnumNumberMember = assertEnumNumberMember;
e***REMOVED***ports.assertEnumStringBody = assertEnumStringBody;
e***REMOVED***ports.assertEnumStringMember = assertEnumStringMember;
e***REMOVED***ports.assertEnumSymbolBody = assertEnumSymbolBody;
e***REMOVED***ports.assertE***REMOVED***istsTypeAnnotation = assertE***REMOVED***istsTypeAnnotation;
e***REMOVED***ports.assertE***REMOVED***portAllDeclaration = assertE***REMOVED***portAllDeclaration;
e***REMOVED***ports.assertE***REMOVED***portDeclaration = assertE***REMOVED***portDeclaration;
e***REMOVED***ports.assertE***REMOVED***portDefaultDeclaration = assertE***REMOVED***portDefaultDeclaration;
e***REMOVED***ports.assertE***REMOVED***portDefaultSpecifier = assertE***REMOVED***portDefaultSpecifier;
e***REMOVED***ports.assertE***REMOVED***portNamedDeclaration = assertE***REMOVED***portNamedDeclaration;
e***REMOVED***ports.assertE***REMOVED***portNamespaceSpecifier = assertE***REMOVED***portNamespaceSpecifier;
e***REMOVED***ports.assertE***REMOVED***portSpecifier = assertE***REMOVED***portSpecifier;
e***REMOVED***ports.assertE***REMOVED***pression = assertE***REMOVED***pression;
e***REMOVED***ports.assertE***REMOVED***pressionStatement = assertE***REMOVED***pressionStatement;
e***REMOVED***ports.assertE***REMOVED***pressionWrapper = assertE***REMOVED***pressionWrapper;
e***REMOVED***ports.assertFile = assertFile;
e***REMOVED***ports.assertFlow = assertFlow;
e***REMOVED***ports.assertFlowBaseAnnotation = assertFlowBaseAnnotation;
e***REMOVED***ports.assertFlowDeclaration = assertFlowDeclaration;
e***REMOVED***ports.assertFlowPredicate = assertFlowPredicate;
e***REMOVED***ports.assertFlowType = assertFlowType;
e***REMOVED***ports.assertFor = assertFor;
e***REMOVED***ports.assertForInStatement = assertForInStatement;
e***REMOVED***ports.assertForOfStatement = assertForOfStatement;
e***REMOVED***ports.assertForStatement = assertForStatement;
e***REMOVED***ports.assertForXStatement = assertForXStatement;
e***REMOVED***ports.assertFunction = assertFunction;
e***REMOVED***ports.assertFunctionDeclaration = assertFunctionDeclaration;
e***REMOVED***ports.assertFunctionE***REMOVED***pression = assertFunctionE***REMOVED***pression;
e***REMOVED***ports.assertFunctionParent = assertFunctionParent;
e***REMOVED***ports.assertFunctionTypeAnnotation = assertFunctionTypeAnnotation;
e***REMOVED***ports.assertFunctionTypeParam = assertFunctionTypeParam;
e***REMOVED***ports.assertGenericTypeAnnotation = assertGenericTypeAnnotation;
e***REMOVED***ports.assertIdentifier = assertIdentifier;
e***REMOVED***ports.assertIfStatement = assertIfStatement;
e***REMOVED***ports.assertImmutable = assertImmutable;
e***REMOVED***ports.assertImport = assertImport;
e***REMOVED***ports.assertImportAttribute = assertImportAttribute;
e***REMOVED***ports.assertImportDeclaration = assertImportDeclaration;
e***REMOVED***ports.assertImportDefaultSpecifier = assertImportDefaultSpecifier;
e***REMOVED***ports.assertImportE***REMOVED***pression = assertImportE***REMOVED***pression;
e***REMOVED***ports.assertImportNamespaceSpecifier = assertImportNamespaceSpecifier;
e***REMOVED***ports.assertImportOrE***REMOVED***portDeclaration = assertImportOrE***REMOVED***portDeclaration;
e***REMOVED***ports.assertImportSpecifier = assertImportSpecifier;
e***REMOVED***ports.assertInde***REMOVED***edAccessType = assertInde***REMOVED***edAccessType;
e***REMOVED***ports.assertInferredPredicate = assertInferredPredicate;
e***REMOVED***ports.assertInterfaceDeclaration = assertInterfaceDeclaration;
e***REMOVED***ports.assertInterfaceE***REMOVED***tends = assertInterfaceE***REMOVED***tends;
e***REMOVED***ports.assertInterfaceTypeAnnotation = assertInterfaceTypeAnnotation;
e***REMOVED***ports.assertInterpreterDirective = assertInterpreterDirective;
e***REMOVED***ports.assertIntersectionTypeAnnotation = assertIntersectionTypeAnnotation;
e***REMOVED***ports.assertJSX = assertJSX;
e***REMOVED***ports.assertJSXAttribute = assertJSXAttribute;
e***REMOVED***ports.assertJSXClosingElement = assertJSXClosingElement;
e***REMOVED***ports.assertJSXClosingFragment = assertJSXClosingFragment;
e***REMOVED***ports.assertJSXElement = assertJSXElement;
e***REMOVED***ports.assertJSXEmptyE***REMOVED***pression = assertJSXEmptyE***REMOVED***pression;
e***REMOVED***ports.assertJSXE***REMOVED***pressionContainer = assertJSXE***REMOVED***pressionContainer;
e***REMOVED***ports.assertJSXFragment = assertJSXFragment;
e***REMOVED***ports.assertJSXIdentifier = assertJSXIdentifier;
e***REMOVED***ports.assertJSXMemberE***REMOVED***pression = assertJSXMemberE***REMOVED***pression;
e***REMOVED***ports.assertJSXNamespacedName = assertJSXNamespacedName;
e***REMOVED***ports.assertJSXOpeningElement = assertJSXOpeningElement;
e***REMOVED***ports.assertJSXOpeningFragment = assertJSXOpeningFragment;
e***REMOVED***ports.assertJSXSpreadAttribute = assertJSXSpreadAttribute;
e***REMOVED***ports.assertJSXSpreadChild = assertJSXSpreadChild;
e***REMOVED***ports.assertJSXTe***REMOVED***t = assertJSXTe***REMOVED***t;
e***REMOVED***ports.assertLVal = assertLVal;
e***REMOVED***ports.assertLabeledStatement = assertLabeledStatement;
e***REMOVED***ports.assertLiteral = assertLiteral;
e***REMOVED***ports.assertLogicalE***REMOVED***pression = assertLogicalE***REMOVED***pression;
e***REMOVED***ports.assertLoop = assertLoop;
e***REMOVED***ports.assertMemberE***REMOVED***pression = assertMemberE***REMOVED***pression;
e***REMOVED***ports.assertMetaProperty = assertMetaProperty;
e***REMOVED***ports.assertMethod = assertMethod;
e***REMOVED***ports.assertMiscellaneous = assertMiscellaneous;
e***REMOVED***ports.assertMi***REMOVED***edTypeAnnotation = assertMi***REMOVED***edTypeAnnotation;
e***REMOVED***ports.assertModuleDeclaration = assertModuleDeclaration;
e***REMOVED***ports.assertModuleE***REMOVED***pression = assertModuleE***REMOVED***pression;
e***REMOVED***ports.assertModuleSpecifier = assertModuleSpecifier;
e***REMOVED***ports.assertNewE***REMOVED***pression = assertNewE***REMOVED***pression;
e***REMOVED***ports.assertNoop = assertNoop;
e***REMOVED***ports.assertNullLiteral = assertNullLiteral;
e***REMOVED***ports.assertNullLiteralTypeAnnotation = assertNullLiteralTypeAnnotation;
e***REMOVED***ports.assertNullableTypeAnnotation = assertNullableTypeAnnotation;
e***REMOVED***ports.assertNumberLiteral = assertNumberLiteral;
e***REMOVED***ports.assertNumberLiteralTypeAnnotation = assertNumberLiteralTypeAnnotation;
e***REMOVED***ports.assertNumberTypeAnnotation = assertNumberTypeAnnotation;
e***REMOVED***ports.assertNumericLiteral = assertNumericLiteral;
e***REMOVED***ports.assertObjectE***REMOVED***pression = assertObjectE***REMOVED***pression;
e***REMOVED***ports.assertObjectMember = assertObjectMember;
e***REMOVED***ports.assertObjectMethod = assertObjectMethod;
e***REMOVED***ports.assertObjectPattern = assertObjectPattern;
e***REMOVED***ports.assertObjectProperty = assertObjectProperty;
e***REMOVED***ports.assertObjectTypeAnnotation = assertObjectTypeAnnotation;
e***REMOVED***ports.assertObjectTypeCallProperty = assertObjectTypeCallProperty;
e***REMOVED***ports.assertObjectTypeInde***REMOVED***er = assertObjectTypeInde***REMOVED***er;
e***REMOVED***ports.assertObjectTypeInternalSlot = assertObjectTypeInternalSlot;
e***REMOVED***ports.assertObjectTypeProperty = assertObjectTypeProperty;
e***REMOVED***ports.assertObjectTypeSpreadProperty = assertObjectTypeSpreadProperty;
e***REMOVED***ports.assertOpaqueType = assertOpaqueType;
e***REMOVED***ports.assertOptionalCallE***REMOVED***pression = assertOptionalCallE***REMOVED***pression;
e***REMOVED***ports.assertOptionalInde***REMOVED***edAccessType = assertOptionalInde***REMOVED***edAccessType;
e***REMOVED***ports.assertOptionalMemberE***REMOVED***pression = assertOptionalMemberE***REMOVED***pression;
e***REMOVED***ports.assertParenthesizedE***REMOVED***pression = assertParenthesizedE***REMOVED***pression;
e***REMOVED***ports.assertPattern = assertPattern;
e***REMOVED***ports.assertPatternLike = assertPatternLike;
e***REMOVED***ports.assertPipelineBareFunction = assertPipelineBareFunction;
e***REMOVED***ports.assertPipelinePrimaryTopicReference = assertPipelinePrimaryTopicReference;
e***REMOVED***ports.assertPipelineTopicE***REMOVED***pression = assertPipelineTopicE***REMOVED***pression;
e***REMOVED***ports.assertPlaceholder = assertPlaceholder;
e***REMOVED***ports.assertPrivate = assertPrivate;
e***REMOVED***ports.assertPrivateName = assertPrivateName;
e***REMOVED***ports.assertProgram = assertProgram;
e***REMOVED***ports.assertProperty = assertProperty;
e***REMOVED***ports.assertPureish = assertPureish;
e***REMOVED***ports.assertQualifiedTypeIdentifier = assertQualifiedTypeIdentifier;
e***REMOVED***ports.assertRecordE***REMOVED***pression = assertRecordE***REMOVED***pression;
e***REMOVED***ports.assertRegE***REMOVED***pLiteral = assertRegE***REMOVED***pLiteral;
e***REMOVED***ports.assertRege***REMOVED***Literal = assertRege***REMOVED***Literal;
e***REMOVED***ports.assertRestElement = assertRestElement;
e***REMOVED***ports.assertRestProperty = assertRestProperty;
e***REMOVED***ports.assertReturnStatement = assertReturnStatement;
e***REMOVED***ports.assertScopable = assertScopable;
e***REMOVED***ports.assertSequenceE***REMOVED***pression = assertSequenceE***REMOVED***pression;
e***REMOVED***ports.assertSpreadElement = assertSpreadElement;
e***REMOVED***ports.assertSpreadProperty = assertSpreadProperty;
e***REMOVED***ports.assertStandardized = assertStandardized;
e***REMOVED***ports.assertStatement = assertStatement;
e***REMOVED***ports.assertStaticBlock = assertStaticBlock;
e***REMOVED***ports.assertStringLiteral = assertStringLiteral;
e***REMOVED***ports.assertStringLiteralTypeAnnotation = assertStringLiteralTypeAnnotation;
e***REMOVED***ports.assertStringTypeAnnotation = assertStringTypeAnnotation;
e***REMOVED***ports.assertSuper = assertSuper;
e***REMOVED***ports.assertSwitchCase = assertSwitchCase;
e***REMOVED***ports.assertSwitchStatement = assertSwitchStatement;
e***REMOVED***ports.assertSymbolTypeAnnotation = assertSymbolTypeAnnotation;
e***REMOVED***ports.assertTSAnyKeyword = assertTSAnyKeyword;
e***REMOVED***ports.assertTSArrayType = assertTSArrayType;
e***REMOVED***ports.assertTSAsE***REMOVED***pression = assertTSAsE***REMOVED***pression;
e***REMOVED***ports.assertTSBaseType = assertTSBaseType;
e***REMOVED***ports.assertTSBigIntKeyword = assertTSBigIntKeyword;
e***REMOVED***ports.assertTSBooleanKeyword = assertTSBooleanKeyword;
e***REMOVED***ports.assertTSCallSignatureDeclaration = assertTSCallSignatureDeclaration;
e***REMOVED***ports.assertTSConditionalType = assertTSConditionalType;
e***REMOVED***ports.assertTSConstructSignatureDeclaration = assertTSConstructSignatureDeclaration;
e***REMOVED***ports.assertTSConstructorType = assertTSConstructorType;
e***REMOVED***ports.assertTSDeclareFunction = assertTSDeclareFunction;
e***REMOVED***ports.assertTSDeclareMethod = assertTSDeclareMethod;
e***REMOVED***ports.assertTSEntityName = assertTSEntityName;
e***REMOVED***ports.assertTSEnumDeclaration = assertTSEnumDeclaration;
e***REMOVED***ports.assertTSEnumMember = assertTSEnumMember;
e***REMOVED***ports.assertTSE***REMOVED***portAssignment = assertTSE***REMOVED***portAssignment;
e***REMOVED***ports.assertTSE***REMOVED***pressionWithTypeArguments = assertTSE***REMOVED***pressionWithTypeArguments;
e***REMOVED***ports.assertTSE***REMOVED***ternalModuleReference = assertTSE***REMOVED***ternalModuleReference;
e***REMOVED***ports.assertTSFunctionType = assertTSFunctionType;
e***REMOVED***ports.assertTSImportEqualsDeclaration = assertTSImportEqualsDeclaration;
e***REMOVED***ports.assertTSImportType = assertTSImportType;
e***REMOVED***ports.assertTSInde***REMOVED***Signature = assertTSInde***REMOVED***Signature;
e***REMOVED***ports.assertTSInde***REMOVED***edAccessType = assertTSInde***REMOVED***edAccessType;
e***REMOVED***ports.assertTSInferType = assertTSInferType;
e***REMOVED***ports.assertTSInstantiationE***REMOVED***pression = assertTSInstantiationE***REMOVED***pression;
e***REMOVED***ports.assertTSInterfaceBody = assertTSInterfaceBody;
e***REMOVED***ports.assertTSInterfaceDeclaration = assertTSInterfaceDeclaration;
e***REMOVED***ports.assertTSIntersectionType = assertTSIntersectionType;
e***REMOVED***ports.assertTSIntrinsicKeyword = assertTSIntrinsicKeyword;
e***REMOVED***ports.assertTSLiteralType = assertTSLiteralType;
e***REMOVED***ports.assertTSMappedType = assertTSMappedType;
e***REMOVED***ports.assertTSMethodSignature = assertTSMethodSignature;
e***REMOVED***ports.assertTSModuleBlock = assertTSModuleBlock;
e***REMOVED***ports.assertTSModuleDeclaration = assertTSModuleDeclaration;
e***REMOVED***ports.assertTSNamedTupleMember = assertTSNamedTupleMember;
e***REMOVED***ports.assertTSNamespaceE***REMOVED***portDeclaration = assertTSNamespaceE***REMOVED***portDeclaration;
e***REMOVED***ports.assertTSNeverKeyword = assertTSNeverKeyword;
e***REMOVED***ports.assertTSNonNullE***REMOVED***pression = assertTSNonNullE***REMOVED***pression;
e***REMOVED***ports.assertTSNullKeyword = assertTSNullKeyword;
e***REMOVED***ports.assertTSNumberKeyword = assertTSNumberKeyword;
e***REMOVED***ports.assertTSObjectKeyword = assertTSObjectKeyword;
e***REMOVED***ports.assertTSOptionalType = assertTSOptionalType;
e***REMOVED***ports.assertTSParameterProperty = assertTSParameterProperty;
e***REMOVED***ports.assertTSParenthesizedType = assertTSParenthesizedType;
e***REMOVED***ports.assertTSPropertySignature = assertTSPropertySignature;
e***REMOVED***ports.assertTSQualifiedName = assertTSQualifiedName;
e***REMOVED***ports.assertTSRestType = assertTSRestType;
e***REMOVED***ports.assertTSSatisfiesE***REMOVED***pression = assertTSSatisfiesE***REMOVED***pression;
e***REMOVED***ports.assertTSStringKeyword = assertTSStringKeyword;
e***REMOVED***ports.assertTSSymbolKeyword = assertTSSymbolKeyword;
e***REMOVED***ports.assertTSThisType = assertTSThisType;
e***REMOVED***ports.assertTSTupleType = assertTSTupleType;
e***REMOVED***ports.assertTSType = assertTSType;
e***REMOVED***ports.assertTSTypeAliasDeclaration = assertTSTypeAliasDeclaration;
e***REMOVED***ports.assertTSTypeAnnotation = assertTSTypeAnnotation;
e***REMOVED***ports.assertTSTypeAssertion = assertTSTypeAssertion;
e***REMOVED***ports.assertTSTypeElement = assertTSTypeElement;
e***REMOVED***ports.assertTSTypeLiteral = assertTSTypeLiteral;
e***REMOVED***ports.assertTSTypeOperator = assertTSTypeOperator;
e***REMOVED***ports.assertTSTypeParameter = assertTSTypeParameter;
e***REMOVED***ports.assertTSTypeParameterDeclaration = assertTSTypeParameterDeclaration;
e***REMOVED***ports.assertTSTypeParameterInstantiation = assertTSTypeParameterInstantiation;
e***REMOVED***ports.assertTSTypePredicate = assertTSTypePredicate;
e***REMOVED***ports.assertTSTypeQuery = assertTSTypeQuery;
e***REMOVED***ports.assertTSTypeReference = assertTSTypeReference;
e***REMOVED***ports.assertTSUndefinedKeyword = assertTSUndefinedKeyword;
e***REMOVED***ports.assertTSUnionType = assertTSUnionType;
e***REMOVED***ports.assertTSUnknownKeyword = assertTSUnknownKeyword;
e***REMOVED***ports.assertTSVoidKeyword = assertTSVoidKeyword;
e***REMOVED***ports.assertTaggedTemplateE***REMOVED***pression = assertTaggedTemplateE***REMOVED***pression;
e***REMOVED***ports.assertTemplateElement = assertTemplateElement;
e***REMOVED***ports.assertTemplateLiteral = assertTemplateLiteral;
e***REMOVED***ports.assertTerminatorless = assertTerminatorless;
e***REMOVED***ports.assertThisE***REMOVED***pression = assertThisE***REMOVED***pression;
e***REMOVED***ports.assertThisTypeAnnotation = assertThisTypeAnnotation;
e***REMOVED***ports.assertThrowStatement = assertThrowStatement;
e***REMOVED***ports.assertTopicReference = assertTopicReference;
e***REMOVED***ports.assertTryStatement = assertTryStatement;
e***REMOVED***ports.assertTupleE***REMOVED***pression = assertTupleE***REMOVED***pression;
e***REMOVED***ports.assertTupleTypeAnnotation = assertTupleTypeAnnotation;
e***REMOVED***ports.assertTypeAlias = assertTypeAlias;
e***REMOVED***ports.assertTypeAnnotation = assertTypeAnnotation;
e***REMOVED***ports.assertTypeCastE***REMOVED***pression = assertTypeCastE***REMOVED***pression;
e***REMOVED***ports.assertTypeParameter = assertTypeParameter;
e***REMOVED***ports.assertTypeParameterDeclaration = assertTypeParameterDeclaration;
e***REMOVED***ports.assertTypeParameterInstantiation = assertTypeParameterInstantiation;
e***REMOVED***ports.assertTypeScript = assertTypeScript;
e***REMOVED***ports.assertTypeofTypeAnnotation = assertTypeofTypeAnnotation;
e***REMOVED***ports.assertUnaryE***REMOVED***pression = assertUnaryE***REMOVED***pression;
e***REMOVED***ports.assertUnaryLike = assertUnaryLike;
e***REMOVED***ports.assertUnionTypeAnnotation = assertUnionTypeAnnotation;
e***REMOVED***ports.assertUpdateE***REMOVED***pression = assertUpdateE***REMOVED***pression;
e***REMOVED***ports.assertUserWhitespacable = assertUserWhitespacable;
e***REMOVED***ports.assertV8IntrinsicIdentifier = assertV8IntrinsicIdentifier;
e***REMOVED***ports.assertVariableDeclaration = assertVariableDeclaration;
e***REMOVED***ports.assertVariableDeclarator = assertVariableDeclarator;
e***REMOVED***ports.assertVariance = assertVariance;
e***REMOVED***ports.assertVoidTypeAnnotation = assertVoidTypeAnnotation;
e***REMOVED***ports.assertWhile = assertWhile;
e***REMOVED***ports.assertWhileStatement = assertWhileStatement;
e***REMOVED***ports.assertWithStatement = assertWithStatement;
e***REMOVED***ports.assertYieldE***REMOVED***pression = assertYieldE***REMOVED***pression;
var _is = require("../../validators/is.js");
var _deprecationWarning = require("../../utils/deprecationWarning.js");
function assert(type, node, opts) {
  if (!(0, _is.default)(type, node, opts)) {
    throw new Error(`E***REMOVED***pected type "${type}" with option ${JSON.stringify(opts)}, ` + `but instead got "${node.type}".`);
  }
}
function assertArrayE***REMOVED***pression(node, opts) {
  assert("ArrayE***REMOVED***pression", node, opts);
}
function assertAssignmentE***REMOVED***pression(node, opts) {
  assert("AssignmentE***REMOVED***pression", node, opts);
}
function assertBinaryE***REMOVED***pression(node, opts) {
  assert("BinaryE***REMOVED***pression", node, opts);
}
function assertInterpreterDirective(node, opts) {
  assert("InterpreterDirective", node, opts);
}
function assertDirective(node, opts) {
  assert("Directive", node, opts);
}
function assertDirectiveLiteral(node, opts) {
  assert("DirectiveLiteral", node, opts);
}
function assertBlockStatement(node, opts) {
  assert("BlockStatement", node, opts);
}
function assertBreakStatement(node, opts) {
  assert("BreakStatement", node, opts);
}
function assertCallE***REMOVED***pression(node, opts) {
  assert("CallE***REMOVED***pression", node, opts);
}
function assertCatchClause(node, opts) {
  assert("CatchClause", node, opts);
}
function assertConditionalE***REMOVED***pression(node, opts) {
  assert("ConditionalE***REMOVED***pression", node, opts);
}
function assertContinueStatement(node, opts) {
  assert("ContinueStatement", node, opts);
}
function assertDebuggerStatement(node, opts) {
  assert("DebuggerStatement", node, opts);
}
function assertDoWhileStatement(node, opts) {
  assert("DoWhileStatement", node, opts);
}
function assertEmptyStatement(node, opts) {
  assert("EmptyStatement", node, opts);
}
function assertE***REMOVED***pressionStatement(node, opts) {
  assert("E***REMOVED***pressionStatement", node, opts);
}
function assertFile(node, opts) {
  assert("File", node, opts);
}
function assertForInStatement(node, opts) {
  assert("ForInStatement", node, opts);
}
function assertForStatement(node, opts) {
  assert("ForStatement", node, opts);
}
function assertFunctionDeclaration(node, opts) {
  assert("FunctionDeclaration", node, opts);
}
function assertFunctionE***REMOVED***pression(node, opts) {
  assert("FunctionE***REMOVED***pression", node, opts);
}
function assertIdentifier(node, opts) {
  assert("Identifier", node, opts);
}
function assertIfStatement(node, opts) {
  assert("IfStatement", node, opts);
}
function assertLabeledStatement(node, opts) {
  assert("LabeledStatement", node, opts);
}
function assertStringLiteral(node, opts) {
  assert("StringLiteral", node, opts);
}
function assertNumericLiteral(node, opts) {
  assert("NumericLiteral", node, opts);
}
function assertNullLiteral(node, opts) {
  assert("NullLiteral", node, opts);
}
function assertBooleanLiteral(node, opts) {
  assert("BooleanLiteral", node, opts);
}
function assertRegE***REMOVED***pLiteral(node, opts) {
  assert("RegE***REMOVED***pLiteral", node, opts);
}
function assertLogicalE***REMOVED***pression(node, opts) {
  assert("LogicalE***REMOVED***pression", node, opts);
}
function assertMemberE***REMOVED***pression(node, opts) {
  assert("MemberE***REMOVED***pression", node, opts);
}
function assertNewE***REMOVED***pression(node, opts) {
  assert("NewE***REMOVED***pression", node, opts);
}
function assertProgram(node, opts) {
  assert("Program", node, opts);
}
function assertObjectE***REMOVED***pression(node, opts) {
  assert("ObjectE***REMOVED***pression", node, opts);
}
function assertObjectMethod(node, opts) {
  assert("ObjectMethod", node, opts);
}
function assertObjectProperty(node, opts) {
  assert("ObjectProperty", node, opts);
}
function assertRestElement(node, opts) {
  assert("RestElement", node, opts);
}
function assertReturnStatement(node, opts) {
  assert("ReturnStatement", node, opts);
}
function assertSequenceE***REMOVED***pression(node, opts) {
  assert("SequenceE***REMOVED***pression", node, opts);
}
function assertParenthesizedE***REMOVED***pression(node, opts) {
  assert("ParenthesizedE***REMOVED***pression", node, opts);
}
function assertSwitchCase(node, opts) {
  assert("SwitchCase", node, opts);
}
function assertSwitchStatement(node, opts) {
  assert("SwitchStatement", node, opts);
}
function assertThisE***REMOVED***pression(node, opts) {
  assert("ThisE***REMOVED***pression", node, opts);
}
function assertThrowStatement(node, opts) {
  assert("ThrowStatement", node, opts);
}
function assertTryStatement(node, opts) {
  assert("TryStatement", node, opts);
}
function assertUnaryE***REMOVED***pression(node, opts) {
  assert("UnaryE***REMOVED***pression", node, opts);
}
function assertUpdateE***REMOVED***pression(node, opts) {
  assert("UpdateE***REMOVED***pression", node, opts);
}
function assertVariableDeclaration(node, opts) {
  assert("VariableDeclaration", node, opts);
}
function assertVariableDeclarator(node, opts) {
  assert("VariableDeclarator", node, opts);
}
function assertWhileStatement(node, opts) {
  assert("WhileStatement", node, opts);
}
function assertWithStatement(node, opts) {
  assert("WithStatement", node, opts);
}
function assertAssignmentPattern(node, opts) {
  assert("AssignmentPattern", node, opts);
}
function assertArrayPattern(node, opts) {
  assert("ArrayPattern", node, opts);
}
function assertArrowFunctionE***REMOVED***pression(node, opts) {
  assert("ArrowFunctionE***REMOVED***pression", node, opts);
}
function assertClassBody(node, opts) {
  assert("ClassBody", node, opts);
}
function assertClassE***REMOVED***pression(node, opts) {
  assert("ClassE***REMOVED***pression", node, opts);
}
function assertClassDeclaration(node, opts) {
  assert("ClassDeclaration", node, opts);
}
function assertE***REMOVED***portAllDeclaration(node, opts) {
  assert("E***REMOVED***portAllDeclaration", node, opts);
}
function assertE***REMOVED***portDefaultDeclaration(node, opts) {
  assert("E***REMOVED***portDefaultDeclaration", node, opts);
}
function assertE***REMOVED***portNamedDeclaration(node, opts) {
  assert("E***REMOVED***portNamedDeclaration", node, opts);
}
function assertE***REMOVED***portSpecifier(node, opts) {
  assert("E***REMOVED***portSpecifier", node, opts);
}
function assertForOfStatement(node, opts) {
  assert("ForOfStatement", node, opts);
}
function assertImportDeclaration(node, opts) {
  assert("ImportDeclaration", node, opts);
}
function assertImportDefaultSpecifier(node, opts) {
  assert("ImportDefaultSpecifier", node, opts);
}
function assertImportNamespaceSpecifier(node, opts) {
  assert("ImportNamespaceSpecifier", node, opts);
}
function assertImportSpecifier(node, opts) {
  assert("ImportSpecifier", node, opts);
}
function assertImportE***REMOVED***pression(node, opts) {
  assert("ImportE***REMOVED***pression", node, opts);
}
function assertMetaProperty(node, opts) {
  assert("MetaProperty", node, opts);
}
function assertClassMethod(node, opts) {
  assert("ClassMethod", node, opts);
}
function assertObjectPattern(node, opts) {
  assert("ObjectPattern", node, opts);
}
function assertSpreadElement(node, opts) {
  assert("SpreadElement", node, opts);
}
function assertSuper(node, opts) {
  assert("Super", node, opts);
}
function assertTaggedTemplateE***REMOVED***pression(node, opts) {
  assert("TaggedTemplateE***REMOVED***pression", node, opts);
}
function assertTemplateElement(node, opts) {
  assert("TemplateElement", node, opts);
}
function assertTemplateLiteral(node, opts) {
  assert("TemplateLiteral", node, opts);
}
function assertYieldE***REMOVED***pression(node, opts) {
  assert("YieldE***REMOVED***pression", node, opts);
}
function assertAwaitE***REMOVED***pression(node, opts) {
  assert("AwaitE***REMOVED***pression", node, opts);
}
function assertImport(node, opts) {
  assert("Import", node, opts);
}
function assertBigIntLiteral(node, opts) {
  assert("BigIntLiteral", node, opts);
}
function assertE***REMOVED***portNamespaceSpecifier(node, opts) {
  assert("E***REMOVED***portNamespaceSpecifier", node, opts);
}
function assertOptionalMemberE***REMOVED***pression(node, opts) {
  assert("OptionalMemberE***REMOVED***pression", node, opts);
}
function assertOptionalCallE***REMOVED***pression(node, opts) {
  assert("OptionalCallE***REMOVED***pression", node, opts);
}
function assertClassProperty(node, opts) {
  assert("ClassProperty", node, opts);
}
function assertClassAccessorProperty(node, opts) {
  assert("ClassAccessorProperty", node, opts);
}
function assertClassPrivateProperty(node, opts) {
  assert("ClassPrivateProperty", node, opts);
}
function assertClassPrivateMethod(node, opts) {
  assert("ClassPrivateMethod", node, opts);
}
function assertPrivateName(node, opts) {
  assert("PrivateName", node, opts);
}
function assertStaticBlock(node, opts) {
  assert("StaticBlock", node, opts);
}
function assertAnyTypeAnnotation(node, opts) {
  assert("AnyTypeAnnotation", node, opts);
}
function assertArrayTypeAnnotation(node, opts) {
  assert("ArrayTypeAnnotation", node, opts);
}
function assertBooleanTypeAnnotation(node, opts) {
  assert("BooleanTypeAnnotation", node, opts);
}
function assertBooleanLiteralTypeAnnotation(node, opts) {
  assert("BooleanLiteralTypeAnnotation", node, opts);
}
function assertNullLiteralTypeAnnotation(node, opts) {
  assert("NullLiteralTypeAnnotation", node, opts);
}
function assertClassImplements(node, opts) {
  assert("ClassImplements", node, opts);
}
function assertDeclareClass(node, opts) {
  assert("DeclareClass", node, opts);
}
function assertDeclareFunction(node, opts) {
  assert("DeclareFunction", node, opts);
}
function assertDeclareInterface(node, opts) {
  assert("DeclareInterface", node, opts);
}
function assertDeclareModule(node, opts) {
  assert("DeclareModule", node, opts);
}
function assertDeclareModuleE***REMOVED***ports(node, opts) {
  assert("DeclareModuleE***REMOVED***ports", node, opts);
}
function assertDeclareTypeAlias(node, opts) {
  assert("DeclareTypeAlias", node, opts);
}
function assertDeclareOpaqueType(node, opts) {
  assert("DeclareOpaqueType", node, opts);
}
function assertDeclareVariable(node, opts) {
  assert("DeclareVariable", node, opts);
}
function assertDeclareE***REMOVED***portDeclaration(node, opts) {
  assert("DeclareE***REMOVED***portDeclaration", node, opts);
}
function assertDeclareE***REMOVED***portAllDeclaration(node, opts) {
  assert("DeclareE***REMOVED***portAllDeclaration", node, opts);
}
function assertDeclaredPredicate(node, opts) {
  assert("DeclaredPredicate", node, opts);
}
function assertE***REMOVED***istsTypeAnnotation(node, opts) {
  assert("E***REMOVED***istsTypeAnnotation", node, opts);
}
function assertFunctionTypeAnnotation(node, opts) {
  assert("FunctionTypeAnnotation", node, opts);
}
function assertFunctionTypeParam(node, opts) {
  assert("FunctionTypeParam", node, opts);
}
function assertGenericTypeAnnotation(node, opts) {
  assert("GenericTypeAnnotation", node, opts);
}
function assertInferredPredicate(node, opts) {
  assert("InferredPredicate", node, opts);
}
function assertInterfaceE***REMOVED***tends(node, opts) {
  assert("InterfaceE***REMOVED***tends", node, opts);
}
function assertInterfaceDeclaration(node, opts) {
  assert("InterfaceDeclaration", node, opts);
}
function assertInterfaceTypeAnnotation(node, opts) {
  assert("InterfaceTypeAnnotation", node, opts);
}
function assertIntersectionTypeAnnotation(node, opts) {
  assert("IntersectionTypeAnnotation", node, opts);
}
function assertMi***REMOVED***edTypeAnnotation(node, opts) {
  assert("Mi***REMOVED***edTypeAnnotation", node, opts);
}
function assertEmptyTypeAnnotation(node, opts) {
  assert("EmptyTypeAnnotation", node, opts);
}
function assertNullableTypeAnnotation(node, opts) {
  assert("NullableTypeAnnotation", node, opts);
}
function assertNumberLiteralTypeAnnotation(node, opts) {
  assert("NumberLiteralTypeAnnotation", node, opts);
}
function assertNumberTypeAnnotation(node, opts) {
  assert("NumberTypeAnnotation", node, opts);
}
function assertObjectTypeAnnotation(node, opts) {
  assert("ObjectTypeAnnotation", node, opts);
}
function assertObjectTypeInternalSlot(node, opts) {
  assert("ObjectTypeInternalSlot", node, opts);
}
function assertObjectTypeCallProperty(node, opts) {
  assert("ObjectTypeCallProperty", node, opts);
}
function assertObjectTypeInde***REMOVED***er(node, opts) {
  assert("ObjectTypeInde***REMOVED***er", node, opts);
}
function assertObjectTypeProperty(node, opts) {
  assert("ObjectTypeProperty", node, opts);
}
function assertObjectTypeSpreadProperty(node, opts) {
  assert("ObjectTypeSpreadProperty", node, opts);
}
function assertOpaqueType(node, opts) {
  assert("OpaqueType", node, opts);
}
function assertQualifiedTypeIdentifier(node, opts) {
  assert("QualifiedTypeIdentifier", node, opts);
}
function assertStringLiteralTypeAnnotation(node, opts) {
  assert("StringLiteralTypeAnnotation", node, opts);
}
function assertStringTypeAnnotation(node, opts) {
  assert("StringTypeAnnotation", node, opts);
}
function assertSymbolTypeAnnotation(node, opts) {
  assert("SymbolTypeAnnotation", node, opts);
}
function assertThisTypeAnnotation(node, opts) {
  assert("ThisTypeAnnotation", node, opts);
}
function assertTupleTypeAnnotation(node, opts) {
  assert("TupleTypeAnnotation", node, opts);
}
function assertTypeofTypeAnnotation(node, opts) {
  assert("TypeofTypeAnnotation", node, opts);
}
function assertTypeAlias(node, opts) {
  assert("TypeAlias", node, opts);
}
function assertTypeAnnotation(node, opts) {
  assert("TypeAnnotation", node, opts);
}
function assertTypeCastE***REMOVED***pression(node, opts) {
  assert("TypeCastE***REMOVED***pression", node, opts);
}
function assertTypeParameter(node, opts) {
  assert("TypeParameter", node, opts);
}
function assertTypeParameterDeclaration(node, opts) {
  assert("TypeParameterDeclaration", node, opts);
}
function assertTypeParameterInstantiation(node, opts) {
  assert("TypeParameterInstantiation", node, opts);
}
function assertUnionTypeAnnotation(node, opts) {
  assert("UnionTypeAnnotation", node, opts);
}
function assertVariance(node, opts) {
  assert("Variance", node, opts);
}
function assertVoidTypeAnnotation(node, opts) {
  assert("VoidTypeAnnotation", node, opts);
}
function assertEnumDeclaration(node, opts) {
  assert("EnumDeclaration", node, opts);
}
function assertEnumBooleanBody(node, opts) {
  assert("EnumBooleanBody", node, opts);
}
function assertEnumNumberBody(node, opts) {
  assert("EnumNumberBody", node, opts);
}
function assertEnumStringBody(node, opts) {
  assert("EnumStringBody", node, opts);
}
function assertEnumSymbolBody(node, opts) {
  assert("EnumSymbolBody", node, opts);
}
function assertEnumBooleanMember(node, opts) {
  assert("EnumBooleanMember", node, opts);
}
function assertEnumNumberMember(node, opts) {
  assert("EnumNumberMember", node, opts);
}
function assertEnumStringMember(node, opts) {
  assert("EnumStringMember", node, opts);
}
function assertEnumDefaultedMember(node, opts) {
  assert("EnumDefaultedMember", node, opts);
}
function assertInde***REMOVED***edAccessType(node, opts) {
  assert("Inde***REMOVED***edAccessType", node, opts);
}
function assertOptionalInde***REMOVED***edAccessType(node, opts) {
  assert("OptionalInde***REMOVED***edAccessType", node, opts);
}
function assertJSXAttribute(node, opts) {
  assert("JSXAttribute", node, opts);
}
function assertJSXClosingElement(node, opts) {
  assert("JSXClosingElement", node, opts);
}
function assertJSXElement(node, opts) {
  assert("JSXElement", node, opts);
}
function assertJSXEmptyE***REMOVED***pression(node, opts) {
  assert("JSXEmptyE***REMOVED***pression", node, opts);
}
function assertJSXE***REMOVED***pressionContainer(node, opts) {
  assert("JSXE***REMOVED***pressionContainer", node, opts);
}
function assertJSXSpreadChild(node, opts) {
  assert("JSXSpreadChild", node, opts);
}
function assertJSXIdentifier(node, opts) {
  assert("JSXIdentifier", node, opts);
}
function assertJSXMemberE***REMOVED***pression(node, opts) {
  assert("JSXMemberE***REMOVED***pression", node, opts);
}
function assertJSXNamespacedName(node, opts) {
  assert("JSXNamespacedName", node, opts);
}
function assertJSXOpeningElement(node, opts) {
  assert("JSXOpeningElement", node, opts);
}
function assertJSXSpreadAttribute(node, opts) {
  assert("JSXSpreadAttribute", node, opts);
}
function assertJSXTe***REMOVED***t(node, opts) {
  assert("JSXTe***REMOVED***t", node, opts);
}
function assertJSXFragment(node, opts) {
  assert("JSXFragment", node, opts);
}
function assertJSXOpeningFragment(node, opts) {
  assert("JSXOpeningFragment", node, opts);
}
function assertJSXClosingFragment(node, opts) {
  assert("JSXClosingFragment", node, opts);
}
function assertNoop(node, opts) {
  assert("Noop", node, opts);
}
function assertPlaceholder(node, opts) {
  assert("Placeholder", node, opts);
}
function assertV8IntrinsicIdentifier(node, opts) {
  assert("V8IntrinsicIdentifier", node, opts);
}
function assertArgumentPlaceholder(node, opts) {
  assert("ArgumentPlaceholder", node, opts);
}
function assertBindE***REMOVED***pression(node, opts) {
  assert("BindE***REMOVED***pression", node, opts);
}
function assertImportAttribute(node, opts) {
  assert("ImportAttribute", node, opts);
}
function assertDecorator(node, opts) {
  assert("Decorator", node, opts);
}
function assertDoE***REMOVED***pression(node, opts) {
  assert("DoE***REMOVED***pression", node, opts);
}
function assertE***REMOVED***portDefaultSpecifier(node, opts) {
  assert("E***REMOVED***portDefaultSpecifier", node, opts);
}
function assertRecordE***REMOVED***pression(node, opts) {
  assert("RecordE***REMOVED***pression", node, opts);
}
function assertTupleE***REMOVED***pression(node, opts) {
  assert("TupleE***REMOVED***pression", node, opts);
}
function assertDecimalLiteral(node, opts) {
  assert("DecimalLiteral", node, opts);
}
function assertModuleE***REMOVED***pression(node, opts) {
  assert("ModuleE***REMOVED***pression", node, opts);
}
function assertTopicReference(node, opts) {
  assert("TopicReference", node, opts);
}
function assertPipelineTopicE***REMOVED***pression(node, opts) {
  assert("PipelineTopicE***REMOVED***pression", node, opts);
}
function assertPipelineBareFunction(node, opts) {
  assert("PipelineBareFunction", node, opts);
}
function assertPipelinePrimaryTopicReference(node, opts) {
  assert("PipelinePrimaryTopicReference", node, opts);
}
function assertTSParameterProperty(node, opts) {
  assert("TSParameterProperty", node, opts);
}
function assertTSDeclareFunction(node, opts) {
  assert("TSDeclareFunction", node, opts);
}
function assertTSDeclareMethod(node, opts) {
  assert("TSDeclareMethod", node, opts);
}
function assertTSQualifiedName(node, opts) {
  assert("TSQualifiedName", node, opts);
}
function assertTSCallSignatureDeclaration(node, opts) {
  assert("TSCallSignatureDeclaration", node, opts);
}
function assertTSConstructSignatureDeclaration(node, opts) {
  assert("TSConstructSignatureDeclaration", node, opts);
}
function assertTSPropertySignature(node, opts) {
  assert("TSPropertySignature", node, opts);
}
function assertTSMethodSignature(node, opts) {
  assert("TSMethodSignature", node, opts);
}
function assertTSInde***REMOVED***Signature(node, opts) {
  assert("TSInde***REMOVED***Signature", node, opts);
}
function assertTSAnyKeyword(node, opts) {
  assert("TSAnyKeyword", node, opts);
}
function assertTSBooleanKeyword(node, opts) {
  assert("TSBooleanKeyword", node, opts);
}
function assertTSBigIntKeyword(node, opts) {
  assert("TSBigIntKeyword", node, opts);
}
function assertTSIntrinsicKeyword(node, opts) {
  assert("TSIntrinsicKeyword", node, opts);
}
function assertTSNeverKeyword(node, opts) {
  assert("TSNeverKeyword", node, opts);
}
function assertTSNullKeyword(node, opts) {
  assert("TSNullKeyword", node, opts);
}
function assertTSNumberKeyword(node, opts) {
  assert("TSNumberKeyword", node, opts);
}
function assertTSObjectKeyword(node, opts) {
  assert("TSObjectKeyword", node, opts);
}
function assertTSStringKeyword(node, opts) {
  assert("TSStringKeyword", node, opts);
}
function assertTSSymbolKeyword(node, opts) {
  assert("TSSymbolKeyword", node, opts);
}
function assertTSUndefinedKeyword(node, opts) {
  assert("TSUndefinedKeyword", node, opts);
}
function assertTSUnknownKeyword(node, opts) {
  assert("TSUnknownKeyword", node, opts);
}
function assertTSVoidKeyword(node, opts) {
  assert("TSVoidKeyword", node, opts);
}
function assertTSThisType(node, opts) {
  assert("TSThisType", node, opts);
}
function assertTSFunctionType(node, opts) {
  assert("TSFunctionType", node, opts);
}
function assertTSConstructorType(node, opts) {
  assert("TSConstructorType", node, opts);
}
function assertTSTypeReference(node, opts) {
  assert("TSTypeReference", node, opts);
}
function assertTSTypePredicate(node, opts) {
  assert("TSTypePredicate", node, opts);
}
function assertTSTypeQuery(node, opts) {
  assert("TSTypeQuery", node, opts);
}
function assertTSTypeLiteral(node, opts) {
  assert("TSTypeLiteral", node, opts);
}
function assertTSArrayType(node, opts) {
  assert("TSArrayType", node, opts);
}
function assertTSTupleType(node, opts) {
  assert("TSTupleType", node, opts);
}
function assertTSOptionalType(node, opts) {
  assert("TSOptionalType", node, opts);
}
function assertTSRestType(node, opts) {
  assert("TSRestType", node, opts);
}
function assertTSNamedTupleMember(node, opts) {
  assert("TSNamedTupleMember", node, opts);
}
function assertTSUnionType(node, opts) {
  assert("TSUnionType", node, opts);
}
function assertTSIntersectionType(node, opts) {
  assert("TSIntersectionType", node, opts);
}
function assertTSConditionalType(node, opts) {
  assert("TSConditionalType", node, opts);
}
function assertTSInferType(node, opts) {
  assert("TSInferType", node, opts);
}
function assertTSParenthesizedType(node, opts) {
  assert("TSParenthesizedType", node, opts);
}
function assertTSTypeOperator(node, opts) {
  assert("TSTypeOperator", node, opts);
}
function assertTSInde***REMOVED***edAccessType(node, opts) {
  assert("TSInde***REMOVED***edAccessType", node, opts);
}
function assertTSMappedType(node, opts) {
  assert("TSMappedType", node, opts);
}
function assertTSLiteralType(node, opts) {
  assert("TSLiteralType", node, opts);
}
function assertTSE***REMOVED***pressionWithTypeArguments(node, opts) {
  assert("TSE***REMOVED***pressionWithTypeArguments", node, opts);
}
function assertTSInterfaceDeclaration(node, opts) {
  assert("TSInterfaceDeclaration", node, opts);
}
function assertTSInterfaceBody(node, opts) {
  assert("TSInterfaceBody", node, opts);
}
function assertTSTypeAliasDeclaration(node, opts) {
  assert("TSTypeAliasDeclaration", node, opts);
}
function assertTSInstantiationE***REMOVED***pression(node, opts) {
  assert("TSInstantiationE***REMOVED***pression", node, opts);
}
function assertTSAsE***REMOVED***pression(node, opts) {
  assert("TSAsE***REMOVED***pression", node, opts);
}
function assertTSSatisfiesE***REMOVED***pression(node, opts) {
  assert("TSSatisfiesE***REMOVED***pression", node, opts);
}
function assertTSTypeAssertion(node, opts) {
  assert("TSTypeAssertion", node, opts);
}
function assertTSEnumDeclaration(node, opts) {
  assert("TSEnumDeclaration", node, opts);
}
function assertTSEnumMember(node, opts) {
  assert("TSEnumMember", node, opts);
}
function assertTSModuleDeclaration(node, opts) {
  assert("TSModuleDeclaration", node, opts);
}
function assertTSModuleBlock(node, opts) {
  assert("TSModuleBlock", node, opts);
}
function assertTSImportType(node, opts) {
  assert("TSImportType", node, opts);
}
function assertTSImportEqualsDeclaration(node, opts) {
  assert("TSImportEqualsDeclaration", node, opts);
}
function assertTSE***REMOVED***ternalModuleReference(node, opts) {
  assert("TSE***REMOVED***ternalModuleReference", node, opts);
}
function assertTSNonNullE***REMOVED***pression(node, opts) {
  assert("TSNonNullE***REMOVED***pression", node, opts);
}
function assertTSE***REMOVED***portAssignment(node, opts) {
  assert("TSE***REMOVED***portAssignment", node, opts);
}
function assertTSNamespaceE***REMOVED***portDeclaration(node, opts) {
  assert("TSNamespaceE***REMOVED***portDeclaration", node, opts);
}
function assertTSTypeAnnotation(node, opts) {
  assert("TSTypeAnnotation", node, opts);
}
function assertTSTypeParameterInstantiation(node, opts) {
  assert("TSTypeParameterInstantiation", node, opts);
}
function assertTSTypeParameterDeclaration(node, opts) {
  assert("TSTypeParameterDeclaration", node, opts);
}
function assertTSTypeParameter(node, opts) {
  assert("TSTypeParameter", node, opts);
}
function assertStandardized(node, opts) {
  assert("Standardized", node, opts);
}
function assertE***REMOVED***pression(node, opts) {
  assert("E***REMOVED***pression", node, opts);
}
function assertBinary(node, opts) {
  assert("Binary", node, opts);
}
function assertScopable(node, opts) {
  assert("Scopable", node, opts);
}
function assertBlockParent(node, opts) {
  assert("BlockParent", node, opts);
}
function assertBlock(node, opts) {
  assert("Block", node, opts);
}
function assertStatement(node, opts) {
  assert("Statement", node, opts);
}
function assertTerminatorless(node, opts) {
  assert("Terminatorless", node, opts);
}
function assertCompletionStatement(node, opts) {
  assert("CompletionStatement", node, opts);
}
function assertConditional(node, opts) {
  assert("Conditional", node, opts);
}
function assertLoop(node, opts) {
  assert("Loop", node, opts);
}
function assertWhile(node, opts) {
  assert("While", node, opts);
}
function assertE***REMOVED***pressionWrapper(node, opts) {
  assert("E***REMOVED***pressionWrapper", node, opts);
}
function assertFor(node, opts) {
  assert("For", node, opts);
}
function assertForXStatement(node, opts) {
  assert("ForXStatement", node, opts);
}
function assertFunction(node, opts) {
  assert("Function", node, opts);
}
function assertFunctionParent(node, opts) {
  assert("FunctionParent", node, opts);
}
function assertPureish(node, opts) {
  assert("Pureish", node, opts);
}
function assertDeclaration(node, opts) {
  assert("Declaration", node, opts);
}
function assertPatternLike(node, opts) {
  assert("PatternLike", node, opts);
}
function assertLVal(node, opts) {
  assert("LVal", node, opts);
}
function assertTSEntityName(node, opts) {
  assert("TSEntityName", node, opts);
}
function assertLiteral(node, opts) {
  assert("Literal", node, opts);
}
function assertImmutable(node, opts) {
  assert("Immutable", node, opts);
}
function assertUserWhitespacable(node, opts) {
  assert("UserWhitespacable", node, opts);
}
function assertMethod(node, opts) {
  assert("Method", node, opts);
}
function assertObjectMember(node, opts) {
  assert("ObjectMember", node, opts);
}
function assertProperty(node, opts) {
  assert("Property", node, opts);
}
function assertUnaryLike(node, opts) {
  assert("UnaryLike", node, opts);
}
function assertPattern(node, opts) {
  assert("Pattern", node, opts);
}
function assertClass(node, opts) {
  assert("Class", node, opts);
}
function assertImportOrE***REMOVED***portDeclaration(node, opts) {
  assert("ImportOrE***REMOVED***portDeclaration", node, opts);
}
function assertE***REMOVED***portDeclaration(node, opts) {
  assert("E***REMOVED***portDeclaration", node, opts);
}
function assertModuleSpecifier(node, opts) {
  assert("ModuleSpecifier", node, opts);
}
function assertAccessor(node, opts) {
  assert("Accessor", node, opts);
}
function assertPrivate(node, opts) {
  assert("Private", node, opts);
}
function assertFlow(node, opts) {
  assert("Flow", node, opts);
}
function assertFlowType(node, opts) {
  assert("FlowType", node, opts);
}
function assertFlowBaseAnnotation(node, opts) {
  assert("FlowBaseAnnotation", node, opts);
}
function assertFlowDeclaration(node, opts) {
  assert("FlowDeclaration", node, opts);
}
function assertFlowPredicate(node, opts) {
  assert("FlowPredicate", node, opts);
}
function assertEnumBody(node, opts) {
  assert("EnumBody", node, opts);
}
function assertEnumMember(node, opts) {
  assert("EnumMember", node, opts);
}
function assertJSX(node, opts) {
  assert("JSX", node, opts);
}
function assertMiscellaneous(node, opts) {
  assert("Miscellaneous", node, opts);
}
function assertTypeScript(node, opts) {
  assert("TypeScript", node, opts);
}
function assertTSTypeElement(node, opts) {
  assert("TSTypeElement", node, opts);
}
function assertTSType(node, opts) {
  assert("TSType", node, opts);
}
function assertTSBaseType(node, opts) {
  assert("TSBaseType", node, opts);
}
function assertNumberLiteral(node, opts) {
  (0, _deprecationWarning.default)("assertNumberLiteral", "assertNumericLiteral");
  assert("NumberLiteral", node, opts);
}
function assertRege***REMOVED***Literal(node, opts) {
  (0, _deprecationWarning.default)("assertRege***REMOVED***Literal", "assertRegE***REMOVED***pLiteral");
  assert("Rege***REMOVED***Literal", node, opts);
}
function assertRestProperty(node, opts) {
  (0, _deprecationWarning.default)("assertRestProperty", "assertRestElement");
  assert("RestProperty", node, opts);
}
function assertSpreadProperty(node, opts) {
  (0, _deprecationWarning.default)("assertSpreadProperty", "assertSpreadElement");
  assert("SpreadProperty", node, opts);
}
function assertModuleDeclaration(node, opts) {
  (0, _deprecationWarning.default)("assertModuleDeclaration", "assertImportOrE***REMOVED***portDeclaration");
  assert("ModuleDeclaration", node, opts);
}

//# sourceMappingURL=inde***REMOVED***.js.map
