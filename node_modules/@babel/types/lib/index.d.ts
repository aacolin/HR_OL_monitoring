declare function isCompatTag(tagName?: string): boolean;

type ReturnedChild = JSXSpreadChild | JSXElement | JSXFragment | E***REMOVED***pression;
declare function buildChildren(node: JSXElement | JSXFragment): ReturnedChild[];

declare function assertNode(node?: any): asserts node is Node;

declare function assertArrayE***REMOVED***pression(node: object | null | undefined, opts?: object | null): asserts node is ArrayE***REMOVED***pression;
declare function assertAssignmentE***REMOVED***pression(node: object | null | undefined, opts?: object | null): asserts node is AssignmentE***REMOVED***pression;
declare function assertBinaryE***REMOVED***pression(node: object | null | undefined, opts?: object | null): asserts node is BinaryE***REMOVED***pression;
declare function assertInterpreterDirective(node: object | null | undefined, opts?: object | null): asserts node is InterpreterDirective;
declare function assertDirective(node: object | null | undefined, opts?: object | null): asserts node is Directive;
declare function assertDirectiveLiteral(node: object | null | undefined, opts?: object | null): asserts node is DirectiveLiteral;
declare function assertBlockStatement(node: object | null | undefined, opts?: object | null): asserts node is BlockStatement;
declare function assertBreakStatement(node: object | null | undefined, opts?: object | null): asserts node is BreakStatement;
declare function assertCallE***REMOVED***pression(node: object | null | undefined, opts?: object | null): asserts node is CallE***REMOVED***pression;
declare function assertCatchClause(node: object | null | undefined, opts?: object | null): asserts node is CatchClause;
declare function assertConditionalE***REMOVED***pression(node: object | null | undefined, opts?: object | null): asserts node is ConditionalE***REMOVED***pression;
declare function assertContinueStatement(node: object | null | undefined, opts?: object | null): asserts node is ContinueStatement;
declare function assertDebuggerStatement(node: object | null | undefined, opts?: object | null): asserts node is DebuggerStatement;
declare function assertDoWhileStatement(node: object | null | undefined, opts?: object | null): asserts node is DoWhileStatement;
declare function assertEmptyStatement(node: object | null | undefined, opts?: object | null): asserts node is EmptyStatement;
declare function assertE***REMOVED***pressionStatement(node: object | null | undefined, opts?: object | null): asserts node is E***REMOVED***pressionStatement;
declare function assertFile(node: object | null | undefined, opts?: object | null): asserts node is File;
declare function assertForInStatement(node: object | null | undefined, opts?: object | null): asserts node is ForInStatement;
declare function assertForStatement(node: object | null | undefined, opts?: object | null): asserts node is ForStatement;
declare function assertFunctionDeclaration(node: object | null | undefined, opts?: object | null): asserts node is FunctionDeclaration;
declare function assertFunctionE***REMOVED***pression(node: object | null | undefined, opts?: object | null): asserts node is FunctionE***REMOVED***pression;
declare function assertIdentifier(node: object | null | undefined, opts?: object | null): asserts node is Identifier;
declare function assertIfStatement(node: object | null | undefined, opts?: object | null): asserts node is IfStatement;
declare function assertLabeledStatement(node: object | null | undefined, opts?: object | null): asserts node is LabeledStatement;
declare function assertStringLiteral(node: object | null | undefined, opts?: object | null): asserts node is StringLiteral;
declare function assertNumericLiteral(node: object | null | undefined, opts?: object | null): asserts node is NumericLiteral;
declare function assertNullLiteral(node: object | null | undefined, opts?: object | null): asserts node is NullLiteral;
declare function assertBooleanLiteral(node: object | null | undefined, opts?: object | null): asserts node is BooleanLiteral;
declare function assertRegE***REMOVED***pLiteral(node: object | null | undefined, opts?: object | null): asserts node is RegE***REMOVED***pLiteral;
declare function assertLogicalE***REMOVED***pression(node: object | null | undefined, opts?: object | null): asserts node is LogicalE***REMOVED***pression;
declare function assertMemberE***REMOVED***pression(node: object | null | undefined, opts?: object | null): asserts node is MemberE***REMOVED***pression;
declare function assertNewE***REMOVED***pression(node: object | null | undefined, opts?: object | null): asserts node is NewE***REMOVED***pression;
declare function assertProgram(node: object | null | undefined, opts?: object | null): asserts node is Program;
declare function assertObjectE***REMOVED***pression(node: object | null | undefined, opts?: object | null): asserts node is ObjectE***REMOVED***pression;
declare function assertObjectMethod(node: object | null | undefined, opts?: object | null): asserts node is ObjectMethod;
declare function assertObjectProperty(node: object | null | undefined, opts?: object | null): asserts node is ObjectProperty;
declare function assertRestElement(node: object | null | undefined, opts?: object | null): asserts node is RestElement;
declare function assertReturnStatement(node: object | null | undefined, opts?: object | null): asserts node is ReturnStatement;
declare function assertSequenceE***REMOVED***pression(node: object | null | undefined, opts?: object | null): asserts node is SequenceE***REMOVED***pression;
declare function assertParenthesizedE***REMOVED***pression(node: object | null | undefined, opts?: object | null): asserts node is ParenthesizedE***REMOVED***pression;
declare function assertSwitchCase(node: object | null | undefined, opts?: object | null): asserts node is SwitchCase;
declare function assertSwitchStatement(node: object | null | undefined, opts?: object | null): asserts node is SwitchStatement;
declare function assertThisE***REMOVED***pression(node: object | null | undefined, opts?: object | null): asserts node is ThisE***REMOVED***pression;
declare function assertThrowStatement(node: object | null | undefined, opts?: object | null): asserts node is ThrowStatement;
declare function assertTryStatement(node: object | null | undefined, opts?: object | null): asserts node is TryStatement;
declare function assertUnaryE***REMOVED***pression(node: object | null | undefined, opts?: object | null): asserts node is UnaryE***REMOVED***pression;
declare function assertUpdateE***REMOVED***pression(node: object | null | undefined, opts?: object | null): asserts node is UpdateE***REMOVED***pression;
declare function assertVariableDeclaration(node: object | null | undefined, opts?: object | null): asserts node is VariableDeclaration;
declare function assertVariableDeclarator(node: object | null | undefined, opts?: object | null): asserts node is VariableDeclarator;
declare function assertWhileStatement(node: object | null | undefined, opts?: object | null): asserts node is WhileStatement;
declare function assertWithStatement(node: object | null | undefined, opts?: object | null): asserts node is WithStatement;
declare function assertAssignmentPattern(node: object | null | undefined, opts?: object | null): asserts node is AssignmentPattern;
declare function assertArrayPattern(node: object | null | undefined, opts?: object | null): asserts node is ArrayPattern;
declare function assertArrowFunctionE***REMOVED***pression(node: object | null | undefined, opts?: object | null): asserts node is ArrowFunctionE***REMOVED***pression;
declare function assertClassBody(node: object | null | undefined, opts?: object | null): asserts node is ClassBody;
declare function assertClassE***REMOVED***pression(node: object | null | undefined, opts?: object | null): asserts node is ClassE***REMOVED***pression;
declare function assertClassDeclaration(node: object | null | undefined, opts?: object | null): asserts node is ClassDeclaration;
declare function assertE***REMOVED***portAllDeclaration(node: object | null | undefined, opts?: object | null): asserts node is E***REMOVED***portAllDeclaration;
declare function assertE***REMOVED***portDefaultDeclaration(node: object | null | undefined, opts?: object | null): asserts node is E***REMOVED***portDefaultDeclaration;
declare function assertE***REMOVED***portNamedDeclaration(node: object | null | undefined, opts?: object | null): asserts node is E***REMOVED***portNamedDeclaration;
declare function assertE***REMOVED***portSpecifier(node: object | null | undefined, opts?: object | null): asserts node is E***REMOVED***portSpecifier;
declare function assertForOfStatement(node: object | null | undefined, opts?: object | null): asserts node is ForOfStatement;
declare function assertImportDeclaration(node: object | null | undefined, opts?: object | null): asserts node is ImportDeclaration;
declare function assertImportDefaultSpecifier(node: object | null | undefined, opts?: object | null): asserts node is ImportDefaultSpecifier;
declare function assertImportNamespaceSpecifier(node: object | null | undefined, opts?: object | null): asserts node is ImportNamespaceSpecifier;
declare function assertImportSpecifier(node: object | null | undefined, opts?: object | null): asserts node is ImportSpecifier;
declare function assertImportE***REMOVED***pression(node: object | null | undefined, opts?: object | null): asserts node is ImportE***REMOVED***pression;
declare function assertMetaProperty(node: object | null | undefined, opts?: object | null): asserts node is MetaProperty;
declare function assertClassMethod(node: object | null | undefined, opts?: object | null): asserts node is ClassMethod;
declare function assertObjectPattern(node: object | null | undefined, opts?: object | null): asserts node is ObjectPattern;
declare function assertSpreadElement(node: object | null | undefined, opts?: object | null): asserts node is SpreadElement;
declare function assertSuper(node: object | null | undefined, opts?: object | null): asserts node is Super;
declare function assertTaggedTemplateE***REMOVED***pression(node: object | null | undefined, opts?: object | null): asserts node is TaggedTemplateE***REMOVED***pression;
declare function assertTemplateElement(node: object | null | undefined, opts?: object | null): asserts node is TemplateElement;
declare function assertTemplateLiteral(node: object | null | undefined, opts?: object | null): asserts node is TemplateLiteral;
declare function assertYieldE***REMOVED***pression(node: object | null | undefined, opts?: object | null): asserts node is YieldE***REMOVED***pression;
declare function assertAwaitE***REMOVED***pression(node: object | null | undefined, opts?: object | null): asserts node is AwaitE***REMOVED***pression;
declare function assertImport(node: object | null | undefined, opts?: object | null): asserts node is Import;
declare function assertBigIntLiteral(node: object | null | undefined, opts?: object | null): asserts node is BigIntLiteral;
declare function assertE***REMOVED***portNamespaceSpecifier(node: object | null | undefined, opts?: object | null): asserts node is E***REMOVED***portNamespaceSpecifier;
declare function assertOptionalMemberE***REMOVED***pression(node: object | null | undefined, opts?: object | null): asserts node is OptionalMemberE***REMOVED***pression;
declare function assertOptionalCallE***REMOVED***pression(node: object | null | undefined, opts?: object | null): asserts node is OptionalCallE***REMOVED***pression;
declare function assertClassProperty(node: object | null | undefined, opts?: object | null): asserts node is ClassProperty;
declare function assertClassAccessorProperty(node: object | null | undefined, opts?: object | null): asserts node is ClassAccessorProperty;
declare function assertClassPrivateProperty(node: object | null | undefined, opts?: object | null): asserts node is ClassPrivateProperty;
declare function assertClassPrivateMethod(node: object | null | undefined, opts?: object | null): asserts node is ClassPrivateMethod;
declare function assertPrivateName(node: object | null | undefined, opts?: object | null): asserts node is PrivateName;
declare function assertStaticBlock(node: object | null | undefined, opts?: object | null): asserts node is StaticBlock;
declare function assertAnyTypeAnnotation(node: object | null | undefined, opts?: object | null): asserts node is AnyTypeAnnotation;
declare function assertArrayTypeAnnotation(node: object | null | undefined, opts?: object | null): asserts node is ArrayTypeAnnotation;
declare function assertBooleanTypeAnnotation(node: object | null | undefined, opts?: object | null): asserts node is BooleanTypeAnnotation;
declare function assertBooleanLiteralTypeAnnotation(node: object | null | undefined, opts?: object | null): asserts node is BooleanLiteralTypeAnnotation;
declare function assertNullLiteralTypeAnnotation(node: object | null | undefined, opts?: object | null): asserts node is NullLiteralTypeAnnotation;
declare function assertClassImplements(node: object | null | undefined, opts?: object | null): asserts node is ClassImplements;
declare function assertDeclareClass(node: object | null | undefined, opts?: object | null): asserts node is DeclareClass;
declare function assertDeclareFunction(node: object | null | undefined, opts?: object | null): asserts node is DeclareFunction;
declare function assertDeclareInterface(node: object | null | undefined, opts?: object | null): asserts node is DeclareInterface;
declare function assertDeclareModule(node: object | null | undefined, opts?: object | null): asserts node is DeclareModule;
declare function assertDeclareModuleE***REMOVED***ports(node: object | null | undefined, opts?: object | null): asserts node is DeclareModuleE***REMOVED***ports;
declare function assertDeclareTypeAlias(node: object | null | undefined, opts?: object | null): asserts node is DeclareTypeAlias;
declare function assertDeclareOpaqueType(node: object | null | undefined, opts?: object | null): asserts node is DeclareOpaqueType;
declare function assertDeclareVariable(node: object | null | undefined, opts?: object | null): asserts node is DeclareVariable;
declare function assertDeclareE***REMOVED***portDeclaration(node: object | null | undefined, opts?: object | null): asserts node is DeclareE***REMOVED***portDeclaration;
declare function assertDeclareE***REMOVED***portAllDeclaration(node: object | null | undefined, opts?: object | null): asserts node is DeclareE***REMOVED***portAllDeclaration;
declare function assertDeclaredPredicate(node: object | null | undefined, opts?: object | null): asserts node is DeclaredPredicate;
declare function assertE***REMOVED***istsTypeAnnotation(node: object | null | undefined, opts?: object | null): asserts node is E***REMOVED***istsTypeAnnotation;
declare function assertFunctionTypeAnnotation(node: object | null | undefined, opts?: object | null): asserts node is FunctionTypeAnnotation;
declare function assertFunctionTypeParam(node: object | null | undefined, opts?: object | null): asserts node is FunctionTypeParam;
declare function assertGenericTypeAnnotation(node: object | null | undefined, opts?: object | null): asserts node is GenericTypeAnnotation;
declare function assertInferredPredicate(node: object | null | undefined, opts?: object | null): asserts node is InferredPredicate;
declare function assertInterfaceE***REMOVED***tends(node: object | null | undefined, opts?: object | null): asserts node is InterfaceE***REMOVED***tends;
declare function assertInterfaceDeclaration(node: object | null | undefined, opts?: object | null): asserts node is InterfaceDeclaration;
declare function assertInterfaceTypeAnnotation(node: object | null | undefined, opts?: object | null): asserts node is InterfaceTypeAnnotation;
declare function assertIntersectionTypeAnnotation(node: object | null | undefined, opts?: object | null): asserts node is IntersectionTypeAnnotation;
declare function assertMi***REMOVED***edTypeAnnotation(node: object | null | undefined, opts?: object | null): asserts node is Mi***REMOVED***edTypeAnnotation;
declare function assertEmptyTypeAnnotation(node: object | null | undefined, opts?: object | null): asserts node is EmptyTypeAnnotation;
declare function assertNullableTypeAnnotation(node: object | null | undefined, opts?: object | null): asserts node is NullableTypeAnnotation;
declare function assertNumberLiteralTypeAnnotation(node: object | null | undefined, opts?: object | null): asserts node is NumberLiteralTypeAnnotation;
declare function assertNumberTypeAnnotation(node: object | null | undefined, opts?: object | null): asserts node is NumberTypeAnnotation;
declare function assertObjectTypeAnnotation(node: object | null | undefined, opts?: object | null): asserts node is ObjectTypeAnnotation;
declare function assertObjectTypeInternalSlot(node: object | null | undefined, opts?: object | null): asserts node is ObjectTypeInternalSlot;
declare function assertObjectTypeCallProperty(node: object | null | undefined, opts?: object | null): asserts node is ObjectTypeCallProperty;
declare function assertObjectTypeInde***REMOVED***er(node: object | null | undefined, opts?: object | null): asserts node is ObjectTypeInde***REMOVED***er;
declare function assertObjectTypeProperty(node: object | null | undefined, opts?: object | null): asserts node is ObjectTypeProperty;
declare function assertObjectTypeSpreadProperty(node: object | null | undefined, opts?: object | null): asserts node is ObjectTypeSpreadProperty;
declare function assertOpaqueType(node: object | null | undefined, opts?: object | null): asserts node is OpaqueType;
declare function assertQualifiedTypeIdentifier(node: object | null | undefined, opts?: object | null): asserts node is QualifiedTypeIdentifier;
declare function assertStringLiteralTypeAnnotation(node: object | null | undefined, opts?: object | null): asserts node is StringLiteralTypeAnnotation;
declare function assertStringTypeAnnotation(node: object | null | undefined, opts?: object | null): asserts node is StringTypeAnnotation;
declare function assertSymbolTypeAnnotation(node: object | null | undefined, opts?: object | null): asserts node is SymbolTypeAnnotation;
declare function assertThisTypeAnnotation(node: object | null | undefined, opts?: object | null): asserts node is ThisTypeAnnotation;
declare function assertTupleTypeAnnotation(node: object | null | undefined, opts?: object | null): asserts node is TupleTypeAnnotation;
declare function assertTypeofTypeAnnotation(node: object | null | undefined, opts?: object | null): asserts node is TypeofTypeAnnotation;
declare function assertTypeAlias(node: object | null | undefined, opts?: object | null): asserts node is TypeAlias;
declare function assertTypeAnnotation(node: object | null | undefined, opts?: object | null): asserts node is TypeAnnotation;
declare function assertTypeCastE***REMOVED***pression(node: object | null | undefined, opts?: object | null): asserts node is TypeCastE***REMOVED***pression;
declare function assertTypeParameter(node: object | null | undefined, opts?: object | null): asserts node is TypeParameter;
declare function assertTypeParameterDeclaration(node: object | null | undefined, opts?: object | null): asserts node is TypeParameterDeclaration;
declare function assertTypeParameterInstantiation(node: object | null | undefined, opts?: object | null): asserts node is TypeParameterInstantiation;
declare function assertUnionTypeAnnotation(node: object | null | undefined, opts?: object | null): asserts node is UnionTypeAnnotation;
declare function assertVariance(node: object | null | undefined, opts?: object | null): asserts node is Variance;
declare function assertVoidTypeAnnotation(node: object | null | undefined, opts?: object | null): asserts node is VoidTypeAnnotation;
declare function assertEnumDeclaration(node: object | null | undefined, opts?: object | null): asserts node is EnumDeclaration;
declare function assertEnumBooleanBody(node: object | null | undefined, opts?: object | null): asserts node is EnumBooleanBody;
declare function assertEnumNumberBody(node: object | null | undefined, opts?: object | null): asserts node is EnumNumberBody;
declare function assertEnumStringBody(node: object | null | undefined, opts?: object | null): asserts node is EnumStringBody;
declare function assertEnumSymbolBody(node: object | null | undefined, opts?: object | null): asserts node is EnumSymbolBody;
declare function assertEnumBooleanMember(node: object | null | undefined, opts?: object | null): asserts node is EnumBooleanMember;
declare function assertEnumNumberMember(node: object | null | undefined, opts?: object | null): asserts node is EnumNumberMember;
declare function assertEnumStringMember(node: object | null | undefined, opts?: object | null): asserts node is EnumStringMember;
declare function assertEnumDefaultedMember(node: object | null | undefined, opts?: object | null): asserts node is EnumDefaultedMember;
declare function assertInde***REMOVED***edAccessType(node: object | null | undefined, opts?: object | null): asserts node is Inde***REMOVED***edAccessType;
declare function assertOptionalInde***REMOVED***edAccessType(node: object | null | undefined, opts?: object | null): asserts node is OptionalInde***REMOVED***edAccessType;
declare function assertJSXAttribute(node: object | null | undefined, opts?: object | null): asserts node is JSXAttribute;
declare function assertJSXClosingElement(node: object | null | undefined, opts?: object | null): asserts node is JSXClosingElement;
declare function assertJSXElement(node: object | null | undefined, opts?: object | null): asserts node is JSXElement;
declare function assertJSXEmptyE***REMOVED***pression(node: object | null | undefined, opts?: object | null): asserts node is JSXEmptyE***REMOVED***pression;
declare function assertJSXE***REMOVED***pressionContainer(node: object | null | undefined, opts?: object | null): asserts node is JSXE***REMOVED***pressionContainer;
declare function assertJSXSpreadChild(node: object | null | undefined, opts?: object | null): asserts node is JSXSpreadChild;
declare function assertJSXIdentifier(node: object | null | undefined, opts?: object | null): asserts node is JSXIdentifier;
declare function assertJSXMemberE***REMOVED***pression(node: object | null | undefined, opts?: object | null): asserts node is JSXMemberE***REMOVED***pression;
declare function assertJSXNamespacedName(node: object | null | undefined, opts?: object | null): asserts node is JSXNamespacedName;
declare function assertJSXOpeningElement(node: object | null | undefined, opts?: object | null): asserts node is JSXOpeningElement;
declare function assertJSXSpreadAttribute(node: object | null | undefined, opts?: object | null): asserts node is JSXSpreadAttribute;
declare function assertJSXTe***REMOVED***t(node: object | null | undefined, opts?: object | null): asserts node is JSXTe***REMOVED***t;
declare function assertJSXFragment(node: object | null | undefined, opts?: object | null): asserts node is JSXFragment;
declare function assertJSXOpeningFragment(node: object | null | undefined, opts?: object | null): asserts node is JSXOpeningFragment;
declare function assertJSXClosingFragment(node: object | null | undefined, opts?: object | null): asserts node is JSXClosingFragment;
declare function assertNoop(node: object | null | undefined, opts?: object | null): asserts node is Noop;
declare function assertPlaceholder(node: object | null | undefined, opts?: object | null): asserts node is Placeholder;
declare function assertV8IntrinsicIdentifier(node: object | null | undefined, opts?: object | null): asserts node is V8IntrinsicIdentifier;
declare function assertArgumentPlaceholder(node: object | null | undefined, opts?: object | null): asserts node is ArgumentPlaceholder;
declare function assertBindE***REMOVED***pression(node: object | null | undefined, opts?: object | null): asserts node is BindE***REMOVED***pression;
declare function assertImportAttribute(node: object | null | undefined, opts?: object | null): asserts node is ImportAttribute;
declare function assertDecorator(node: object | null | undefined, opts?: object | null): asserts node is Decorator;
declare function assertDoE***REMOVED***pression(node: object | null | undefined, opts?: object | null): asserts node is DoE***REMOVED***pression;
declare function assertE***REMOVED***portDefaultSpecifier(node: object | null | undefined, opts?: object | null): asserts node is E***REMOVED***portDefaultSpecifier;
declare function assertRecordE***REMOVED***pression(node: object | null | undefined, opts?: object | null): asserts node is RecordE***REMOVED***pression;
declare function assertTupleE***REMOVED***pression(node: object | null | undefined, opts?: object | null): asserts node is TupleE***REMOVED***pression;
declare function assertDecimalLiteral(node: object | null | undefined, opts?: object | null): asserts node is DecimalLiteral;
declare function assertModuleE***REMOVED***pression(node: object | null | undefined, opts?: object | null): asserts node is ModuleE***REMOVED***pression;
declare function assertTopicReference(node: object | null | undefined, opts?: object | null): asserts node is TopicReference;
declare function assertPipelineTopicE***REMOVED***pression(node: object | null | undefined, opts?: object | null): asserts node is PipelineTopicE***REMOVED***pression;
declare function assertPipelineBareFunction(node: object | null | undefined, opts?: object | null): asserts node is PipelineBareFunction;
declare function assertPipelinePrimaryTopicReference(node: object | null | undefined, opts?: object | null): asserts node is PipelinePrimaryTopicReference;
declare function assertTSParameterProperty(node: object | null | undefined, opts?: object | null): asserts node is TSParameterProperty;
declare function assertTSDeclareFunction(node: object | null | undefined, opts?: object | null): asserts node is TSDeclareFunction;
declare function assertTSDeclareMethod(node: object | null | undefined, opts?: object | null): asserts node is TSDeclareMethod;
declare function assertTSQualifiedName(node: object | null | undefined, opts?: object | null): asserts node is TSQualifiedName;
declare function assertTSCallSignatureDeclaration(node: object | null | undefined, opts?: object | null): asserts node is TSCallSignatureDeclaration;
declare function assertTSConstructSignatureDeclaration(node: object | null | undefined, opts?: object | null): asserts node is TSConstructSignatureDeclaration;
declare function assertTSPropertySignature(node: object | null | undefined, opts?: object | null): asserts node is TSPropertySignature;
declare function assertTSMethodSignature(node: object | null | undefined, opts?: object | null): asserts node is TSMethodSignature;
declare function assertTSInde***REMOVED***Signature(node: object | null | undefined, opts?: object | null): asserts node is TSInde***REMOVED***Signature;
declare function assertTSAnyKeyword(node: object | null | undefined, opts?: object | null): asserts node is TSAnyKeyword;
declare function assertTSBooleanKeyword(node: object | null | undefined, opts?: object | null): asserts node is TSBooleanKeyword;
declare function assertTSBigIntKeyword(node: object | null | undefined, opts?: object | null): asserts node is TSBigIntKeyword;
declare function assertTSIntrinsicKeyword(node: object | null | undefined, opts?: object | null): asserts node is TSIntrinsicKeyword;
declare function assertTSNeverKeyword(node: object | null | undefined, opts?: object | null): asserts node is TSNeverKeyword;
declare function assertTSNullKeyword(node: object | null | undefined, opts?: object | null): asserts node is TSNullKeyword;
declare function assertTSNumberKeyword(node: object | null | undefined, opts?: object | null): asserts node is TSNumberKeyword;
declare function assertTSObjectKeyword(node: object | null | undefined, opts?: object | null): asserts node is TSObjectKeyword;
declare function assertTSStringKeyword(node: object | null | undefined, opts?: object | null): asserts node is TSStringKeyword;
declare function assertTSSymbolKeyword(node: object | null | undefined, opts?: object | null): asserts node is TSSymbolKeyword;
declare function assertTSUndefinedKeyword(node: object | null | undefined, opts?: object | null): asserts node is TSUndefinedKeyword;
declare function assertTSUnknownKeyword(node: object | null | undefined, opts?: object | null): asserts node is TSUnknownKeyword;
declare function assertTSVoidKeyword(node: object | null | undefined, opts?: object | null): asserts node is TSVoidKeyword;
declare function assertTSThisType(node: object | null | undefined, opts?: object | null): asserts node is TSThisType;
declare function assertTSFunctionType(node: object | null | undefined, opts?: object | null): asserts node is TSFunctionType;
declare function assertTSConstructorType(node: object | null | undefined, opts?: object | null): asserts node is TSConstructorType;
declare function assertTSTypeReference(node: object | null | undefined, opts?: object | null): asserts node is TSTypeReference;
declare function assertTSTypePredicate(node: object | null | undefined, opts?: object | null): asserts node is TSTypePredicate;
declare function assertTSTypeQuery(node: object | null | undefined, opts?: object | null): asserts node is TSTypeQuery;
declare function assertTSTypeLiteral(node: object | null | undefined, opts?: object | null): asserts node is TSTypeLiteral;
declare function assertTSArrayType(node: object | null | undefined, opts?: object | null): asserts node is TSArrayType;
declare function assertTSTupleType(node: object | null | undefined, opts?: object | null): asserts node is TSTupleType;
declare function assertTSOptionalType(node: object | null | undefined, opts?: object | null): asserts node is TSOptionalType;
declare function assertTSRestType(node: object | null | undefined, opts?: object | null): asserts node is TSRestType;
declare function assertTSNamedTupleMember(node: object | null | undefined, opts?: object | null): asserts node is TSNamedTupleMember;
declare function assertTSUnionType(node: object | null | undefined, opts?: object | null): asserts node is TSUnionType;
declare function assertTSIntersectionType(node: object | null | undefined, opts?: object | null): asserts node is TSIntersectionType;
declare function assertTSConditionalType(node: object | null | undefined, opts?: object | null): asserts node is TSConditionalType;
declare function assertTSInferType(node: object | null | undefined, opts?: object | null): asserts node is TSInferType;
declare function assertTSParenthesizedType(node: object | null | undefined, opts?: object | null): asserts node is TSParenthesizedType;
declare function assertTSTypeOperator(node: object | null | undefined, opts?: object | null): asserts node is TSTypeOperator;
declare function assertTSInde***REMOVED***edAccessType(node: object | null | undefined, opts?: object | null): asserts node is TSInde***REMOVED***edAccessType;
declare function assertTSMappedType(node: object | null | undefined, opts?: object | null): asserts node is TSMappedType;
declare function assertTSLiteralType(node: object | null | undefined, opts?: object | null): asserts node is TSLiteralType;
declare function assertTSE***REMOVED***pressionWithTypeArguments(node: object | null | undefined, opts?: object | null): asserts node is TSE***REMOVED***pressionWithTypeArguments;
declare function assertTSInterfaceDeclaration(node: object | null | undefined, opts?: object | null): asserts node is TSInterfaceDeclaration;
declare function assertTSInterfaceBody(node: object | null | undefined, opts?: object | null): asserts node is TSInterfaceBody;
declare function assertTSTypeAliasDeclaration(node: object | null | undefined, opts?: object | null): asserts node is TSTypeAliasDeclaration;
declare function assertTSInstantiationE***REMOVED***pression(node: object | null | undefined, opts?: object | null): asserts node is TSInstantiationE***REMOVED***pression;
declare function assertTSAsE***REMOVED***pression(node: object | null | undefined, opts?: object | null): asserts node is TSAsE***REMOVED***pression;
declare function assertTSSatisfiesE***REMOVED***pression(node: object | null | undefined, opts?: object | null): asserts node is TSSatisfiesE***REMOVED***pression;
declare function assertTSTypeAssertion(node: object | null | undefined, opts?: object | null): asserts node is TSTypeAssertion;
declare function assertTSEnumDeclaration(node: object | null | undefined, opts?: object | null): asserts node is TSEnumDeclaration;
declare function assertTSEnumMember(node: object | null | undefined, opts?: object | null): asserts node is TSEnumMember;
declare function assertTSModuleDeclaration(node: object | null | undefined, opts?: object | null): asserts node is TSModuleDeclaration;
declare function assertTSModuleBlock(node: object | null | undefined, opts?: object | null): asserts node is TSModuleBlock;
declare function assertTSImportType(node: object | null | undefined, opts?: object | null): asserts node is TSImportType;
declare function assertTSImportEqualsDeclaration(node: object | null | undefined, opts?: object | null): asserts node is TSImportEqualsDeclaration;
declare function assertTSE***REMOVED***ternalModuleReference(node: object | null | undefined, opts?: object | null): asserts node is TSE***REMOVED***ternalModuleReference;
declare function assertTSNonNullE***REMOVED***pression(node: object | null | undefined, opts?: object | null): asserts node is TSNonNullE***REMOVED***pression;
declare function assertTSE***REMOVED***portAssignment(node: object | null | undefined, opts?: object | null): asserts node is TSE***REMOVED***portAssignment;
declare function assertTSNamespaceE***REMOVED***portDeclaration(node: object | null | undefined, opts?: object | null): asserts node is TSNamespaceE***REMOVED***portDeclaration;
declare function assertTSTypeAnnotation(node: object | null | undefined, opts?: object | null): asserts node is TSTypeAnnotation;
declare function assertTSTypeParameterInstantiation(node: object | null | undefined, opts?: object | null): asserts node is TSTypeParameterInstantiation;
declare function assertTSTypeParameterDeclaration(node: object | null | undefined, opts?: object | null): asserts node is TSTypeParameterDeclaration;
declare function assertTSTypeParameter(node: object | null | undefined, opts?: object | null): asserts node is TSTypeParameter;
declare function assertStandardized(node: object | null | undefined, opts?: object | null): asserts node is Standardized;
declare function assertE***REMOVED***pression(node: object | null | undefined, opts?: object | null): asserts node is E***REMOVED***pression;
declare function assertBinary(node: object | null | undefined, opts?: object | null): asserts node is Binary;
declare function assertScopable(node: object | null | undefined, opts?: object | null): asserts node is Scopable;
declare function assertBlockParent(node: object | null | undefined, opts?: object | null): asserts node is BlockParent;
declare function assertBlock(node: object | null | undefined, opts?: object | null): asserts node is Block;
declare function assertStatement(node: object | null | undefined, opts?: object | null): asserts node is Statement;
declare function assertTerminatorless(node: object | null | undefined, opts?: object | null): asserts node is Terminatorless;
declare function assertCompletionStatement(node: object | null | undefined, opts?: object | null): asserts node is CompletionStatement;
declare function assertConditional(node: object | null | undefined, opts?: object | null): asserts node is Conditional;
declare function assertLoop(node: object | null | undefined, opts?: object | null): asserts node is Loop;
declare function assertWhile(node: object | null | undefined, opts?: object | null): asserts node is While;
declare function assertE***REMOVED***pressionWrapper(node: object | null | undefined, opts?: object | null): asserts node is E***REMOVED***pressionWrapper;
declare function assertFor(node: object | null | undefined, opts?: object | null): asserts node is For;
declare function assertForXStatement(node: object | null | undefined, opts?: object | null): asserts node is ForXStatement;
declare function assertFunction(node: object | null | undefined, opts?: object | null): asserts node is Function;
declare function assertFunctionParent(node: object | null | undefined, opts?: object | null): asserts node is FunctionParent;
declare function assertPureish(node: object | null | undefined, opts?: object | null): asserts node is Pureish;
declare function assertDeclaration(node: object | null | undefined, opts?: object | null): asserts node is Declaration;
declare function assertPatternLike(node: object | null | undefined, opts?: object | null): asserts node is PatternLike;
declare function assertLVal(node: object | null | undefined, opts?: object | null): asserts node is LVal;
declare function assertTSEntityName(node: object | null | undefined, opts?: object | null): asserts node is TSEntityName;
declare function assertLiteral(node: object | null | undefined, opts?: object | null): asserts node is Literal;
declare function assertImmutable(node: object | null | undefined, opts?: object | null): asserts node is Immutable;
declare function assertUserWhitespacable(node: object | null | undefined, opts?: object | null): asserts node is UserWhitespacable;
declare function assertMethod(node: object | null | undefined, opts?: object | null): asserts node is Method;
declare function assertObjectMember(node: object | null | undefined, opts?: object | null): asserts node is ObjectMember;
declare function assertProperty(node: object | null | undefined, opts?: object | null): asserts node is Property;
declare function assertUnaryLike(node: object | null | undefined, opts?: object | null): asserts node is UnaryLike;
declare function assertPattern(node: object | null | undefined, opts?: object | null): asserts node is Pattern;
declare function assertClass(node: object | null | undefined, opts?: object | null): asserts node is Class;
declare function assertImportOrE***REMOVED***portDeclaration(node: object | null | undefined, opts?: object | null): asserts node is ImportOrE***REMOVED***portDeclaration;
declare function assertE***REMOVED***portDeclaration(node: object | null | undefined, opts?: object | null): asserts node is E***REMOVED***portDeclaration;
declare function assertModuleSpecifier(node: object | null | undefined, opts?: object | null): asserts node is ModuleSpecifier;
declare function assertAccessor(node: object | null | undefined, opts?: object | null): asserts node is Accessor;
declare function assertPrivate(node: object | null | undefined, opts?: object | null): asserts node is Private;
declare function assertFlow(node: object | null | undefined, opts?: object | null): asserts node is Flow;
declare function assertFlowType(node: object | null | undefined, opts?: object | null): asserts node is FlowType;
declare function assertFlowBaseAnnotation(node: object | null | undefined, opts?: object | null): asserts node is FlowBaseAnnotation;
declare function assertFlowDeclaration(node: object | null | undefined, opts?: object | null): asserts node is FlowDeclaration;
declare function assertFlowPredicate(node: object | null | undefined, opts?: object | null): asserts node is FlowPredicate;
declare function assertEnumBody(node: object | null | undefined, opts?: object | null): asserts node is EnumBody;
declare function assertEnumMember(node: object | null | undefined, opts?: object | null): asserts node is EnumMember;
declare function assertJSX(node: object | null | undefined, opts?: object | null): asserts node is JSX;
declare function assertMiscellaneous(node: object | null | undefined, opts?: object | null): asserts node is Miscellaneous;
declare function assertTypeScript(node: object | null | undefined, opts?: object | null): asserts node is TypeScript;
declare function assertTSTypeElement(node: object | null | undefined, opts?: object | null): asserts node is TSTypeElement;
declare function assertTSType(node: object | null | undefined, opts?: object | null): asserts node is TSType;
declare function assertTSBaseType(node: object | null | undefined, opts?: object | null): asserts node is TSBaseType;
declare function assertNumberLiteral(node: any, opts: any): void;
declare function assertRege***REMOVED***Literal(node: any, opts: any): void;
declare function assertRestProperty(node: any, opts: any): void;
declare function assertSpreadProperty(node: any, opts: any): void;
declare function assertModuleDeclaration(node: any, opts: any): void;

declare const _default$4: {
    (type: "string"): StringTypeAnnotation;
    (type: "number"): NumberTypeAnnotation;
    (type: "undefined"): VoidTypeAnnotation;
    (type: "boolean"): BooleanTypeAnnotation;
    (type: "function"): GenericTypeAnnotation;
    (type: "object"): GenericTypeAnnotation;
    (type: "symbol"): GenericTypeAnnotation;
    (type: "bigint"): AnyTypeAnnotation;
};
//# sourceMappingURL=createTypeAnnotationBasedOnTypeof.d.ts.map

/**
 * Takes an array of `types` and flattens them, removing duplicates and
 * returns a `UnionTypeAnnotation` node containing them.
 */
declare function createFlowUnionType<T e***REMOVED***tends FlowType>(types: [T] | Array<T>): T | UnionTypeAnnotation;

/**
 * Takes an array of `types` and flattens them, removing duplicates and
 * returns a `UnionTypeAnnotation` node containing them.
 */
declare function createTSUnionType(typeAnnotations: Array<TSTypeAnnotation | TSType>): TSType;

declare function arrayE***REMOVED***pression(elements?: Array<null | E***REMOVED***pression | SpreadElement>): ArrayE***REMOVED***pression;
declare function assignmentE***REMOVED***pression(operator: string, left: LVal | OptionalMemberE***REMOVED***pression, right: E***REMOVED***pression): AssignmentE***REMOVED***pression;
declare function binaryE***REMOVED***pression(operator: "+" | "-" | "/" | "%" | "*" | "**" | "&" | "|" | ">>" | ">>>" | "<<" | "^" | "==" | "===" | "!=" | "!==" | "in" | "instanceof" | ">" | "<" | ">=" | "<=" | "|>", left: E***REMOVED***pression | PrivateName, right: E***REMOVED***pression): BinaryE***REMOVED***pression;
declare function interpreterDirective(value: string): InterpreterDirective;
declare function directive(value: DirectiveLiteral): Directive;
declare function directiveLiteral(value: string): DirectiveLiteral;
declare function blockStatement(body: Array<Statement>, directives?: Array<Directive>): BlockStatement;
declare function breakStatement(label?: Identifier | null): BreakStatement;
declare function callE***REMOVED***pression(callee: E***REMOVED***pression | Super | V8IntrinsicIdentifier, _arguments: Array<E***REMOVED***pression | SpreadElement | ArgumentPlaceholder>): CallE***REMOVED***pression;
declare function catchClause(param: Identifier | ArrayPattern | ObjectPattern | null | undefined, body: BlockStatement): CatchClause;
declare function conditionalE***REMOVED***pression(test: E***REMOVED***pression, consequent: E***REMOVED***pression, alternate: E***REMOVED***pression): ConditionalE***REMOVED***pression;
declare function continueStatement(label?: Identifier | null): ContinueStatement;
declare function debuggerStatement(): DebuggerStatement;
declare function doWhileStatement(test: E***REMOVED***pression, body: Statement): DoWhileStatement;
declare function emptyStatement(): EmptyStatement;
declare function e***REMOVED***pressionStatement(e***REMOVED***pression: E***REMOVED***pression): E***REMOVED***pressionStatement;
declare function file(program: Program, comments?: Array<CommentBlock | CommentLine> | null, tokens?: Array<any> | null): File;
declare function forInStatement(left: VariableDeclaration | LVal, right: E***REMOVED***pression, body: Statement): ForInStatement;
declare function forStatement(init: VariableDeclaration | E***REMOVED***pression | null | undefined, test: E***REMOVED***pression | null | undefined, update: E***REMOVED***pression | null | undefined, body: Statement): ForStatement;
declare function functionDeclaration(id: Identifier | null | undefined, params: Array<Identifier | Pattern | RestElement>, body: BlockStatement, generator?: boolean, async?: boolean): FunctionDeclaration;
declare function functionE***REMOVED***pression(id: Identifier | null | undefined, params: Array<Identifier | Pattern | RestElement>, body: BlockStatement, generator?: boolean, async?: boolean): FunctionE***REMOVED***pression;
declare function identifier(name: string): Identifier;
declare function ifStatement(test: E***REMOVED***pression, consequent: Statement, alternate?: Statement | null): IfStatement;
declare function labeledStatement(label: Identifier, body: Statement): LabeledStatement;
declare function stringLiteral(value: string): StringLiteral;
declare function numericLiteral(value: number): NumericLiteral;
declare function nullLiteral(): NullLiteral;
declare function booleanLiteral(value: boolean): BooleanLiteral;
declare function regE***REMOVED***pLiteral(pattern: string, flags?: string): RegE***REMOVED***pLiteral;
declare function logicalE***REMOVED***pression(operator: "||" | "&&" | "??", left: E***REMOVED***pression, right: E***REMOVED***pression): LogicalE***REMOVED***pression;
declare function memberE***REMOVED***pression(object: E***REMOVED***pression | Super, property: E***REMOVED***pression | Identifier | PrivateName, computed?: boolean, optional?: boolean | null): MemberE***REMOVED***pression;
declare function newE***REMOVED***pression(callee: E***REMOVED***pression | Super | V8IntrinsicIdentifier, _arguments: Array<E***REMOVED***pression | SpreadElement | ArgumentPlaceholder>): NewE***REMOVED***pression;
declare function program(body: Array<Statement>, directives?: Array<Directive>, sourceType?: "script" | "module", interpreter?: InterpreterDirective | null): Program;
declare function objectE***REMOVED***pression(properties: Array<ObjectMethod | ObjectProperty | SpreadElement>): ObjectE***REMOVED***pression;
declare function objectMethod(kind: "method" | "get" | "set" | undefined, key: E***REMOVED***pression | Identifier | StringLiteral | NumericLiteral | BigIntLiteral, params: Array<Identifier | Pattern | RestElement>, body: BlockStatement, computed?: boolean, generator?: boolean, async?: boolean): ObjectMethod;
declare function objectProperty(key: E***REMOVED***pression | Identifier | StringLiteral | NumericLiteral | BigIntLiteral | DecimalLiteral | PrivateName, value: E***REMOVED***pression | PatternLike, computed?: boolean, shorthand?: boolean, decorators?: Array<Decorator> | null): ObjectProperty;
declare function restElement(argument: LVal): RestElement;
declare function returnStatement(argument?: E***REMOVED***pression | null): ReturnStatement;
declare function sequenceE***REMOVED***pression(e***REMOVED***pressions: Array<E***REMOVED***pression>): SequenceE***REMOVED***pression;
declare function parenthesizedE***REMOVED***pression(e***REMOVED***pression: E***REMOVED***pression): ParenthesizedE***REMOVED***pression;
declare function switchCase(test: E***REMOVED***pression | null | undefined, consequent: Array<Statement>): SwitchCase;
declare function switchStatement(discriminant: E***REMOVED***pression, cases: Array<SwitchCase>): SwitchStatement;
declare function thisE***REMOVED***pression(): ThisE***REMOVED***pression;
declare function throwStatement(argument: E***REMOVED***pression): ThrowStatement;
declare function tryStatement(block: BlockStatement, handler?: CatchClause | null, finalizer?: BlockStatement | null): TryStatement;
declare function unaryE***REMOVED***pression(operator: "void" | "throw" | "delete" | "!" | "+" | "-" | "~" | "typeof", argument: E***REMOVED***pression, prefi***REMOVED***?: boolean): UnaryE***REMOVED***pression;
declare function updateE***REMOVED***pression(operator: "++" | "--", argument: E***REMOVED***pression, prefi***REMOVED***?: boolean): UpdateE***REMOVED***pression;
declare function variableDeclaration(kind: "var" | "let" | "const" | "using" | "await using", declarations: Array<VariableDeclarator>): VariableDeclaration;
declare function variableDeclarator(id: LVal, init?: E***REMOVED***pression | null): VariableDeclarator;
declare function whileStatement(test: E***REMOVED***pression, body: Statement): WhileStatement;
declare function withStatement(object: E***REMOVED***pression, body: Statement): WithStatement;
declare function assignmentPattern(left: Identifier | ObjectPattern | ArrayPattern | MemberE***REMOVED***pression | TSAsE***REMOVED***pression | TSSatisfiesE***REMOVED***pression | TSTypeAssertion | TSNonNullE***REMOVED***pression, right: E***REMOVED***pression): AssignmentPattern;
declare function arrayPattern(elements: Array<null | PatternLike | LVal>): ArrayPattern;
declare function arrowFunctionE***REMOVED***pression(params: Array<Identifier | Pattern | RestElement>, body: BlockStatement | E***REMOVED***pression, async?: boolean): ArrowFunctionE***REMOVED***pression;
declare function classBody(body: Array<ClassMethod | ClassPrivateMethod | ClassProperty | ClassPrivateProperty | ClassAccessorProperty | TSDeclareMethod | TSInde***REMOVED***Signature | StaticBlock>): ClassBody;
declare function classE***REMOVED***pression(id: Identifier | null | undefined, superClass: E***REMOVED***pression | null | undefined, body: ClassBody, decorators?: Array<Decorator> | null): ClassE***REMOVED***pression;
declare function classDeclaration(id: Identifier | null | undefined, superClass: E***REMOVED***pression | null | undefined, body: ClassBody, decorators?: Array<Decorator> | null): ClassDeclaration;
declare function e***REMOVED***portAllDeclaration(source: StringLiteral): E***REMOVED***portAllDeclaration;
declare function e***REMOVED***portDefaultDeclaration(declaration: TSDeclareFunction | FunctionDeclaration | ClassDeclaration | E***REMOVED***pression): E***REMOVED***portDefaultDeclaration;
declare function e***REMOVED***portNamedDeclaration(declaration?: Declaration | null, specifiers?: Array<E***REMOVED***portSpecifier | E***REMOVED***portDefaultSpecifier | E***REMOVED***portNamespaceSpecifier>, source?: StringLiteral | null): E***REMOVED***portNamedDeclaration;
declare function e***REMOVED***portSpecifier(local: Identifier, e***REMOVED***ported: Identifier | StringLiteral): E***REMOVED***portSpecifier;
declare function forOfStatement(left: VariableDeclaration | LVal, right: E***REMOVED***pression, body: Statement, _await?: boolean): ForOfStatement;
declare function importDeclaration(specifiers: Array<ImportSpecifier | ImportDefaultSpecifier | ImportNamespaceSpecifier>, source: StringLiteral): ImportDeclaration;
declare function importDefaultSpecifier(local: Identifier): ImportDefaultSpecifier;
declare function importNamespaceSpecifier(local: Identifier): ImportNamespaceSpecifier;
declare function importSpecifier(local: Identifier, imported: Identifier | StringLiteral): ImportSpecifier;
declare function importE***REMOVED***pression(source: E***REMOVED***pression, options?: E***REMOVED***pression | null): ImportE***REMOVED***pression;
declare function metaProperty(meta: Identifier, property: Identifier): MetaProperty;
declare function classMethod(kind: "get" | "set" | "method" | "constructor" | undefined, key: Identifier | StringLiteral | NumericLiteral | BigIntLiteral | E***REMOVED***pression, params: Array<Identifier | Pattern | RestElement | TSParameterProperty>, body: BlockStatement, computed?: boolean, _static?: boolean, generator?: boolean, async?: boolean): ClassMethod;
declare function objectPattern(properties: Array<RestElement | ObjectProperty>): ObjectPattern;
declare function spreadElement(argument: E***REMOVED***pression): SpreadElement;
declare function _super(): Super;

declare function taggedTemplateE***REMOVED***pression(tag: E***REMOVED***pression, quasi: TemplateLiteral): TaggedTemplateE***REMOVED***pression;
declare function templateElement(value: {
    raw: string;
    cooked?: string;
}, tail?: boolean): TemplateElement;
declare function templateLiteral(quasis: Array<TemplateElement>, e***REMOVED***pressions: Array<E***REMOVED***pression | TSType>): TemplateLiteral;
declare function yieldE***REMOVED***pression(argument?: E***REMOVED***pression | null, delegate?: boolean): YieldE***REMOVED***pression;
declare function awaitE***REMOVED***pression(argument: E***REMOVED***pression): AwaitE***REMOVED***pression;
declare function _import(): Import;

declare function bigIntLiteral(value: string): BigIntLiteral;
declare function e***REMOVED***portNamespaceSpecifier(e***REMOVED***ported: Identifier): E***REMOVED***portNamespaceSpecifier;
declare function optionalMemberE***REMOVED***pression(object: E***REMOVED***pression, property: E***REMOVED***pression | Identifier, computed: boolean | undefined, optional: boolean): OptionalMemberE***REMOVED***pression;
declare function optionalCallE***REMOVED***pression(callee: E***REMOVED***pression, _arguments: Array<E***REMOVED***pression | SpreadElement | ArgumentPlaceholder>, optional: boolean): OptionalCallE***REMOVED***pression;
declare function classProperty(key: Identifier | StringLiteral | NumericLiteral | BigIntLiteral | E***REMOVED***pression, value?: E***REMOVED***pression | null, typeAnnotation?: TypeAnnotation | TSTypeAnnotation | Noop | null, decorators?: Array<Decorator> | null, computed?: boolean, _static?: boolean): ClassProperty;
declare function classAccessorProperty(key: Identifier | StringLiteral | NumericLiteral | BigIntLiteral | E***REMOVED***pression | PrivateName, value?: E***REMOVED***pression | null, typeAnnotation?: TypeAnnotation | TSTypeAnnotation | Noop | null, decorators?: Array<Decorator> | null, computed?: boolean, _static?: boolean): ClassAccessorProperty;
declare function classPrivateProperty(key: PrivateName, value?: E***REMOVED***pression | null, decorators?: Array<Decorator> | null, _static?: boolean): ClassPrivateProperty;
declare function classPrivateMethod(kind: "get" | "set" | "method" | undefined, key: PrivateName, params: Array<Identifier | Pattern | RestElement | TSParameterProperty>, body: BlockStatement, _static?: boolean): ClassPrivateMethod;
declare function privateName(id: Identifier): PrivateName;
declare function staticBlock(body: Array<Statement>): StaticBlock;
declare function anyTypeAnnotation(): AnyTypeAnnotation;
declare function arrayTypeAnnotation(elementType: FlowType): ArrayTypeAnnotation;
declare function booleanTypeAnnotation(): BooleanTypeAnnotation;
declare function booleanLiteralTypeAnnotation(value: boolean): BooleanLiteralTypeAnnotation;
declare function nullLiteralTypeAnnotation(): NullLiteralTypeAnnotation;
declare function classImplements(id: Identifier, typeParameters?: TypeParameterInstantiation | null): ClassImplements;
declare function declareClass(id: Identifier, typeParameters: TypeParameterDeclaration | null | undefined, _e***REMOVED***tends: Array<InterfaceE***REMOVED***tends> | null | undefined, body: ObjectTypeAnnotation): DeclareClass;
declare function declareFunction(id: Identifier): DeclareFunction;
declare function declareInterface(id: Identifier, typeParameters: TypeParameterDeclaration | null | undefined, _e***REMOVED***tends: Array<InterfaceE***REMOVED***tends> | null | undefined, body: ObjectTypeAnnotation): DeclareInterface;
declare function declareModule(id: Identifier | StringLiteral, body: BlockStatement, kind?: "CommonJS" | "ES" | null): DeclareModule;
declare function declareModuleE***REMOVED***ports(typeAnnotation: TypeAnnotation): DeclareModuleE***REMOVED***ports;
declare function declareTypeAlias(id: Identifier, typeParameters: TypeParameterDeclaration | null | undefined, right: FlowType): DeclareTypeAlias;
declare function declareOpaqueType(id: Identifier, typeParameters?: TypeParameterDeclaration | null, supertype?: FlowType | null): DeclareOpaqueType;
declare function declareVariable(id: Identifier): DeclareVariable;
declare function declareE***REMOVED***portDeclaration(declaration?: Flow | null, specifiers?: Array<E***REMOVED***portSpecifier | E***REMOVED***portNamespaceSpecifier> | null, source?: StringLiteral | null, attributes?: Array<ImportAttribute> | null): DeclareE***REMOVED***portDeclaration;
declare function declareE***REMOVED***portAllDeclaration(source: StringLiteral, attributes?: Array<ImportAttribute> | null): DeclareE***REMOVED***portAllDeclaration;
declare function declaredPredicate(value: Flow): DeclaredPredicate;
declare function e***REMOVED***istsTypeAnnotation(): E***REMOVED***istsTypeAnnotation;
declare function functionTypeAnnotation(typeParameters: TypeParameterDeclaration | null | undefined, params: Array<FunctionTypeParam>, rest: FunctionTypeParam | null | undefined, returnType: FlowType): FunctionTypeAnnotation;
declare function functionTypeParam(name: Identifier | null | undefined, typeAnnotation: FlowType): FunctionTypeParam;
declare function genericTypeAnnotation(id: Identifier | QualifiedTypeIdentifier, typeParameters?: TypeParameterInstantiation | null): GenericTypeAnnotation;
declare function inferredPredicate(): InferredPredicate;
declare function interfaceE***REMOVED***tends(id: Identifier | QualifiedTypeIdentifier, typeParameters?: TypeParameterInstantiation | null): InterfaceE***REMOVED***tends;
declare function interfaceDeclaration(id: Identifier, typeParameters: TypeParameterDeclaration | null | undefined, _e***REMOVED***tends: Array<InterfaceE***REMOVED***tends> | null | undefined, body: ObjectTypeAnnotation): InterfaceDeclaration;
declare function interfaceTypeAnnotation(_e***REMOVED***tends: Array<InterfaceE***REMOVED***tends> | null | undefined, body: ObjectTypeAnnotation): InterfaceTypeAnnotation;
declare function intersectionTypeAnnotation(types: Array<FlowType>): IntersectionTypeAnnotation;
declare function mi***REMOVED***edTypeAnnotation(): Mi***REMOVED***edTypeAnnotation;
declare function emptyTypeAnnotation(): EmptyTypeAnnotation;
declare function nullableTypeAnnotation(typeAnnotation: FlowType): NullableTypeAnnotation;
declare function numberLiteralTypeAnnotation(value: number): NumberLiteralTypeAnnotation;
declare function numberTypeAnnotation(): NumberTypeAnnotation;
declare function objectTypeAnnotation(properties: Array<ObjectTypeProperty | ObjectTypeSpreadProperty>, inde***REMOVED***ers?: Array<ObjectTypeInde***REMOVED***er>, callProperties?: Array<ObjectTypeCallProperty>, internalSlots?: Array<ObjectTypeInternalSlot>, e***REMOVED***act?: boolean): ObjectTypeAnnotation;
declare function objectTypeInternalSlot(id: Identifier, value: FlowType, optional: boolean, _static: boolean, method: boolean): ObjectTypeInternalSlot;
declare function objectTypeCallProperty(value: FlowType): ObjectTypeCallProperty;
declare function objectTypeInde***REMOVED***er(id: Identifier | null | undefined, key: FlowType, value: FlowType, variance?: Variance | null): ObjectTypeInde***REMOVED***er;
declare function objectTypeProperty(key: Identifier | StringLiteral, value: FlowType, variance?: Variance | null): ObjectTypeProperty;
declare function objectTypeSpreadProperty(argument: FlowType): ObjectTypeSpreadProperty;
declare function opaqueType(id: Identifier, typeParameters: TypeParameterDeclaration | null | undefined, supertype: FlowType | null | undefined, impltype: FlowType): OpaqueType;
declare function qualifiedTypeIdentifier(id: Identifier, qualification: Identifier | QualifiedTypeIdentifier): QualifiedTypeIdentifier;
declare function stringLiteralTypeAnnotation(value: string): StringLiteralTypeAnnotation;
declare function stringTypeAnnotation(): StringTypeAnnotation;
declare function symbolTypeAnnotation(): SymbolTypeAnnotation;
declare function thisTypeAnnotation(): ThisTypeAnnotation;
declare function tupleTypeAnnotation(types: Array<FlowType>): TupleTypeAnnotation;
declare function typeofTypeAnnotation(argument: FlowType): TypeofTypeAnnotation;
declare function typeAlias(id: Identifier, typeParameters: TypeParameterDeclaration | null | undefined, right: FlowType): TypeAlias;
declare function typeAnnotation(typeAnnotation: FlowType): TypeAnnotation;
declare function typeCastE***REMOVED***pression(e***REMOVED***pression: E***REMOVED***pression, typeAnnotation: TypeAnnotation): TypeCastE***REMOVED***pression;
declare function typeParameter(bound?: TypeAnnotation | null, _default?: FlowType | null, variance?: Variance | null): TypeParameter;
declare function typeParameterDeclaration(params: Array<TypeParameter>): TypeParameterDeclaration;
declare function typeParameterInstantiation(params: Array<FlowType>): TypeParameterInstantiation;
declare function unionTypeAnnotation(types: Array<FlowType>): UnionTypeAnnotation;
declare function variance(kind: "minus" | "plus"): Variance;
declare function voidTypeAnnotation(): VoidTypeAnnotation;
declare function enumDeclaration(id: Identifier, body: EnumBooleanBody | EnumNumberBody | EnumStringBody | EnumSymbolBody): EnumDeclaration;
declare function enumBooleanBody(members: Array<EnumBooleanMember>): EnumBooleanBody;
declare function enumNumberBody(members: Array<EnumNumberMember>): EnumNumberBody;
declare function enumStringBody(members: Array<EnumStringMember | EnumDefaultedMember>): EnumStringBody;
declare function enumSymbolBody(members: Array<EnumDefaultedMember>): EnumSymbolBody;
declare function enumBooleanMember(id: Identifier): EnumBooleanMember;
declare function enumNumberMember(id: Identifier, init: NumericLiteral): EnumNumberMember;
declare function enumStringMember(id: Identifier, init: StringLiteral): EnumStringMember;
declare function enumDefaultedMember(id: Identifier): EnumDefaultedMember;
declare function inde***REMOVED***edAccessType(objectType: FlowType, inde***REMOVED***Type: FlowType): Inde***REMOVED***edAccessType;
declare function optionalInde***REMOVED***edAccessType(objectType: FlowType, inde***REMOVED***Type: FlowType): OptionalInde***REMOVED***edAccessType;
declare function js***REMOVED***Attribute(name: JSXIdentifier | JSXNamespacedName, value?: JSXElement | JSXFragment | StringLiteral | JSXE***REMOVED***pressionContainer | null): JSXAttribute;

declare function js***REMOVED***ClosingElement(name: JSXIdentifier | JSXMemberE***REMOVED***pression | JSXNamespacedName): JSXClosingElement;

declare function js***REMOVED***Element(openingElement: JSXOpeningElement, closingElement: JSXClosingElement | null | undefined, children: Array<JSXTe***REMOVED***t | JSXE***REMOVED***pressionContainer | JSXSpreadChild | JSXElement | JSXFragment>, selfClosing?: boolean | null): JSXElement;

declare function js***REMOVED***EmptyE***REMOVED***pression(): JSXEmptyE***REMOVED***pression;

declare function js***REMOVED***E***REMOVED***pressionContainer(e***REMOVED***pression: E***REMOVED***pression | JSXEmptyE***REMOVED***pression): JSXE***REMOVED***pressionContainer;

declare function js***REMOVED***SpreadChild(e***REMOVED***pression: E***REMOVED***pression): JSXSpreadChild;

declare function js***REMOVED***Identifier(name: string): JSXIdentifier;

declare function js***REMOVED***MemberE***REMOVED***pression(object: JSXMemberE***REMOVED***pression | JSXIdentifier, property: JSXIdentifier): JSXMemberE***REMOVED***pression;

declare function js***REMOVED***NamespacedName(namespace: JSXIdentifier, name: JSXIdentifier): JSXNamespacedName;

declare function js***REMOVED***OpeningElement(name: JSXIdentifier | JSXMemberE***REMOVED***pression | JSXNamespacedName, attributes: Array<JSXAttribute | JSXSpreadAttribute>, selfClosing?: boolean): JSXOpeningElement;

declare function js***REMOVED***SpreadAttribute(argument: E***REMOVED***pression): JSXSpreadAttribute;

declare function js***REMOVED***Te***REMOVED***t(value: string): JSXTe***REMOVED***t;

declare function js***REMOVED***Fragment(openingFragment: JSXOpeningFragment, closingFragment: JSXClosingFragment, children: Array<JSXTe***REMOVED***t | JSXE***REMOVED***pressionContainer | JSXSpreadChild | JSXElement | JSXFragment>): JSXFragment;

declare function js***REMOVED***OpeningFragment(): JSXOpeningFragment;

declare function js***REMOVED***ClosingFragment(): JSXClosingFragment;

declare function noop(): Noop;
declare function placeholder(e***REMOVED***pectedNode: "Identifier" | "StringLiteral" | "E***REMOVED***pression" | "Statement" | "Declaration" | "BlockStatement" | "ClassBody" | "Pattern", name: Identifier): Placeholder;
declare function v8IntrinsicIdentifier(name: string): V8IntrinsicIdentifier;
declare function argumentPlaceholder(): ArgumentPlaceholder;
declare function bindE***REMOVED***pression(object: E***REMOVED***pression, callee: E***REMOVED***pression): BindE***REMOVED***pression;
declare function importAttribute(key: Identifier | StringLiteral, value: StringLiteral): ImportAttribute;
declare function decorator(e***REMOVED***pression: E***REMOVED***pression): Decorator;
declare function doE***REMOVED***pression(body: BlockStatement, async?: boolean): DoE***REMOVED***pression;
declare function e***REMOVED***portDefaultSpecifier(e***REMOVED***ported: Identifier): E***REMOVED***portDefaultSpecifier;
declare function recordE***REMOVED***pression(properties: Array<ObjectProperty | SpreadElement>): RecordE***REMOVED***pression;
declare function tupleE***REMOVED***pression(elements?: Array<E***REMOVED***pression | SpreadElement>): TupleE***REMOVED***pression;
declare function decimalLiteral(value: string): DecimalLiteral;
declare function moduleE***REMOVED***pression(body: Program): ModuleE***REMOVED***pression;
declare function topicReference(): TopicReference;
declare function pipelineTopicE***REMOVED***pression(e***REMOVED***pression: E***REMOVED***pression): PipelineTopicE***REMOVED***pression;
declare function pipelineBareFunction(callee: E***REMOVED***pression): PipelineBareFunction;
declare function pipelinePrimaryTopicReference(): PipelinePrimaryTopicReference;
declare function tsParameterProperty(parameter: Identifier | AssignmentPattern): TSParameterProperty;

declare function tsDeclareFunction(id: Identifier | null | undefined, typeParameters: TSTypeParameterDeclaration | Noop | null | undefined, params: Array<Identifier | Pattern | RestElement>, returnType?: TSTypeAnnotation | Noop | null): TSDeclareFunction;

declare function tsDeclareMethod(decorators: Array<Decorator> | null | undefined, key: Identifier | StringLiteral | NumericLiteral | BigIntLiteral | E***REMOVED***pression, typeParameters: TSTypeParameterDeclaration | Noop | null | undefined, params: Array<Identifier | Pattern | RestElement | TSParameterProperty>, returnType?: TSTypeAnnotation | Noop | null): TSDeclareMethod;

declare function tsQualifiedName(left: TSEntityName, right: Identifier): TSQualifiedName;

declare function tsCallSignatureDeclaration(typeParameters: TSTypeParameterDeclaration | null | undefined, parameters: Array<ArrayPattern | Identifier | ObjectPattern | RestElement>, typeAnnotation?: TSTypeAnnotation | null): TSCallSignatureDeclaration;

declare function tsConstructSignatureDeclaration(typeParameters: TSTypeParameterDeclaration | null | undefined, parameters: Array<ArrayPattern | Identifier | ObjectPattern | RestElement>, typeAnnotation?: TSTypeAnnotation | null): TSConstructSignatureDeclaration;

declare function tsPropertySignature(key: E***REMOVED***pression, typeAnnotation?: TSTypeAnnotation | null): TSPropertySignature;

declare function tsMethodSignature(key: E***REMOVED***pression, typeParameters: TSTypeParameterDeclaration | null | undefined, parameters: Array<ArrayPattern | Identifier | ObjectPattern | RestElement>, typeAnnotation?: TSTypeAnnotation | null): TSMethodSignature;

declare function tsInde***REMOVED***Signature(parameters: Array<Identifier>, typeAnnotation?: TSTypeAnnotation | null): TSInde***REMOVED***Signature;

declare function tsAnyKeyword(): TSAnyKeyword;

declare function tsBooleanKeyword(): TSBooleanKeyword;

declare function tsBigIntKeyword(): TSBigIntKeyword;

declare function tsIntrinsicKeyword(): TSIntrinsicKeyword;

declare function tsNeverKeyword(): TSNeverKeyword;

declare function tsNullKeyword(): TSNullKeyword;

declare function tsNumberKeyword(): TSNumberKeyword;

declare function tsObjectKeyword(): TSObjectKeyword;

declare function tsStringKeyword(): TSStringKeyword;

declare function tsSymbolKeyword(): TSSymbolKeyword;

declare function tsUndefinedKeyword(): TSUndefinedKeyword;

declare function tsUnknownKeyword(): TSUnknownKeyword;

declare function tsVoidKeyword(): TSVoidKeyword;

declare function tsThisType(): TSThisType;

declare function tsFunctionType(typeParameters: TSTypeParameterDeclaration | null | undefined, parameters: Array<ArrayPattern | Identifier | ObjectPattern | RestElement>, typeAnnotation?: TSTypeAnnotation | null): TSFunctionType;

declare function tsConstructorType(typeParameters: TSTypeParameterDeclaration | null | undefined, parameters: Array<ArrayPattern | Identifier | ObjectPattern | RestElement>, typeAnnotation?: TSTypeAnnotation | null): TSConstructorType;

declare function tsTypeReference(typeName: TSEntityName, typeParameters?: TSTypeParameterInstantiation | null): TSTypeReference;

declare function tsTypePredicate(parameterName: Identifier | TSThisType, typeAnnotation?: TSTypeAnnotation | null, asserts?: boolean | null): TSTypePredicate;

declare function tsTypeQuery(e***REMOVED***prName: TSEntityName | TSImportType, typeParameters?: TSTypeParameterInstantiation | null): TSTypeQuery;

declare function tsTypeLiteral(members: Array<TSTypeElement>): TSTypeLiteral;

declare function tsArrayType(elementType: TSType): TSArrayType;

declare function tsTupleType(elementTypes: Array<TSType | TSNamedTupleMember>): TSTupleType;

declare function tsOptionalType(typeAnnotation: TSType): TSOptionalType;

declare function tsRestType(typeAnnotation: TSType): TSRestType;

declare function tsNamedTupleMember(label: Identifier, elementType: TSType, optional?: boolean): TSNamedTupleMember;

declare function tsUnionType(types: Array<TSType>): TSUnionType;

declare function tsIntersectionType(types: Array<TSType>): TSIntersectionType;

declare function tsConditionalType(checkType: TSType, e***REMOVED***tendsType: TSType, trueType: TSType, falseType: TSType): TSConditionalType;

declare function tsInferType(typeParameter: TSTypeParameter): TSInferType;

declare function tsParenthesizedType(typeAnnotation: TSType): TSParenthesizedType;

declare function tsTypeOperator(typeAnnotation: TSType): TSTypeOperator;

declare function tsInde***REMOVED***edAccessType(objectType: TSType, inde***REMOVED***Type: TSType): TSInde***REMOVED***edAccessType;

declare function tsMappedType(typeParameter: TSTypeParameter, typeAnnotation?: TSType | null, nameType?: TSType | null): TSMappedType;

declare function tsLiteralType(literal: NumericLiteral | StringLiteral | BooleanLiteral | BigIntLiteral | TemplateLiteral | UnaryE***REMOVED***pression): TSLiteralType;

declare function tsE***REMOVED***pressionWithTypeArguments(e***REMOVED***pression: TSEntityName, typeParameters?: TSTypeParameterInstantiation | null): TSE***REMOVED***pressionWithTypeArguments;

declare function tsInterfaceDeclaration(id: Identifier, typeParameters: TSTypeParameterDeclaration | null | undefined, _e***REMOVED***tends: Array<TSE***REMOVED***pressionWithTypeArguments> | null | undefined, body: TSInterfaceBody): TSInterfaceDeclaration;

declare function tsInterfaceBody(body: Array<TSTypeElement>): TSInterfaceBody;

declare function tsTypeAliasDeclaration(id: Identifier, typeParameters: TSTypeParameterDeclaration | null | undefined, typeAnnotation: TSType): TSTypeAliasDeclaration;

declare function tsInstantiationE***REMOVED***pression(e***REMOVED***pression: E***REMOVED***pression, typeParameters?: TSTypeParameterInstantiation | null): TSInstantiationE***REMOVED***pression;

declare function tsAsE***REMOVED***pression(e***REMOVED***pression: E***REMOVED***pression, typeAnnotation: TSType): TSAsE***REMOVED***pression;

declare function tsSatisfiesE***REMOVED***pression(e***REMOVED***pression: E***REMOVED***pression, typeAnnotation: TSType): TSSatisfiesE***REMOVED***pression;

declare function tsTypeAssertion(typeAnnotation: TSType, e***REMOVED***pression: E***REMOVED***pression): TSTypeAssertion;

declare function tsEnumDeclaration(id: Identifier, members: Array<TSEnumMember>): TSEnumDeclaration;

declare function tsEnumMember(id: Identifier | StringLiteral, initializer?: E***REMOVED***pression | null): TSEnumMember;

declare function tsModuleDeclaration(id: Identifier | StringLiteral, body: TSModuleBlock | TSModuleDeclaration): TSModuleDeclaration;

declare function tsModuleBlock(body: Array<Statement>): TSModuleBlock;

declare function tsImportType(argument: StringLiteral, qualifier?: TSEntityName | null, typeParameters?: TSTypeParameterInstantiation | null): TSImportType;

declare function tsImportEqualsDeclaration(id: Identifier, moduleReference: TSEntityName | TSE***REMOVED***ternalModuleReference): TSImportEqualsDeclaration;

declare function tsE***REMOVED***ternalModuleReference(e***REMOVED***pression: StringLiteral): TSE***REMOVED***ternalModuleReference;

declare function tsNonNullE***REMOVED***pression(e***REMOVED***pression: E***REMOVED***pression): TSNonNullE***REMOVED***pression;

declare function tsE***REMOVED***portAssignment(e***REMOVED***pression: E***REMOVED***pression): TSE***REMOVED***portAssignment;

declare function tsNamespaceE***REMOVED***portDeclaration(id: Identifier): TSNamespaceE***REMOVED***portDeclaration;

declare function tsTypeAnnotation(typeAnnotation: TSType): TSTypeAnnotation;

declare function tsTypeParameterInstantiation(params: Array<TSType>): TSTypeParameterInstantiation;

declare function tsTypeParameterDeclaration(params: Array<TSTypeParameter>): TSTypeParameterDeclaration;

declare function tsTypeParameter(constraint: TSType | null | undefined, _default: TSType | null | undefined, name: string): TSTypeParameter;

/** @deprecated */
declare function NumberLiteral$1(value: number): NumericLiteral;

/** @deprecated */
declare function Rege***REMOVED***Literal$1(pattern: string, flags?: string): RegE***REMOVED***pLiteral;

/** @deprecated */
declare function RestProperty$1(argument: LVal): RestElement;

/** @deprecated */
declare function SpreadProperty$1(argument: E***REMOVED***pression): SpreadElement;

declare function buildUndefinedNode(): UnaryE***REMOVED***pression;

/**
 * Create a clone of a `node` including only properties belonging to the node.
 * If the second parameter is `false`, cloneNode performs a shallow clone.
 * If the third parameter is true, the cloned nodes e***REMOVED***clude location properties.
 */
declare function cloneNode<T e***REMOVED***tends Node>(node: T, deep?: boolean, withoutLoc?: boolean): T;

/**
 * Create a shallow clone of a `node`, including only
 * properties belonging to the node.
 * @deprecated Use t.cloneNode instead.
 */
declare function clone<T e***REMOVED***tends Node>(node: T): T;

/**
 * Create a deep clone of a `node` and all of it's child nodes
 * including only properties belonging to the node.
 * @deprecated Use t.cloneNode instead.
 */
declare function cloneDeep<T e***REMOVED***tends Node>(node: T): T;

/**
 * Create a deep clone of a `node` and all of it's child nodes
 * including only properties belonging to the node.
 * e***REMOVED***cluding `_private` and location properties.
 */
declare function cloneDeepWithoutLoc<T e***REMOVED***tends Node>(node: T): T;

/**
 * Create a shallow clone of a `node` e***REMOVED***cluding `_private` and location properties.
 */
declare function cloneWithoutLoc<T e***REMOVED***tends Node>(node: T): T;

/**
 * Add comment of certain type to a node.
 */
declare function addComment<T e***REMOVED***tends Node>(node: T, type: CommentTypeShorthand, content: string, line?: boolean): T;

/**
 * Add comments of certain type to a node.
 */
declare function addComments<T e***REMOVED***tends Node>(node: T, type: CommentTypeShorthand, comments: Array<Comment>): T;

declare function inheritInnerComments(child: Node, parent: Node): void;

declare function inheritLeadingComments(child: Node, parent: Node): void;

/**
 * Inherit all unique comments from `parent` node to `child` node.
 */
declare function inheritsComments<T e***REMOVED***tends Node>(child: T, parent: Node): T;

declare function inheritTrailingComments(child: Node, parent: Node): void;

/**
 * Remove comment properties from a node.
 */
declare function removeComments<T e***REMOVED***tends Node>(node: T): T;

declare const STANDARDIZED_TYPES: ("AnyTypeAnnotation" | "ArgumentPlaceholder" | "ArrayE***REMOVED***pression" | "ArrayPattern" | "ArrayTypeAnnotation" | "ArrowFunctionE***REMOVED***pression" | "AssignmentE***REMOVED***pression" | "AssignmentPattern" | "AwaitE***REMOVED***pression" | "BigIntLiteral" | "BinaryE***REMOVED***pression" | "BindE***REMOVED***pression" | "BlockStatement" | "BooleanLiteral" | "BooleanLiteralTypeAnnotation" | "BooleanTypeAnnotation" | "BreakStatement" | "CallE***REMOVED***pression" | "CatchClause" | "ClassAccessorProperty" | "ClassBody" | "ClassDeclaration" | "ClassE***REMOVED***pression" | "ClassImplements" | "ClassMethod" | "ClassPrivateMethod" | "ClassPrivateProperty" | "ClassProperty" | "ConditionalE***REMOVED***pression" | "ContinueStatement" | "DebuggerStatement" | "DecimalLiteral" | "DeclareClass" | "DeclareE***REMOVED***portAllDeclaration" | "DeclareE***REMOVED***portDeclaration" | "DeclareFunction" | "DeclareInterface" | "DeclareModule" | "DeclareModuleE***REMOVED***ports" | "DeclareOpaqueType" | "DeclareTypeAlias" | "DeclareVariable" | "DeclaredPredicate" | "Decorator" | "Directive" | "DirectiveLiteral" | "DoE***REMOVED***pression" | "DoWhileStatement" | "EmptyStatement" | "EmptyTypeAnnotation" | "EnumBooleanBody" | "EnumBooleanMember" | "EnumDeclaration" | "EnumDefaultedMember" | "EnumNumberBody" | "EnumNumberMember" | "EnumStringBody" | "EnumStringMember" | "EnumSymbolBody" | "E***REMOVED***istsTypeAnnotation" | "E***REMOVED***portAllDeclaration" | "E***REMOVED***portDefaultDeclaration" | "E***REMOVED***portDefaultSpecifier" | "E***REMOVED***portNamedDeclaration" | "E***REMOVED***portNamespaceSpecifier" | "E***REMOVED***portSpecifier" | "E***REMOVED***pressionStatement" | "File" | "ForInStatement" | "ForOfStatement" | "ForStatement" | "FunctionDeclaration" | "FunctionE***REMOVED***pression" | "FunctionTypeAnnotation" | "FunctionTypeParam" | "GenericTypeAnnotation" | "Identifier" | "IfStatement" | "Import" | "ImportAttribute" | "ImportDeclaration" | "ImportDefaultSpecifier" | "ImportE***REMOVED***pression" | "ImportNamespaceSpecifier" | "ImportSpecifier" | "Inde***REMOVED***edAccessType" | "InferredPredicate" | "InterfaceDeclaration" | "InterfaceE***REMOVED***tends" | "InterfaceTypeAnnotation" | "InterpreterDirective" | "IntersectionTypeAnnotation" | "JSXAttribute" | "JSXClosingElement" | "JSXClosingFragment" | "JSXElement" | "JSXEmptyE***REMOVED***pression" | "JSXE***REMOVED***pressionContainer" | "JSXFragment" | "JSXIdentifier" | "JSXMemberE***REMOVED***pression" | "JSXNamespacedName" | "JSXOpeningElement" | "JSXOpeningFragment" | "JSXSpreadAttribute" | "JSXSpreadChild" | "JSXTe***REMOVED***t" | "LabeledStatement" | "LogicalE***REMOVED***pression" | "MemberE***REMOVED***pression" | "MetaProperty" | "Mi***REMOVED***edTypeAnnotation" | "ModuleE***REMOVED***pression" | "NewE***REMOVED***pression" | "Noop" | "NullLiteral" | "NullLiteralTypeAnnotation" | "NullableTypeAnnotation" | "NumberLiteral" | "NumberLiteralTypeAnnotation" | "NumberTypeAnnotation" | "NumericLiteral" | "ObjectE***REMOVED***pression" | "ObjectMethod" | "ObjectPattern" | "ObjectProperty" | "ObjectTypeAnnotation" | "ObjectTypeCallProperty" | "ObjectTypeInde***REMOVED***er" | "ObjectTypeInternalSlot" | "ObjectTypeProperty" | "ObjectTypeSpreadProperty" | "OpaqueType" | "OptionalCallE***REMOVED***pression" | "OptionalInde***REMOVED***edAccessType" | "OptionalMemberE***REMOVED***pression" | "ParenthesizedE***REMOVED***pression" | "PipelineBareFunction" | "PipelinePrimaryTopicReference" | "PipelineTopicE***REMOVED***pression" | "Placeholder" | "PrivateName" | "Program" | "QualifiedTypeIdentifier" | "RecordE***REMOVED***pression" | "RegE***REMOVED***pLiteral" | "Rege***REMOVED***Literal" | "RestElement" | "RestProperty" | "ReturnStatement" | "SequenceE***REMOVED***pression" | "SpreadElement" | "SpreadProperty" | "StaticBlock" | "StringLiteral" | "StringLiteralTypeAnnotation" | "StringTypeAnnotation" | "Super" | "SwitchCase" | "SwitchStatement" | "SymbolTypeAnnotation" | "TSAnyKeyword" | "TSArrayType" | "TSAsE***REMOVED***pression" | "TSBigIntKeyword" | "TSBooleanKeyword" | "TSCallSignatureDeclaration" | "TSConditionalType" | "TSConstructSignatureDeclaration" | "TSConstructorType" | "TSDeclareFunction" | "TSDeclareMethod" | "TSEnumDeclaration" | "TSEnumMember" | "TSE***REMOVED***portAssignment" | "TSE***REMOVED***pressionWithTypeArguments" | "TSE***REMOVED***ternalModuleReference" | "TSFunctionType" | "TSImportEqualsDeclaration" | "TSImportType" | "TSInde***REMOVED***Signature" | "TSInde***REMOVED***edAccessType" | "TSInferType" | "TSInstantiationE***REMOVED***pression" | "TSInterfaceBody" | "TSInterfaceDeclaration" | "TSIntersectionType" | "TSIntrinsicKeyword" | "TSLiteralType" | "TSMappedType" | "TSMethodSignature" | "TSModuleBlock" | "TSModuleDeclaration" | "TSNamedTupleMember" | "TSNamespaceE***REMOVED***portDeclaration" | "TSNeverKeyword" | "TSNonNullE***REMOVED***pression" | "TSNullKeyword" | "TSNumberKeyword" | "TSObjectKeyword" | "TSOptionalType" | "TSParameterProperty" | "TSParenthesizedType" | "TSPropertySignature" | "TSQualifiedName" | "TSRestType" | "TSSatisfiesE***REMOVED***pression" | "TSStringKeyword" | "TSSymbolKeyword" | "TSThisType" | "TSTupleType" | "TSTypeAliasDeclaration" | "TSTypeAnnotation" | "TSTypeAssertion" | "TSTypeLiteral" | "TSTypeOperator" | "TSTypeParameter" | "TSTypeParameterDeclaration" | "TSTypeParameterInstantiation" | "TSTypePredicate" | "TSTypeQuery" | "TSTypeReference" | "TSUndefinedKeyword" | "TSUnionType" | "TSUnknownKeyword" | "TSVoidKeyword" | "TaggedTemplateE***REMOVED***pression" | "TemplateElement" | "TemplateLiteral" | "ThisE***REMOVED***pression" | "ThisTypeAnnotation" | "ThrowStatement" | "TopicReference" | "TryStatement" | "TupleE***REMOVED***pression" | "TupleTypeAnnotation" | "TypeAlias" | "TypeAnnotation" | "TypeCastE***REMOVED***pression" | "TypeParameter" | "TypeParameterDeclaration" | "TypeParameterInstantiation" | "TypeofTypeAnnotation" | "UnaryE***REMOVED***pression" | "UnionTypeAnnotation" | "UpdateE***REMOVED***pression" | "V8IntrinsicIdentifier" | "VariableDeclaration" | "VariableDeclarator" | "Variance" | "VoidTypeAnnotation" | "WhileStatement" | "WithStatement" | "YieldE***REMOVED***pression" | keyof Aliases)[];
declare const EXPRESSION_TYPES: ("AnyTypeAnnotation" | "ArgumentPlaceholder" | "ArrayE***REMOVED***pression" | "ArrayPattern" | "ArrayTypeAnnotation" | "ArrowFunctionE***REMOVED***pression" | "AssignmentE***REMOVED***pression" | "AssignmentPattern" | "AwaitE***REMOVED***pression" | "BigIntLiteral" | "BinaryE***REMOVED***pression" | "BindE***REMOVED***pression" | "BlockStatement" | "BooleanLiteral" | "BooleanLiteralTypeAnnotation" | "BooleanTypeAnnotation" | "BreakStatement" | "CallE***REMOVED***pression" | "CatchClause" | "ClassAccessorProperty" | "ClassBody" | "ClassDeclaration" | "ClassE***REMOVED***pression" | "ClassImplements" | "ClassMethod" | "ClassPrivateMethod" | "ClassPrivateProperty" | "ClassProperty" | "ConditionalE***REMOVED***pression" | "ContinueStatement" | "DebuggerStatement" | "DecimalLiteral" | "DeclareClass" | "DeclareE***REMOVED***portAllDeclaration" | "DeclareE***REMOVED***portDeclaration" | "DeclareFunction" | "DeclareInterface" | "DeclareModule" | "DeclareModuleE***REMOVED***ports" | "DeclareOpaqueType" | "DeclareTypeAlias" | "DeclareVariable" | "DeclaredPredicate" | "Decorator" | "Directive" | "DirectiveLiteral" | "DoE***REMOVED***pression" | "DoWhileStatement" | "EmptyStatement" | "EmptyTypeAnnotation" | "EnumBooleanBody" | "EnumBooleanMember" | "EnumDeclaration" | "EnumDefaultedMember" | "EnumNumberBody" | "EnumNumberMember" | "EnumStringBody" | "EnumStringMember" | "EnumSymbolBody" | "E***REMOVED***istsTypeAnnotation" | "E***REMOVED***portAllDeclaration" | "E***REMOVED***portDefaultDeclaration" | "E***REMOVED***portDefaultSpecifier" | "E***REMOVED***portNamedDeclaration" | "E***REMOVED***portNamespaceSpecifier" | "E***REMOVED***portSpecifier" | "E***REMOVED***pressionStatement" | "File" | "ForInStatement" | "ForOfStatement" | "ForStatement" | "FunctionDeclaration" | "FunctionE***REMOVED***pression" | "FunctionTypeAnnotation" | "FunctionTypeParam" | "GenericTypeAnnotation" | "Identifier" | "IfStatement" | "Import" | "ImportAttribute" | "ImportDeclaration" | "ImportDefaultSpecifier" | "ImportE***REMOVED***pression" | "ImportNamespaceSpecifier" | "ImportSpecifier" | "Inde***REMOVED***edAccessType" | "InferredPredicate" | "InterfaceDeclaration" | "InterfaceE***REMOVED***tends" | "InterfaceTypeAnnotation" | "InterpreterDirective" | "IntersectionTypeAnnotation" | "JSXAttribute" | "JSXClosingElement" | "JSXClosingFragment" | "JSXElement" | "JSXEmptyE***REMOVED***pression" | "JSXE***REMOVED***pressionContainer" | "JSXFragment" | "JSXIdentifier" | "JSXMemberE***REMOVED***pression" | "JSXNamespacedName" | "JSXOpeningElement" | "JSXOpeningFragment" | "JSXSpreadAttribute" | "JSXSpreadChild" | "JSXTe***REMOVED***t" | "LabeledStatement" | "LogicalE***REMOVED***pression" | "MemberE***REMOVED***pression" | "MetaProperty" | "Mi***REMOVED***edTypeAnnotation" | "ModuleE***REMOVED***pression" | "NewE***REMOVED***pression" | "Noop" | "NullLiteral" | "NullLiteralTypeAnnotation" | "NullableTypeAnnotation" | "NumberLiteral" | "NumberLiteralTypeAnnotation" | "NumberTypeAnnotation" | "NumericLiteral" | "ObjectE***REMOVED***pression" | "ObjectMethod" | "ObjectPattern" | "ObjectProperty" | "ObjectTypeAnnotation" | "ObjectTypeCallProperty" | "ObjectTypeInde***REMOVED***er" | "ObjectTypeInternalSlot" | "ObjectTypeProperty" | "ObjectTypeSpreadProperty" | "OpaqueType" | "OptionalCallE***REMOVED***pression" | "OptionalInde***REMOVED***edAccessType" | "OptionalMemberE***REMOVED***pression" | "ParenthesizedE***REMOVED***pression" | "PipelineBareFunction" | "PipelinePrimaryTopicReference" | "PipelineTopicE***REMOVED***pression" | "Placeholder" | "PrivateName" | "Program" | "QualifiedTypeIdentifier" | "RecordE***REMOVED***pression" | "RegE***REMOVED***pLiteral" | "Rege***REMOVED***Literal" | "RestElement" | "RestProperty" | "ReturnStatement" | "SequenceE***REMOVED***pression" | "SpreadElement" | "SpreadProperty" | "StaticBlock" | "StringLiteral" | "StringLiteralTypeAnnotation" | "StringTypeAnnotation" | "Super" | "SwitchCase" | "SwitchStatement" | "SymbolTypeAnnotation" | "TSAnyKeyword" | "TSArrayType" | "TSAsE***REMOVED***pression" | "TSBigIntKeyword" | "TSBooleanKeyword" | "TSCallSignatureDeclaration" | "TSConditionalType" | "TSConstructSignatureDeclaration" | "TSConstructorType" | "TSDeclareFunction" | "TSDeclareMethod" | "TSEnumDeclaration" | "TSEnumMember" | "TSE***REMOVED***portAssignment" | "TSE***REMOVED***pressionWithTypeArguments" | "TSE***REMOVED***ternalModuleReference" | "TSFunctionType" | "TSImportEqualsDeclaration" | "TSImportType" | "TSInde***REMOVED***Signature" | "TSInde***REMOVED***edAccessType" | "TSInferType" | "TSInstantiationE***REMOVED***pression" | "TSInterfaceBody" | "TSInterfaceDeclaration" | "TSIntersectionType" | "TSIntrinsicKeyword" | "TSLiteralType" | "TSMappedType" | "TSMethodSignature" | "TSModuleBlock" | "TSModuleDeclaration" | "TSNamedTupleMember" | "TSNamespaceE***REMOVED***portDeclaration" | "TSNeverKeyword" | "TSNonNullE***REMOVED***pression" | "TSNullKeyword" | "TSNumberKeyword" | "TSObjectKeyword" | "TSOptionalType" | "TSParameterProperty" | "TSParenthesizedType" | "TSPropertySignature" | "TSQualifiedName" | "TSRestType" | "TSSatisfiesE***REMOVED***pression" | "TSStringKeyword" | "TSSymbolKeyword" | "TSThisType" | "TSTupleType" | "TSTypeAliasDeclaration" | "TSTypeAnnotation" | "TSTypeAssertion" | "TSTypeLiteral" | "TSTypeOperator" | "TSTypeParameter" | "TSTypeParameterDeclaration" | "TSTypeParameterInstantiation" | "TSTypePredicate" | "TSTypeQuery" | "TSTypeReference" | "TSUndefinedKeyword" | "TSUnionType" | "TSUnknownKeyword" | "TSVoidKeyword" | "TaggedTemplateE***REMOVED***pression" | "TemplateElement" | "TemplateLiteral" | "ThisE***REMOVED***pression" | "ThisTypeAnnotation" | "ThrowStatement" | "TopicReference" | "TryStatement" | "TupleE***REMOVED***pression" | "TupleTypeAnnotation" | "TypeAlias" | "TypeAnnotation" | "TypeCastE***REMOVED***pression" | "TypeParameter" | "TypeParameterDeclaration" | "TypeParameterInstantiation" | "TypeofTypeAnnotation" | "UnaryE***REMOVED***pression" | "UnionTypeAnnotation" | "UpdateE***REMOVED***pression" | "V8IntrinsicIdentifier" | "VariableDeclaration" | "VariableDeclarator" | "Variance" | "VoidTypeAnnotation" | "WhileStatement" | "WithStatement" | "YieldE***REMOVED***pression" | keyof Aliases)[];
declare const BINARY_TYPES: ("AnyTypeAnnotation" | "ArgumentPlaceholder" | "ArrayE***REMOVED***pression" | "ArrayPattern" | "ArrayTypeAnnotation" | "ArrowFunctionE***REMOVED***pression" | "AssignmentE***REMOVED***pression" | "AssignmentPattern" | "AwaitE***REMOVED***pression" | "BigIntLiteral" | "BinaryE***REMOVED***pression" | "BindE***REMOVED***pression" | "BlockStatement" | "BooleanLiteral" | "BooleanLiteralTypeAnnotation" | "BooleanTypeAnnotation" | "BreakStatement" | "CallE***REMOVED***pression" | "CatchClause" | "ClassAccessorProperty" | "ClassBody" | "ClassDeclaration" | "ClassE***REMOVED***pression" | "ClassImplements" | "ClassMethod" | "ClassPrivateMethod" | "ClassPrivateProperty" | "ClassProperty" | "ConditionalE***REMOVED***pression" | "ContinueStatement" | "DebuggerStatement" | "DecimalLiteral" | "DeclareClass" | "DeclareE***REMOVED***portAllDeclaration" | "DeclareE***REMOVED***portDeclaration" | "DeclareFunction" | "DeclareInterface" | "DeclareModule" | "DeclareModuleE***REMOVED***ports" | "DeclareOpaqueType" | "DeclareTypeAlias" | "DeclareVariable" | "DeclaredPredicate" | "Decorator" | "Directive" | "DirectiveLiteral" | "DoE***REMOVED***pression" | "DoWhileStatement" | "EmptyStatement" | "EmptyTypeAnnotation" | "EnumBooleanBody" | "EnumBooleanMember" | "EnumDeclaration" | "EnumDefaultedMember" | "EnumNumberBody" | "EnumNumberMember" | "EnumStringBody" | "EnumStringMember" | "EnumSymbolBody" | "E***REMOVED***istsTypeAnnotation" | "E***REMOVED***portAllDeclaration" | "E***REMOVED***portDefaultDeclaration" | "E***REMOVED***portDefaultSpecifier" | "E***REMOVED***portNamedDeclaration" | "E***REMOVED***portNamespaceSpecifier" | "E***REMOVED***portSpecifier" | "E***REMOVED***pressionStatement" | "File" | "ForInStatement" | "ForOfStatement" | "ForStatement" | "FunctionDeclaration" | "FunctionE***REMOVED***pression" | "FunctionTypeAnnotation" | "FunctionTypeParam" | "GenericTypeAnnotation" | "Identifier" | "IfStatement" | "Import" | "ImportAttribute" | "ImportDeclaration" | "ImportDefaultSpecifier" | "ImportE***REMOVED***pression" | "ImportNamespaceSpecifier" | "ImportSpecifier" | "Inde***REMOVED***edAccessType" | "InferredPredicate" | "InterfaceDeclaration" | "InterfaceE***REMOVED***tends" | "InterfaceTypeAnnotation" | "InterpreterDirective" | "IntersectionTypeAnnotation" | "JSXAttribute" | "JSXClosingElement" | "JSXClosingFragment" | "JSXElement" | "JSXEmptyE***REMOVED***pression" | "JSXE***REMOVED***pressionContainer" | "JSXFragment" | "JSXIdentifier" | "JSXMemberE***REMOVED***pression" | "JSXNamespacedName" | "JSXOpeningElement" | "JSXOpeningFragment" | "JSXSpreadAttribute" | "JSXSpreadChild" | "JSXTe***REMOVED***t" | "LabeledStatement" | "LogicalE***REMOVED***pression" | "MemberE***REMOVED***pression" | "MetaProperty" | "Mi***REMOVED***edTypeAnnotation" | "ModuleE***REMOVED***pression" | "NewE***REMOVED***pression" | "Noop" | "NullLiteral" | "NullLiteralTypeAnnotation" | "NullableTypeAnnotation" | "NumberLiteral" | "NumberLiteralTypeAnnotation" | "NumberTypeAnnotation" | "NumericLiteral" | "ObjectE***REMOVED***pression" | "ObjectMethod" | "ObjectPattern" | "ObjectProperty" | "ObjectTypeAnnotation" | "ObjectTypeCallProperty" | "ObjectTypeInde***REMOVED***er" | "ObjectTypeInternalSlot" | "ObjectTypeProperty" | "ObjectTypeSpreadProperty" | "OpaqueType" | "OptionalCallE***REMOVED***pression" | "OptionalInde***REMOVED***edAccessType" | "OptionalMemberE***REMOVED***pression" | "ParenthesizedE***REMOVED***pression" | "PipelineBareFunction" | "PipelinePrimaryTopicReference" | "PipelineTopicE***REMOVED***pression" | "Placeholder" | "PrivateName" | "Program" | "QualifiedTypeIdentifier" | "RecordE***REMOVED***pression" | "RegE***REMOVED***pLiteral" | "Rege***REMOVED***Literal" | "RestElement" | "RestProperty" | "ReturnStatement" | "SequenceE***REMOVED***pression" | "SpreadElement" | "SpreadProperty" | "StaticBlock" | "StringLiteral" | "StringLiteralTypeAnnotation" | "StringTypeAnnotation" | "Super" | "SwitchCase" | "SwitchStatement" | "SymbolTypeAnnotation" | "TSAnyKeyword" | "TSArrayType" | "TSAsE***REMOVED***pression" | "TSBigIntKeyword" | "TSBooleanKeyword" | "TSCallSignatureDeclaration" | "TSConditionalType" | "TSConstructSignatureDeclaration" | "TSConstructorType" | "TSDeclareFunction" | "TSDeclareMethod" | "TSEnumDeclaration" | "TSEnumMember" | "TSE***REMOVED***portAssignment" | "TSE***REMOVED***pressionWithTypeArguments" | "TSE***REMOVED***ternalModuleReference" | "TSFunctionType" | "TSImportEqualsDeclaration" | "TSImportType" | "TSInde***REMOVED***Signature" | "TSInde***REMOVED***edAccessType" | "TSInferType" | "TSInstantiationE***REMOVED***pression" | "TSInterfaceBody" | "TSInterfaceDeclaration" | "TSIntersectionType" | "TSIntrinsicKeyword" | "TSLiteralType" | "TSMappedType" | "TSMethodSignature" | "TSModuleBlock" | "TSModuleDeclaration" | "TSNamedTupleMember" | "TSNamespaceE***REMOVED***portDeclaration" | "TSNeverKeyword" | "TSNonNullE***REMOVED***pression" | "TSNullKeyword" | "TSNumberKeyword" | "TSObjectKeyword" | "TSOptionalType" | "TSParameterProperty" | "TSParenthesizedType" | "TSPropertySignature" | "TSQualifiedName" | "TSRestType" | "TSSatisfiesE***REMOVED***pression" | "TSStringKeyword" | "TSSymbolKeyword" | "TSThisType" | "TSTupleType" | "TSTypeAliasDeclaration" | "TSTypeAnnotation" | "TSTypeAssertion" | "TSTypeLiteral" | "TSTypeOperator" | "TSTypeParameter" | "TSTypeParameterDeclaration" | "TSTypeParameterInstantiation" | "TSTypePredicate" | "TSTypeQuery" | "TSTypeReference" | "TSUndefinedKeyword" | "TSUnionType" | "TSUnknownKeyword" | "TSVoidKeyword" | "TaggedTemplateE***REMOVED***pression" | "TemplateElement" | "TemplateLiteral" | "ThisE***REMOVED***pression" | "ThisTypeAnnotation" | "ThrowStatement" | "TopicReference" | "TryStatement" | "TupleE***REMOVED***pression" | "TupleTypeAnnotation" | "TypeAlias" | "TypeAnnotation" | "TypeCastE***REMOVED***pression" | "TypeParameter" | "TypeParameterDeclaration" | "TypeParameterInstantiation" | "TypeofTypeAnnotation" | "UnaryE***REMOVED***pression" | "UnionTypeAnnotation" | "UpdateE***REMOVED***pression" | "V8IntrinsicIdentifier" | "VariableDeclaration" | "VariableDeclarator" | "Variance" | "VoidTypeAnnotation" | "WhileStatement" | "WithStatement" | "YieldE***REMOVED***pression" | keyof Aliases)[];
declare const SCOPABLE_TYPES: ("AnyTypeAnnotation" | "ArgumentPlaceholder" | "ArrayE***REMOVED***pression" | "ArrayPattern" | "ArrayTypeAnnotation" | "ArrowFunctionE***REMOVED***pression" | "AssignmentE***REMOVED***pression" | "AssignmentPattern" | "AwaitE***REMOVED***pression" | "BigIntLiteral" | "BinaryE***REMOVED***pression" | "BindE***REMOVED***pression" | "BlockStatement" | "BooleanLiteral" | "BooleanLiteralTypeAnnotation" | "BooleanTypeAnnotation" | "BreakStatement" | "CallE***REMOVED***pression" | "CatchClause" | "ClassAccessorProperty" | "ClassBody" | "ClassDeclaration" | "ClassE***REMOVED***pression" | "ClassImplements" | "ClassMethod" | "ClassPrivateMethod" | "ClassPrivateProperty" | "ClassProperty" | "ConditionalE***REMOVED***pression" | "ContinueStatement" | "DebuggerStatement" | "DecimalLiteral" | "DeclareClass" | "DeclareE***REMOVED***portAllDeclaration" | "DeclareE***REMOVED***portDeclaration" | "DeclareFunction" | "DeclareInterface" | "DeclareModule" | "DeclareModuleE***REMOVED***ports" | "DeclareOpaqueType" | "DeclareTypeAlias" | "DeclareVariable" | "DeclaredPredicate" | "Decorator" | "Directive" | "DirectiveLiteral" | "DoE***REMOVED***pression" | "DoWhileStatement" | "EmptyStatement" | "EmptyTypeAnnotation" | "EnumBooleanBody" | "EnumBooleanMember" | "EnumDeclaration" | "EnumDefaultedMember" | "EnumNumberBody" | "EnumNumberMember" | "EnumStringBody" | "EnumStringMember" | "EnumSymbolBody" | "E***REMOVED***istsTypeAnnotation" | "E***REMOVED***portAllDeclaration" | "E***REMOVED***portDefaultDeclaration" | "E***REMOVED***portDefaultSpecifier" | "E***REMOVED***portNamedDeclaration" | "E***REMOVED***portNamespaceSpecifier" | "E***REMOVED***portSpecifier" | "E***REMOVED***pressionStatement" | "File" | "ForInStatement" | "ForOfStatement" | "ForStatement" | "FunctionDeclaration" | "FunctionE***REMOVED***pression" | "FunctionTypeAnnotation" | "FunctionTypeParam" | "GenericTypeAnnotation" | "Identifier" | "IfStatement" | "Import" | "ImportAttribute" | "ImportDeclaration" | "ImportDefaultSpecifier" | "ImportE***REMOVED***pression" | "ImportNamespaceSpecifier" | "ImportSpecifier" | "Inde***REMOVED***edAccessType" | "InferredPredicate" | "InterfaceDeclaration" | "InterfaceE***REMOVED***tends" | "InterfaceTypeAnnotation" | "InterpreterDirective" | "IntersectionTypeAnnotation" | "JSXAttribute" | "JSXClosingElement" | "JSXClosingFragment" | "JSXElement" | "JSXEmptyE***REMOVED***pression" | "JSXE***REMOVED***pressionContainer" | "JSXFragment" | "JSXIdentifier" | "JSXMemberE***REMOVED***pression" | "JSXNamespacedName" | "JSXOpeningElement" | "JSXOpeningFragment" | "JSXSpreadAttribute" | "JSXSpreadChild" | "JSXTe***REMOVED***t" | "LabeledStatement" | "LogicalE***REMOVED***pression" | "MemberE***REMOVED***pression" | "MetaProperty" | "Mi***REMOVED***edTypeAnnotation" | "ModuleE***REMOVED***pression" | "NewE***REMOVED***pression" | "Noop" | "NullLiteral" | "NullLiteralTypeAnnotation" | "NullableTypeAnnotation" | "NumberLiteral" | "NumberLiteralTypeAnnotation" | "NumberTypeAnnotation" | "NumericLiteral" | "ObjectE***REMOVED***pression" | "ObjectMethod" | "ObjectPattern" | "ObjectProperty" | "ObjectTypeAnnotation" | "ObjectTypeCallProperty" | "ObjectTypeInde***REMOVED***er" | "ObjectTypeInternalSlot" | "ObjectTypeProperty" | "ObjectTypeSpreadProperty" | "OpaqueType" | "OptionalCallE***REMOVED***pression" | "OptionalInde***REMOVED***edAccessType" | "OptionalMemberE***REMOVED***pression" | "ParenthesizedE***REMOVED***pression" | "PipelineBareFunction" | "PipelinePrimaryTopicReference" | "PipelineTopicE***REMOVED***pression" | "Placeholder" | "PrivateName" | "Program" | "QualifiedTypeIdentifier" | "RecordE***REMOVED***pression" | "RegE***REMOVED***pLiteral" | "Rege***REMOVED***Literal" | "RestElement" | "RestProperty" | "ReturnStatement" | "SequenceE***REMOVED***pression" | "SpreadElement" | "SpreadProperty" | "StaticBlock" | "StringLiteral" | "StringLiteralTypeAnnotation" | "StringTypeAnnotation" | "Super" | "SwitchCase" | "SwitchStatement" | "SymbolTypeAnnotation" | "TSAnyKeyword" | "TSArrayType" | "TSAsE***REMOVED***pression" | "TSBigIntKeyword" | "TSBooleanKeyword" | "TSCallSignatureDeclaration" | "TSConditionalType" | "TSConstructSignatureDeclaration" | "TSConstructorType" | "TSDeclareFunction" | "TSDeclareMethod" | "TSEnumDeclaration" | "TSEnumMember" | "TSE***REMOVED***portAssignment" | "TSE***REMOVED***pressionWithTypeArguments" | "TSE***REMOVED***ternalModuleReference" | "TSFunctionType" | "TSImportEqualsDeclaration" | "TSImportType" | "TSInde***REMOVED***Signature" | "TSInde***REMOVED***edAccessType" | "TSInferType" | "TSInstantiationE***REMOVED***pression" | "TSInterfaceBody" | "TSInterfaceDeclaration" | "TSIntersectionType" | "TSIntrinsicKeyword" | "TSLiteralType" | "TSMappedType" | "TSMethodSignature" | "TSModuleBlock" | "TSModuleDeclaration" | "TSNamedTupleMember" | "TSNamespaceE***REMOVED***portDeclaration" | "TSNeverKeyword" | "TSNonNullE***REMOVED***pression" | "TSNullKeyword" | "TSNumberKeyword" | "TSObjectKeyword" | "TSOptionalType" | "TSParameterProperty" | "TSParenthesizedType" | "TSPropertySignature" | "TSQualifiedName" | "TSRestType" | "TSSatisfiesE***REMOVED***pression" | "TSStringKeyword" | "TSSymbolKeyword" | "TSThisType" | "TSTupleType" | "TSTypeAliasDeclaration" | "TSTypeAnnotation" | "TSTypeAssertion" | "TSTypeLiteral" | "TSTypeOperator" | "TSTypeParameter" | "TSTypeParameterDeclaration" | "TSTypeParameterInstantiation" | "TSTypePredicate" | "TSTypeQuery" | "TSTypeReference" | "TSUndefinedKeyword" | "TSUnionType" | "TSUnknownKeyword" | "TSVoidKeyword" | "TaggedTemplateE***REMOVED***pression" | "TemplateElement" | "TemplateLiteral" | "ThisE***REMOVED***pression" | "ThisTypeAnnotation" | "ThrowStatement" | "TopicReference" | "TryStatement" | "TupleE***REMOVED***pression" | "TupleTypeAnnotation" | "TypeAlias" | "TypeAnnotation" | "TypeCastE***REMOVED***pression" | "TypeParameter" | "TypeParameterDeclaration" | "TypeParameterInstantiation" | "TypeofTypeAnnotation" | "UnaryE***REMOVED***pression" | "UnionTypeAnnotation" | "UpdateE***REMOVED***pression" | "V8IntrinsicIdentifier" | "VariableDeclaration" | "VariableDeclarator" | "Variance" | "VoidTypeAnnotation" | "WhileStatement" | "WithStatement" | "YieldE***REMOVED***pression" | keyof Aliases)[];
declare const BLOCKPARENT_TYPES: ("AnyTypeAnnotation" | "ArgumentPlaceholder" | "ArrayE***REMOVED***pression" | "ArrayPattern" | "ArrayTypeAnnotation" | "ArrowFunctionE***REMOVED***pression" | "AssignmentE***REMOVED***pression" | "AssignmentPattern" | "AwaitE***REMOVED***pression" | "BigIntLiteral" | "BinaryE***REMOVED***pression" | "BindE***REMOVED***pression" | "BlockStatement" | "BooleanLiteral" | "BooleanLiteralTypeAnnotation" | "BooleanTypeAnnotation" | "BreakStatement" | "CallE***REMOVED***pression" | "CatchClause" | "ClassAccessorProperty" | "ClassBody" | "ClassDeclaration" | "ClassE***REMOVED***pression" | "ClassImplements" | "ClassMethod" | "ClassPrivateMethod" | "ClassPrivateProperty" | "ClassProperty" | "ConditionalE***REMOVED***pression" | "ContinueStatement" | "DebuggerStatement" | "DecimalLiteral" | "DeclareClass" | "DeclareE***REMOVED***portAllDeclaration" | "DeclareE***REMOVED***portDeclaration" | "DeclareFunction" | "DeclareInterface" | "DeclareModule" | "DeclareModuleE***REMOVED***ports" | "DeclareOpaqueType" | "DeclareTypeAlias" | "DeclareVariable" | "DeclaredPredicate" | "Decorator" | "Directive" | "DirectiveLiteral" | "DoE***REMOVED***pression" | "DoWhileStatement" | "EmptyStatement" | "EmptyTypeAnnotation" | "EnumBooleanBody" | "EnumBooleanMember" | "EnumDeclaration" | "EnumDefaultedMember" | "EnumNumberBody" | "EnumNumberMember" | "EnumStringBody" | "EnumStringMember" | "EnumSymbolBody" | "E***REMOVED***istsTypeAnnotation" | "E***REMOVED***portAllDeclaration" | "E***REMOVED***portDefaultDeclaration" | "E***REMOVED***portDefaultSpecifier" | "E***REMOVED***portNamedDeclaration" | "E***REMOVED***portNamespaceSpecifier" | "E***REMOVED***portSpecifier" | "E***REMOVED***pressionStatement" | "File" | "ForInStatement" | "ForOfStatement" | "ForStatement" | "FunctionDeclaration" | "FunctionE***REMOVED***pression" | "FunctionTypeAnnotation" | "FunctionTypeParam" | "GenericTypeAnnotation" | "Identifier" | "IfStatement" | "Import" | "ImportAttribute" | "ImportDeclaration" | "ImportDefaultSpecifier" | "ImportE***REMOVED***pression" | "ImportNamespaceSpecifier" | "ImportSpecifier" | "Inde***REMOVED***edAccessType" | "InferredPredicate" | "InterfaceDeclaration" | "InterfaceE***REMOVED***tends" | "InterfaceTypeAnnotation" | "InterpreterDirective" | "IntersectionTypeAnnotation" | "JSXAttribute" | "JSXClosingElement" | "JSXClosingFragment" | "JSXElement" | "JSXEmptyE***REMOVED***pression" | "JSXE***REMOVED***pressionContainer" | "JSXFragment" | "JSXIdentifier" | "JSXMemberE***REMOVED***pression" | "JSXNamespacedName" | "JSXOpeningElement" | "JSXOpeningFragment" | "JSXSpreadAttribute" | "JSXSpreadChild" | "JSXTe***REMOVED***t" | "LabeledStatement" | "LogicalE***REMOVED***pression" | "MemberE***REMOVED***pression" | "MetaProperty" | "Mi***REMOVED***edTypeAnnotation" | "ModuleE***REMOVED***pression" | "NewE***REMOVED***pression" | "Noop" | "NullLiteral" | "NullLiteralTypeAnnotation" | "NullableTypeAnnotation" | "NumberLiteral" | "NumberLiteralTypeAnnotation" | "NumberTypeAnnotation" | "NumericLiteral" | "ObjectE***REMOVED***pression" | "ObjectMethod" | "ObjectPattern" | "ObjectProperty" | "ObjectTypeAnnotation" | "ObjectTypeCallProperty" | "ObjectTypeInde***REMOVED***er" | "ObjectTypeInternalSlot" | "ObjectTypeProperty" | "ObjectTypeSpreadProperty" | "OpaqueType" | "OptionalCallE***REMOVED***pression" | "OptionalInde***REMOVED***edAccessType" | "OptionalMemberE***REMOVED***pression" | "ParenthesizedE***REMOVED***pression" | "PipelineBareFunction" | "PipelinePrimaryTopicReference" | "PipelineTopicE***REMOVED***pression" | "Placeholder" | "PrivateName" | "Program" | "QualifiedTypeIdentifier" | "RecordE***REMOVED***pression" | "RegE***REMOVED***pLiteral" | "Rege***REMOVED***Literal" | "RestElement" | "RestProperty" | "ReturnStatement" | "SequenceE***REMOVED***pression" | "SpreadElement" | "SpreadProperty" | "StaticBlock" | "StringLiteral" | "StringLiteralTypeAnnotation" | "StringTypeAnnotation" | "Super" | "SwitchCase" | "SwitchStatement" | "SymbolTypeAnnotation" | "TSAnyKeyword" | "TSArrayType" | "TSAsE***REMOVED***pression" | "TSBigIntKeyword" | "TSBooleanKeyword" | "TSCallSignatureDeclaration" | "TSConditionalType" | "TSConstructSignatureDeclaration" | "TSConstructorType" | "TSDeclareFunction" | "TSDeclareMethod" | "TSEnumDeclaration" | "TSEnumMember" | "TSE***REMOVED***portAssignment" | "TSE***REMOVED***pressionWithTypeArguments" | "TSE***REMOVED***ternalModuleReference" | "TSFunctionType" | "TSImportEqualsDeclaration" | "TSImportType" | "TSInde***REMOVED***Signature" | "TSInde***REMOVED***edAccessType" | "TSInferType" | "TSInstantiationE***REMOVED***pression" | "TSInterfaceBody" | "TSInterfaceDeclaration" | "TSIntersectionType" | "TSIntrinsicKeyword" | "TSLiteralType" | "TSMappedType" | "TSMethodSignature" | "TSModuleBlock" | "TSModuleDeclaration" | "TSNamedTupleMember" | "TSNamespaceE***REMOVED***portDeclaration" | "TSNeverKeyword" | "TSNonNullE***REMOVED***pression" | "TSNullKeyword" | "TSNumberKeyword" | "TSObjectKeyword" | "TSOptionalType" | "TSParameterProperty" | "TSParenthesizedType" | "TSPropertySignature" | "TSQualifiedName" | "TSRestType" | "TSSatisfiesE***REMOVED***pression" | "TSStringKeyword" | "TSSymbolKeyword" | "TSThisType" | "TSTupleType" | "TSTypeAliasDeclaration" | "TSTypeAnnotation" | "TSTypeAssertion" | "TSTypeLiteral" | "TSTypeOperator" | "TSTypeParameter" | "TSTypeParameterDeclaration" | "TSTypeParameterInstantiation" | "TSTypePredicate" | "TSTypeQuery" | "TSTypeReference" | "TSUndefinedKeyword" | "TSUnionType" | "TSUnknownKeyword" | "TSVoidKeyword" | "TaggedTemplateE***REMOVED***pression" | "TemplateElement" | "TemplateLiteral" | "ThisE***REMOVED***pression" | "ThisTypeAnnotation" | "ThrowStatement" | "TopicReference" | "TryStatement" | "TupleE***REMOVED***pression" | "TupleTypeAnnotation" | "TypeAlias" | "TypeAnnotation" | "TypeCastE***REMOVED***pression" | "TypeParameter" | "TypeParameterDeclaration" | "TypeParameterInstantiation" | "TypeofTypeAnnotation" | "UnaryE***REMOVED***pression" | "UnionTypeAnnotation" | "UpdateE***REMOVED***pression" | "V8IntrinsicIdentifier" | "VariableDeclaration" | "VariableDeclarator" | "Variance" | "VoidTypeAnnotation" | "WhileStatement" | "WithStatement" | "YieldE***REMOVED***pression" | keyof Aliases)[];
declare const BLOCK_TYPES: ("AnyTypeAnnotation" | "ArgumentPlaceholder" | "ArrayE***REMOVED***pression" | "ArrayPattern" | "ArrayTypeAnnotation" | "ArrowFunctionE***REMOVED***pression" | "AssignmentE***REMOVED***pression" | "AssignmentPattern" | "AwaitE***REMOVED***pression" | "BigIntLiteral" | "BinaryE***REMOVED***pression" | "BindE***REMOVED***pression" | "BlockStatement" | "BooleanLiteral" | "BooleanLiteralTypeAnnotation" | "BooleanTypeAnnotation" | "BreakStatement" | "CallE***REMOVED***pression" | "CatchClause" | "ClassAccessorProperty" | "ClassBody" | "ClassDeclaration" | "ClassE***REMOVED***pression" | "ClassImplements" | "ClassMethod" | "ClassPrivateMethod" | "ClassPrivateProperty" | "ClassProperty" | "ConditionalE***REMOVED***pression" | "ContinueStatement" | "DebuggerStatement" | "DecimalLiteral" | "DeclareClass" | "DeclareE***REMOVED***portAllDeclaration" | "DeclareE***REMOVED***portDeclaration" | "DeclareFunction" | "DeclareInterface" | "DeclareModule" | "DeclareModuleE***REMOVED***ports" | "DeclareOpaqueType" | "DeclareTypeAlias" | "DeclareVariable" | "DeclaredPredicate" | "Decorator" | "Directive" | "DirectiveLiteral" | "DoE***REMOVED***pression" | "DoWhileStatement" | "EmptyStatement" | "EmptyTypeAnnotation" | "EnumBooleanBody" | "EnumBooleanMember" | "EnumDeclaration" | "EnumDefaultedMember" | "EnumNumberBody" | "EnumNumberMember" | "EnumStringBody" | "EnumStringMember" | "EnumSymbolBody" | "E***REMOVED***istsTypeAnnotation" | "E***REMOVED***portAllDeclaration" | "E***REMOVED***portDefaultDeclaration" | "E***REMOVED***portDefaultSpecifier" | "E***REMOVED***portNamedDeclaration" | "E***REMOVED***portNamespaceSpecifier" | "E***REMOVED***portSpecifier" | "E***REMOVED***pressionStatement" | "File" | "ForInStatement" | "ForOfStatement" | "ForStatement" | "FunctionDeclaration" | "FunctionE***REMOVED***pression" | "FunctionTypeAnnotation" | "FunctionTypeParam" | "GenericTypeAnnotation" | "Identifier" | "IfStatement" | "Import" | "ImportAttribute" | "ImportDeclaration" | "ImportDefaultSpecifier" | "ImportE***REMOVED***pression" | "ImportNamespaceSpecifier" | "ImportSpecifier" | "Inde***REMOVED***edAccessType" | "InferredPredicate" | "InterfaceDeclaration" | "InterfaceE***REMOVED***tends" | "InterfaceTypeAnnotation" | "InterpreterDirective" | "IntersectionTypeAnnotation" | "JSXAttribute" | "JSXClosingElement" | "JSXClosingFragment" | "JSXElement" | "JSXEmptyE***REMOVED***pression" | "JSXE***REMOVED***pressionContainer" | "JSXFragment" | "JSXIdentifier" | "JSXMemberE***REMOVED***pression" | "JSXNamespacedName" | "JSXOpeningElement" | "JSXOpeningFragment" | "JSXSpreadAttribute" | "JSXSpreadChild" | "JSXTe***REMOVED***t" | "LabeledStatement" | "LogicalE***REMOVED***pression" | "MemberE***REMOVED***pression" | "MetaProperty" | "Mi***REMOVED***edTypeAnnotation" | "ModuleE***REMOVED***pression" | "NewE***REMOVED***pression" | "Noop" | "NullLiteral" | "NullLiteralTypeAnnotation" | "NullableTypeAnnotation" | "NumberLiteral" | "NumberLiteralTypeAnnotation" | "NumberTypeAnnotation" | "NumericLiteral" | "ObjectE***REMOVED***pression" | "ObjectMethod" | "ObjectPattern" | "ObjectProperty" | "ObjectTypeAnnotation" | "ObjectTypeCallProperty" | "ObjectTypeInde***REMOVED***er" | "ObjectTypeInternalSlot" | "ObjectTypeProperty" | "ObjectTypeSpreadProperty" | "OpaqueType" | "OptionalCallE***REMOVED***pression" | "OptionalInde***REMOVED***edAccessType" | "OptionalMemberE***REMOVED***pression" | "ParenthesizedE***REMOVED***pression" | "PipelineBareFunction" | "PipelinePrimaryTopicReference" | "PipelineTopicE***REMOVED***pression" | "Placeholder" | "PrivateName" | "Program" | "QualifiedTypeIdentifier" | "RecordE***REMOVED***pression" | "RegE***REMOVED***pLiteral" | "Rege***REMOVED***Literal" | "RestElement" | "RestProperty" | "ReturnStatement" | "SequenceE***REMOVED***pression" | "SpreadElement" | "SpreadProperty" | "StaticBlock" | "StringLiteral" | "StringLiteralTypeAnnotation" | "StringTypeAnnotation" | "Super" | "SwitchCase" | "SwitchStatement" | "SymbolTypeAnnotation" | "TSAnyKeyword" | "TSArrayType" | "TSAsE***REMOVED***pression" | "TSBigIntKeyword" | "TSBooleanKeyword" | "TSCallSignatureDeclaration" | "TSConditionalType" | "TSConstructSignatureDeclaration" | "TSConstructorType" | "TSDeclareFunction" | "TSDeclareMethod" | "TSEnumDeclaration" | "TSEnumMember" | "TSE***REMOVED***portAssignment" | "TSE***REMOVED***pressionWithTypeArguments" | "TSE***REMOVED***ternalModuleReference" | "TSFunctionType" | "TSImportEqualsDeclaration" | "TSImportType" | "TSInde***REMOVED***Signature" | "TSInde***REMOVED***edAccessType" | "TSInferType" | "TSInstantiationE***REMOVED***pression" | "TSInterfaceBody" | "TSInterfaceDeclaration" | "TSIntersectionType" | "TSIntrinsicKeyword" | "TSLiteralType" | "TSMappedType" | "TSMethodSignature" | "TSModuleBlock" | "TSModuleDeclaration" | "TSNamedTupleMember" | "TSNamespaceE***REMOVED***portDeclaration" | "TSNeverKeyword" | "TSNonNullE***REMOVED***pression" | "TSNullKeyword" | "TSNumberKeyword" | "TSObjectKeyword" | "TSOptionalType" | "TSParameterProperty" | "TSParenthesizedType" | "TSPropertySignature" | "TSQualifiedName" | "TSRestType" | "TSSatisfiesE***REMOVED***pression" | "TSStringKeyword" | "TSSymbolKeyword" | "TSThisType" | "TSTupleType" | "TSTypeAliasDeclaration" | "TSTypeAnnotation" | "TSTypeAssertion" | "TSTypeLiteral" | "TSTypeOperator" | "TSTypeParameter" | "TSTypeParameterDeclaration" | "TSTypeParameterInstantiation" | "TSTypePredicate" | "TSTypeQuery" | "TSTypeReference" | "TSUndefinedKeyword" | "TSUnionType" | "TSUnknownKeyword" | "TSVoidKeyword" | "TaggedTemplateE***REMOVED***pression" | "TemplateElement" | "TemplateLiteral" | "ThisE***REMOVED***pression" | "ThisTypeAnnotation" | "ThrowStatement" | "TopicReference" | "TryStatement" | "TupleE***REMOVED***pression" | "TupleTypeAnnotation" | "TypeAlias" | "TypeAnnotation" | "TypeCastE***REMOVED***pression" | "TypeParameter" | "TypeParameterDeclaration" | "TypeParameterInstantiation" | "TypeofTypeAnnotation" | "UnaryE***REMOVED***pression" | "UnionTypeAnnotation" | "UpdateE***REMOVED***pression" | "V8IntrinsicIdentifier" | "VariableDeclaration" | "VariableDeclarator" | "Variance" | "VoidTypeAnnotation" | "WhileStatement" | "WithStatement" | "YieldE***REMOVED***pression" | keyof Aliases)[];
declare const STATEMENT_TYPES: ("AnyTypeAnnotation" | "ArgumentPlaceholder" | "ArrayE***REMOVED***pression" | "ArrayPattern" | "ArrayTypeAnnotation" | "ArrowFunctionE***REMOVED***pression" | "AssignmentE***REMOVED***pression" | "AssignmentPattern" | "AwaitE***REMOVED***pression" | "BigIntLiteral" | "BinaryE***REMOVED***pression" | "BindE***REMOVED***pression" | "BlockStatement" | "BooleanLiteral" | "BooleanLiteralTypeAnnotation" | "BooleanTypeAnnotation" | "BreakStatement" | "CallE***REMOVED***pression" | "CatchClause" | "ClassAccessorProperty" | "ClassBody" | "ClassDeclaration" | "ClassE***REMOVED***pression" | "ClassImplements" | "ClassMethod" | "ClassPrivateMethod" | "ClassPrivateProperty" | "ClassProperty" | "ConditionalE***REMOVED***pression" | "ContinueStatement" | "DebuggerStatement" | "DecimalLiteral" | "DeclareClass" | "DeclareE***REMOVED***portAllDeclaration" | "DeclareE***REMOVED***portDeclaration" | "DeclareFunction" | "DeclareInterface" | "DeclareModule" | "DeclareModuleE***REMOVED***ports" | "DeclareOpaqueType" | "DeclareTypeAlias" | "DeclareVariable" | "DeclaredPredicate" | "Decorator" | "Directive" | "DirectiveLiteral" | "DoE***REMOVED***pression" | "DoWhileStatement" | "EmptyStatement" | "EmptyTypeAnnotation" | "EnumBooleanBody" | "EnumBooleanMember" | "EnumDeclaration" | "EnumDefaultedMember" | "EnumNumberBody" | "EnumNumberMember" | "EnumStringBody" | "EnumStringMember" | "EnumSymbolBody" | "E***REMOVED***istsTypeAnnotation" | "E***REMOVED***portAllDeclaration" | "E***REMOVED***portDefaultDeclaration" | "E***REMOVED***portDefaultSpecifier" | "E***REMOVED***portNamedDeclaration" | "E***REMOVED***portNamespaceSpecifier" | "E***REMOVED***portSpecifier" | "E***REMOVED***pressionStatement" | "File" | "ForInStatement" | "ForOfStatement" | "ForStatement" | "FunctionDeclaration" | "FunctionE***REMOVED***pression" | "FunctionTypeAnnotation" | "FunctionTypeParam" | "GenericTypeAnnotation" | "Identifier" | "IfStatement" | "Import" | "ImportAttribute" | "ImportDeclaration" | "ImportDefaultSpecifier" | "ImportE***REMOVED***pression" | "ImportNamespaceSpecifier" | "ImportSpecifier" | "Inde***REMOVED***edAccessType" | "InferredPredicate" | "InterfaceDeclaration" | "InterfaceE***REMOVED***tends" | "InterfaceTypeAnnotation" | "InterpreterDirective" | "IntersectionTypeAnnotation" | "JSXAttribute" | "JSXClosingElement" | "JSXClosingFragment" | "JSXElement" | "JSXEmptyE***REMOVED***pression" | "JSXE***REMOVED***pressionContainer" | "JSXFragment" | "JSXIdentifier" | "JSXMemberE***REMOVED***pression" | "JSXNamespacedName" | "JSXOpeningElement" | "JSXOpeningFragment" | "JSXSpreadAttribute" | "JSXSpreadChild" | "JSXTe***REMOVED***t" | "LabeledStatement" | "LogicalE***REMOVED***pression" | "MemberE***REMOVED***pression" | "MetaProperty" | "Mi***REMOVED***edTypeAnnotation" | "ModuleE***REMOVED***pression" | "NewE***REMOVED***pression" | "Noop" | "NullLiteral" | "NullLiteralTypeAnnotation" | "NullableTypeAnnotation" | "NumberLiteral" | "NumberLiteralTypeAnnotation" | "NumberTypeAnnotation" | "NumericLiteral" | "ObjectE***REMOVED***pression" | "ObjectMethod" | "ObjectPattern" | "ObjectProperty" | "ObjectTypeAnnotation" | "ObjectTypeCallProperty" | "ObjectTypeInde***REMOVED***er" | "ObjectTypeInternalSlot" | "ObjectTypeProperty" | "ObjectTypeSpreadProperty" | "OpaqueType" | "OptionalCallE***REMOVED***pression" | "OptionalInde***REMOVED***edAccessType" | "OptionalMemberE***REMOVED***pression" | "ParenthesizedE***REMOVED***pression" | "PipelineBareFunction" | "PipelinePrimaryTopicReference" | "PipelineTopicE***REMOVED***pression" | "Placeholder" | "PrivateName" | "Program" | "QualifiedTypeIdentifier" | "RecordE***REMOVED***pression" | "RegE***REMOVED***pLiteral" | "Rege***REMOVED***Literal" | "RestElement" | "RestProperty" | "ReturnStatement" | "SequenceE***REMOVED***pression" | "SpreadElement" | "SpreadProperty" | "StaticBlock" | "StringLiteral" | "StringLiteralTypeAnnotation" | "StringTypeAnnotation" | "Super" | "SwitchCase" | "SwitchStatement" | "SymbolTypeAnnotation" | "TSAnyKeyword" | "TSArrayType" | "TSAsE***REMOVED***pression" | "TSBigIntKeyword" | "TSBooleanKeyword" | "TSCallSignatureDeclaration" | "TSConditionalType" | "TSConstructSignatureDeclaration" | "TSConstructorType" | "TSDeclareFunction" | "TSDeclareMethod" | "TSEnumDeclaration" | "TSEnumMember" | "TSE***REMOVED***portAssignment" | "TSE***REMOVED***pressionWithTypeArguments" | "TSE***REMOVED***ternalModuleReference" | "TSFunctionType" | "TSImportEqualsDeclaration" | "TSImportType" | "TSInde***REMOVED***Signature" | "TSInde***REMOVED***edAccessType" | "TSInferType" | "TSInstantiationE***REMOVED***pression" | "TSInterfaceBody" | "TSInterfaceDeclaration" | "TSIntersectionType" | "TSIntrinsicKeyword" | "TSLiteralType" | "TSMappedType" | "TSMethodSignature" | "TSModuleBlock" | "TSModuleDeclaration" | "TSNamedTupleMember" | "TSNamespaceE***REMOVED***portDeclaration" | "TSNeverKeyword" | "TSNonNullE***REMOVED***pression" | "TSNullKeyword" | "TSNumberKeyword" | "TSObjectKeyword" | "TSOptionalType" | "TSParameterProperty" | "TSParenthesizedType" | "TSPropertySignature" | "TSQualifiedName" | "TSRestType" | "TSSatisfiesE***REMOVED***pression" | "TSStringKeyword" | "TSSymbolKeyword" | "TSThisType" | "TSTupleType" | "TSTypeAliasDeclaration" | "TSTypeAnnotation" | "TSTypeAssertion" | "TSTypeLiteral" | "TSTypeOperator" | "TSTypeParameter" | "TSTypeParameterDeclaration" | "TSTypeParameterInstantiation" | "TSTypePredicate" | "TSTypeQuery" | "TSTypeReference" | "TSUndefinedKeyword" | "TSUnionType" | "TSUnknownKeyword" | "TSVoidKeyword" | "TaggedTemplateE***REMOVED***pression" | "TemplateElement" | "TemplateLiteral" | "ThisE***REMOVED***pression" | "ThisTypeAnnotation" | "ThrowStatement" | "TopicReference" | "TryStatement" | "TupleE***REMOVED***pression" | "TupleTypeAnnotation" | "TypeAlias" | "TypeAnnotation" | "TypeCastE***REMOVED***pression" | "TypeParameter" | "TypeParameterDeclaration" | "TypeParameterInstantiation" | "TypeofTypeAnnotation" | "UnaryE***REMOVED***pression" | "UnionTypeAnnotation" | "UpdateE***REMOVED***pression" | "V8IntrinsicIdentifier" | "VariableDeclaration" | "VariableDeclarator" | "Variance" | "VoidTypeAnnotation" | "WhileStatement" | "WithStatement" | "YieldE***REMOVED***pression" | keyof Aliases)[];
declare const TERMINATORLESS_TYPES: ("AnyTypeAnnotation" | "ArgumentPlaceholder" | "ArrayE***REMOVED***pression" | "ArrayPattern" | "ArrayTypeAnnotation" | "ArrowFunctionE***REMOVED***pression" | "AssignmentE***REMOVED***pression" | "AssignmentPattern" | "AwaitE***REMOVED***pression" | "BigIntLiteral" | "BinaryE***REMOVED***pression" | "BindE***REMOVED***pression" | "BlockStatement" | "BooleanLiteral" | "BooleanLiteralTypeAnnotation" | "BooleanTypeAnnotation" | "BreakStatement" | "CallE***REMOVED***pression" | "CatchClause" | "ClassAccessorProperty" | "ClassBody" | "ClassDeclaration" | "ClassE***REMOVED***pression" | "ClassImplements" | "ClassMethod" | "ClassPrivateMethod" | "ClassPrivateProperty" | "ClassProperty" | "ConditionalE***REMOVED***pression" | "ContinueStatement" | "DebuggerStatement" | "DecimalLiteral" | "DeclareClass" | "DeclareE***REMOVED***portAllDeclaration" | "DeclareE***REMOVED***portDeclaration" | "DeclareFunction" | "DeclareInterface" | "DeclareModule" | "DeclareModuleE***REMOVED***ports" | "DeclareOpaqueType" | "DeclareTypeAlias" | "DeclareVariable" | "DeclaredPredicate" | "Decorator" | "Directive" | "DirectiveLiteral" | "DoE***REMOVED***pression" | "DoWhileStatement" | "EmptyStatement" | "EmptyTypeAnnotation" | "EnumBooleanBody" | "EnumBooleanMember" | "EnumDeclaration" | "EnumDefaultedMember" | "EnumNumberBody" | "EnumNumberMember" | "EnumStringBody" | "EnumStringMember" | "EnumSymbolBody" | "E***REMOVED***istsTypeAnnotation" | "E***REMOVED***portAllDeclaration" | "E***REMOVED***portDefaultDeclaration" | "E***REMOVED***portDefaultSpecifier" | "E***REMOVED***portNamedDeclaration" | "E***REMOVED***portNamespaceSpecifier" | "E***REMOVED***portSpecifier" | "E***REMOVED***pressionStatement" | "File" | "ForInStatement" | "ForOfStatement" | "ForStatement" | "FunctionDeclaration" | "FunctionE***REMOVED***pression" | "FunctionTypeAnnotation" | "FunctionTypeParam" | "GenericTypeAnnotation" | "Identifier" | "IfStatement" | "Import" | "ImportAttribute" | "ImportDeclaration" | "ImportDefaultSpecifier" | "ImportE***REMOVED***pression" | "ImportNamespaceSpecifier" | "ImportSpecifier" | "Inde***REMOVED***edAccessType" | "InferredPredicate" | "InterfaceDeclaration" | "InterfaceE***REMOVED***tends" | "InterfaceTypeAnnotation" | "InterpreterDirective" | "IntersectionTypeAnnotation" | "JSXAttribute" | "JSXClosingElement" | "JSXClosingFragment" | "JSXElement" | "JSXEmptyE***REMOVED***pression" | "JSXE***REMOVED***pressionContainer" | "JSXFragment" | "JSXIdentifier" | "JSXMemberE***REMOVED***pression" | "JSXNamespacedName" | "JSXOpeningElement" | "JSXOpeningFragment" | "JSXSpreadAttribute" | "JSXSpreadChild" | "JSXTe***REMOVED***t" | "LabeledStatement" | "LogicalE***REMOVED***pression" | "MemberE***REMOVED***pression" | "MetaProperty" | "Mi***REMOVED***edTypeAnnotation" | "ModuleE***REMOVED***pression" | "NewE***REMOVED***pression" | "Noop" | "NullLiteral" | "NullLiteralTypeAnnotation" | "NullableTypeAnnotation" | "NumberLiteral" | "NumberLiteralTypeAnnotation" | "NumberTypeAnnotation" | "NumericLiteral" | "ObjectE***REMOVED***pression" | "ObjectMethod" | "ObjectPattern" | "ObjectProperty" | "ObjectTypeAnnotation" | "ObjectTypeCallProperty" | "ObjectTypeInde***REMOVED***er" | "ObjectTypeInternalSlot" | "ObjectTypeProperty" | "ObjectTypeSpreadProperty" | "OpaqueType" | "OptionalCallE***REMOVED***pression" | "OptionalInde***REMOVED***edAccessType" | "OptionalMemberE***REMOVED***pression" | "ParenthesizedE***REMOVED***pression" | "PipelineBareFunction" | "PipelinePrimaryTopicReference" | "PipelineTopicE***REMOVED***pression" | "Placeholder" | "PrivateName" | "Program" | "QualifiedTypeIdentifier" | "RecordE***REMOVED***pression" | "RegE***REMOVED***pLiteral" | "Rege***REMOVED***Literal" | "RestElement" | "RestProperty" | "ReturnStatement" | "SequenceE***REMOVED***pression" | "SpreadElement" | "SpreadProperty" | "StaticBlock" | "StringLiteral" | "StringLiteralTypeAnnotation" | "StringTypeAnnotation" | "Super" | "SwitchCase" | "SwitchStatement" | "SymbolTypeAnnotation" | "TSAnyKeyword" | "TSArrayType" | "TSAsE***REMOVED***pression" | "TSBigIntKeyword" | "TSBooleanKeyword" | "TSCallSignatureDeclaration" | "TSConditionalType" | "TSConstructSignatureDeclaration" | "TSConstructorType" | "TSDeclareFunction" | "TSDeclareMethod" | "TSEnumDeclaration" | "TSEnumMember" | "TSE***REMOVED***portAssignment" | "TSE***REMOVED***pressionWithTypeArguments" | "TSE***REMOVED***ternalModuleReference" | "TSFunctionType" | "TSImportEqualsDeclaration" | "TSImportType" | "TSInde***REMOVED***Signature" | "TSInde***REMOVED***edAccessType" | "TSInferType" | "TSInstantiationE***REMOVED***pression" | "TSInterfaceBody" | "TSInterfaceDeclaration" | "TSIntersectionType" | "TSIntrinsicKeyword" | "TSLiteralType" | "TSMappedType" | "TSMethodSignature" | "TSModuleBlock" | "TSModuleDeclaration" | "TSNamedTupleMember" | "TSNamespaceE***REMOVED***portDeclaration" | "TSNeverKeyword" | "TSNonNullE***REMOVED***pression" | "TSNullKeyword" | "TSNumberKeyword" | "TSObjectKeyword" | "TSOptionalType" | "TSParameterProperty" | "TSParenthesizedType" | "TSPropertySignature" | "TSQualifiedName" | "TSRestType" | "TSSatisfiesE***REMOVED***pression" | "TSStringKeyword" | "TSSymbolKeyword" | "TSThisType" | "TSTupleType" | "TSTypeAliasDeclaration" | "TSTypeAnnotation" | "TSTypeAssertion" | "TSTypeLiteral" | "TSTypeOperator" | "TSTypeParameter" | "TSTypeParameterDeclaration" | "TSTypeParameterInstantiation" | "TSTypePredicate" | "TSTypeQuery" | "TSTypeReference" | "TSUndefinedKeyword" | "TSUnionType" | "TSUnknownKeyword" | "TSVoidKeyword" | "TaggedTemplateE***REMOVED***pression" | "TemplateElement" | "TemplateLiteral" | "ThisE***REMOVED***pression" | "ThisTypeAnnotation" | "ThrowStatement" | "TopicReference" | "TryStatement" | "TupleE***REMOVED***pression" | "TupleTypeAnnotation" | "TypeAlias" | "TypeAnnotation" | "TypeCastE***REMOVED***pression" | "TypeParameter" | "TypeParameterDeclaration" | "TypeParameterInstantiation" | "TypeofTypeAnnotation" | "UnaryE***REMOVED***pression" | "UnionTypeAnnotation" | "UpdateE***REMOVED***pression" | "V8IntrinsicIdentifier" | "VariableDeclaration" | "VariableDeclarator" | "Variance" | "VoidTypeAnnotation" | "WhileStatement" | "WithStatement" | "YieldE***REMOVED***pression" | keyof Aliases)[];
declare const COMPLETIONSTATEMENT_TYPES: ("AnyTypeAnnotation" | "ArgumentPlaceholder" | "ArrayE***REMOVED***pression" | "ArrayPattern" | "ArrayTypeAnnotation" | "ArrowFunctionE***REMOVED***pression" | "AssignmentE***REMOVED***pression" | "AssignmentPattern" | "AwaitE***REMOVED***pression" | "BigIntLiteral" | "BinaryE***REMOVED***pression" | "BindE***REMOVED***pression" | "BlockStatement" | "BooleanLiteral" | "BooleanLiteralTypeAnnotation" | "BooleanTypeAnnotation" | "BreakStatement" | "CallE***REMOVED***pression" | "CatchClause" | "ClassAccessorProperty" | "ClassBody" | "ClassDeclaration" | "ClassE***REMOVED***pression" | "ClassImplements" | "ClassMethod" | "ClassPrivateMethod" | "ClassPrivateProperty" | "ClassProperty" | "ConditionalE***REMOVED***pression" | "ContinueStatement" | "DebuggerStatement" | "DecimalLiteral" | "DeclareClass" | "DeclareE***REMOVED***portAllDeclaration" | "DeclareE***REMOVED***portDeclaration" | "DeclareFunction" | "DeclareInterface" | "DeclareModule" | "DeclareModuleE***REMOVED***ports" | "DeclareOpaqueType" | "DeclareTypeAlias" | "DeclareVariable" | "DeclaredPredicate" | "Decorator" | "Directive" | "DirectiveLiteral" | "DoE***REMOVED***pression" | "DoWhileStatement" | "EmptyStatement" | "EmptyTypeAnnotation" | "EnumBooleanBody" | "EnumBooleanMember" | "EnumDeclaration" | "EnumDefaultedMember" | "EnumNumberBody" | "EnumNumberMember" | "EnumStringBody" | "EnumStringMember" | "EnumSymbolBody" | "E***REMOVED***istsTypeAnnotation" | "E***REMOVED***portAllDeclaration" | "E***REMOVED***portDefaultDeclaration" | "E***REMOVED***portDefaultSpecifier" | "E***REMOVED***portNamedDeclaration" | "E***REMOVED***portNamespaceSpecifier" | "E***REMOVED***portSpecifier" | "E***REMOVED***pressionStatement" | "File" | "ForInStatement" | "ForOfStatement" | "ForStatement" | "FunctionDeclaration" | "FunctionE***REMOVED***pression" | "FunctionTypeAnnotation" | "FunctionTypeParam" | "GenericTypeAnnotation" | "Identifier" | "IfStatement" | "Import" | "ImportAttribute" | "ImportDeclaration" | "ImportDefaultSpecifier" | "ImportE***REMOVED***pression" | "ImportNamespaceSpecifier" | "ImportSpecifier" | "Inde***REMOVED***edAccessType" | "InferredPredicate" | "InterfaceDeclaration" | "InterfaceE***REMOVED***tends" | "InterfaceTypeAnnotation" | "InterpreterDirective" | "IntersectionTypeAnnotation" | "JSXAttribute" | "JSXClosingElement" | "JSXClosingFragment" | "JSXElement" | "JSXEmptyE***REMOVED***pression" | "JSXE***REMOVED***pressionContainer" | "JSXFragment" | "JSXIdentifier" | "JSXMemberE***REMOVED***pression" | "JSXNamespacedName" | "JSXOpeningElement" | "JSXOpeningFragment" | "JSXSpreadAttribute" | "JSXSpreadChild" | "JSXTe***REMOVED***t" | "LabeledStatement" | "LogicalE***REMOVED***pression" | "MemberE***REMOVED***pression" | "MetaProperty" | "Mi***REMOVED***edTypeAnnotation" | "ModuleE***REMOVED***pression" | "NewE***REMOVED***pression" | "Noop" | "NullLiteral" | "NullLiteralTypeAnnotation" | "NullableTypeAnnotation" | "NumberLiteral" | "NumberLiteralTypeAnnotation" | "NumberTypeAnnotation" | "NumericLiteral" | "ObjectE***REMOVED***pression" | "ObjectMethod" | "ObjectPattern" | "ObjectProperty" | "ObjectTypeAnnotation" | "ObjectTypeCallProperty" | "ObjectTypeInde***REMOVED***er" | "ObjectTypeInternalSlot" | "ObjectTypeProperty" | "ObjectTypeSpreadProperty" | "OpaqueType" | "OptionalCallE***REMOVED***pression" | "OptionalInde***REMOVED***edAccessType" | "OptionalMemberE***REMOVED***pression" | "ParenthesizedE***REMOVED***pression" | "PipelineBareFunction" | "PipelinePrimaryTopicReference" | "PipelineTopicE***REMOVED***pression" | "Placeholder" | "PrivateName" | "Program" | "QualifiedTypeIdentifier" | "RecordE***REMOVED***pression" | "RegE***REMOVED***pLiteral" | "Rege***REMOVED***Literal" | "RestElement" | "RestProperty" | "ReturnStatement" | "SequenceE***REMOVED***pression" | "SpreadElement" | "SpreadProperty" | "StaticBlock" | "StringLiteral" | "StringLiteralTypeAnnotation" | "StringTypeAnnotation" | "Super" | "SwitchCase" | "SwitchStatement" | "SymbolTypeAnnotation" | "TSAnyKeyword" | "TSArrayType" | "TSAsE***REMOVED***pression" | "TSBigIntKeyword" | "TSBooleanKeyword" | "TSCallSignatureDeclaration" | "TSConditionalType" | "TSConstructSignatureDeclaration" | "TSConstructorType" | "TSDeclareFunction" | "TSDeclareMethod" | "TSEnumDeclaration" | "TSEnumMember" | "TSE***REMOVED***portAssignment" | "TSE***REMOVED***pressionWithTypeArguments" | "TSE***REMOVED***ternalModuleReference" | "TSFunctionType" | "TSImportEqualsDeclaration" | "TSImportType" | "TSInde***REMOVED***Signature" | "TSInde***REMOVED***edAccessType" | "TSInferType" | "TSInstantiationE***REMOVED***pression" | "TSInterfaceBody" | "TSInterfaceDeclaration" | "TSIntersectionType" | "TSIntrinsicKeyword" | "TSLiteralType" | "TSMappedType" | "TSMethodSignature" | "TSModuleBlock" | "TSModuleDeclaration" | "TSNamedTupleMember" | "TSNamespaceE***REMOVED***portDeclaration" | "TSNeverKeyword" | "TSNonNullE***REMOVED***pression" | "TSNullKeyword" | "TSNumberKeyword" | "TSObjectKeyword" | "TSOptionalType" | "TSParameterProperty" | "TSParenthesizedType" | "TSPropertySignature" | "TSQualifiedName" | "TSRestType" | "TSSatisfiesE***REMOVED***pression" | "TSStringKeyword" | "TSSymbolKeyword" | "TSThisType" | "TSTupleType" | "TSTypeAliasDeclaration" | "TSTypeAnnotation" | "TSTypeAssertion" | "TSTypeLiteral" | "TSTypeOperator" | "TSTypeParameter" | "TSTypeParameterDeclaration" | "TSTypeParameterInstantiation" | "TSTypePredicate" | "TSTypeQuery" | "TSTypeReference" | "TSUndefinedKeyword" | "TSUnionType" | "TSUnknownKeyword" | "TSVoidKeyword" | "TaggedTemplateE***REMOVED***pression" | "TemplateElement" | "TemplateLiteral" | "ThisE***REMOVED***pression" | "ThisTypeAnnotation" | "ThrowStatement" | "TopicReference" | "TryStatement" | "TupleE***REMOVED***pression" | "TupleTypeAnnotation" | "TypeAlias" | "TypeAnnotation" | "TypeCastE***REMOVED***pression" | "TypeParameter" | "TypeParameterDeclaration" | "TypeParameterInstantiation" | "TypeofTypeAnnotation" | "UnaryE***REMOVED***pression" | "UnionTypeAnnotation" | "UpdateE***REMOVED***pression" | "V8IntrinsicIdentifier" | "VariableDeclaration" | "VariableDeclarator" | "Variance" | "VoidTypeAnnotation" | "WhileStatement" | "WithStatement" | "YieldE***REMOVED***pression" | keyof Aliases)[];
declare const CONDITIONAL_TYPES: ("AnyTypeAnnotation" | "ArgumentPlaceholder" | "ArrayE***REMOVED***pression" | "ArrayPattern" | "ArrayTypeAnnotation" | "ArrowFunctionE***REMOVED***pression" | "AssignmentE***REMOVED***pression" | "AssignmentPattern" | "AwaitE***REMOVED***pression" | "BigIntLiteral" | "BinaryE***REMOVED***pression" | "BindE***REMOVED***pression" | "BlockStatement" | "BooleanLiteral" | "BooleanLiteralTypeAnnotation" | "BooleanTypeAnnotation" | "BreakStatement" | "CallE***REMOVED***pression" | "CatchClause" | "ClassAccessorProperty" | "ClassBody" | "ClassDeclaration" | "ClassE***REMOVED***pression" | "ClassImplements" | "ClassMethod" | "ClassPrivateMethod" | "ClassPrivateProperty" | "ClassProperty" | "ConditionalE***REMOVED***pression" | "ContinueStatement" | "DebuggerStatement" | "DecimalLiteral" | "DeclareClass" | "DeclareE***REMOVED***portAllDeclaration" | "DeclareE***REMOVED***portDeclaration" | "DeclareFunction" | "DeclareInterface" | "DeclareModule" | "DeclareModuleE***REMOVED***ports" | "DeclareOpaqueType" | "DeclareTypeAlias" | "DeclareVariable" | "DeclaredPredicate" | "Decorator" | "Directive" | "DirectiveLiteral" | "DoE***REMOVED***pression" | "DoWhileStatement" | "EmptyStatement" | "EmptyTypeAnnotation" | "EnumBooleanBody" | "EnumBooleanMember" | "EnumDeclaration" | "EnumDefaultedMember" | "EnumNumberBody" | "EnumNumberMember" | "EnumStringBody" | "EnumStringMember" | "EnumSymbolBody" | "E***REMOVED***istsTypeAnnotation" | "E***REMOVED***portAllDeclaration" | "E***REMOVED***portDefaultDeclaration" | "E***REMOVED***portDefaultSpecifier" | "E***REMOVED***portNamedDeclaration" | "E***REMOVED***portNamespaceSpecifier" | "E***REMOVED***portSpecifier" | "E***REMOVED***pressionStatement" | "File" | "ForInStatement" | "ForOfStatement" | "ForStatement" | "FunctionDeclaration" | "FunctionE***REMOVED***pression" | "FunctionTypeAnnotation" | "FunctionTypeParam" | "GenericTypeAnnotation" | "Identifier" | "IfStatement" | "Import" | "ImportAttribute" | "ImportDeclaration" | "ImportDefaultSpecifier" | "ImportE***REMOVED***pression" | "ImportNamespaceSpecifier" | "ImportSpecifier" | "Inde***REMOVED***edAccessType" | "InferredPredicate" | "InterfaceDeclaration" | "InterfaceE***REMOVED***tends" | "InterfaceTypeAnnotation" | "InterpreterDirective" | "IntersectionTypeAnnotation" | "JSXAttribute" | "JSXClosingElement" | "JSXClosingFragment" | "JSXElement" | "JSXEmptyE***REMOVED***pression" | "JSXE***REMOVED***pressionContainer" | "JSXFragment" | "JSXIdentifier" | "JSXMemberE***REMOVED***pression" | "JSXNamespacedName" | "JSXOpeningElement" | "JSXOpeningFragment" | "JSXSpreadAttribute" | "JSXSpreadChild" | "JSXTe***REMOVED***t" | "LabeledStatement" | "LogicalE***REMOVED***pression" | "MemberE***REMOVED***pression" | "MetaProperty" | "Mi***REMOVED***edTypeAnnotation" | "ModuleE***REMOVED***pression" | "NewE***REMOVED***pression" | "Noop" | "NullLiteral" | "NullLiteralTypeAnnotation" | "NullableTypeAnnotation" | "NumberLiteral" | "NumberLiteralTypeAnnotation" | "NumberTypeAnnotation" | "NumericLiteral" | "ObjectE***REMOVED***pression" | "ObjectMethod" | "ObjectPattern" | "ObjectProperty" | "ObjectTypeAnnotation" | "ObjectTypeCallProperty" | "ObjectTypeInde***REMOVED***er" | "ObjectTypeInternalSlot" | "ObjectTypeProperty" | "ObjectTypeSpreadProperty" | "OpaqueType" | "OptionalCallE***REMOVED***pression" | "OptionalInde***REMOVED***edAccessType" | "OptionalMemberE***REMOVED***pression" | "ParenthesizedE***REMOVED***pression" | "PipelineBareFunction" | "PipelinePrimaryTopicReference" | "PipelineTopicE***REMOVED***pression" | "Placeholder" | "PrivateName" | "Program" | "QualifiedTypeIdentifier" | "RecordE***REMOVED***pression" | "RegE***REMOVED***pLiteral" | "Rege***REMOVED***Literal" | "RestElement" | "RestProperty" | "ReturnStatement" | "SequenceE***REMOVED***pression" | "SpreadElement" | "SpreadProperty" | "StaticBlock" | "StringLiteral" | "StringLiteralTypeAnnotation" | "StringTypeAnnotation" | "Super" | "SwitchCase" | "SwitchStatement" | "SymbolTypeAnnotation" | "TSAnyKeyword" | "TSArrayType" | "TSAsE***REMOVED***pression" | "TSBigIntKeyword" | "TSBooleanKeyword" | "TSCallSignatureDeclaration" | "TSConditionalType" | "TSConstructSignatureDeclaration" | "TSConstructorType" | "TSDeclareFunction" | "TSDeclareMethod" | "TSEnumDeclaration" | "TSEnumMember" | "TSE***REMOVED***portAssignment" | "TSE***REMOVED***pressionWithTypeArguments" | "TSE***REMOVED***ternalModuleReference" | "TSFunctionType" | "TSImportEqualsDeclaration" | "TSImportType" | "TSInde***REMOVED***Signature" | "TSInde***REMOVED***edAccessType" | "TSInferType" | "TSInstantiationE***REMOVED***pression" | "TSInterfaceBody" | "TSInterfaceDeclaration" | "TSIntersectionType" | "TSIntrinsicKeyword" | "TSLiteralType" | "TSMappedType" | "TSMethodSignature" | "TSModuleBlock" | "TSModuleDeclaration" | "TSNamedTupleMember" | "TSNamespaceE***REMOVED***portDeclaration" | "TSNeverKeyword" | "TSNonNullE***REMOVED***pression" | "TSNullKeyword" | "TSNumberKeyword" | "TSObjectKeyword" | "TSOptionalType" | "TSParameterProperty" | "TSParenthesizedType" | "TSPropertySignature" | "TSQualifiedName" | "TSRestType" | "TSSatisfiesE***REMOVED***pression" | "TSStringKeyword" | "TSSymbolKeyword" | "TSThisType" | "TSTupleType" | "TSTypeAliasDeclaration" | "TSTypeAnnotation" | "TSTypeAssertion" | "TSTypeLiteral" | "TSTypeOperator" | "TSTypeParameter" | "TSTypeParameterDeclaration" | "TSTypeParameterInstantiation" | "TSTypePredicate" | "TSTypeQuery" | "TSTypeReference" | "TSUndefinedKeyword" | "TSUnionType" | "TSUnknownKeyword" | "TSVoidKeyword" | "TaggedTemplateE***REMOVED***pression" | "TemplateElement" | "TemplateLiteral" | "ThisE***REMOVED***pression" | "ThisTypeAnnotation" | "ThrowStatement" | "TopicReference" | "TryStatement" | "TupleE***REMOVED***pression" | "TupleTypeAnnotation" | "TypeAlias" | "TypeAnnotation" | "TypeCastE***REMOVED***pression" | "TypeParameter" | "TypeParameterDeclaration" | "TypeParameterInstantiation" | "TypeofTypeAnnotation" | "UnaryE***REMOVED***pression" | "UnionTypeAnnotation" | "UpdateE***REMOVED***pression" | "V8IntrinsicIdentifier" | "VariableDeclaration" | "VariableDeclarator" | "Variance" | "VoidTypeAnnotation" | "WhileStatement" | "WithStatement" | "YieldE***REMOVED***pression" | keyof Aliases)[];
declare const LOOP_TYPES: ("AnyTypeAnnotation" | "ArgumentPlaceholder" | "ArrayE***REMOVED***pression" | "ArrayPattern" | "ArrayTypeAnnotation" | "ArrowFunctionE***REMOVED***pression" | "AssignmentE***REMOVED***pression" | "AssignmentPattern" | "AwaitE***REMOVED***pression" | "BigIntLiteral" | "BinaryE***REMOVED***pression" | "BindE***REMOVED***pression" | "BlockStatement" | "BooleanLiteral" | "BooleanLiteralTypeAnnotation" | "BooleanTypeAnnotation" | "BreakStatement" | "CallE***REMOVED***pression" | "CatchClause" | "ClassAccessorProperty" | "ClassBody" | "ClassDeclaration" | "ClassE***REMOVED***pression" | "ClassImplements" | "ClassMethod" | "ClassPrivateMethod" | "ClassPrivateProperty" | "ClassProperty" | "ConditionalE***REMOVED***pression" | "ContinueStatement" | "DebuggerStatement" | "DecimalLiteral" | "DeclareClass" | "DeclareE***REMOVED***portAllDeclaration" | "DeclareE***REMOVED***portDeclaration" | "DeclareFunction" | "DeclareInterface" | "DeclareModule" | "DeclareModuleE***REMOVED***ports" | "DeclareOpaqueType" | "DeclareTypeAlias" | "DeclareVariable" | "DeclaredPredicate" | "Decorator" | "Directive" | "DirectiveLiteral" | "DoE***REMOVED***pression" | "DoWhileStatement" | "EmptyStatement" | "EmptyTypeAnnotation" | "EnumBooleanBody" | "EnumBooleanMember" | "EnumDeclaration" | "EnumDefaultedMember" | "EnumNumberBody" | "EnumNumberMember" | "EnumStringBody" | "EnumStringMember" | "EnumSymbolBody" | "E***REMOVED***istsTypeAnnotation" | "E***REMOVED***portAllDeclaration" | "E***REMOVED***portDefaultDeclaration" | "E***REMOVED***portDefaultSpecifier" | "E***REMOVED***portNamedDeclaration" | "E***REMOVED***portNamespaceSpecifier" | "E***REMOVED***portSpecifier" | "E***REMOVED***pressionStatement" | "File" | "ForInStatement" | "ForOfStatement" | "ForStatement" | "FunctionDeclaration" | "FunctionE***REMOVED***pression" | "FunctionTypeAnnotation" | "FunctionTypeParam" | "GenericTypeAnnotation" | "Identifier" | "IfStatement" | "Import" | "ImportAttribute" | "ImportDeclaration" | "ImportDefaultSpecifier" | "ImportE***REMOVED***pression" | "ImportNamespaceSpecifier" | "ImportSpecifier" | "Inde***REMOVED***edAccessType" | "InferredPredicate" | "InterfaceDeclaration" | "InterfaceE***REMOVED***tends" | "InterfaceTypeAnnotation" | "InterpreterDirective" | "IntersectionTypeAnnotation" | "JSXAttribute" | "JSXClosingElement" | "JSXClosingFragment" | "JSXElement" | "JSXEmptyE***REMOVED***pression" | "JSXE***REMOVED***pressionContainer" | "JSXFragment" | "JSXIdentifier" | "JSXMemberE***REMOVED***pression" | "JSXNamespacedName" | "JSXOpeningElement" | "JSXOpeningFragment" | "JSXSpreadAttribute" | "JSXSpreadChild" | "JSXTe***REMOVED***t" | "LabeledStatement" | "LogicalE***REMOVED***pression" | "MemberE***REMOVED***pression" | "MetaProperty" | "Mi***REMOVED***edTypeAnnotation" | "ModuleE***REMOVED***pression" | "NewE***REMOVED***pression" | "Noop" | "NullLiteral" | "NullLiteralTypeAnnotation" | "NullableTypeAnnotation" | "NumberLiteral" | "NumberLiteralTypeAnnotation" | "NumberTypeAnnotation" | "NumericLiteral" | "ObjectE***REMOVED***pression" | "ObjectMethod" | "ObjectPattern" | "ObjectProperty" | "ObjectTypeAnnotation" | "ObjectTypeCallProperty" | "ObjectTypeInde***REMOVED***er" | "ObjectTypeInternalSlot" | "ObjectTypeProperty" | "ObjectTypeSpreadProperty" | "OpaqueType" | "OptionalCallE***REMOVED***pression" | "OptionalInde***REMOVED***edAccessType" | "OptionalMemberE***REMOVED***pression" | "ParenthesizedE***REMOVED***pression" | "PipelineBareFunction" | "PipelinePrimaryTopicReference" | "PipelineTopicE***REMOVED***pression" | "Placeholder" | "PrivateName" | "Program" | "QualifiedTypeIdentifier" | "RecordE***REMOVED***pression" | "RegE***REMOVED***pLiteral" | "Rege***REMOVED***Literal" | "RestElement" | "RestProperty" | "ReturnStatement" | "SequenceE***REMOVED***pression" | "SpreadElement" | "SpreadProperty" | "StaticBlock" | "StringLiteral" | "StringLiteralTypeAnnotation" | "StringTypeAnnotation" | "Super" | "SwitchCase" | "SwitchStatement" | "SymbolTypeAnnotation" | "TSAnyKeyword" | "TSArrayType" | "TSAsE***REMOVED***pression" | "TSBigIntKeyword" | "TSBooleanKeyword" | "TSCallSignatureDeclaration" | "TSConditionalType" | "TSConstructSignatureDeclaration" | "TSConstructorType" | "TSDeclareFunction" | "TSDeclareMethod" | "TSEnumDeclaration" | "TSEnumMember" | "TSE***REMOVED***portAssignment" | "TSE***REMOVED***pressionWithTypeArguments" | "TSE***REMOVED***ternalModuleReference" | "TSFunctionType" | "TSImportEqualsDeclaration" | "TSImportType" | "TSInde***REMOVED***Signature" | "TSInde***REMOVED***edAccessType" | "TSInferType" | "TSInstantiationE***REMOVED***pression" | "TSInterfaceBody" | "TSInterfaceDeclaration" | "TSIntersectionType" | "TSIntrinsicKeyword" | "TSLiteralType" | "TSMappedType" | "TSMethodSignature" | "TSModuleBlock" | "TSModuleDeclaration" | "TSNamedTupleMember" | "TSNamespaceE***REMOVED***portDeclaration" | "TSNeverKeyword" | "TSNonNullE***REMOVED***pression" | "TSNullKeyword" | "TSNumberKeyword" | "TSObjectKeyword" | "TSOptionalType" | "TSParameterProperty" | "TSParenthesizedType" | "TSPropertySignature" | "TSQualifiedName" | "TSRestType" | "TSSatisfiesE***REMOVED***pression" | "TSStringKeyword" | "TSSymbolKeyword" | "TSThisType" | "TSTupleType" | "TSTypeAliasDeclaration" | "TSTypeAnnotation" | "TSTypeAssertion" | "TSTypeLiteral" | "TSTypeOperator" | "TSTypeParameter" | "TSTypeParameterDeclaration" | "TSTypeParameterInstantiation" | "TSTypePredicate" | "TSTypeQuery" | "TSTypeReference" | "TSUndefinedKeyword" | "TSUnionType" | "TSUnknownKeyword" | "TSVoidKeyword" | "TaggedTemplateE***REMOVED***pression" | "TemplateElement" | "TemplateLiteral" | "ThisE***REMOVED***pression" | "ThisTypeAnnotation" | "ThrowStatement" | "TopicReference" | "TryStatement" | "TupleE***REMOVED***pression" | "TupleTypeAnnotation" | "TypeAlias" | "TypeAnnotation" | "TypeCastE***REMOVED***pression" | "TypeParameter" | "TypeParameterDeclaration" | "TypeParameterInstantiation" | "TypeofTypeAnnotation" | "UnaryE***REMOVED***pression" | "UnionTypeAnnotation" | "UpdateE***REMOVED***pression" | "V8IntrinsicIdentifier" | "VariableDeclaration" | "VariableDeclarator" | "Variance" | "VoidTypeAnnotation" | "WhileStatement" | "WithStatement" | "YieldE***REMOVED***pression" | keyof Aliases)[];
declare const WHILE_TYPES: ("AnyTypeAnnotation" | "ArgumentPlaceholder" | "ArrayE***REMOVED***pression" | "ArrayPattern" | "ArrayTypeAnnotation" | "ArrowFunctionE***REMOVED***pression" | "AssignmentE***REMOVED***pression" | "AssignmentPattern" | "AwaitE***REMOVED***pression" | "BigIntLiteral" | "BinaryE***REMOVED***pression" | "BindE***REMOVED***pression" | "BlockStatement" | "BooleanLiteral" | "BooleanLiteralTypeAnnotation" | "BooleanTypeAnnotation" | "BreakStatement" | "CallE***REMOVED***pression" | "CatchClause" | "ClassAccessorProperty" | "ClassBody" | "ClassDeclaration" | "ClassE***REMOVED***pression" | "ClassImplements" | "ClassMethod" | "ClassPrivateMethod" | "ClassPrivateProperty" | "ClassProperty" | "ConditionalE***REMOVED***pression" | "ContinueStatement" | "DebuggerStatement" | "DecimalLiteral" | "DeclareClass" | "DeclareE***REMOVED***portAllDeclaration" | "DeclareE***REMOVED***portDeclaration" | "DeclareFunction" | "DeclareInterface" | "DeclareModule" | "DeclareModuleE***REMOVED***ports" | "DeclareOpaqueType" | "DeclareTypeAlias" | "DeclareVariable" | "DeclaredPredicate" | "Decorator" | "Directive" | "DirectiveLiteral" | "DoE***REMOVED***pression" | "DoWhileStatement" | "EmptyStatement" | "EmptyTypeAnnotation" | "EnumBooleanBody" | "EnumBooleanMember" | "EnumDeclaration" | "EnumDefaultedMember" | "EnumNumberBody" | "EnumNumberMember" | "EnumStringBody" | "EnumStringMember" | "EnumSymbolBody" | "E***REMOVED***istsTypeAnnotation" | "E***REMOVED***portAllDeclaration" | "E***REMOVED***portDefaultDeclaration" | "E***REMOVED***portDefaultSpecifier" | "E***REMOVED***portNamedDeclaration" | "E***REMOVED***portNamespaceSpecifier" | "E***REMOVED***portSpecifier" | "E***REMOVED***pressionStatement" | "File" | "ForInStatement" | "ForOfStatement" | "ForStatement" | "FunctionDeclaration" | "FunctionE***REMOVED***pression" | "FunctionTypeAnnotation" | "FunctionTypeParam" | "GenericTypeAnnotation" | "Identifier" | "IfStatement" | "Import" | "ImportAttribute" | "ImportDeclaration" | "ImportDefaultSpecifier" | "ImportE***REMOVED***pression" | "ImportNamespaceSpecifier" | "ImportSpecifier" | "Inde***REMOVED***edAccessType" | "InferredPredicate" | "InterfaceDeclaration" | "InterfaceE***REMOVED***tends" | "InterfaceTypeAnnotation" | "InterpreterDirective" | "IntersectionTypeAnnotation" | "JSXAttribute" | "JSXClosingElement" | "JSXClosingFragment" | "JSXElement" | "JSXEmptyE***REMOVED***pression" | "JSXE***REMOVED***pressionContainer" | "JSXFragment" | "JSXIdentifier" | "JSXMemberE***REMOVED***pression" | "JSXNamespacedName" | "JSXOpeningElement" | "JSXOpeningFragment" | "JSXSpreadAttribute" | "JSXSpreadChild" | "JSXTe***REMOVED***t" | "LabeledStatement" | "LogicalE***REMOVED***pression" | "MemberE***REMOVED***pression" | "MetaProperty" | "Mi***REMOVED***edTypeAnnotation" | "ModuleE***REMOVED***pression" | "NewE***REMOVED***pression" | "Noop" | "NullLiteral" | "NullLiteralTypeAnnotation" | "NullableTypeAnnotation" | "NumberLiteral" | "NumberLiteralTypeAnnotation" | "NumberTypeAnnotation" | "NumericLiteral" | "ObjectE***REMOVED***pression" | "ObjectMethod" | "ObjectPattern" | "ObjectProperty" | "ObjectTypeAnnotation" | "ObjectTypeCallProperty" | "ObjectTypeInde***REMOVED***er" | "ObjectTypeInternalSlot" | "ObjectTypeProperty" | "ObjectTypeSpreadProperty" | "OpaqueType" | "OptionalCallE***REMOVED***pression" | "OptionalInde***REMOVED***edAccessType" | "OptionalMemberE***REMOVED***pression" | "ParenthesizedE***REMOVED***pression" | "PipelineBareFunction" | "PipelinePrimaryTopicReference" | "PipelineTopicE***REMOVED***pression" | "Placeholder" | "PrivateName" | "Program" | "QualifiedTypeIdentifier" | "RecordE***REMOVED***pression" | "RegE***REMOVED***pLiteral" | "Rege***REMOVED***Literal" | "RestElement" | "RestProperty" | "ReturnStatement" | "SequenceE***REMOVED***pression" | "SpreadElement" | "SpreadProperty" | "StaticBlock" | "StringLiteral" | "StringLiteralTypeAnnotation" | "StringTypeAnnotation" | "Super" | "SwitchCase" | "SwitchStatement" | "SymbolTypeAnnotation" | "TSAnyKeyword" | "TSArrayType" | "TSAsE***REMOVED***pression" | "TSBigIntKeyword" | "TSBooleanKeyword" | "TSCallSignatureDeclaration" | "TSConditionalType" | "TSConstructSignatureDeclaration" | "TSConstructorType" | "TSDeclareFunction" | "TSDeclareMethod" | "TSEnumDeclaration" | "TSEnumMember" | "TSE***REMOVED***portAssignment" | "TSE***REMOVED***pressionWithTypeArguments" | "TSE***REMOVED***ternalModuleReference" | "TSFunctionType" | "TSImportEqualsDeclaration" | "TSImportType" | "TSInde***REMOVED***Signature" | "TSInde***REMOVED***edAccessType" | "TSInferType" | "TSInstantiationE***REMOVED***pression" | "TSInterfaceBody" | "TSInterfaceDeclaration" | "TSIntersectionType" | "TSIntrinsicKeyword" | "TSLiteralType" | "TSMappedType" | "TSMethodSignature" | "TSModuleBlock" | "TSModuleDeclaration" | "TSNamedTupleMember" | "TSNamespaceE***REMOVED***portDeclaration" | "TSNeverKeyword" | "TSNonNullE***REMOVED***pression" | "TSNullKeyword" | "TSNumberKeyword" | "TSObjectKeyword" | "TSOptionalType" | "TSParameterProperty" | "TSParenthesizedType" | "TSPropertySignature" | "TSQualifiedName" | "TSRestType" | "TSSatisfiesE***REMOVED***pression" | "TSStringKeyword" | "TSSymbolKeyword" | "TSThisType" | "TSTupleType" | "TSTypeAliasDeclaration" | "TSTypeAnnotation" | "TSTypeAssertion" | "TSTypeLiteral" | "TSTypeOperator" | "TSTypeParameter" | "TSTypeParameterDeclaration" | "TSTypeParameterInstantiation" | "TSTypePredicate" | "TSTypeQuery" | "TSTypeReference" | "TSUndefinedKeyword" | "TSUnionType" | "TSUnknownKeyword" | "TSVoidKeyword" | "TaggedTemplateE***REMOVED***pression" | "TemplateElement" | "TemplateLiteral" | "ThisE***REMOVED***pression" | "ThisTypeAnnotation" | "ThrowStatement" | "TopicReference" | "TryStatement" | "TupleE***REMOVED***pression" | "TupleTypeAnnotation" | "TypeAlias" | "TypeAnnotation" | "TypeCastE***REMOVED***pression" | "TypeParameter" | "TypeParameterDeclaration" | "TypeParameterInstantiation" | "TypeofTypeAnnotation" | "UnaryE***REMOVED***pression" | "UnionTypeAnnotation" | "UpdateE***REMOVED***pression" | "V8IntrinsicIdentifier" | "VariableDeclaration" | "VariableDeclarator" | "Variance" | "VoidTypeAnnotation" | "WhileStatement" | "WithStatement" | "YieldE***REMOVED***pression" | keyof Aliases)[];
declare const EXPRESSIONWRAPPER_TYPES: ("AnyTypeAnnotation" | "ArgumentPlaceholder" | "ArrayE***REMOVED***pression" | "ArrayPattern" | "ArrayTypeAnnotation" | "ArrowFunctionE***REMOVED***pression" | "AssignmentE***REMOVED***pression" | "AssignmentPattern" | "AwaitE***REMOVED***pression" | "BigIntLiteral" | "BinaryE***REMOVED***pression" | "BindE***REMOVED***pression" | "BlockStatement" | "BooleanLiteral" | "BooleanLiteralTypeAnnotation" | "BooleanTypeAnnotation" | "BreakStatement" | "CallE***REMOVED***pression" | "CatchClause" | "ClassAccessorProperty" | "ClassBody" | "ClassDeclaration" | "ClassE***REMOVED***pression" | "ClassImplements" | "ClassMethod" | "ClassPrivateMethod" | "ClassPrivateProperty" | "ClassProperty" | "ConditionalE***REMOVED***pression" | "ContinueStatement" | "DebuggerStatement" | "DecimalLiteral" | "DeclareClass" | "DeclareE***REMOVED***portAllDeclaration" | "DeclareE***REMOVED***portDeclaration" | "DeclareFunction" | "DeclareInterface" | "DeclareModule" | "DeclareModuleE***REMOVED***ports" | "DeclareOpaqueType" | "DeclareTypeAlias" | "DeclareVariable" | "DeclaredPredicate" | "Decorator" | "Directive" | "DirectiveLiteral" | "DoE***REMOVED***pression" | "DoWhileStatement" | "EmptyStatement" | "EmptyTypeAnnotation" | "EnumBooleanBody" | "EnumBooleanMember" | "EnumDeclaration" | "EnumDefaultedMember" | "EnumNumberBody" | "EnumNumberMember" | "EnumStringBody" | "EnumStringMember" | "EnumSymbolBody" | "E***REMOVED***istsTypeAnnotation" | "E***REMOVED***portAllDeclaration" | "E***REMOVED***portDefaultDeclaration" | "E***REMOVED***portDefaultSpecifier" | "E***REMOVED***portNamedDeclaration" | "E***REMOVED***portNamespaceSpecifier" | "E***REMOVED***portSpecifier" | "E***REMOVED***pressionStatement" | "File" | "ForInStatement" | "ForOfStatement" | "ForStatement" | "FunctionDeclaration" | "FunctionE***REMOVED***pression" | "FunctionTypeAnnotation" | "FunctionTypeParam" | "GenericTypeAnnotation" | "Identifier" | "IfStatement" | "Import" | "ImportAttribute" | "ImportDeclaration" | "ImportDefaultSpecifier" | "ImportE***REMOVED***pression" | "ImportNamespaceSpecifier" | "ImportSpecifier" | "Inde***REMOVED***edAccessType" | "InferredPredicate" | "InterfaceDeclaration" | "InterfaceE***REMOVED***tends" | "InterfaceTypeAnnotation" | "InterpreterDirective" | "IntersectionTypeAnnotation" | "JSXAttribute" | "JSXClosingElement" | "JSXClosingFragment" | "JSXElement" | "JSXEmptyE***REMOVED***pression" | "JSXE***REMOVED***pressionContainer" | "JSXFragment" | "JSXIdentifier" | "JSXMemberE***REMOVED***pression" | "JSXNamespacedName" | "JSXOpeningElement" | "JSXOpeningFragment" | "JSXSpreadAttribute" | "JSXSpreadChild" | "JSXTe***REMOVED***t" | "LabeledStatement" | "LogicalE***REMOVED***pression" | "MemberE***REMOVED***pression" | "MetaProperty" | "Mi***REMOVED***edTypeAnnotation" | "ModuleE***REMOVED***pression" | "NewE***REMOVED***pression" | "Noop" | "NullLiteral" | "NullLiteralTypeAnnotation" | "NullableTypeAnnotation" | "NumberLiteral" | "NumberLiteralTypeAnnotation" | "NumberTypeAnnotation" | "NumericLiteral" | "ObjectE***REMOVED***pression" | "ObjectMethod" | "ObjectPattern" | "ObjectProperty" | "ObjectTypeAnnotation" | "ObjectTypeCallProperty" | "ObjectTypeInde***REMOVED***er" | "ObjectTypeInternalSlot" | "ObjectTypeProperty" | "ObjectTypeSpreadProperty" | "OpaqueType" | "OptionalCallE***REMOVED***pression" | "OptionalInde***REMOVED***edAccessType" | "OptionalMemberE***REMOVED***pression" | "ParenthesizedE***REMOVED***pression" | "PipelineBareFunction" | "PipelinePrimaryTopicReference" | "PipelineTopicE***REMOVED***pression" | "Placeholder" | "PrivateName" | "Program" | "QualifiedTypeIdentifier" | "RecordE***REMOVED***pression" | "RegE***REMOVED***pLiteral" | "Rege***REMOVED***Literal" | "RestElement" | "RestProperty" | "ReturnStatement" | "SequenceE***REMOVED***pression" | "SpreadElement" | "SpreadProperty" | "StaticBlock" | "StringLiteral" | "StringLiteralTypeAnnotation" | "StringTypeAnnotation" | "Super" | "SwitchCase" | "SwitchStatement" | "SymbolTypeAnnotation" | "TSAnyKeyword" | "TSArrayType" | "TSAsE***REMOVED***pression" | "TSBigIntKeyword" | "TSBooleanKeyword" | "TSCallSignatureDeclaration" | "TSConditionalType" | "TSConstructSignatureDeclaration" | "TSConstructorType" | "TSDeclareFunction" | "TSDeclareMethod" | "TSEnumDeclaration" | "TSEnumMember" | "TSE***REMOVED***portAssignment" | "TSE***REMOVED***pressionWithTypeArguments" | "TSE***REMOVED***ternalModuleReference" | "TSFunctionType" | "TSImportEqualsDeclaration" | "TSImportType" | "TSInde***REMOVED***Signature" | "TSInde***REMOVED***edAccessType" | "TSInferType" | "TSInstantiationE***REMOVED***pression" | "TSInterfaceBody" | "TSInterfaceDeclaration" | "TSIntersectionType" | "TSIntrinsicKeyword" | "TSLiteralType" | "TSMappedType" | "TSMethodSignature" | "TSModuleBlock" | "TSModuleDeclaration" | "TSNamedTupleMember" | "TSNamespaceE***REMOVED***portDeclaration" | "TSNeverKeyword" | "TSNonNullE***REMOVED***pression" | "TSNullKeyword" | "TSNumberKeyword" | "TSObjectKeyword" | "TSOptionalType" | "TSParameterProperty" | "TSParenthesizedType" | "TSPropertySignature" | "TSQualifiedName" | "TSRestType" | "TSSatisfiesE***REMOVED***pression" | "TSStringKeyword" | "TSSymbolKeyword" | "TSThisType" | "TSTupleType" | "TSTypeAliasDeclaration" | "TSTypeAnnotation" | "TSTypeAssertion" | "TSTypeLiteral" | "TSTypeOperator" | "TSTypeParameter" | "TSTypeParameterDeclaration" | "TSTypeParameterInstantiation" | "TSTypePredicate" | "TSTypeQuery" | "TSTypeReference" | "TSUndefinedKeyword" | "TSUnionType" | "TSUnknownKeyword" | "TSVoidKeyword" | "TaggedTemplateE***REMOVED***pression" | "TemplateElement" | "TemplateLiteral" | "ThisE***REMOVED***pression" | "ThisTypeAnnotation" | "ThrowStatement" | "TopicReference" | "TryStatement" | "TupleE***REMOVED***pression" | "TupleTypeAnnotation" | "TypeAlias" | "TypeAnnotation" | "TypeCastE***REMOVED***pression" | "TypeParameter" | "TypeParameterDeclaration" | "TypeParameterInstantiation" | "TypeofTypeAnnotation" | "UnaryE***REMOVED***pression" | "UnionTypeAnnotation" | "UpdateE***REMOVED***pression" | "V8IntrinsicIdentifier" | "VariableDeclaration" | "VariableDeclarator" | "Variance" | "VoidTypeAnnotation" | "WhileStatement" | "WithStatement" | "YieldE***REMOVED***pression" | keyof Aliases)[];
declare const FOR_TYPES: ("AnyTypeAnnotation" | "ArgumentPlaceholder" | "ArrayE***REMOVED***pression" | "ArrayPattern" | "ArrayTypeAnnotation" | "ArrowFunctionE***REMOVED***pression" | "AssignmentE***REMOVED***pression" | "AssignmentPattern" | "AwaitE***REMOVED***pression" | "BigIntLiteral" | "BinaryE***REMOVED***pression" | "BindE***REMOVED***pression" | "BlockStatement" | "BooleanLiteral" | "BooleanLiteralTypeAnnotation" | "BooleanTypeAnnotation" | "BreakStatement" | "CallE***REMOVED***pression" | "CatchClause" | "ClassAccessorProperty" | "ClassBody" | "ClassDeclaration" | "ClassE***REMOVED***pression" | "ClassImplements" | "ClassMethod" | "ClassPrivateMethod" | "ClassPrivateProperty" | "ClassProperty" | "ConditionalE***REMOVED***pression" | "ContinueStatement" | "DebuggerStatement" | "DecimalLiteral" | "DeclareClass" | "DeclareE***REMOVED***portAllDeclaration" | "DeclareE***REMOVED***portDeclaration" | "DeclareFunction" | "DeclareInterface" | "DeclareModule" | "DeclareModuleE***REMOVED***ports" | "DeclareOpaqueType" | "DeclareTypeAlias" | "DeclareVariable" | "DeclaredPredicate" | "Decorator" | "Directive" | "DirectiveLiteral" | "DoE***REMOVED***pression" | "DoWhileStatement" | "EmptyStatement" | "EmptyTypeAnnotation" | "EnumBooleanBody" | "EnumBooleanMember" | "EnumDeclaration" | "EnumDefaultedMember" | "EnumNumberBody" | "EnumNumberMember" | "EnumStringBody" | "EnumStringMember" | "EnumSymbolBody" | "E***REMOVED***istsTypeAnnotation" | "E***REMOVED***portAllDeclaration" | "E***REMOVED***portDefaultDeclaration" | "E***REMOVED***portDefaultSpecifier" | "E***REMOVED***portNamedDeclaration" | "E***REMOVED***portNamespaceSpecifier" | "E***REMOVED***portSpecifier" | "E***REMOVED***pressionStatement" | "File" | "ForInStatement" | "ForOfStatement" | "ForStatement" | "FunctionDeclaration" | "FunctionE***REMOVED***pression" | "FunctionTypeAnnotation" | "FunctionTypeParam" | "GenericTypeAnnotation" | "Identifier" | "IfStatement" | "Import" | "ImportAttribute" | "ImportDeclaration" | "ImportDefaultSpecifier" | "ImportE***REMOVED***pression" | "ImportNamespaceSpecifier" | "ImportSpecifier" | "Inde***REMOVED***edAccessType" | "InferredPredicate" | "InterfaceDeclaration" | "InterfaceE***REMOVED***tends" | "InterfaceTypeAnnotation" | "InterpreterDirective" | "IntersectionTypeAnnotation" | "JSXAttribute" | "JSXClosingElement" | "JSXClosingFragment" | "JSXElement" | "JSXEmptyE***REMOVED***pression" | "JSXE***REMOVED***pressionContainer" | "JSXFragment" | "JSXIdentifier" | "JSXMemberE***REMOVED***pression" | "JSXNamespacedName" | "JSXOpeningElement" | "JSXOpeningFragment" | "JSXSpreadAttribute" | "JSXSpreadChild" | "JSXTe***REMOVED***t" | "LabeledStatement" | "LogicalE***REMOVED***pression" | "MemberE***REMOVED***pression" | "MetaProperty" | "Mi***REMOVED***edTypeAnnotation" | "ModuleE***REMOVED***pression" | "NewE***REMOVED***pression" | "Noop" | "NullLiteral" | "NullLiteralTypeAnnotation" | "NullableTypeAnnotation" | "NumberLiteral" | "NumberLiteralTypeAnnotation" | "NumberTypeAnnotation" | "NumericLiteral" | "ObjectE***REMOVED***pression" | "ObjectMethod" | "ObjectPattern" | "ObjectProperty" | "ObjectTypeAnnotation" | "ObjectTypeCallProperty" | "ObjectTypeInde***REMOVED***er" | "ObjectTypeInternalSlot" | "ObjectTypeProperty" | "ObjectTypeSpreadProperty" | "OpaqueType" | "OptionalCallE***REMOVED***pression" | "OptionalInde***REMOVED***edAccessType" | "OptionalMemberE***REMOVED***pression" | "ParenthesizedE***REMOVED***pression" | "PipelineBareFunction" | "PipelinePrimaryTopicReference" | "PipelineTopicE***REMOVED***pression" | "Placeholder" | "PrivateName" | "Program" | "QualifiedTypeIdentifier" | "RecordE***REMOVED***pression" | "RegE***REMOVED***pLiteral" | "Rege***REMOVED***Literal" | "RestElement" | "RestProperty" | "ReturnStatement" | "SequenceE***REMOVED***pression" | "SpreadElement" | "SpreadProperty" | "StaticBlock" | "StringLiteral" | "StringLiteralTypeAnnotation" | "StringTypeAnnotation" | "Super" | "SwitchCase" | "SwitchStatement" | "SymbolTypeAnnotation" | "TSAnyKeyword" | "TSArrayType" | "TSAsE***REMOVED***pression" | "TSBigIntKeyword" | "TSBooleanKeyword" | "TSCallSignatureDeclaration" | "TSConditionalType" | "TSConstructSignatureDeclaration" | "TSConstructorType" | "TSDeclareFunction" | "TSDeclareMethod" | "TSEnumDeclaration" | "TSEnumMember" | "TSE***REMOVED***portAssignment" | "TSE***REMOVED***pressionWithTypeArguments" | "TSE***REMOVED***ternalModuleReference" | "TSFunctionType" | "TSImportEqualsDeclaration" | "TSImportType" | "TSInde***REMOVED***Signature" | "TSInde***REMOVED***edAccessType" | "TSInferType" | "TSInstantiationE***REMOVED***pression" | "TSInterfaceBody" | "TSInterfaceDeclaration" | "TSIntersectionType" | "TSIntrinsicKeyword" | "TSLiteralType" | "TSMappedType" | "TSMethodSignature" | "TSModuleBlock" | "TSModuleDeclaration" | "TSNamedTupleMember" | "TSNamespaceE***REMOVED***portDeclaration" | "TSNeverKeyword" | "TSNonNullE***REMOVED***pression" | "TSNullKeyword" | "TSNumberKeyword" | "TSObjectKeyword" | "TSOptionalType" | "TSParameterProperty" | "TSParenthesizedType" | "TSPropertySignature" | "TSQualifiedName" | "TSRestType" | "TSSatisfiesE***REMOVED***pression" | "TSStringKeyword" | "TSSymbolKeyword" | "TSThisType" | "TSTupleType" | "TSTypeAliasDeclaration" | "TSTypeAnnotation" | "TSTypeAssertion" | "TSTypeLiteral" | "TSTypeOperator" | "TSTypeParameter" | "TSTypeParameterDeclaration" | "TSTypeParameterInstantiation" | "TSTypePredicate" | "TSTypeQuery" | "TSTypeReference" | "TSUndefinedKeyword" | "TSUnionType" | "TSUnknownKeyword" | "TSVoidKeyword" | "TaggedTemplateE***REMOVED***pression" | "TemplateElement" | "TemplateLiteral" | "ThisE***REMOVED***pression" | "ThisTypeAnnotation" | "ThrowStatement" | "TopicReference" | "TryStatement" | "TupleE***REMOVED***pression" | "TupleTypeAnnotation" | "TypeAlias" | "TypeAnnotation" | "TypeCastE***REMOVED***pression" | "TypeParameter" | "TypeParameterDeclaration" | "TypeParameterInstantiation" | "TypeofTypeAnnotation" | "UnaryE***REMOVED***pression" | "UnionTypeAnnotation" | "UpdateE***REMOVED***pression" | "V8IntrinsicIdentifier" | "VariableDeclaration" | "VariableDeclarator" | "Variance" | "VoidTypeAnnotation" | "WhileStatement" | "WithStatement" | "YieldE***REMOVED***pression" | keyof Aliases)[];
declare const FORXSTATEMENT_TYPES: ("AnyTypeAnnotation" | "ArgumentPlaceholder" | "ArrayE***REMOVED***pression" | "ArrayPattern" | "ArrayTypeAnnotation" | "ArrowFunctionE***REMOVED***pression" | "AssignmentE***REMOVED***pression" | "AssignmentPattern" | "AwaitE***REMOVED***pression" | "BigIntLiteral" | "BinaryE***REMOVED***pression" | "BindE***REMOVED***pression" | "BlockStatement" | "BooleanLiteral" | "BooleanLiteralTypeAnnotation" | "BooleanTypeAnnotation" | "BreakStatement" | "CallE***REMOVED***pression" | "CatchClause" | "ClassAccessorProperty" | "ClassBody" | "ClassDeclaration" | "ClassE***REMOVED***pression" | "ClassImplements" | "ClassMethod" | "ClassPrivateMethod" | "ClassPrivateProperty" | "ClassProperty" | "ConditionalE***REMOVED***pression" | "ContinueStatement" | "DebuggerStatement" | "DecimalLiteral" | "DeclareClass" | "DeclareE***REMOVED***portAllDeclaration" | "DeclareE***REMOVED***portDeclaration" | "DeclareFunction" | "DeclareInterface" | "DeclareModule" | "DeclareModuleE***REMOVED***ports" | "DeclareOpaqueType" | "DeclareTypeAlias" | "DeclareVariable" | "DeclaredPredicate" | "Decorator" | "Directive" | "DirectiveLiteral" | "DoE***REMOVED***pression" | "DoWhileStatement" | "EmptyStatement" | "EmptyTypeAnnotation" | "EnumBooleanBody" | "EnumBooleanMember" | "EnumDeclaration" | "EnumDefaultedMember" | "EnumNumberBody" | "EnumNumberMember" | "EnumStringBody" | "EnumStringMember" | "EnumSymbolBody" | "E***REMOVED***istsTypeAnnotation" | "E***REMOVED***portAllDeclaration" | "E***REMOVED***portDefaultDeclaration" | "E***REMOVED***portDefaultSpecifier" | "E***REMOVED***portNamedDeclaration" | "E***REMOVED***portNamespaceSpecifier" | "E***REMOVED***portSpecifier" | "E***REMOVED***pressionStatement" | "File" | "ForInStatement" | "ForOfStatement" | "ForStatement" | "FunctionDeclaration" | "FunctionE***REMOVED***pression" | "FunctionTypeAnnotation" | "FunctionTypeParam" | "GenericTypeAnnotation" | "Identifier" | "IfStatement" | "Import" | "ImportAttribute" | "ImportDeclaration" | "ImportDefaultSpecifier" | "ImportE***REMOVED***pression" | "ImportNamespaceSpecifier" | "ImportSpecifier" | "Inde***REMOVED***edAccessType" | "InferredPredicate" | "InterfaceDeclaration" | "InterfaceE***REMOVED***tends" | "InterfaceTypeAnnotation" | "InterpreterDirective" | "IntersectionTypeAnnotation" | "JSXAttribute" | "JSXClosingElement" | "JSXClosingFragment" | "JSXElement" | "JSXEmptyE***REMOVED***pression" | "JSXE***REMOVED***pressionContainer" | "JSXFragment" | "JSXIdentifier" | "JSXMemberE***REMOVED***pression" | "JSXNamespacedName" | "JSXOpeningElement" | "JSXOpeningFragment" | "JSXSpreadAttribute" | "JSXSpreadChild" | "JSXTe***REMOVED***t" | "LabeledStatement" | "LogicalE***REMOVED***pression" | "MemberE***REMOVED***pression" | "MetaProperty" | "Mi***REMOVED***edTypeAnnotation" | "ModuleE***REMOVED***pression" | "NewE***REMOVED***pression" | "Noop" | "NullLiteral" | "NullLiteralTypeAnnotation" | "NullableTypeAnnotation" | "NumberLiteral" | "NumberLiteralTypeAnnotation" | "NumberTypeAnnotation" | "NumericLiteral" | "ObjectE***REMOVED***pression" | "ObjectMethod" | "ObjectPattern" | "ObjectProperty" | "ObjectTypeAnnotation" | "ObjectTypeCallProperty" | "ObjectTypeInde***REMOVED***er" | "ObjectTypeInternalSlot" | "ObjectTypeProperty" | "ObjectTypeSpreadProperty" | "OpaqueType" | "OptionalCallE***REMOVED***pression" | "OptionalInde***REMOVED***edAccessType" | "OptionalMemberE***REMOVED***pression" | "ParenthesizedE***REMOVED***pression" | "PipelineBareFunction" | "PipelinePrimaryTopicReference" | "PipelineTopicE***REMOVED***pression" | "Placeholder" | "PrivateName" | "Program" | "QualifiedTypeIdentifier" | "RecordE***REMOVED***pression" | "RegE***REMOVED***pLiteral" | "Rege***REMOVED***Literal" | "RestElement" | "RestProperty" | "ReturnStatement" | "SequenceE***REMOVED***pression" | "SpreadElement" | "SpreadProperty" | "StaticBlock" | "StringLiteral" | "StringLiteralTypeAnnotation" | "StringTypeAnnotation" | "Super" | "SwitchCase" | "SwitchStatement" | "SymbolTypeAnnotation" | "TSAnyKeyword" | "TSArrayType" | "TSAsE***REMOVED***pression" | "TSBigIntKeyword" | "TSBooleanKeyword" | "TSCallSignatureDeclaration" | "TSConditionalType" | "TSConstructSignatureDeclaration" | "TSConstructorType" | "TSDeclareFunction" | "TSDeclareMethod" | "TSEnumDeclaration" | "TSEnumMember" | "TSE***REMOVED***portAssignment" | "TSE***REMOVED***pressionWithTypeArguments" | "TSE***REMOVED***ternalModuleReference" | "TSFunctionType" | "TSImportEqualsDeclaration" | "TSImportType" | "TSInde***REMOVED***Signature" | "TSInde***REMOVED***edAccessType" | "TSInferType" | "TSInstantiationE***REMOVED***pression" | "TSInterfaceBody" | "TSInterfaceDeclaration" | "TSIntersectionType" | "TSIntrinsicKeyword" | "TSLiteralType" | "TSMappedType" | "TSMethodSignature" | "TSModuleBlock" | "TSModuleDeclaration" | "TSNamedTupleMember" | "TSNamespaceE***REMOVED***portDeclaration" | "TSNeverKeyword" | "TSNonNullE***REMOVED***pression" | "TSNullKeyword" | "TSNumberKeyword" | "TSObjectKeyword" | "TSOptionalType" | "TSParameterProperty" | "TSParenthesizedType" | "TSPropertySignature" | "TSQualifiedName" | "TSRestType" | "TSSatisfiesE***REMOVED***pression" | "TSStringKeyword" | "TSSymbolKeyword" | "TSThisType" | "TSTupleType" | "TSTypeAliasDeclaration" | "TSTypeAnnotation" | "TSTypeAssertion" | "TSTypeLiteral" | "TSTypeOperator" | "TSTypeParameter" | "TSTypeParameterDeclaration" | "TSTypeParameterInstantiation" | "TSTypePredicate" | "TSTypeQuery" | "TSTypeReference" | "TSUndefinedKeyword" | "TSUnionType" | "TSUnknownKeyword" | "TSVoidKeyword" | "TaggedTemplateE***REMOVED***pression" | "TemplateElement" | "TemplateLiteral" | "ThisE***REMOVED***pression" | "ThisTypeAnnotation" | "ThrowStatement" | "TopicReference" | "TryStatement" | "TupleE***REMOVED***pression" | "TupleTypeAnnotation" | "TypeAlias" | "TypeAnnotation" | "TypeCastE***REMOVED***pression" | "TypeParameter" | "TypeParameterDeclaration" | "TypeParameterInstantiation" | "TypeofTypeAnnotation" | "UnaryE***REMOVED***pression" | "UnionTypeAnnotation" | "UpdateE***REMOVED***pression" | "V8IntrinsicIdentifier" | "VariableDeclaration" | "VariableDeclarator" | "Variance" | "VoidTypeAnnotation" | "WhileStatement" | "WithStatement" | "YieldE***REMOVED***pression" | keyof Aliases)[];
declare const FUNCTION_TYPES: ("AnyTypeAnnotation" | "ArgumentPlaceholder" | "ArrayE***REMOVED***pression" | "ArrayPattern" | "ArrayTypeAnnotation" | "ArrowFunctionE***REMOVED***pression" | "AssignmentE***REMOVED***pression" | "AssignmentPattern" | "AwaitE***REMOVED***pression" | "BigIntLiteral" | "BinaryE***REMOVED***pression" | "BindE***REMOVED***pression" | "BlockStatement" | "BooleanLiteral" | "BooleanLiteralTypeAnnotation" | "BooleanTypeAnnotation" | "BreakStatement" | "CallE***REMOVED***pression" | "CatchClause" | "ClassAccessorProperty" | "ClassBody" | "ClassDeclaration" | "ClassE***REMOVED***pression" | "ClassImplements" | "ClassMethod" | "ClassPrivateMethod" | "ClassPrivateProperty" | "ClassProperty" | "ConditionalE***REMOVED***pression" | "ContinueStatement" | "DebuggerStatement" | "DecimalLiteral" | "DeclareClass" | "DeclareE***REMOVED***portAllDeclaration" | "DeclareE***REMOVED***portDeclaration" | "DeclareFunction" | "DeclareInterface" | "DeclareModule" | "DeclareModuleE***REMOVED***ports" | "DeclareOpaqueType" | "DeclareTypeAlias" | "DeclareVariable" | "DeclaredPredicate" | "Decorator" | "Directive" | "DirectiveLiteral" | "DoE***REMOVED***pression" | "DoWhileStatement" | "EmptyStatement" | "EmptyTypeAnnotation" | "EnumBooleanBody" | "EnumBooleanMember" | "EnumDeclaration" | "EnumDefaultedMember" | "EnumNumberBody" | "EnumNumberMember" | "EnumStringBody" | "EnumStringMember" | "EnumSymbolBody" | "E***REMOVED***istsTypeAnnotation" | "E***REMOVED***portAllDeclaration" | "E***REMOVED***portDefaultDeclaration" | "E***REMOVED***portDefaultSpecifier" | "E***REMOVED***portNamedDeclaration" | "E***REMOVED***portNamespaceSpecifier" | "E***REMOVED***portSpecifier" | "E***REMOVED***pressionStatement" | "File" | "ForInStatement" | "ForOfStatement" | "ForStatement" | "FunctionDeclaration" | "FunctionE***REMOVED***pression" | "FunctionTypeAnnotation" | "FunctionTypeParam" | "GenericTypeAnnotation" | "Identifier" | "IfStatement" | "Import" | "ImportAttribute" | "ImportDeclaration" | "ImportDefaultSpecifier" | "ImportE***REMOVED***pression" | "ImportNamespaceSpecifier" | "ImportSpecifier" | "Inde***REMOVED***edAccessType" | "InferredPredicate" | "InterfaceDeclaration" | "InterfaceE***REMOVED***tends" | "InterfaceTypeAnnotation" | "InterpreterDirective" | "IntersectionTypeAnnotation" | "JSXAttribute" | "JSXClosingElement" | "JSXClosingFragment" | "JSXElement" | "JSXEmptyE***REMOVED***pression" | "JSXE***REMOVED***pressionContainer" | "JSXFragment" | "JSXIdentifier" | "JSXMemberE***REMOVED***pression" | "JSXNamespacedName" | "JSXOpeningElement" | "JSXOpeningFragment" | "JSXSpreadAttribute" | "JSXSpreadChild" | "JSXTe***REMOVED***t" | "LabeledStatement" | "LogicalE***REMOVED***pression" | "MemberE***REMOVED***pression" | "MetaProperty" | "Mi***REMOVED***edTypeAnnotation" | "ModuleE***REMOVED***pression" | "NewE***REMOVED***pression" | "Noop" | "NullLiteral" | "NullLiteralTypeAnnotation" | "NullableTypeAnnotation" | "NumberLiteral" | "NumberLiteralTypeAnnotation" | "NumberTypeAnnotation" | "NumericLiteral" | "ObjectE***REMOVED***pression" | "ObjectMethod" | "ObjectPattern" | "ObjectProperty" | "ObjectTypeAnnotation" | "ObjectTypeCallProperty" | "ObjectTypeInde***REMOVED***er" | "ObjectTypeInternalSlot" | "ObjectTypeProperty" | "ObjectTypeSpreadProperty" | "OpaqueType" | "OptionalCallE***REMOVED***pression" | "OptionalInde***REMOVED***edAccessType" | "OptionalMemberE***REMOVED***pression" | "ParenthesizedE***REMOVED***pression" | "PipelineBareFunction" | "PipelinePrimaryTopicReference" | "PipelineTopicE***REMOVED***pression" | "Placeholder" | "PrivateName" | "Program" | "QualifiedTypeIdentifier" | "RecordE***REMOVED***pression" | "RegE***REMOVED***pLiteral" | "Rege***REMOVED***Literal" | "RestElement" | "RestProperty" | "ReturnStatement" | "SequenceE***REMOVED***pression" | "SpreadElement" | "SpreadProperty" | "StaticBlock" | "StringLiteral" | "StringLiteralTypeAnnotation" | "StringTypeAnnotation" | "Super" | "SwitchCase" | "SwitchStatement" | "SymbolTypeAnnotation" | "TSAnyKeyword" | "TSArrayType" | "TSAsE***REMOVED***pression" | "TSBigIntKeyword" | "TSBooleanKeyword" | "TSCallSignatureDeclaration" | "TSConditionalType" | "TSConstructSignatureDeclaration" | "TSConstructorType" | "TSDeclareFunction" | "TSDeclareMethod" | "TSEnumDeclaration" | "TSEnumMember" | "TSE***REMOVED***portAssignment" | "TSE***REMOVED***pressionWithTypeArguments" | "TSE***REMOVED***ternalModuleReference" | "TSFunctionType" | "TSImportEqualsDeclaration" | "TSImportType" | "TSInde***REMOVED***Signature" | "TSInde***REMOVED***edAccessType" | "TSInferType" | "TSInstantiationE***REMOVED***pression" | "TSInterfaceBody" | "TSInterfaceDeclaration" | "TSIntersectionType" | "TSIntrinsicKeyword" | "TSLiteralType" | "TSMappedType" | "TSMethodSignature" | "TSModuleBlock" | "TSModuleDeclaration" | "TSNamedTupleMember" | "TSNamespaceE***REMOVED***portDeclaration" | "TSNeverKeyword" | "TSNonNullE***REMOVED***pression" | "TSNullKeyword" | "TSNumberKeyword" | "TSObjectKeyword" | "TSOptionalType" | "TSParameterProperty" | "TSParenthesizedType" | "TSPropertySignature" | "TSQualifiedName" | "TSRestType" | "TSSatisfiesE***REMOVED***pression" | "TSStringKeyword" | "TSSymbolKeyword" | "TSThisType" | "TSTupleType" | "TSTypeAliasDeclaration" | "TSTypeAnnotation" | "TSTypeAssertion" | "TSTypeLiteral" | "TSTypeOperator" | "TSTypeParameter" | "TSTypeParameterDeclaration" | "TSTypeParameterInstantiation" | "TSTypePredicate" | "TSTypeQuery" | "TSTypeReference" | "TSUndefinedKeyword" | "TSUnionType" | "TSUnknownKeyword" | "TSVoidKeyword" | "TaggedTemplateE***REMOVED***pression" | "TemplateElement" | "TemplateLiteral" | "ThisE***REMOVED***pression" | "ThisTypeAnnotation" | "ThrowStatement" | "TopicReference" | "TryStatement" | "TupleE***REMOVED***pression" | "TupleTypeAnnotation" | "TypeAlias" | "TypeAnnotation" | "TypeCastE***REMOVED***pression" | "TypeParameter" | "TypeParameterDeclaration" | "TypeParameterInstantiation" | "TypeofTypeAnnotation" | "UnaryE***REMOVED***pression" | "UnionTypeAnnotation" | "UpdateE***REMOVED***pression" | "V8IntrinsicIdentifier" | "VariableDeclaration" | "VariableDeclarator" | "Variance" | "VoidTypeAnnotation" | "WhileStatement" | "WithStatement" | "YieldE***REMOVED***pression" | keyof Aliases)[];
declare const FUNCTIONPARENT_TYPES: ("AnyTypeAnnotation" | "ArgumentPlaceholder" | "ArrayE***REMOVED***pression" | "ArrayPattern" | "ArrayTypeAnnotation" | "ArrowFunctionE***REMOVED***pression" | "AssignmentE***REMOVED***pression" | "AssignmentPattern" | "AwaitE***REMOVED***pression" | "BigIntLiteral" | "BinaryE***REMOVED***pression" | "BindE***REMOVED***pression" | "BlockStatement" | "BooleanLiteral" | "BooleanLiteralTypeAnnotation" | "BooleanTypeAnnotation" | "BreakStatement" | "CallE***REMOVED***pression" | "CatchClause" | "ClassAccessorProperty" | "ClassBody" | "ClassDeclaration" | "ClassE***REMOVED***pression" | "ClassImplements" | "ClassMethod" | "ClassPrivateMethod" | "ClassPrivateProperty" | "ClassProperty" | "ConditionalE***REMOVED***pression" | "ContinueStatement" | "DebuggerStatement" | "DecimalLiteral" | "DeclareClass" | "DeclareE***REMOVED***portAllDeclaration" | "DeclareE***REMOVED***portDeclaration" | "DeclareFunction" | "DeclareInterface" | "DeclareModule" | "DeclareModuleE***REMOVED***ports" | "DeclareOpaqueType" | "DeclareTypeAlias" | "DeclareVariable" | "DeclaredPredicate" | "Decorator" | "Directive" | "DirectiveLiteral" | "DoE***REMOVED***pression" | "DoWhileStatement" | "EmptyStatement" | "EmptyTypeAnnotation" | "EnumBooleanBody" | "EnumBooleanMember" | "EnumDeclaration" | "EnumDefaultedMember" | "EnumNumberBody" | "EnumNumberMember" | "EnumStringBody" | "EnumStringMember" | "EnumSymbolBody" | "E***REMOVED***istsTypeAnnotation" | "E***REMOVED***portAllDeclaration" | "E***REMOVED***portDefaultDeclaration" | "E***REMOVED***portDefaultSpecifier" | "E***REMOVED***portNamedDeclaration" | "E***REMOVED***portNamespaceSpecifier" | "E***REMOVED***portSpecifier" | "E***REMOVED***pressionStatement" | "File" | "ForInStatement" | "ForOfStatement" | "ForStatement" | "FunctionDeclaration" | "FunctionE***REMOVED***pression" | "FunctionTypeAnnotation" | "FunctionTypeParam" | "GenericTypeAnnotation" | "Identifier" | "IfStatement" | "Import" | "ImportAttribute" | "ImportDeclaration" | "ImportDefaultSpecifier" | "ImportE***REMOVED***pression" | "ImportNamespaceSpecifier" | "ImportSpecifier" | "Inde***REMOVED***edAccessType" | "InferredPredicate" | "InterfaceDeclaration" | "InterfaceE***REMOVED***tends" | "InterfaceTypeAnnotation" | "InterpreterDirective" | "IntersectionTypeAnnotation" | "JSXAttribute" | "JSXClosingElement" | "JSXClosingFragment" | "JSXElement" | "JSXEmptyE***REMOVED***pression" | "JSXE***REMOVED***pressionContainer" | "JSXFragment" | "JSXIdentifier" | "JSXMemberE***REMOVED***pression" | "JSXNamespacedName" | "JSXOpeningElement" | "JSXOpeningFragment" | "JSXSpreadAttribute" | "JSXSpreadChild" | "JSXTe***REMOVED***t" | "LabeledStatement" | "LogicalE***REMOVED***pression" | "MemberE***REMOVED***pression" | "MetaProperty" | "Mi***REMOVED***edTypeAnnotation" | "ModuleE***REMOVED***pression" | "NewE***REMOVED***pression" | "Noop" | "NullLiteral" | "NullLiteralTypeAnnotation" | "NullableTypeAnnotation" | "NumberLiteral" | "NumberLiteralTypeAnnotation" | "NumberTypeAnnotation" | "NumericLiteral" | "ObjectE***REMOVED***pression" | "ObjectMethod" | "ObjectPattern" | "ObjectProperty" | "ObjectTypeAnnotation" | "ObjectTypeCallProperty" | "ObjectTypeInde***REMOVED***er" | "ObjectTypeInternalSlot" | "ObjectTypeProperty" | "ObjectTypeSpreadProperty" | "OpaqueType" | "OptionalCallE***REMOVED***pression" | "OptionalInde***REMOVED***edAccessType" | "OptionalMemberE***REMOVED***pression" | "ParenthesizedE***REMOVED***pression" | "PipelineBareFunction" | "PipelinePrimaryTopicReference" | "PipelineTopicE***REMOVED***pression" | "Placeholder" | "PrivateName" | "Program" | "QualifiedTypeIdentifier" | "RecordE***REMOVED***pression" | "RegE***REMOVED***pLiteral" | "Rege***REMOVED***Literal" | "RestElement" | "RestProperty" | "ReturnStatement" | "SequenceE***REMOVED***pression" | "SpreadElement" | "SpreadProperty" | "StaticBlock" | "StringLiteral" | "StringLiteralTypeAnnotation" | "StringTypeAnnotation" | "Super" | "SwitchCase" | "SwitchStatement" | "SymbolTypeAnnotation" | "TSAnyKeyword" | "TSArrayType" | "TSAsE***REMOVED***pression" | "TSBigIntKeyword" | "TSBooleanKeyword" | "TSCallSignatureDeclaration" | "TSConditionalType" | "TSConstructSignatureDeclaration" | "TSConstructorType" | "TSDeclareFunction" | "TSDeclareMethod" | "TSEnumDeclaration" | "TSEnumMember" | "TSE***REMOVED***portAssignment" | "TSE***REMOVED***pressionWithTypeArguments" | "TSE***REMOVED***ternalModuleReference" | "TSFunctionType" | "TSImportEqualsDeclaration" | "TSImportType" | "TSInde***REMOVED***Signature" | "TSInde***REMOVED***edAccessType" | "TSInferType" | "TSInstantiationE***REMOVED***pression" | "TSInterfaceBody" | "TSInterfaceDeclaration" | "TSIntersectionType" | "TSIntrinsicKeyword" | "TSLiteralType" | "TSMappedType" | "TSMethodSignature" | "TSModuleBlock" | "TSModuleDeclaration" | "TSNamedTupleMember" | "TSNamespaceE***REMOVED***portDeclaration" | "TSNeverKeyword" | "TSNonNullE***REMOVED***pression" | "TSNullKeyword" | "TSNumberKeyword" | "TSObjectKeyword" | "TSOptionalType" | "TSParameterProperty" | "TSParenthesizedType" | "TSPropertySignature" | "TSQualifiedName" | "TSRestType" | "TSSatisfiesE***REMOVED***pression" | "TSStringKeyword" | "TSSymbolKeyword" | "TSThisType" | "TSTupleType" | "TSTypeAliasDeclaration" | "TSTypeAnnotation" | "TSTypeAssertion" | "TSTypeLiteral" | "TSTypeOperator" | "TSTypeParameter" | "TSTypeParameterDeclaration" | "TSTypeParameterInstantiation" | "TSTypePredicate" | "TSTypeQuery" | "TSTypeReference" | "TSUndefinedKeyword" | "TSUnionType" | "TSUnknownKeyword" | "TSVoidKeyword" | "TaggedTemplateE***REMOVED***pression" | "TemplateElement" | "TemplateLiteral" | "ThisE***REMOVED***pression" | "ThisTypeAnnotation" | "ThrowStatement" | "TopicReference" | "TryStatement" | "TupleE***REMOVED***pression" | "TupleTypeAnnotation" | "TypeAlias" | "TypeAnnotation" | "TypeCastE***REMOVED***pression" | "TypeParameter" | "TypeParameterDeclaration" | "TypeParameterInstantiation" | "TypeofTypeAnnotation" | "UnaryE***REMOVED***pression" | "UnionTypeAnnotation" | "UpdateE***REMOVED***pression" | "V8IntrinsicIdentifier" | "VariableDeclaration" | "VariableDeclarator" | "Variance" | "VoidTypeAnnotation" | "WhileStatement" | "WithStatement" | "YieldE***REMOVED***pression" | keyof Aliases)[];
declare const PUREISH_TYPES: ("AnyTypeAnnotation" | "ArgumentPlaceholder" | "ArrayE***REMOVED***pression" | "ArrayPattern" | "ArrayTypeAnnotation" | "ArrowFunctionE***REMOVED***pression" | "AssignmentE***REMOVED***pression" | "AssignmentPattern" | "AwaitE***REMOVED***pression" | "BigIntLiteral" | "BinaryE***REMOVED***pression" | "BindE***REMOVED***pression" | "BlockStatement" | "BooleanLiteral" | "BooleanLiteralTypeAnnotation" | "BooleanTypeAnnotation" | "BreakStatement" | "CallE***REMOVED***pression" | "CatchClause" | "ClassAccessorProperty" | "ClassBody" | "ClassDeclaration" | "ClassE***REMOVED***pression" | "ClassImplements" | "ClassMethod" | "ClassPrivateMethod" | "ClassPrivateProperty" | "ClassProperty" | "ConditionalE***REMOVED***pression" | "ContinueStatement" | "DebuggerStatement" | "DecimalLiteral" | "DeclareClass" | "DeclareE***REMOVED***portAllDeclaration" | "DeclareE***REMOVED***portDeclaration" | "DeclareFunction" | "DeclareInterface" | "DeclareModule" | "DeclareModuleE***REMOVED***ports" | "DeclareOpaqueType" | "DeclareTypeAlias" | "DeclareVariable" | "DeclaredPredicate" | "Decorator" | "Directive" | "DirectiveLiteral" | "DoE***REMOVED***pression" | "DoWhileStatement" | "EmptyStatement" | "EmptyTypeAnnotation" | "EnumBooleanBody" | "EnumBooleanMember" | "EnumDeclaration" | "EnumDefaultedMember" | "EnumNumberBody" | "EnumNumberMember" | "EnumStringBody" | "EnumStringMember" | "EnumSymbolBody" | "E***REMOVED***istsTypeAnnotation" | "E***REMOVED***portAllDeclaration" | "E***REMOVED***portDefaultDeclaration" | "E***REMOVED***portDefaultSpecifier" | "E***REMOVED***portNamedDeclaration" | "E***REMOVED***portNamespaceSpecifier" | "E***REMOVED***portSpecifier" | "E***REMOVED***pressionStatement" | "File" | "ForInStatement" | "ForOfStatement" | "ForStatement" | "FunctionDeclaration" | "FunctionE***REMOVED***pression" | "FunctionTypeAnnotation" | "FunctionTypeParam" | "GenericTypeAnnotation" | "Identifier" | "IfStatement" | "Import" | "ImportAttribute" | "ImportDeclaration" | "ImportDefaultSpecifier" | "ImportE***REMOVED***pression" | "ImportNamespaceSpecifier" | "ImportSpecifier" | "Inde***REMOVED***edAccessType" | "InferredPredicate" | "InterfaceDeclaration" | "InterfaceE***REMOVED***tends" | "InterfaceTypeAnnotation" | "InterpreterDirective" | "IntersectionTypeAnnotation" | "JSXAttribute" | "JSXClosingElement" | "JSXClosingFragment" | "JSXElement" | "JSXEmptyE***REMOVED***pression" | "JSXE***REMOVED***pressionContainer" | "JSXFragment" | "JSXIdentifier" | "JSXMemberE***REMOVED***pression" | "JSXNamespacedName" | "JSXOpeningElement" | "JSXOpeningFragment" | "JSXSpreadAttribute" | "JSXSpreadChild" | "JSXTe***REMOVED***t" | "LabeledStatement" | "LogicalE***REMOVED***pression" | "MemberE***REMOVED***pression" | "MetaProperty" | "Mi***REMOVED***edTypeAnnotation" | "ModuleE***REMOVED***pression" | "NewE***REMOVED***pression" | "Noop" | "NullLiteral" | "NullLiteralTypeAnnotation" | "NullableTypeAnnotation" | "NumberLiteral" | "NumberLiteralTypeAnnotation" | "NumberTypeAnnotation" | "NumericLiteral" | "ObjectE***REMOVED***pression" | "ObjectMethod" | "ObjectPattern" | "ObjectProperty" | "ObjectTypeAnnotation" | "ObjectTypeCallProperty" | "ObjectTypeInde***REMOVED***er" | "ObjectTypeInternalSlot" | "ObjectTypeProperty" | "ObjectTypeSpreadProperty" | "OpaqueType" | "OptionalCallE***REMOVED***pression" | "OptionalInde***REMOVED***edAccessType" | "OptionalMemberE***REMOVED***pression" | "ParenthesizedE***REMOVED***pression" | "PipelineBareFunction" | "PipelinePrimaryTopicReference" | "PipelineTopicE***REMOVED***pression" | "Placeholder" | "PrivateName" | "Program" | "QualifiedTypeIdentifier" | "RecordE***REMOVED***pression" | "RegE***REMOVED***pLiteral" | "Rege***REMOVED***Literal" | "RestElement" | "RestProperty" | "ReturnStatement" | "SequenceE***REMOVED***pression" | "SpreadElement" | "SpreadProperty" | "StaticBlock" | "StringLiteral" | "StringLiteralTypeAnnotation" | "StringTypeAnnotation" | "Super" | "SwitchCase" | "SwitchStatement" | "SymbolTypeAnnotation" | "TSAnyKeyword" | "TSArrayType" | "TSAsE***REMOVED***pression" | "TSBigIntKeyword" | "TSBooleanKeyword" | "TSCallSignatureDeclaration" | "TSConditionalType" | "TSConstructSignatureDeclaration" | "TSConstructorType" | "TSDeclareFunction" | "TSDeclareMethod" | "TSEnumDeclaration" | "TSEnumMember" | "TSE***REMOVED***portAssignment" | "TSE***REMOVED***pressionWithTypeArguments" | "TSE***REMOVED***ternalModuleReference" | "TSFunctionType" | "TSImportEqualsDeclaration" | "TSImportType" | "TSInde***REMOVED***Signature" | "TSInde***REMOVED***edAccessType" | "TSInferType" | "TSInstantiationE***REMOVED***pression" | "TSInterfaceBody" | "TSInterfaceDeclaration" | "TSIntersectionType" | "TSIntrinsicKeyword" | "TSLiteralType" | "TSMappedType" | "TSMethodSignature" | "TSModuleBlock" | "TSModuleDeclaration" | "TSNamedTupleMember" | "TSNamespaceE***REMOVED***portDeclaration" | "TSNeverKeyword" | "TSNonNullE***REMOVED***pression" | "TSNullKeyword" | "TSNumberKeyword" | "TSObjectKeyword" | "TSOptionalType" | "TSParameterProperty" | "TSParenthesizedType" | "TSPropertySignature" | "TSQualifiedName" | "TSRestType" | "TSSatisfiesE***REMOVED***pression" | "TSStringKeyword" | "TSSymbolKeyword" | "TSThisType" | "TSTupleType" | "TSTypeAliasDeclaration" | "TSTypeAnnotation" | "TSTypeAssertion" | "TSTypeLiteral" | "TSTypeOperator" | "TSTypeParameter" | "TSTypeParameterDeclaration" | "TSTypeParameterInstantiation" | "TSTypePredicate" | "TSTypeQuery" | "TSTypeReference" | "TSUndefinedKeyword" | "TSUnionType" | "TSUnknownKeyword" | "TSVoidKeyword" | "TaggedTemplateE***REMOVED***pression" | "TemplateElement" | "TemplateLiteral" | "ThisE***REMOVED***pression" | "ThisTypeAnnotation" | "ThrowStatement" | "TopicReference" | "TryStatement" | "TupleE***REMOVED***pression" | "TupleTypeAnnotation" | "TypeAlias" | "TypeAnnotation" | "TypeCastE***REMOVED***pression" | "TypeParameter" | "TypeParameterDeclaration" | "TypeParameterInstantiation" | "TypeofTypeAnnotation" | "UnaryE***REMOVED***pression" | "UnionTypeAnnotation" | "UpdateE***REMOVED***pression" | "V8IntrinsicIdentifier" | "VariableDeclaration" | "VariableDeclarator" | "Variance" | "VoidTypeAnnotation" | "WhileStatement" | "WithStatement" | "YieldE***REMOVED***pression" | keyof Aliases)[];
declare const DECLARATION_TYPES: ("AnyTypeAnnotation" | "ArgumentPlaceholder" | "ArrayE***REMOVED***pression" | "ArrayPattern" | "ArrayTypeAnnotation" | "ArrowFunctionE***REMOVED***pression" | "AssignmentE***REMOVED***pression" | "AssignmentPattern" | "AwaitE***REMOVED***pression" | "BigIntLiteral" | "BinaryE***REMOVED***pression" | "BindE***REMOVED***pression" | "BlockStatement" | "BooleanLiteral" | "BooleanLiteralTypeAnnotation" | "BooleanTypeAnnotation" | "BreakStatement" | "CallE***REMOVED***pression" | "CatchClause" | "ClassAccessorProperty" | "ClassBody" | "ClassDeclaration" | "ClassE***REMOVED***pression" | "ClassImplements" | "ClassMethod" | "ClassPrivateMethod" | "ClassPrivateProperty" | "ClassProperty" | "ConditionalE***REMOVED***pression" | "ContinueStatement" | "DebuggerStatement" | "DecimalLiteral" | "DeclareClass" | "DeclareE***REMOVED***portAllDeclaration" | "DeclareE***REMOVED***portDeclaration" | "DeclareFunction" | "DeclareInterface" | "DeclareModule" | "DeclareModuleE***REMOVED***ports" | "DeclareOpaqueType" | "DeclareTypeAlias" | "DeclareVariable" | "DeclaredPredicate" | "Decorator" | "Directive" | "DirectiveLiteral" | "DoE***REMOVED***pression" | "DoWhileStatement" | "EmptyStatement" | "EmptyTypeAnnotation" | "EnumBooleanBody" | "EnumBooleanMember" | "EnumDeclaration" | "EnumDefaultedMember" | "EnumNumberBody" | "EnumNumberMember" | "EnumStringBody" | "EnumStringMember" | "EnumSymbolBody" | "E***REMOVED***istsTypeAnnotation" | "E***REMOVED***portAllDeclaration" | "E***REMOVED***portDefaultDeclaration" | "E***REMOVED***portDefaultSpecifier" | "E***REMOVED***portNamedDeclaration" | "E***REMOVED***portNamespaceSpecifier" | "E***REMOVED***portSpecifier" | "E***REMOVED***pressionStatement" | "File" | "ForInStatement" | "ForOfStatement" | "ForStatement" | "FunctionDeclaration" | "FunctionE***REMOVED***pression" | "FunctionTypeAnnotation" | "FunctionTypeParam" | "GenericTypeAnnotation" | "Identifier" | "IfStatement" | "Import" | "ImportAttribute" | "ImportDeclaration" | "ImportDefaultSpecifier" | "ImportE***REMOVED***pression" | "ImportNamespaceSpecifier" | "ImportSpecifier" | "Inde***REMOVED***edAccessType" | "InferredPredicate" | "InterfaceDeclaration" | "InterfaceE***REMOVED***tends" | "InterfaceTypeAnnotation" | "InterpreterDirective" | "IntersectionTypeAnnotation" | "JSXAttribute" | "JSXClosingElement" | "JSXClosingFragment" | "JSXElement" | "JSXEmptyE***REMOVED***pression" | "JSXE***REMOVED***pressionContainer" | "JSXFragment" | "JSXIdentifier" | "JSXMemberE***REMOVED***pression" | "JSXNamespacedName" | "JSXOpeningElement" | "JSXOpeningFragment" | "JSXSpreadAttribute" | "JSXSpreadChild" | "JSXTe***REMOVED***t" | "LabeledStatement" | "LogicalE***REMOVED***pression" | "MemberE***REMOVED***pression" | "MetaProperty" | "Mi***REMOVED***edTypeAnnotation" | "ModuleE***REMOVED***pression" | "NewE***REMOVED***pression" | "Noop" | "NullLiteral" | "NullLiteralTypeAnnotation" | "NullableTypeAnnotation" | "NumberLiteral" | "NumberLiteralTypeAnnotation" | "NumberTypeAnnotation" | "NumericLiteral" | "ObjectE***REMOVED***pression" | "ObjectMethod" | "ObjectPattern" | "ObjectProperty" | "ObjectTypeAnnotation" | "ObjectTypeCallProperty" | "ObjectTypeInde***REMOVED***er" | "ObjectTypeInternalSlot" | "ObjectTypeProperty" | "ObjectTypeSpreadProperty" | "OpaqueType" | "OptionalCallE***REMOVED***pression" | "OptionalInde***REMOVED***edAccessType" | "OptionalMemberE***REMOVED***pression" | "ParenthesizedE***REMOVED***pression" | "PipelineBareFunction" | "PipelinePrimaryTopicReference" | "PipelineTopicE***REMOVED***pression" | "Placeholder" | "PrivateName" | "Program" | "QualifiedTypeIdentifier" | "RecordE***REMOVED***pression" | "RegE***REMOVED***pLiteral" | "Rege***REMOVED***Literal" | "RestElement" | "RestProperty" | "ReturnStatement" | "SequenceE***REMOVED***pression" | "SpreadElement" | "SpreadProperty" | "StaticBlock" | "StringLiteral" | "StringLiteralTypeAnnotation" | "StringTypeAnnotation" | "Super" | "SwitchCase" | "SwitchStatement" | "SymbolTypeAnnotation" | "TSAnyKeyword" | "TSArrayType" | "TSAsE***REMOVED***pression" | "TSBigIntKeyword" | "TSBooleanKeyword" | "TSCallSignatureDeclaration" | "TSConditionalType" | "TSConstructSignatureDeclaration" | "TSConstructorType" | "TSDeclareFunction" | "TSDeclareMethod" | "TSEnumDeclaration" | "TSEnumMember" | "TSE***REMOVED***portAssignment" | "TSE***REMOVED***pressionWithTypeArguments" | "TSE***REMOVED***ternalModuleReference" | "TSFunctionType" | "TSImportEqualsDeclaration" | "TSImportType" | "TSInde***REMOVED***Signature" | "TSInde***REMOVED***edAccessType" | "TSInferType" | "TSInstantiationE***REMOVED***pression" | "TSInterfaceBody" | "TSInterfaceDeclaration" | "TSIntersectionType" | "TSIntrinsicKeyword" | "TSLiteralType" | "TSMappedType" | "TSMethodSignature" | "TSModuleBlock" | "TSModuleDeclaration" | "TSNamedTupleMember" | "TSNamespaceE***REMOVED***portDeclaration" | "TSNeverKeyword" | "TSNonNullE***REMOVED***pression" | "TSNullKeyword" | "TSNumberKeyword" | "TSObjectKeyword" | "TSOptionalType" | "TSParameterProperty" | "TSParenthesizedType" | "TSPropertySignature" | "TSQualifiedName" | "TSRestType" | "TSSatisfiesE***REMOVED***pression" | "TSStringKeyword" | "TSSymbolKeyword" | "TSThisType" | "TSTupleType" | "TSTypeAliasDeclaration" | "TSTypeAnnotation" | "TSTypeAssertion" | "TSTypeLiteral" | "TSTypeOperator" | "TSTypeParameter" | "TSTypeParameterDeclaration" | "TSTypeParameterInstantiation" | "TSTypePredicate" | "TSTypeQuery" | "TSTypeReference" | "TSUndefinedKeyword" | "TSUnionType" | "TSUnknownKeyword" | "TSVoidKeyword" | "TaggedTemplateE***REMOVED***pression" | "TemplateElement" | "TemplateLiteral" | "ThisE***REMOVED***pression" | "ThisTypeAnnotation" | "ThrowStatement" | "TopicReference" | "TryStatement" | "TupleE***REMOVED***pression" | "TupleTypeAnnotation" | "TypeAlias" | "TypeAnnotation" | "TypeCastE***REMOVED***pression" | "TypeParameter" | "TypeParameterDeclaration" | "TypeParameterInstantiation" | "TypeofTypeAnnotation" | "UnaryE***REMOVED***pression" | "UnionTypeAnnotation" | "UpdateE***REMOVED***pression" | "V8IntrinsicIdentifier" | "VariableDeclaration" | "VariableDeclarator" | "Variance" | "VoidTypeAnnotation" | "WhileStatement" | "WithStatement" | "YieldE***REMOVED***pression" | keyof Aliases)[];
declare const PATTERNLIKE_TYPES: ("AnyTypeAnnotation" | "ArgumentPlaceholder" | "ArrayE***REMOVED***pression" | "ArrayPattern" | "ArrayTypeAnnotation" | "ArrowFunctionE***REMOVED***pression" | "AssignmentE***REMOVED***pression" | "AssignmentPattern" | "AwaitE***REMOVED***pression" | "BigIntLiteral" | "BinaryE***REMOVED***pression" | "BindE***REMOVED***pression" | "BlockStatement" | "BooleanLiteral" | "BooleanLiteralTypeAnnotation" | "BooleanTypeAnnotation" | "BreakStatement" | "CallE***REMOVED***pression" | "CatchClause" | "ClassAccessorProperty" | "ClassBody" | "ClassDeclaration" | "ClassE***REMOVED***pression" | "ClassImplements" | "ClassMethod" | "ClassPrivateMethod" | "ClassPrivateProperty" | "ClassProperty" | "ConditionalE***REMOVED***pression" | "ContinueStatement" | "DebuggerStatement" | "DecimalLiteral" | "DeclareClass" | "DeclareE***REMOVED***portAllDeclaration" | "DeclareE***REMOVED***portDeclaration" | "DeclareFunction" | "DeclareInterface" | "DeclareModule" | "DeclareModuleE***REMOVED***ports" | "DeclareOpaqueType" | "DeclareTypeAlias" | "DeclareVariable" | "DeclaredPredicate" | "Decorator" | "Directive" | "DirectiveLiteral" | "DoE***REMOVED***pression" | "DoWhileStatement" | "EmptyStatement" | "EmptyTypeAnnotation" | "EnumBooleanBody" | "EnumBooleanMember" | "EnumDeclaration" | "EnumDefaultedMember" | "EnumNumberBody" | "EnumNumberMember" | "EnumStringBody" | "EnumStringMember" | "EnumSymbolBody" | "E***REMOVED***istsTypeAnnotation" | "E***REMOVED***portAllDeclaration" | "E***REMOVED***portDefaultDeclaration" | "E***REMOVED***portDefaultSpecifier" | "E***REMOVED***portNamedDeclaration" | "E***REMOVED***portNamespaceSpecifier" | "E***REMOVED***portSpecifier" | "E***REMOVED***pressionStatement" | "File" | "ForInStatement" | "ForOfStatement" | "ForStatement" | "FunctionDeclaration" | "FunctionE***REMOVED***pression" | "FunctionTypeAnnotation" | "FunctionTypeParam" | "GenericTypeAnnotation" | "Identifier" | "IfStatement" | "Import" | "ImportAttribute" | "ImportDeclaration" | "ImportDefaultSpecifier" | "ImportE***REMOVED***pression" | "ImportNamespaceSpecifier" | "ImportSpecifier" | "Inde***REMOVED***edAccessType" | "InferredPredicate" | "InterfaceDeclaration" | "InterfaceE***REMOVED***tends" | "InterfaceTypeAnnotation" | "InterpreterDirective" | "IntersectionTypeAnnotation" | "JSXAttribute" | "JSXClosingElement" | "JSXClosingFragment" | "JSXElement" | "JSXEmptyE***REMOVED***pression" | "JSXE***REMOVED***pressionContainer" | "JSXFragment" | "JSXIdentifier" | "JSXMemberE***REMOVED***pression" | "JSXNamespacedName" | "JSXOpeningElement" | "JSXOpeningFragment" | "JSXSpreadAttribute" | "JSXSpreadChild" | "JSXTe***REMOVED***t" | "LabeledStatement" | "LogicalE***REMOVED***pression" | "MemberE***REMOVED***pression" | "MetaProperty" | "Mi***REMOVED***edTypeAnnotation" | "ModuleE***REMOVED***pression" | "NewE***REMOVED***pression" | "Noop" | "NullLiteral" | "NullLiteralTypeAnnotation" | "NullableTypeAnnotation" | "NumberLiteral" | "NumberLiteralTypeAnnotation" | "NumberTypeAnnotation" | "NumericLiteral" | "ObjectE***REMOVED***pression" | "ObjectMethod" | "ObjectPattern" | "ObjectProperty" | "ObjectTypeAnnotation" | "ObjectTypeCallProperty" | "ObjectTypeInde***REMOVED***er" | "ObjectTypeInternalSlot" | "ObjectTypeProperty" | "ObjectTypeSpreadProperty" | "OpaqueType" | "OptionalCallE***REMOVED***pression" | "OptionalInde***REMOVED***edAccessType" | "OptionalMemberE***REMOVED***pression" | "ParenthesizedE***REMOVED***pression" | "PipelineBareFunction" | "PipelinePrimaryTopicReference" | "PipelineTopicE***REMOVED***pression" | "Placeholder" | "PrivateName" | "Program" | "QualifiedTypeIdentifier" | "RecordE***REMOVED***pression" | "RegE***REMOVED***pLiteral" | "Rege***REMOVED***Literal" | "RestElement" | "RestProperty" | "ReturnStatement" | "SequenceE***REMOVED***pression" | "SpreadElement" | "SpreadProperty" | "StaticBlock" | "StringLiteral" | "StringLiteralTypeAnnotation" | "StringTypeAnnotation" | "Super" | "SwitchCase" | "SwitchStatement" | "SymbolTypeAnnotation" | "TSAnyKeyword" | "TSArrayType" | "TSAsE***REMOVED***pression" | "TSBigIntKeyword" | "TSBooleanKeyword" | "TSCallSignatureDeclaration" | "TSConditionalType" | "TSConstructSignatureDeclaration" | "TSConstructorType" | "TSDeclareFunction" | "TSDeclareMethod" | "TSEnumDeclaration" | "TSEnumMember" | "TSE***REMOVED***portAssignment" | "TSE***REMOVED***pressionWithTypeArguments" | "TSE***REMOVED***ternalModuleReference" | "TSFunctionType" | "TSImportEqualsDeclaration" | "TSImportType" | "TSInde***REMOVED***Signature" | "TSInde***REMOVED***edAccessType" | "TSInferType" | "TSInstantiationE***REMOVED***pression" | "TSInterfaceBody" | "TSInterfaceDeclaration" | "TSIntersectionType" | "TSIntrinsicKeyword" | "TSLiteralType" | "TSMappedType" | "TSMethodSignature" | "TSModuleBlock" | "TSModuleDeclaration" | "TSNamedTupleMember" | "TSNamespaceE***REMOVED***portDeclaration" | "TSNeverKeyword" | "TSNonNullE***REMOVED***pression" | "TSNullKeyword" | "TSNumberKeyword" | "TSObjectKeyword" | "TSOptionalType" | "TSParameterProperty" | "TSParenthesizedType" | "TSPropertySignature" | "TSQualifiedName" | "TSRestType" | "TSSatisfiesE***REMOVED***pression" | "TSStringKeyword" | "TSSymbolKeyword" | "TSThisType" | "TSTupleType" | "TSTypeAliasDeclaration" | "TSTypeAnnotation" | "TSTypeAssertion" | "TSTypeLiteral" | "TSTypeOperator" | "TSTypeParameter" | "TSTypeParameterDeclaration" | "TSTypeParameterInstantiation" | "TSTypePredicate" | "TSTypeQuery" | "TSTypeReference" | "TSUndefinedKeyword" | "TSUnionType" | "TSUnknownKeyword" | "TSVoidKeyword" | "TaggedTemplateE***REMOVED***pression" | "TemplateElement" | "TemplateLiteral" | "ThisE***REMOVED***pression" | "ThisTypeAnnotation" | "ThrowStatement" | "TopicReference" | "TryStatement" | "TupleE***REMOVED***pression" | "TupleTypeAnnotation" | "TypeAlias" | "TypeAnnotation" | "TypeCastE***REMOVED***pression" | "TypeParameter" | "TypeParameterDeclaration" | "TypeParameterInstantiation" | "TypeofTypeAnnotation" | "UnaryE***REMOVED***pression" | "UnionTypeAnnotation" | "UpdateE***REMOVED***pression" | "V8IntrinsicIdentifier" | "VariableDeclaration" | "VariableDeclarator" | "Variance" | "VoidTypeAnnotation" | "WhileStatement" | "WithStatement" | "YieldE***REMOVED***pression" | keyof Aliases)[];
declare const LVAL_TYPES: ("AnyTypeAnnotation" | "ArgumentPlaceholder" | "ArrayE***REMOVED***pression" | "ArrayPattern" | "ArrayTypeAnnotation" | "ArrowFunctionE***REMOVED***pression" | "AssignmentE***REMOVED***pression" | "AssignmentPattern" | "AwaitE***REMOVED***pression" | "BigIntLiteral" | "BinaryE***REMOVED***pression" | "BindE***REMOVED***pression" | "BlockStatement" | "BooleanLiteral" | "BooleanLiteralTypeAnnotation" | "BooleanTypeAnnotation" | "BreakStatement" | "CallE***REMOVED***pression" | "CatchClause" | "ClassAccessorProperty" | "ClassBody" | "ClassDeclaration" | "ClassE***REMOVED***pression" | "ClassImplements" | "ClassMethod" | "ClassPrivateMethod" | "ClassPrivateProperty" | "ClassProperty" | "ConditionalE***REMOVED***pression" | "ContinueStatement" | "DebuggerStatement" | "DecimalLiteral" | "DeclareClass" | "DeclareE***REMOVED***portAllDeclaration" | "DeclareE***REMOVED***portDeclaration" | "DeclareFunction" | "DeclareInterface" | "DeclareModule" | "DeclareModuleE***REMOVED***ports" | "DeclareOpaqueType" | "DeclareTypeAlias" | "DeclareVariable" | "DeclaredPredicate" | "Decorator" | "Directive" | "DirectiveLiteral" | "DoE***REMOVED***pression" | "DoWhileStatement" | "EmptyStatement" | "EmptyTypeAnnotation" | "EnumBooleanBody" | "EnumBooleanMember" | "EnumDeclaration" | "EnumDefaultedMember" | "EnumNumberBody" | "EnumNumberMember" | "EnumStringBody" | "EnumStringMember" | "EnumSymbolBody" | "E***REMOVED***istsTypeAnnotation" | "E***REMOVED***portAllDeclaration" | "E***REMOVED***portDefaultDeclaration" | "E***REMOVED***portDefaultSpecifier" | "E***REMOVED***portNamedDeclaration" | "E***REMOVED***portNamespaceSpecifier" | "E***REMOVED***portSpecifier" | "E***REMOVED***pressionStatement" | "File" | "ForInStatement" | "ForOfStatement" | "ForStatement" | "FunctionDeclaration" | "FunctionE***REMOVED***pression" | "FunctionTypeAnnotation" | "FunctionTypeParam" | "GenericTypeAnnotation" | "Identifier" | "IfStatement" | "Import" | "ImportAttribute" | "ImportDeclaration" | "ImportDefaultSpecifier" | "ImportE***REMOVED***pression" | "ImportNamespaceSpecifier" | "ImportSpecifier" | "Inde***REMOVED***edAccessType" | "InferredPredicate" | "InterfaceDeclaration" | "InterfaceE***REMOVED***tends" | "InterfaceTypeAnnotation" | "InterpreterDirective" | "IntersectionTypeAnnotation" | "JSXAttribute" | "JSXClosingElement" | "JSXClosingFragment" | "JSXElement" | "JSXEmptyE***REMOVED***pression" | "JSXE***REMOVED***pressionContainer" | "JSXFragment" | "JSXIdentifier" | "JSXMemberE***REMOVED***pression" | "JSXNamespacedName" | "JSXOpeningElement" | "JSXOpeningFragment" | "JSXSpreadAttribute" | "JSXSpreadChild" | "JSXTe***REMOVED***t" | "LabeledStatement" | "LogicalE***REMOVED***pression" | "MemberE***REMOVED***pression" | "MetaProperty" | "Mi***REMOVED***edTypeAnnotation" | "ModuleE***REMOVED***pression" | "NewE***REMOVED***pression" | "Noop" | "NullLiteral" | "NullLiteralTypeAnnotation" | "NullableTypeAnnotation" | "NumberLiteral" | "NumberLiteralTypeAnnotation" | "NumberTypeAnnotation" | "NumericLiteral" | "ObjectE***REMOVED***pression" | "ObjectMethod" | "ObjectPattern" | "ObjectProperty" | "ObjectTypeAnnotation" | "ObjectTypeCallProperty" | "ObjectTypeInde***REMOVED***er" | "ObjectTypeInternalSlot" | "ObjectTypeProperty" | "ObjectTypeSpreadProperty" | "OpaqueType" | "OptionalCallE***REMOVED***pression" | "OptionalInde***REMOVED***edAccessType" | "OptionalMemberE***REMOVED***pression" | "ParenthesizedE***REMOVED***pression" | "PipelineBareFunction" | "PipelinePrimaryTopicReference" | "PipelineTopicE***REMOVED***pression" | "Placeholder" | "PrivateName" | "Program" | "QualifiedTypeIdentifier" | "RecordE***REMOVED***pression" | "RegE***REMOVED***pLiteral" | "Rege***REMOVED***Literal" | "RestElement" | "RestProperty" | "ReturnStatement" | "SequenceE***REMOVED***pression" | "SpreadElement" | "SpreadProperty" | "StaticBlock" | "StringLiteral" | "StringLiteralTypeAnnotation" | "StringTypeAnnotation" | "Super" | "SwitchCase" | "SwitchStatement" | "SymbolTypeAnnotation" | "TSAnyKeyword" | "TSArrayType" | "TSAsE***REMOVED***pression" | "TSBigIntKeyword" | "TSBooleanKeyword" | "TSCallSignatureDeclaration" | "TSConditionalType" | "TSConstructSignatureDeclaration" | "TSConstructorType" | "TSDeclareFunction" | "TSDeclareMethod" | "TSEnumDeclaration" | "TSEnumMember" | "TSE***REMOVED***portAssignment" | "TSE***REMOVED***pressionWithTypeArguments" | "TSE***REMOVED***ternalModuleReference" | "TSFunctionType" | "TSImportEqualsDeclaration" | "TSImportType" | "TSInde***REMOVED***Signature" | "TSInde***REMOVED***edAccessType" | "TSInferType" | "TSInstantiationE***REMOVED***pression" | "TSInterfaceBody" | "TSInterfaceDeclaration" | "TSIntersectionType" | "TSIntrinsicKeyword" | "TSLiteralType" | "TSMappedType" | "TSMethodSignature" | "TSModuleBlock" | "TSModuleDeclaration" | "TSNamedTupleMember" | "TSNamespaceE***REMOVED***portDeclaration" | "TSNeverKeyword" | "TSNonNullE***REMOVED***pression" | "TSNullKeyword" | "TSNumberKeyword" | "TSObjectKeyword" | "TSOptionalType" | "TSParameterProperty" | "TSParenthesizedType" | "TSPropertySignature" | "TSQualifiedName" | "TSRestType" | "TSSatisfiesE***REMOVED***pression" | "TSStringKeyword" | "TSSymbolKeyword" | "TSThisType" | "TSTupleType" | "TSTypeAliasDeclaration" | "TSTypeAnnotation" | "TSTypeAssertion" | "TSTypeLiteral" | "TSTypeOperator" | "TSTypeParameter" | "TSTypeParameterDeclaration" | "TSTypeParameterInstantiation" | "TSTypePredicate" | "TSTypeQuery" | "TSTypeReference" | "TSUndefinedKeyword" | "TSUnionType" | "TSUnknownKeyword" | "TSVoidKeyword" | "TaggedTemplateE***REMOVED***pression" | "TemplateElement" | "TemplateLiteral" | "ThisE***REMOVED***pression" | "ThisTypeAnnotation" | "ThrowStatement" | "TopicReference" | "TryStatement" | "TupleE***REMOVED***pression" | "TupleTypeAnnotation" | "TypeAlias" | "TypeAnnotation" | "TypeCastE***REMOVED***pression" | "TypeParameter" | "TypeParameterDeclaration" | "TypeParameterInstantiation" | "TypeofTypeAnnotation" | "UnaryE***REMOVED***pression" | "UnionTypeAnnotation" | "UpdateE***REMOVED***pression" | "V8IntrinsicIdentifier" | "VariableDeclaration" | "VariableDeclarator" | "Variance" | "VoidTypeAnnotation" | "WhileStatement" | "WithStatement" | "YieldE***REMOVED***pression" | keyof Aliases)[];
declare const TSENTITYNAME_TYPES: ("AnyTypeAnnotation" | "ArgumentPlaceholder" | "ArrayE***REMOVED***pression" | "ArrayPattern" | "ArrayTypeAnnotation" | "ArrowFunctionE***REMOVED***pression" | "AssignmentE***REMOVED***pression" | "AssignmentPattern" | "AwaitE***REMOVED***pression" | "BigIntLiteral" | "BinaryE***REMOVED***pression" | "BindE***REMOVED***pression" | "BlockStatement" | "BooleanLiteral" | "BooleanLiteralTypeAnnotation" | "BooleanTypeAnnotation" | "BreakStatement" | "CallE***REMOVED***pression" | "CatchClause" | "ClassAccessorProperty" | "ClassBody" | "ClassDeclaration" | "ClassE***REMOVED***pression" | "ClassImplements" | "ClassMethod" | "ClassPrivateMethod" | "ClassPrivateProperty" | "ClassProperty" | "ConditionalE***REMOVED***pression" | "ContinueStatement" | "DebuggerStatement" | "DecimalLiteral" | "DeclareClass" | "DeclareE***REMOVED***portAllDeclaration" | "DeclareE***REMOVED***portDeclaration" | "DeclareFunction" | "DeclareInterface" | "DeclareModule" | "DeclareModuleE***REMOVED***ports" | "DeclareOpaqueType" | "DeclareTypeAlias" | "DeclareVariable" | "DeclaredPredicate" | "Decorator" | "Directive" | "DirectiveLiteral" | "DoE***REMOVED***pression" | "DoWhileStatement" | "EmptyStatement" | "EmptyTypeAnnotation" | "EnumBooleanBody" | "EnumBooleanMember" | "EnumDeclaration" | "EnumDefaultedMember" | "EnumNumberBody" | "EnumNumberMember" | "EnumStringBody" | "EnumStringMember" | "EnumSymbolBody" | "E***REMOVED***istsTypeAnnotation" | "E***REMOVED***portAllDeclaration" | "E***REMOVED***portDefaultDeclaration" | "E***REMOVED***portDefaultSpecifier" | "E***REMOVED***portNamedDeclaration" | "E***REMOVED***portNamespaceSpecifier" | "E***REMOVED***portSpecifier" | "E***REMOVED***pressionStatement" | "File" | "ForInStatement" | "ForOfStatement" | "ForStatement" | "FunctionDeclaration" | "FunctionE***REMOVED***pression" | "FunctionTypeAnnotation" | "FunctionTypeParam" | "GenericTypeAnnotation" | "Identifier" | "IfStatement" | "Import" | "ImportAttribute" | "ImportDeclaration" | "ImportDefaultSpecifier" | "ImportE***REMOVED***pression" | "ImportNamespaceSpecifier" | "ImportSpecifier" | "Inde***REMOVED***edAccessType" | "InferredPredicate" | "InterfaceDeclaration" | "InterfaceE***REMOVED***tends" | "InterfaceTypeAnnotation" | "InterpreterDirective" | "IntersectionTypeAnnotation" | "JSXAttribute" | "JSXClosingElement" | "JSXClosingFragment" | "JSXElement" | "JSXEmptyE***REMOVED***pression" | "JSXE***REMOVED***pressionContainer" | "JSXFragment" | "JSXIdentifier" | "JSXMemberE***REMOVED***pression" | "JSXNamespacedName" | "JSXOpeningElement" | "JSXOpeningFragment" | "JSXSpreadAttribute" | "JSXSpreadChild" | "JSXTe***REMOVED***t" | "LabeledStatement" | "LogicalE***REMOVED***pression" | "MemberE***REMOVED***pression" | "MetaProperty" | "Mi***REMOVED***edTypeAnnotation" | "ModuleE***REMOVED***pression" | "NewE***REMOVED***pression" | "Noop" | "NullLiteral" | "NullLiteralTypeAnnotation" | "NullableTypeAnnotation" | "NumberLiteral" | "NumberLiteralTypeAnnotation" | "NumberTypeAnnotation" | "NumericLiteral" | "ObjectE***REMOVED***pression" | "ObjectMethod" | "ObjectPattern" | "ObjectProperty" | "ObjectTypeAnnotation" | "ObjectTypeCallProperty" | "ObjectTypeInde***REMOVED***er" | "ObjectTypeInternalSlot" | "ObjectTypeProperty" | "ObjectTypeSpreadProperty" | "OpaqueType" | "OptionalCallE***REMOVED***pression" | "OptionalInde***REMOVED***edAccessType" | "OptionalMemberE***REMOVED***pression" | "ParenthesizedE***REMOVED***pression" | "PipelineBareFunction" | "PipelinePrimaryTopicReference" | "PipelineTopicE***REMOVED***pression" | "Placeholder" | "PrivateName" | "Program" | "QualifiedTypeIdentifier" | "RecordE***REMOVED***pression" | "RegE***REMOVED***pLiteral" | "Rege***REMOVED***Literal" | "RestElement" | "RestProperty" | "ReturnStatement" | "SequenceE***REMOVED***pression" | "SpreadElement" | "SpreadProperty" | "StaticBlock" | "StringLiteral" | "StringLiteralTypeAnnotation" | "StringTypeAnnotation" | "Super" | "SwitchCase" | "SwitchStatement" | "SymbolTypeAnnotation" | "TSAnyKeyword" | "TSArrayType" | "TSAsE***REMOVED***pression" | "TSBigIntKeyword" | "TSBooleanKeyword" | "TSCallSignatureDeclaration" | "TSConditionalType" | "TSConstructSignatureDeclaration" | "TSConstructorType" | "TSDeclareFunction" | "TSDeclareMethod" | "TSEnumDeclaration" | "TSEnumMember" | "TSE***REMOVED***portAssignment" | "TSE***REMOVED***pressionWithTypeArguments" | "TSE***REMOVED***ternalModuleReference" | "TSFunctionType" | "TSImportEqualsDeclaration" | "TSImportType" | "TSInde***REMOVED***Signature" | "TSInde***REMOVED***edAccessType" | "TSInferType" | "TSInstantiationE***REMOVED***pression" | "TSInterfaceBody" | "TSInterfaceDeclaration" | "TSIntersectionType" | "TSIntrinsicKeyword" | "TSLiteralType" | "TSMappedType" | "TSMethodSignature" | "TSModuleBlock" | "TSModuleDeclaration" | "TSNamedTupleMember" | "TSNamespaceE***REMOVED***portDeclaration" | "TSNeverKeyword" | "TSNonNullE***REMOVED***pression" | "TSNullKeyword" | "TSNumberKeyword" | "TSObjectKeyword" | "TSOptionalType" | "TSParameterProperty" | "TSParenthesizedType" | "TSPropertySignature" | "TSQualifiedName" | "TSRestType" | "TSSatisfiesE***REMOVED***pression" | "TSStringKeyword" | "TSSymbolKeyword" | "TSThisType" | "TSTupleType" | "TSTypeAliasDeclaration" | "TSTypeAnnotation" | "TSTypeAssertion" | "TSTypeLiteral" | "TSTypeOperator" | "TSTypeParameter" | "TSTypeParameterDeclaration" | "TSTypeParameterInstantiation" | "TSTypePredicate" | "TSTypeQuery" | "TSTypeReference" | "TSUndefinedKeyword" | "TSUnionType" | "TSUnknownKeyword" | "TSVoidKeyword" | "TaggedTemplateE***REMOVED***pression" | "TemplateElement" | "TemplateLiteral" | "ThisE***REMOVED***pression" | "ThisTypeAnnotation" | "ThrowStatement" | "TopicReference" | "TryStatement" | "TupleE***REMOVED***pression" | "TupleTypeAnnotation" | "TypeAlias" | "TypeAnnotation" | "TypeCastE***REMOVED***pression" | "TypeParameter" | "TypeParameterDeclaration" | "TypeParameterInstantiation" | "TypeofTypeAnnotation" | "UnaryE***REMOVED***pression" | "UnionTypeAnnotation" | "UpdateE***REMOVED***pression" | "V8IntrinsicIdentifier" | "VariableDeclaration" | "VariableDeclarator" | "Variance" | "VoidTypeAnnotation" | "WhileStatement" | "WithStatement" | "YieldE***REMOVED***pression" | keyof Aliases)[];
declare const LITERAL_TYPES: ("AnyTypeAnnotation" | "ArgumentPlaceholder" | "ArrayE***REMOVED***pression" | "ArrayPattern" | "ArrayTypeAnnotation" | "ArrowFunctionE***REMOVED***pression" | "AssignmentE***REMOVED***pression" | "AssignmentPattern" | "AwaitE***REMOVED***pression" | "BigIntLiteral" | "BinaryE***REMOVED***pression" | "BindE***REMOVED***pression" | "BlockStatement" | "BooleanLiteral" | "BooleanLiteralTypeAnnotation" | "BooleanTypeAnnotation" | "BreakStatement" | "CallE***REMOVED***pression" | "CatchClause" | "ClassAccessorProperty" | "ClassBody" | "ClassDeclaration" | "ClassE***REMOVED***pression" | "ClassImplements" | "ClassMethod" | "ClassPrivateMethod" | "ClassPrivateProperty" | "ClassProperty" | "ConditionalE***REMOVED***pression" | "ContinueStatement" | "DebuggerStatement" | "DecimalLiteral" | "DeclareClass" | "DeclareE***REMOVED***portAllDeclaration" | "DeclareE***REMOVED***portDeclaration" | "DeclareFunction" | "DeclareInterface" | "DeclareModule" | "DeclareModuleE***REMOVED***ports" | "DeclareOpaqueType" | "DeclareTypeAlias" | "DeclareVariable" | "DeclaredPredicate" | "Decorator" | "Directive" | "DirectiveLiteral" | "DoE***REMOVED***pression" | "DoWhileStatement" | "EmptyStatement" | "EmptyTypeAnnotation" | "EnumBooleanBody" | "EnumBooleanMember" | "EnumDeclaration" | "EnumDefaultedMember" | "EnumNumberBody" | "EnumNumberMember" | "EnumStringBody" | "EnumStringMember" | "EnumSymbolBody" | "E***REMOVED***istsTypeAnnotation" | "E***REMOVED***portAllDeclaration" | "E***REMOVED***portDefaultDeclaration" | "E***REMOVED***portDefaultSpecifier" | "E***REMOVED***portNamedDeclaration" | "E***REMOVED***portNamespaceSpecifier" | "E***REMOVED***portSpecifier" | "E***REMOVED***pressionStatement" | "File" | "ForInStatement" | "ForOfStatement" | "ForStatement" | "FunctionDeclaration" | "FunctionE***REMOVED***pression" | "FunctionTypeAnnotation" | "FunctionTypeParam" | "GenericTypeAnnotation" | "Identifier" | "IfStatement" | "Import" | "ImportAttribute" | "ImportDeclaration" | "ImportDefaultSpecifier" | "ImportE***REMOVED***pression" | "ImportNamespaceSpecifier" | "ImportSpecifier" | "Inde***REMOVED***edAccessType" | "InferredPredicate" | "InterfaceDeclaration" | "InterfaceE***REMOVED***tends" | "InterfaceTypeAnnotation" | "InterpreterDirective" | "IntersectionTypeAnnotation" | "JSXAttribute" | "JSXClosingElement" | "JSXClosingFragment" | "JSXElement" | "JSXEmptyE***REMOVED***pression" | "JSXE***REMOVED***pressionContainer" | "JSXFragment" | "JSXIdentifier" | "JSXMemberE***REMOVED***pression" | "JSXNamespacedName" | "JSXOpeningElement" | "JSXOpeningFragment" | "JSXSpreadAttribute" | "JSXSpreadChild" | "JSXTe***REMOVED***t" | "LabeledStatement" | "LogicalE***REMOVED***pression" | "MemberE***REMOVED***pression" | "MetaProperty" | "Mi***REMOVED***edTypeAnnotation" | "ModuleE***REMOVED***pression" | "NewE***REMOVED***pression" | "Noop" | "NullLiteral" | "NullLiteralTypeAnnotation" | "NullableTypeAnnotation" | "NumberLiteral" | "NumberLiteralTypeAnnotation" | "NumberTypeAnnotation" | "NumericLiteral" | "ObjectE***REMOVED***pression" | "ObjectMethod" | "ObjectPattern" | "ObjectProperty" | "ObjectTypeAnnotation" | "ObjectTypeCallProperty" | "ObjectTypeInde***REMOVED***er" | "ObjectTypeInternalSlot" | "ObjectTypeProperty" | "ObjectTypeSpreadProperty" | "OpaqueType" | "OptionalCallE***REMOVED***pression" | "OptionalInde***REMOVED***edAccessType" | "OptionalMemberE***REMOVED***pression" | "ParenthesizedE***REMOVED***pression" | "PipelineBareFunction" | "PipelinePrimaryTopicReference" | "PipelineTopicE***REMOVED***pression" | "Placeholder" | "PrivateName" | "Program" | "QualifiedTypeIdentifier" | "RecordE***REMOVED***pression" | "RegE***REMOVED***pLiteral" | "Rege***REMOVED***Literal" | "RestElement" | "RestProperty" | "ReturnStatement" | "SequenceE***REMOVED***pression" | "SpreadElement" | "SpreadProperty" | "StaticBlock" | "StringLiteral" | "StringLiteralTypeAnnotation" | "StringTypeAnnotation" | "Super" | "SwitchCase" | "SwitchStatement" | "SymbolTypeAnnotation" | "TSAnyKeyword" | "TSArrayType" | "TSAsE***REMOVED***pression" | "TSBigIntKeyword" | "TSBooleanKeyword" | "TSCallSignatureDeclaration" | "TSConditionalType" | "TSConstructSignatureDeclaration" | "TSConstructorType" | "TSDeclareFunction" | "TSDeclareMethod" | "TSEnumDeclaration" | "TSEnumMember" | "TSE***REMOVED***portAssignment" | "TSE***REMOVED***pressionWithTypeArguments" | "TSE***REMOVED***ternalModuleReference" | "TSFunctionType" | "TSImportEqualsDeclaration" | "TSImportType" | "TSInde***REMOVED***Signature" | "TSInde***REMOVED***edAccessType" | "TSInferType" | "TSInstantiationE***REMOVED***pression" | "TSInterfaceBody" | "TSInterfaceDeclaration" | "TSIntersectionType" | "TSIntrinsicKeyword" | "TSLiteralType" | "TSMappedType" | "TSMethodSignature" | "TSModuleBlock" | "TSModuleDeclaration" | "TSNamedTupleMember" | "TSNamespaceE***REMOVED***portDeclaration" | "TSNeverKeyword" | "TSNonNullE***REMOVED***pression" | "TSNullKeyword" | "TSNumberKeyword" | "TSObjectKeyword" | "TSOptionalType" | "TSParameterProperty" | "TSParenthesizedType" | "TSPropertySignature" | "TSQualifiedName" | "TSRestType" | "TSSatisfiesE***REMOVED***pression" | "TSStringKeyword" | "TSSymbolKeyword" | "TSThisType" | "TSTupleType" | "TSTypeAliasDeclaration" | "TSTypeAnnotation" | "TSTypeAssertion" | "TSTypeLiteral" | "TSTypeOperator" | "TSTypeParameter" | "TSTypeParameterDeclaration" | "TSTypeParameterInstantiation" | "TSTypePredicate" | "TSTypeQuery" | "TSTypeReference" | "TSUndefinedKeyword" | "TSUnionType" | "TSUnknownKeyword" | "TSVoidKeyword" | "TaggedTemplateE***REMOVED***pression" | "TemplateElement" | "TemplateLiteral" | "ThisE***REMOVED***pression" | "ThisTypeAnnotation" | "ThrowStatement" | "TopicReference" | "TryStatement" | "TupleE***REMOVED***pression" | "TupleTypeAnnotation" | "TypeAlias" | "TypeAnnotation" | "TypeCastE***REMOVED***pression" | "TypeParameter" | "TypeParameterDeclaration" | "TypeParameterInstantiation" | "TypeofTypeAnnotation" | "UnaryE***REMOVED***pression" | "UnionTypeAnnotation" | "UpdateE***REMOVED***pression" | "V8IntrinsicIdentifier" | "VariableDeclaration" | "VariableDeclarator" | "Variance" | "VoidTypeAnnotation" | "WhileStatement" | "WithStatement" | "YieldE***REMOVED***pression" | keyof Aliases)[];
declare const IMMUTABLE_TYPES: ("AnyTypeAnnotation" | "ArgumentPlaceholder" | "ArrayE***REMOVED***pression" | "ArrayPattern" | "ArrayTypeAnnotation" | "ArrowFunctionE***REMOVED***pression" | "AssignmentE***REMOVED***pression" | "AssignmentPattern" | "AwaitE***REMOVED***pression" | "BigIntLiteral" | "BinaryE***REMOVED***pression" | "BindE***REMOVED***pression" | "BlockStatement" | "BooleanLiteral" | "BooleanLiteralTypeAnnotation" | "BooleanTypeAnnotation" | "BreakStatement" | "CallE***REMOVED***pression" | "CatchClause" | "ClassAccessorProperty" | "ClassBody" | "ClassDeclaration" | "ClassE***REMOVED***pression" | "ClassImplements" | "ClassMethod" | "ClassPrivateMethod" | "ClassPrivateProperty" | "ClassProperty" | "ConditionalE***REMOVED***pression" | "ContinueStatement" | "DebuggerStatement" | "DecimalLiteral" | "DeclareClass" | "DeclareE***REMOVED***portAllDeclaration" | "DeclareE***REMOVED***portDeclaration" | "DeclareFunction" | "DeclareInterface" | "DeclareModule" | "DeclareModuleE***REMOVED***ports" | "DeclareOpaqueType" | "DeclareTypeAlias" | "DeclareVariable" | "DeclaredPredicate" | "Decorator" | "Directive" | "DirectiveLiteral" | "DoE***REMOVED***pression" | "DoWhileStatement" | "EmptyStatement" | "EmptyTypeAnnotation" | "EnumBooleanBody" | "EnumBooleanMember" | "EnumDeclaration" | "EnumDefaultedMember" | "EnumNumberBody" | "EnumNumberMember" | "EnumStringBody" | "EnumStringMember" | "EnumSymbolBody" | "E***REMOVED***istsTypeAnnotation" | "E***REMOVED***portAllDeclaration" | "E***REMOVED***portDefaultDeclaration" | "E***REMOVED***portDefaultSpecifier" | "E***REMOVED***portNamedDeclaration" | "E***REMOVED***portNamespaceSpecifier" | "E***REMOVED***portSpecifier" | "E***REMOVED***pressionStatement" | "File" | "ForInStatement" | "ForOfStatement" | "ForStatement" | "FunctionDeclaration" | "FunctionE***REMOVED***pression" | "FunctionTypeAnnotation" | "FunctionTypeParam" | "GenericTypeAnnotation" | "Identifier" | "IfStatement" | "Import" | "ImportAttribute" | "ImportDeclaration" | "ImportDefaultSpecifier" | "ImportE***REMOVED***pression" | "ImportNamespaceSpecifier" | "ImportSpecifier" | "Inde***REMOVED***edAccessType" | "InferredPredicate" | "InterfaceDeclaration" | "InterfaceE***REMOVED***tends" | "InterfaceTypeAnnotation" | "InterpreterDirective" | "IntersectionTypeAnnotation" | "JSXAttribute" | "JSXClosingElement" | "JSXClosingFragment" | "JSXElement" | "JSXEmptyE***REMOVED***pression" | "JSXE***REMOVED***pressionContainer" | "JSXFragment" | "JSXIdentifier" | "JSXMemberE***REMOVED***pression" | "JSXNamespacedName" | "JSXOpeningElement" | "JSXOpeningFragment" | "JSXSpreadAttribute" | "JSXSpreadChild" | "JSXTe***REMOVED***t" | "LabeledStatement" | "LogicalE***REMOVED***pression" | "MemberE***REMOVED***pression" | "MetaProperty" | "Mi***REMOVED***edTypeAnnotation" | "ModuleE***REMOVED***pression" | "NewE***REMOVED***pression" | "Noop" | "NullLiteral" | "NullLiteralTypeAnnotation" | "NullableTypeAnnotation" | "NumberLiteral" | "NumberLiteralTypeAnnotation" | "NumberTypeAnnotation" | "NumericLiteral" | "ObjectE***REMOVED***pression" | "ObjectMethod" | "ObjectPattern" | "ObjectProperty" | "ObjectTypeAnnotation" | "ObjectTypeCallProperty" | "ObjectTypeInde***REMOVED***er" | "ObjectTypeInternalSlot" | "ObjectTypeProperty" | "ObjectTypeSpreadProperty" | "OpaqueType" | "OptionalCallE***REMOVED***pression" | "OptionalInde***REMOVED***edAccessType" | "OptionalMemberE***REMOVED***pression" | "ParenthesizedE***REMOVED***pression" | "PipelineBareFunction" | "PipelinePrimaryTopicReference" | "PipelineTopicE***REMOVED***pression" | "Placeholder" | "PrivateName" | "Program" | "QualifiedTypeIdentifier" | "RecordE***REMOVED***pression" | "RegE***REMOVED***pLiteral" | "Rege***REMOVED***Literal" | "RestElement" | "RestProperty" | "ReturnStatement" | "SequenceE***REMOVED***pression" | "SpreadElement" | "SpreadProperty" | "StaticBlock" | "StringLiteral" | "StringLiteralTypeAnnotation" | "StringTypeAnnotation" | "Super" | "SwitchCase" | "SwitchStatement" | "SymbolTypeAnnotation" | "TSAnyKeyword" | "TSArrayType" | "TSAsE***REMOVED***pression" | "TSBigIntKeyword" | "TSBooleanKeyword" | "TSCallSignatureDeclaration" | "TSConditionalType" | "TSConstructSignatureDeclaration" | "TSConstructorType" | "TSDeclareFunction" | "TSDeclareMethod" | "TSEnumDeclaration" | "TSEnumMember" | "TSE***REMOVED***portAssignment" | "TSE***REMOVED***pressionWithTypeArguments" | "TSE***REMOVED***ternalModuleReference" | "TSFunctionType" | "TSImportEqualsDeclaration" | "TSImportType" | "TSInde***REMOVED***Signature" | "TSInde***REMOVED***edAccessType" | "TSInferType" | "TSInstantiationE***REMOVED***pression" | "TSInterfaceBody" | "TSInterfaceDeclaration" | "TSIntersectionType" | "TSIntrinsicKeyword" | "TSLiteralType" | "TSMappedType" | "TSMethodSignature" | "TSModuleBlock" | "TSModuleDeclaration" | "TSNamedTupleMember" | "TSNamespaceE***REMOVED***portDeclaration" | "TSNeverKeyword" | "TSNonNullE***REMOVED***pression" | "TSNullKeyword" | "TSNumberKeyword" | "TSObjectKeyword" | "TSOptionalType" | "TSParameterProperty" | "TSParenthesizedType" | "TSPropertySignature" | "TSQualifiedName" | "TSRestType" | "TSSatisfiesE***REMOVED***pression" | "TSStringKeyword" | "TSSymbolKeyword" | "TSThisType" | "TSTupleType" | "TSTypeAliasDeclaration" | "TSTypeAnnotation" | "TSTypeAssertion" | "TSTypeLiteral" | "TSTypeOperator" | "TSTypeParameter" | "TSTypeParameterDeclaration" | "TSTypeParameterInstantiation" | "TSTypePredicate" | "TSTypeQuery" | "TSTypeReference" | "TSUndefinedKeyword" | "TSUnionType" | "TSUnknownKeyword" | "TSVoidKeyword" | "TaggedTemplateE***REMOVED***pression" | "TemplateElement" | "TemplateLiteral" | "ThisE***REMOVED***pression" | "ThisTypeAnnotation" | "ThrowStatement" | "TopicReference" | "TryStatement" | "TupleE***REMOVED***pression" | "TupleTypeAnnotation" | "TypeAlias" | "TypeAnnotation" | "TypeCastE***REMOVED***pression" | "TypeParameter" | "TypeParameterDeclaration" | "TypeParameterInstantiation" | "TypeofTypeAnnotation" | "UnaryE***REMOVED***pression" | "UnionTypeAnnotation" | "UpdateE***REMOVED***pression" | "V8IntrinsicIdentifier" | "VariableDeclaration" | "VariableDeclarator" | "Variance" | "VoidTypeAnnotation" | "WhileStatement" | "WithStatement" | "YieldE***REMOVED***pression" | keyof Aliases)[];
declare const USERWHITESPACABLE_TYPES: ("AnyTypeAnnotation" | "ArgumentPlaceholder" | "ArrayE***REMOVED***pression" | "ArrayPattern" | "ArrayTypeAnnotation" | "ArrowFunctionE***REMOVED***pression" | "AssignmentE***REMOVED***pression" | "AssignmentPattern" | "AwaitE***REMOVED***pression" | "BigIntLiteral" | "BinaryE***REMOVED***pression" | "BindE***REMOVED***pression" | "BlockStatement" | "BooleanLiteral" | "BooleanLiteralTypeAnnotation" | "BooleanTypeAnnotation" | "BreakStatement" | "CallE***REMOVED***pression" | "CatchClause" | "ClassAccessorProperty" | "ClassBody" | "ClassDeclaration" | "ClassE***REMOVED***pression" | "ClassImplements" | "ClassMethod" | "ClassPrivateMethod" | "ClassPrivateProperty" | "ClassProperty" | "ConditionalE***REMOVED***pression" | "ContinueStatement" | "DebuggerStatement" | "DecimalLiteral" | "DeclareClass" | "DeclareE***REMOVED***portAllDeclaration" | "DeclareE***REMOVED***portDeclaration" | "DeclareFunction" | "DeclareInterface" | "DeclareModule" | "DeclareModuleE***REMOVED***ports" | "DeclareOpaqueType" | "DeclareTypeAlias" | "DeclareVariable" | "DeclaredPredicate" | "Decorator" | "Directive" | "DirectiveLiteral" | "DoE***REMOVED***pression" | "DoWhileStatement" | "EmptyStatement" | "EmptyTypeAnnotation" | "EnumBooleanBody" | "EnumBooleanMember" | "EnumDeclaration" | "EnumDefaultedMember" | "EnumNumberBody" | "EnumNumberMember" | "EnumStringBody" | "EnumStringMember" | "EnumSymbolBody" | "E***REMOVED***istsTypeAnnotation" | "E***REMOVED***portAllDeclaration" | "E***REMOVED***portDefaultDeclaration" | "E***REMOVED***portDefaultSpecifier" | "E***REMOVED***portNamedDeclaration" | "E***REMOVED***portNamespaceSpecifier" | "E***REMOVED***portSpecifier" | "E***REMOVED***pressionStatement" | "File" | "ForInStatement" | "ForOfStatement" | "ForStatement" | "FunctionDeclaration" | "FunctionE***REMOVED***pression" | "FunctionTypeAnnotation" | "FunctionTypeParam" | "GenericTypeAnnotation" | "Identifier" | "IfStatement" | "Import" | "ImportAttribute" | "ImportDeclaration" | "ImportDefaultSpecifier" | "ImportE***REMOVED***pression" | "ImportNamespaceSpecifier" | "ImportSpecifier" | "Inde***REMOVED***edAccessType" | "InferredPredicate" | "InterfaceDeclaration" | "InterfaceE***REMOVED***tends" | "InterfaceTypeAnnotation" | "InterpreterDirective" | "IntersectionTypeAnnotation" | "JSXAttribute" | "JSXClosingElement" | "JSXClosingFragment" | "JSXElement" | "JSXEmptyE***REMOVED***pression" | "JSXE***REMOVED***pressionContainer" | "JSXFragment" | "JSXIdentifier" | "JSXMemberE***REMOVED***pression" | "JSXNamespacedName" | "JSXOpeningElement" | "JSXOpeningFragment" | "JSXSpreadAttribute" | "JSXSpreadChild" | "JSXTe***REMOVED***t" | "LabeledStatement" | "LogicalE***REMOVED***pression" | "MemberE***REMOVED***pression" | "MetaProperty" | "Mi***REMOVED***edTypeAnnotation" | "ModuleE***REMOVED***pression" | "NewE***REMOVED***pression" | "Noop" | "NullLiteral" | "NullLiteralTypeAnnotation" | "NullableTypeAnnotation" | "NumberLiteral" | "NumberLiteralTypeAnnotation" | "NumberTypeAnnotation" | "NumericLiteral" | "ObjectE***REMOVED***pression" | "ObjectMethod" | "ObjectPattern" | "ObjectProperty" | "ObjectTypeAnnotation" | "ObjectTypeCallProperty" | "ObjectTypeInde***REMOVED***er" | "ObjectTypeInternalSlot" | "ObjectTypeProperty" | "ObjectTypeSpreadProperty" | "OpaqueType" | "OptionalCallE***REMOVED***pression" | "OptionalInde***REMOVED***edAccessType" | "OptionalMemberE***REMOVED***pression" | "ParenthesizedE***REMOVED***pression" | "PipelineBareFunction" | "PipelinePrimaryTopicReference" | "PipelineTopicE***REMOVED***pression" | "Placeholder" | "PrivateName" | "Program" | "QualifiedTypeIdentifier" | "RecordE***REMOVED***pression" | "RegE***REMOVED***pLiteral" | "Rege***REMOVED***Literal" | "RestElement" | "RestProperty" | "ReturnStatement" | "SequenceE***REMOVED***pression" | "SpreadElement" | "SpreadProperty" | "StaticBlock" | "StringLiteral" | "StringLiteralTypeAnnotation" | "StringTypeAnnotation" | "Super" | "SwitchCase" | "SwitchStatement" | "SymbolTypeAnnotation" | "TSAnyKeyword" | "TSArrayType" | "TSAsE***REMOVED***pression" | "TSBigIntKeyword" | "TSBooleanKeyword" | "TSCallSignatureDeclaration" | "TSConditionalType" | "TSConstructSignatureDeclaration" | "TSConstructorType" | "TSDeclareFunction" | "TSDeclareMethod" | "TSEnumDeclaration" | "TSEnumMember" | "TSE***REMOVED***portAssignment" | "TSE***REMOVED***pressionWithTypeArguments" | "TSE***REMOVED***ternalModuleReference" | "TSFunctionType" | "TSImportEqualsDeclaration" | "TSImportType" | "TSInde***REMOVED***Signature" | "TSInde***REMOVED***edAccessType" | "TSInferType" | "TSInstantiationE***REMOVED***pression" | "TSInterfaceBody" | "TSInterfaceDeclaration" | "TSIntersectionType" | "TSIntrinsicKeyword" | "TSLiteralType" | "TSMappedType" | "TSMethodSignature" | "TSModuleBlock" | "TSModuleDeclaration" | "TSNamedTupleMember" | "TSNamespaceE***REMOVED***portDeclaration" | "TSNeverKeyword" | "TSNonNullE***REMOVED***pression" | "TSNullKeyword" | "TSNumberKeyword" | "TSObjectKeyword" | "TSOptionalType" | "TSParameterProperty" | "TSParenthesizedType" | "TSPropertySignature" | "TSQualifiedName" | "TSRestType" | "TSSatisfiesE***REMOVED***pression" | "TSStringKeyword" | "TSSymbolKeyword" | "TSThisType" | "TSTupleType" | "TSTypeAliasDeclaration" | "TSTypeAnnotation" | "TSTypeAssertion" | "TSTypeLiteral" | "TSTypeOperator" | "TSTypeParameter" | "TSTypeParameterDeclaration" | "TSTypeParameterInstantiation" | "TSTypePredicate" | "TSTypeQuery" | "TSTypeReference" | "TSUndefinedKeyword" | "TSUnionType" | "TSUnknownKeyword" | "TSVoidKeyword" | "TaggedTemplateE***REMOVED***pression" | "TemplateElement" | "TemplateLiteral" | "ThisE***REMOVED***pression" | "ThisTypeAnnotation" | "ThrowStatement" | "TopicReference" | "TryStatement" | "TupleE***REMOVED***pression" | "TupleTypeAnnotation" | "TypeAlias" | "TypeAnnotation" | "TypeCastE***REMOVED***pression" | "TypeParameter" | "TypeParameterDeclaration" | "TypeParameterInstantiation" | "TypeofTypeAnnotation" | "UnaryE***REMOVED***pression" | "UnionTypeAnnotation" | "UpdateE***REMOVED***pression" | "V8IntrinsicIdentifier" | "VariableDeclaration" | "VariableDeclarator" | "Variance" | "VoidTypeAnnotation" | "WhileStatement" | "WithStatement" | "YieldE***REMOVED***pression" | keyof Aliases)[];
declare const METHOD_TYPES: ("AnyTypeAnnotation" | "ArgumentPlaceholder" | "ArrayE***REMOVED***pression" | "ArrayPattern" | "ArrayTypeAnnotation" | "ArrowFunctionE***REMOVED***pression" | "AssignmentE***REMOVED***pression" | "AssignmentPattern" | "AwaitE***REMOVED***pression" | "BigIntLiteral" | "BinaryE***REMOVED***pression" | "BindE***REMOVED***pression" | "BlockStatement" | "BooleanLiteral" | "BooleanLiteralTypeAnnotation" | "BooleanTypeAnnotation" | "BreakStatement" | "CallE***REMOVED***pression" | "CatchClause" | "ClassAccessorProperty" | "ClassBody" | "ClassDeclaration" | "ClassE***REMOVED***pression" | "ClassImplements" | "ClassMethod" | "ClassPrivateMethod" | "ClassPrivateProperty" | "ClassProperty" | "ConditionalE***REMOVED***pression" | "ContinueStatement" | "DebuggerStatement" | "DecimalLiteral" | "DeclareClass" | "DeclareE***REMOVED***portAllDeclaration" | "DeclareE***REMOVED***portDeclaration" | "DeclareFunction" | "DeclareInterface" | "DeclareModule" | "DeclareModuleE***REMOVED***ports" | "DeclareOpaqueType" | "DeclareTypeAlias" | "DeclareVariable" | "DeclaredPredicate" | "Decorator" | "Directive" | "DirectiveLiteral" | "DoE***REMOVED***pression" | "DoWhileStatement" | "EmptyStatement" | "EmptyTypeAnnotation" | "EnumBooleanBody" | "EnumBooleanMember" | "EnumDeclaration" | "EnumDefaultedMember" | "EnumNumberBody" | "EnumNumberMember" | "EnumStringBody" | "EnumStringMember" | "EnumSymbolBody" | "E***REMOVED***istsTypeAnnotation" | "E***REMOVED***portAllDeclaration" | "E***REMOVED***portDefaultDeclaration" | "E***REMOVED***portDefaultSpecifier" | "E***REMOVED***portNamedDeclaration" | "E***REMOVED***portNamespaceSpecifier" | "E***REMOVED***portSpecifier" | "E***REMOVED***pressionStatement" | "File" | "ForInStatement" | "ForOfStatement" | "ForStatement" | "FunctionDeclaration" | "FunctionE***REMOVED***pression" | "FunctionTypeAnnotation" | "FunctionTypeParam" | "GenericTypeAnnotation" | "Identifier" | "IfStatement" | "Import" | "ImportAttribute" | "ImportDeclaration" | "ImportDefaultSpecifier" | "ImportE***REMOVED***pression" | "ImportNamespaceSpecifier" | "ImportSpecifier" | "Inde***REMOVED***edAccessType" | "InferredPredicate" | "InterfaceDeclaration" | "InterfaceE***REMOVED***tends" | "InterfaceTypeAnnotation" | "InterpreterDirective" | "IntersectionTypeAnnotation" | "JSXAttribute" | "JSXClosingElement" | "JSXClosingFragment" | "JSXElement" | "JSXEmptyE***REMOVED***pression" | "JSXE***REMOVED***pressionContainer" | "JSXFragment" | "JSXIdentifier" | "JSXMemberE***REMOVED***pression" | "JSXNamespacedName" | "JSXOpeningElement" | "JSXOpeningFragment" | "JSXSpreadAttribute" | "JSXSpreadChild" | "JSXTe***REMOVED***t" | "LabeledStatement" | "LogicalE***REMOVED***pression" | "MemberE***REMOVED***pression" | "MetaProperty" | "Mi***REMOVED***edTypeAnnotation" | "ModuleE***REMOVED***pression" | "NewE***REMOVED***pression" | "Noop" | "NullLiteral" | "NullLiteralTypeAnnotation" | "NullableTypeAnnotation" | "NumberLiteral" | "NumberLiteralTypeAnnotation" | "NumberTypeAnnotation" | "NumericLiteral" | "ObjectE***REMOVED***pression" | "ObjectMethod" | "ObjectPattern" | "ObjectProperty" | "ObjectTypeAnnotation" | "ObjectTypeCallProperty" | "ObjectTypeInde***REMOVED***er" | "ObjectTypeInternalSlot" | "ObjectTypeProperty" | "ObjectTypeSpreadProperty" | "OpaqueType" | "OptionalCallE***REMOVED***pression" | "OptionalInde***REMOVED***edAccessType" | "OptionalMemberE***REMOVED***pression" | "ParenthesizedE***REMOVED***pression" | "PipelineBareFunction" | "PipelinePrimaryTopicReference" | "PipelineTopicE***REMOVED***pression" | "Placeholder" | "PrivateName" | "Program" | "QualifiedTypeIdentifier" | "RecordE***REMOVED***pression" | "RegE***REMOVED***pLiteral" | "Rege***REMOVED***Literal" | "RestElement" | "RestProperty" | "ReturnStatement" | "SequenceE***REMOVED***pression" | "SpreadElement" | "SpreadProperty" | "StaticBlock" | "StringLiteral" | "StringLiteralTypeAnnotation" | "StringTypeAnnotation" | "Super" | "SwitchCase" | "SwitchStatement" | "SymbolTypeAnnotation" | "TSAnyKeyword" | "TSArrayType" | "TSAsE***REMOVED***pression" | "TSBigIntKeyword" | "TSBooleanKeyword" | "TSCallSignatureDeclaration" | "TSConditionalType" | "TSConstructSignatureDeclaration" | "TSConstructorType" | "TSDeclareFunction" | "TSDeclareMethod" | "TSEnumDeclaration" | "TSEnumMember" | "TSE***REMOVED***portAssignment" | "TSE***REMOVED***pressionWithTypeArguments" | "TSE***REMOVED***ternalModuleReference" | "TSFunctionType" | "TSImportEqualsDeclaration" | "TSImportType" | "TSInde***REMOVED***Signature" | "TSInde***REMOVED***edAccessType" | "TSInferType" | "TSInstantiationE***REMOVED***pression" | "TSInterfaceBody" | "TSInterfaceDeclaration" | "TSIntersectionType" | "TSIntrinsicKeyword" | "TSLiteralType" | "TSMappedType" | "TSMethodSignature" | "TSModuleBlock" | "TSModuleDeclaration" | "TSNamedTupleMember" | "TSNamespaceE***REMOVED***portDeclaration" | "TSNeverKeyword" | "TSNonNullE***REMOVED***pression" | "TSNullKeyword" | "TSNumberKeyword" | "TSObjectKeyword" | "TSOptionalType" | "TSParameterProperty" | "TSParenthesizedType" | "TSPropertySignature" | "TSQualifiedName" | "TSRestType" | "TSSatisfiesE***REMOVED***pression" | "TSStringKeyword" | "TSSymbolKeyword" | "TSThisType" | "TSTupleType" | "TSTypeAliasDeclaration" | "TSTypeAnnotation" | "TSTypeAssertion" | "TSTypeLiteral" | "TSTypeOperator" | "TSTypeParameter" | "TSTypeParameterDeclaration" | "TSTypeParameterInstantiation" | "TSTypePredicate" | "TSTypeQuery" | "TSTypeReference" | "TSUndefinedKeyword" | "TSUnionType" | "TSUnknownKeyword" | "TSVoidKeyword" | "TaggedTemplateE***REMOVED***pression" | "TemplateElement" | "TemplateLiteral" | "ThisE***REMOVED***pression" | "ThisTypeAnnotation" | "ThrowStatement" | "TopicReference" | "TryStatement" | "TupleE***REMOVED***pression" | "TupleTypeAnnotation" | "TypeAlias" | "TypeAnnotation" | "TypeCastE***REMOVED***pression" | "TypeParameter" | "TypeParameterDeclaration" | "TypeParameterInstantiation" | "TypeofTypeAnnotation" | "UnaryE***REMOVED***pression" | "UnionTypeAnnotation" | "UpdateE***REMOVED***pression" | "V8IntrinsicIdentifier" | "VariableDeclaration" | "VariableDeclarator" | "Variance" | "VoidTypeAnnotation" | "WhileStatement" | "WithStatement" | "YieldE***REMOVED***pression" | keyof Aliases)[];
declare const OBJECTMEMBER_TYPES: ("AnyTypeAnnotation" | "ArgumentPlaceholder" | "ArrayE***REMOVED***pression" | "ArrayPattern" | "ArrayTypeAnnotation" | "ArrowFunctionE***REMOVED***pression" | "AssignmentE***REMOVED***pression" | "AssignmentPattern" | "AwaitE***REMOVED***pression" | "BigIntLiteral" | "BinaryE***REMOVED***pression" | "BindE***REMOVED***pression" | "BlockStatement" | "BooleanLiteral" | "BooleanLiteralTypeAnnotation" | "BooleanTypeAnnotation" | "BreakStatement" | "CallE***REMOVED***pression" | "CatchClause" | "ClassAccessorProperty" | "ClassBody" | "ClassDeclaration" | "ClassE***REMOVED***pression" | "ClassImplements" | "ClassMethod" | "ClassPrivateMethod" | "ClassPrivateProperty" | "ClassProperty" | "ConditionalE***REMOVED***pression" | "ContinueStatement" | "DebuggerStatement" | "DecimalLiteral" | "DeclareClass" | "DeclareE***REMOVED***portAllDeclaration" | "DeclareE***REMOVED***portDeclaration" | "DeclareFunction" | "DeclareInterface" | "DeclareModule" | "DeclareModuleE***REMOVED***ports" | "DeclareOpaqueType" | "DeclareTypeAlias" | "DeclareVariable" | "DeclaredPredicate" | "Decorator" | "Directive" | "DirectiveLiteral" | "DoE***REMOVED***pression" | "DoWhileStatement" | "EmptyStatement" | "EmptyTypeAnnotation" | "EnumBooleanBody" | "EnumBooleanMember" | "EnumDeclaration" | "EnumDefaultedMember" | "EnumNumberBody" | "EnumNumberMember" | "EnumStringBody" | "EnumStringMember" | "EnumSymbolBody" | "E***REMOVED***istsTypeAnnotation" | "E***REMOVED***portAllDeclaration" | "E***REMOVED***portDefaultDeclaration" | "E***REMOVED***portDefaultSpecifier" | "E***REMOVED***portNamedDeclaration" | "E***REMOVED***portNamespaceSpecifier" | "E***REMOVED***portSpecifier" | "E***REMOVED***pressionStatement" | "File" | "ForInStatement" | "ForOfStatement" | "ForStatement" | "FunctionDeclaration" | "FunctionE***REMOVED***pression" | "FunctionTypeAnnotation" | "FunctionTypeParam" | "GenericTypeAnnotation" | "Identifier" | "IfStatement" | "Import" | "ImportAttribute" | "ImportDeclaration" | "ImportDefaultSpecifier" | "ImportE***REMOVED***pression" | "ImportNamespaceSpecifier" | "ImportSpecifier" | "Inde***REMOVED***edAccessType" | "InferredPredicate" | "InterfaceDeclaration" | "InterfaceE***REMOVED***tends" | "InterfaceTypeAnnotation" | "InterpreterDirective" | "IntersectionTypeAnnotation" | "JSXAttribute" | "JSXClosingElement" | "JSXClosingFragment" | "JSXElement" | "JSXEmptyE***REMOVED***pression" | "JSXE***REMOVED***pressionContainer" | "JSXFragment" | "JSXIdentifier" | "JSXMemberE***REMOVED***pression" | "JSXNamespacedName" | "JSXOpeningElement" | "JSXOpeningFragment" | "JSXSpreadAttribute" | "JSXSpreadChild" | "JSXTe***REMOVED***t" | "LabeledStatement" | "LogicalE***REMOVED***pression" | "MemberE***REMOVED***pression" | "MetaProperty" | "Mi***REMOVED***edTypeAnnotation" | "ModuleE***REMOVED***pression" | "NewE***REMOVED***pression" | "Noop" | "NullLiteral" | "NullLiteralTypeAnnotation" | "NullableTypeAnnotation" | "NumberLiteral" | "NumberLiteralTypeAnnotation" | "NumberTypeAnnotation" | "NumericLiteral" | "ObjectE***REMOVED***pression" | "ObjectMethod" | "ObjectPattern" | "ObjectProperty" | "ObjectTypeAnnotation" | "ObjectTypeCallProperty" | "ObjectTypeInde***REMOVED***er" | "ObjectTypeInternalSlot" | "ObjectTypeProperty" | "ObjectTypeSpreadProperty" | "OpaqueType" | "OptionalCallE***REMOVED***pression" | "OptionalInde***REMOVED***edAccessType" | "OptionalMemberE***REMOVED***pression" | "ParenthesizedE***REMOVED***pression" | "PipelineBareFunction" | "PipelinePrimaryTopicReference" | "PipelineTopicE***REMOVED***pression" | "Placeholder" | "PrivateName" | "Program" | "QualifiedTypeIdentifier" | "RecordE***REMOVED***pression" | "RegE***REMOVED***pLiteral" | "Rege***REMOVED***Literal" | "RestElement" | "RestProperty" | "ReturnStatement" | "SequenceE***REMOVED***pression" | "SpreadElement" | "SpreadProperty" | "StaticBlock" | "StringLiteral" | "StringLiteralTypeAnnotation" | "StringTypeAnnotation" | "Super" | "SwitchCase" | "SwitchStatement" | "SymbolTypeAnnotation" | "TSAnyKeyword" | "TSArrayType" | "TSAsE***REMOVED***pression" | "TSBigIntKeyword" | "TSBooleanKeyword" | "TSCallSignatureDeclaration" | "TSConditionalType" | "TSConstructSignatureDeclaration" | "TSConstructorType" | "TSDeclareFunction" | "TSDeclareMethod" | "TSEnumDeclaration" | "TSEnumMember" | "TSE***REMOVED***portAssignment" | "TSE***REMOVED***pressionWithTypeArguments" | "TSE***REMOVED***ternalModuleReference" | "TSFunctionType" | "TSImportEqualsDeclaration" | "TSImportType" | "TSInde***REMOVED***Signature" | "TSInde***REMOVED***edAccessType" | "TSInferType" | "TSInstantiationE***REMOVED***pression" | "TSInterfaceBody" | "TSInterfaceDeclaration" | "TSIntersectionType" | "TSIntrinsicKeyword" | "TSLiteralType" | "TSMappedType" | "TSMethodSignature" | "TSModuleBlock" | "TSModuleDeclaration" | "TSNamedTupleMember" | "TSNamespaceE***REMOVED***portDeclaration" | "TSNeverKeyword" | "TSNonNullE***REMOVED***pression" | "TSNullKeyword" | "TSNumberKeyword" | "TSObjectKeyword" | "TSOptionalType" | "TSParameterProperty" | "TSParenthesizedType" | "TSPropertySignature" | "TSQualifiedName" | "TSRestType" | "TSSatisfiesE***REMOVED***pression" | "TSStringKeyword" | "TSSymbolKeyword" | "TSThisType" | "TSTupleType" | "TSTypeAliasDeclaration" | "TSTypeAnnotation" | "TSTypeAssertion" | "TSTypeLiteral" | "TSTypeOperator" | "TSTypeParameter" | "TSTypeParameterDeclaration" | "TSTypeParameterInstantiation" | "TSTypePredicate" | "TSTypeQuery" | "TSTypeReference" | "TSUndefinedKeyword" | "TSUnionType" | "TSUnknownKeyword" | "TSVoidKeyword" | "TaggedTemplateE***REMOVED***pression" | "TemplateElement" | "TemplateLiteral" | "ThisE***REMOVED***pression" | "ThisTypeAnnotation" | "ThrowStatement" | "TopicReference" | "TryStatement" | "TupleE***REMOVED***pression" | "TupleTypeAnnotation" | "TypeAlias" | "TypeAnnotation" | "TypeCastE***REMOVED***pression" | "TypeParameter" | "TypeParameterDeclaration" | "TypeParameterInstantiation" | "TypeofTypeAnnotation" | "UnaryE***REMOVED***pression" | "UnionTypeAnnotation" | "UpdateE***REMOVED***pression" | "V8IntrinsicIdentifier" | "VariableDeclaration" | "VariableDeclarator" | "Variance" | "VoidTypeAnnotation" | "WhileStatement" | "WithStatement" | "YieldE***REMOVED***pression" | keyof Aliases)[];
declare const PROPERTY_TYPES: ("AnyTypeAnnotation" | "ArgumentPlaceholder" | "ArrayE***REMOVED***pression" | "ArrayPattern" | "ArrayTypeAnnotation" | "ArrowFunctionE***REMOVED***pression" | "AssignmentE***REMOVED***pression" | "AssignmentPattern" | "AwaitE***REMOVED***pression" | "BigIntLiteral" | "BinaryE***REMOVED***pression" | "BindE***REMOVED***pression" | "BlockStatement" | "BooleanLiteral" | "BooleanLiteralTypeAnnotation" | "BooleanTypeAnnotation" | "BreakStatement" | "CallE***REMOVED***pression" | "CatchClause" | "ClassAccessorProperty" | "ClassBody" | "ClassDeclaration" | "ClassE***REMOVED***pression" | "ClassImplements" | "ClassMethod" | "ClassPrivateMethod" | "ClassPrivateProperty" | "ClassProperty" | "ConditionalE***REMOVED***pression" | "ContinueStatement" | "DebuggerStatement" | "DecimalLiteral" | "DeclareClass" | "DeclareE***REMOVED***portAllDeclaration" | "DeclareE***REMOVED***portDeclaration" | "DeclareFunction" | "DeclareInterface" | "DeclareModule" | "DeclareModuleE***REMOVED***ports" | "DeclareOpaqueType" | "DeclareTypeAlias" | "DeclareVariable" | "DeclaredPredicate" | "Decorator" | "Directive" | "DirectiveLiteral" | "DoE***REMOVED***pression" | "DoWhileStatement" | "EmptyStatement" | "EmptyTypeAnnotation" | "EnumBooleanBody" | "EnumBooleanMember" | "EnumDeclaration" | "EnumDefaultedMember" | "EnumNumberBody" | "EnumNumberMember" | "EnumStringBody" | "EnumStringMember" | "EnumSymbolBody" | "E***REMOVED***istsTypeAnnotation" | "E***REMOVED***portAllDeclaration" | "E***REMOVED***portDefaultDeclaration" | "E***REMOVED***portDefaultSpecifier" | "E***REMOVED***portNamedDeclaration" | "E***REMOVED***portNamespaceSpecifier" | "E***REMOVED***portSpecifier" | "E***REMOVED***pressionStatement" | "File" | "ForInStatement" | "ForOfStatement" | "ForStatement" | "FunctionDeclaration" | "FunctionE***REMOVED***pression" | "FunctionTypeAnnotation" | "FunctionTypeParam" | "GenericTypeAnnotation" | "Identifier" | "IfStatement" | "Import" | "ImportAttribute" | "ImportDeclaration" | "ImportDefaultSpecifier" | "ImportE***REMOVED***pression" | "ImportNamespaceSpecifier" | "ImportSpecifier" | "Inde***REMOVED***edAccessType" | "InferredPredicate" | "InterfaceDeclaration" | "InterfaceE***REMOVED***tends" | "InterfaceTypeAnnotation" | "InterpreterDirective" | "IntersectionTypeAnnotation" | "JSXAttribute" | "JSXClosingElement" | "JSXClosingFragment" | "JSXElement" | "JSXEmptyE***REMOVED***pression" | "JSXE***REMOVED***pressionContainer" | "JSXFragment" | "JSXIdentifier" | "JSXMemberE***REMOVED***pression" | "JSXNamespacedName" | "JSXOpeningElement" | "JSXOpeningFragment" | "JSXSpreadAttribute" | "JSXSpreadChild" | "JSXTe***REMOVED***t" | "LabeledStatement" | "LogicalE***REMOVED***pression" | "MemberE***REMOVED***pression" | "MetaProperty" | "Mi***REMOVED***edTypeAnnotation" | "ModuleE***REMOVED***pression" | "NewE***REMOVED***pression" | "Noop" | "NullLiteral" | "NullLiteralTypeAnnotation" | "NullableTypeAnnotation" | "NumberLiteral" | "NumberLiteralTypeAnnotation" | "NumberTypeAnnotation" | "NumericLiteral" | "ObjectE***REMOVED***pression" | "ObjectMethod" | "ObjectPattern" | "ObjectProperty" | "ObjectTypeAnnotation" | "ObjectTypeCallProperty" | "ObjectTypeInde***REMOVED***er" | "ObjectTypeInternalSlot" | "ObjectTypeProperty" | "ObjectTypeSpreadProperty" | "OpaqueType" | "OptionalCallE***REMOVED***pression" | "OptionalInde***REMOVED***edAccessType" | "OptionalMemberE***REMOVED***pression" | "ParenthesizedE***REMOVED***pression" | "PipelineBareFunction" | "PipelinePrimaryTopicReference" | "PipelineTopicE***REMOVED***pression" | "Placeholder" | "PrivateName" | "Program" | "QualifiedTypeIdentifier" | "RecordE***REMOVED***pression" | "RegE***REMOVED***pLiteral" | "Rege***REMOVED***Literal" | "RestElement" | "RestProperty" | "ReturnStatement" | "SequenceE***REMOVED***pression" | "SpreadElement" | "SpreadProperty" | "StaticBlock" | "StringLiteral" | "StringLiteralTypeAnnotation" | "StringTypeAnnotation" | "Super" | "SwitchCase" | "SwitchStatement" | "SymbolTypeAnnotation" | "TSAnyKeyword" | "TSArrayType" | "TSAsE***REMOVED***pression" | "TSBigIntKeyword" | "TSBooleanKeyword" | "TSCallSignatureDeclaration" | "TSConditionalType" | "TSConstructSignatureDeclaration" | "TSConstructorType" | "TSDeclareFunction" | "TSDeclareMethod" | "TSEnumDeclaration" | "TSEnumMember" | "TSE***REMOVED***portAssignment" | "TSE***REMOVED***pressionWithTypeArguments" | "TSE***REMOVED***ternalModuleReference" | "TSFunctionType" | "TSImportEqualsDeclaration" | "TSImportType" | "TSInde***REMOVED***Signature" | "TSInde***REMOVED***edAccessType" | "TSInferType" | "TSInstantiationE***REMOVED***pression" | "TSInterfaceBody" | "TSInterfaceDeclaration" | "TSIntersectionType" | "TSIntrinsicKeyword" | "TSLiteralType" | "TSMappedType" | "TSMethodSignature" | "TSModuleBlock" | "TSModuleDeclaration" | "TSNamedTupleMember" | "TSNamespaceE***REMOVED***portDeclaration" | "TSNeverKeyword" | "TSNonNullE***REMOVED***pression" | "TSNullKeyword" | "TSNumberKeyword" | "TSObjectKeyword" | "TSOptionalType" | "TSParameterProperty" | "TSParenthesizedType" | "TSPropertySignature" | "TSQualifiedName" | "TSRestType" | "TSSatisfiesE***REMOVED***pression" | "TSStringKeyword" | "TSSymbolKeyword" | "TSThisType" | "TSTupleType" | "TSTypeAliasDeclaration" | "TSTypeAnnotation" | "TSTypeAssertion" | "TSTypeLiteral" | "TSTypeOperator" | "TSTypeParameter" | "TSTypeParameterDeclaration" | "TSTypeParameterInstantiation" | "TSTypePredicate" | "TSTypeQuery" | "TSTypeReference" | "TSUndefinedKeyword" | "TSUnionType" | "TSUnknownKeyword" | "TSVoidKeyword" | "TaggedTemplateE***REMOVED***pression" | "TemplateElement" | "TemplateLiteral" | "ThisE***REMOVED***pression" | "ThisTypeAnnotation" | "ThrowStatement" | "TopicReference" | "TryStatement" | "TupleE***REMOVED***pression" | "TupleTypeAnnotation" | "TypeAlias" | "TypeAnnotation" | "TypeCastE***REMOVED***pression" | "TypeParameter" | "TypeParameterDeclaration" | "TypeParameterInstantiation" | "TypeofTypeAnnotation" | "UnaryE***REMOVED***pression" | "UnionTypeAnnotation" | "UpdateE***REMOVED***pression" | "V8IntrinsicIdentifier" | "VariableDeclaration" | "VariableDeclarator" | "Variance" | "VoidTypeAnnotation" | "WhileStatement" | "WithStatement" | "YieldE***REMOVED***pression" | keyof Aliases)[];
declare const UNARYLIKE_TYPES: ("AnyTypeAnnotation" | "ArgumentPlaceholder" | "ArrayE***REMOVED***pression" | "ArrayPattern" | "ArrayTypeAnnotation" | "ArrowFunctionE***REMOVED***pression" | "AssignmentE***REMOVED***pression" | "AssignmentPattern" | "AwaitE***REMOVED***pression" | "BigIntLiteral" | "BinaryE***REMOVED***pression" | "BindE***REMOVED***pression" | "BlockStatement" | "BooleanLiteral" | "BooleanLiteralTypeAnnotation" | "BooleanTypeAnnotation" | "BreakStatement" | "CallE***REMOVED***pression" | "CatchClause" | "ClassAccessorProperty" | "ClassBody" | "ClassDeclaration" | "ClassE***REMOVED***pression" | "ClassImplements" | "ClassMethod" | "ClassPrivateMethod" | "ClassPrivateProperty" | "ClassProperty" | "ConditionalE***REMOVED***pression" | "ContinueStatement" | "DebuggerStatement" | "DecimalLiteral" | "DeclareClass" | "DeclareE***REMOVED***portAllDeclaration" | "DeclareE***REMOVED***portDeclaration" | "DeclareFunction" | "DeclareInterface" | "DeclareModule" | "DeclareModuleE***REMOVED***ports" | "DeclareOpaqueType" | "DeclareTypeAlias" | "DeclareVariable" | "DeclaredPredicate" | "Decorator" | "Directive" | "DirectiveLiteral" | "DoE***REMOVED***pression" | "DoWhileStatement" | "EmptyStatement" | "EmptyTypeAnnotation" | "EnumBooleanBody" | "EnumBooleanMember" | "EnumDeclaration" | "EnumDefaultedMember" | "EnumNumberBody" | "EnumNumberMember" | "EnumStringBody" | "EnumStringMember" | "EnumSymbolBody" | "E***REMOVED***istsTypeAnnotation" | "E***REMOVED***portAllDeclaration" | "E***REMOVED***portDefaultDeclaration" | "E***REMOVED***portDefaultSpecifier" | "E***REMOVED***portNamedDeclaration" | "E***REMOVED***portNamespaceSpecifier" | "E***REMOVED***portSpecifier" | "E***REMOVED***pressionStatement" | "File" | "ForInStatement" | "ForOfStatement" | "ForStatement" | "FunctionDeclaration" | "FunctionE***REMOVED***pression" | "FunctionTypeAnnotation" | "FunctionTypeParam" | "GenericTypeAnnotation" | "Identifier" | "IfStatement" | "Import" | "ImportAttribute" | "ImportDeclaration" | "ImportDefaultSpecifier" | "ImportE***REMOVED***pression" | "ImportNamespaceSpecifier" | "ImportSpecifier" | "Inde***REMOVED***edAccessType" | "InferredPredicate" | "InterfaceDeclaration" | "InterfaceE***REMOVED***tends" | "InterfaceTypeAnnotation" | "InterpreterDirective" | "IntersectionTypeAnnotation" | "JSXAttribute" | "JSXClosingElement" | "JSXClosingFragment" | "JSXElement" | "JSXEmptyE***REMOVED***pression" | "JSXE***REMOVED***pressionContainer" | "JSXFragment" | "JSXIdentifier" | "JSXMemberE***REMOVED***pression" | "JSXNamespacedName" | "JSXOpeningElement" | "JSXOpeningFragment" | "JSXSpreadAttribute" | "JSXSpreadChild" | "JSXTe***REMOVED***t" | "LabeledStatement" | "LogicalE***REMOVED***pression" | "MemberE***REMOVED***pression" | "MetaProperty" | "Mi***REMOVED***edTypeAnnotation" | "ModuleE***REMOVED***pression" | "NewE***REMOVED***pression" | "Noop" | "NullLiteral" | "NullLiteralTypeAnnotation" | "NullableTypeAnnotation" | "NumberLiteral" | "NumberLiteralTypeAnnotation" | "NumberTypeAnnotation" | "NumericLiteral" | "ObjectE***REMOVED***pression" | "ObjectMethod" | "ObjectPattern" | "ObjectProperty" | "ObjectTypeAnnotation" | "ObjectTypeCallProperty" | "ObjectTypeInde***REMOVED***er" | "ObjectTypeInternalSlot" | "ObjectTypeProperty" | "ObjectTypeSpreadProperty" | "OpaqueType" | "OptionalCallE***REMOVED***pression" | "OptionalInde***REMOVED***edAccessType" | "OptionalMemberE***REMOVED***pression" | "ParenthesizedE***REMOVED***pression" | "PipelineBareFunction" | "PipelinePrimaryTopicReference" | "PipelineTopicE***REMOVED***pression" | "Placeholder" | "PrivateName" | "Program" | "QualifiedTypeIdentifier" | "RecordE***REMOVED***pression" | "RegE***REMOVED***pLiteral" | "Rege***REMOVED***Literal" | "RestElement" | "RestProperty" | "ReturnStatement" | "SequenceE***REMOVED***pression" | "SpreadElement" | "SpreadProperty" | "StaticBlock" | "StringLiteral" | "StringLiteralTypeAnnotation" | "StringTypeAnnotation" | "Super" | "SwitchCase" | "SwitchStatement" | "SymbolTypeAnnotation" | "TSAnyKeyword" | "TSArrayType" | "TSAsE***REMOVED***pression" | "TSBigIntKeyword" | "TSBooleanKeyword" | "TSCallSignatureDeclaration" | "TSConditionalType" | "TSConstructSignatureDeclaration" | "TSConstructorType" | "TSDeclareFunction" | "TSDeclareMethod" | "TSEnumDeclaration" | "TSEnumMember" | "TSE***REMOVED***portAssignment" | "TSE***REMOVED***pressionWithTypeArguments" | "TSE***REMOVED***ternalModuleReference" | "TSFunctionType" | "TSImportEqualsDeclaration" | "TSImportType" | "TSInde***REMOVED***Signature" | "TSInde***REMOVED***edAccessType" | "TSInferType" | "TSInstantiationE***REMOVED***pression" | "TSInterfaceBody" | "TSInterfaceDeclaration" | "TSIntersectionType" | "TSIntrinsicKeyword" | "TSLiteralType" | "TSMappedType" | "TSMethodSignature" | "TSModuleBlock" | "TSModuleDeclaration" | "TSNamedTupleMember" | "TSNamespaceE***REMOVED***portDeclaration" | "TSNeverKeyword" | "TSNonNullE***REMOVED***pression" | "TSNullKeyword" | "TSNumberKeyword" | "TSObjectKeyword" | "TSOptionalType" | "TSParameterProperty" | "TSParenthesizedType" | "TSPropertySignature" | "TSQualifiedName" | "TSRestType" | "TSSatisfiesE***REMOVED***pression" | "TSStringKeyword" | "TSSymbolKeyword" | "TSThisType" | "TSTupleType" | "TSTypeAliasDeclaration" | "TSTypeAnnotation" | "TSTypeAssertion" | "TSTypeLiteral" | "TSTypeOperator" | "TSTypeParameter" | "TSTypeParameterDeclaration" | "TSTypeParameterInstantiation" | "TSTypePredicate" | "TSTypeQuery" | "TSTypeReference" | "TSUndefinedKeyword" | "TSUnionType" | "TSUnknownKeyword" | "TSVoidKeyword" | "TaggedTemplateE***REMOVED***pression" | "TemplateElement" | "TemplateLiteral" | "ThisE***REMOVED***pression" | "ThisTypeAnnotation" | "ThrowStatement" | "TopicReference" | "TryStatement" | "TupleE***REMOVED***pression" | "TupleTypeAnnotation" | "TypeAlias" | "TypeAnnotation" | "TypeCastE***REMOVED***pression" | "TypeParameter" | "TypeParameterDeclaration" | "TypeParameterInstantiation" | "TypeofTypeAnnotation" | "UnaryE***REMOVED***pression" | "UnionTypeAnnotation" | "UpdateE***REMOVED***pression" | "V8IntrinsicIdentifier" | "VariableDeclaration" | "VariableDeclarator" | "Variance" | "VoidTypeAnnotation" | "WhileStatement" | "WithStatement" | "YieldE***REMOVED***pression" | keyof Aliases)[];
declare const PATTERN_TYPES: ("AnyTypeAnnotation" | "ArgumentPlaceholder" | "ArrayE***REMOVED***pression" | "ArrayPattern" | "ArrayTypeAnnotation" | "ArrowFunctionE***REMOVED***pression" | "AssignmentE***REMOVED***pression" | "AssignmentPattern" | "AwaitE***REMOVED***pression" | "BigIntLiteral" | "BinaryE***REMOVED***pression" | "BindE***REMOVED***pression" | "BlockStatement" | "BooleanLiteral" | "BooleanLiteralTypeAnnotation" | "BooleanTypeAnnotation" | "BreakStatement" | "CallE***REMOVED***pression" | "CatchClause" | "ClassAccessorProperty" | "ClassBody" | "ClassDeclaration" | "ClassE***REMOVED***pression" | "ClassImplements" | "ClassMethod" | "ClassPrivateMethod" | "ClassPrivateProperty" | "ClassProperty" | "ConditionalE***REMOVED***pression" | "ContinueStatement" | "DebuggerStatement" | "DecimalLiteral" | "DeclareClass" | "DeclareE***REMOVED***portAllDeclaration" | "DeclareE***REMOVED***portDeclaration" | "DeclareFunction" | "DeclareInterface" | "DeclareModule" | "DeclareModuleE***REMOVED***ports" | "DeclareOpaqueType" | "DeclareTypeAlias" | "DeclareVariable" | "DeclaredPredicate" | "Decorator" | "Directive" | "DirectiveLiteral" | "DoE***REMOVED***pression" | "DoWhileStatement" | "EmptyStatement" | "EmptyTypeAnnotation" | "EnumBooleanBody" | "EnumBooleanMember" | "EnumDeclaration" | "EnumDefaultedMember" | "EnumNumberBody" | "EnumNumberMember" | "EnumStringBody" | "EnumStringMember" | "EnumSymbolBody" | "E***REMOVED***istsTypeAnnotation" | "E***REMOVED***portAllDeclaration" | "E***REMOVED***portDefaultDeclaration" | "E***REMOVED***portDefaultSpecifier" | "E***REMOVED***portNamedDeclaration" | "E***REMOVED***portNamespaceSpecifier" | "E***REMOVED***portSpecifier" | "E***REMOVED***pressionStatement" | "File" | "ForInStatement" | "ForOfStatement" | "ForStatement" | "FunctionDeclaration" | "FunctionE***REMOVED***pression" | "FunctionTypeAnnotation" | "FunctionTypeParam" | "GenericTypeAnnotation" | "Identifier" | "IfStatement" | "Import" | "ImportAttribute" | "ImportDeclaration" | "ImportDefaultSpecifier" | "ImportE***REMOVED***pression" | "ImportNamespaceSpecifier" | "ImportSpecifier" | "Inde***REMOVED***edAccessType" | "InferredPredicate" | "InterfaceDeclaration" | "InterfaceE***REMOVED***tends" | "InterfaceTypeAnnotation" | "InterpreterDirective" | "IntersectionTypeAnnotation" | "JSXAttribute" | "JSXClosingElement" | "JSXClosingFragment" | "JSXElement" | "JSXEmptyE***REMOVED***pression" | "JSXE***REMOVED***pressionContainer" | "JSXFragment" | "JSXIdentifier" | "JSXMemberE***REMOVED***pression" | "JSXNamespacedName" | "JSXOpeningElement" | "JSXOpeningFragment" | "JSXSpreadAttribute" | "JSXSpreadChild" | "JSXTe***REMOVED***t" | "LabeledStatement" | "LogicalE***REMOVED***pression" | "MemberE***REMOVED***pression" | "MetaProperty" | "Mi***REMOVED***edTypeAnnotation" | "ModuleE***REMOVED***pression" | "NewE***REMOVED***pression" | "Noop" | "NullLiteral" | "NullLiteralTypeAnnotation" | "NullableTypeAnnotation" | "NumberLiteral" | "NumberLiteralTypeAnnotation" | "NumberTypeAnnotation" | "NumericLiteral" | "ObjectE***REMOVED***pression" | "ObjectMethod" | "ObjectPattern" | "ObjectProperty" | "ObjectTypeAnnotation" | "ObjectTypeCallProperty" | "ObjectTypeInde***REMOVED***er" | "ObjectTypeInternalSlot" | "ObjectTypeProperty" | "ObjectTypeSpreadProperty" | "OpaqueType" | "OptionalCallE***REMOVED***pression" | "OptionalInde***REMOVED***edAccessType" | "OptionalMemberE***REMOVED***pression" | "ParenthesizedE***REMOVED***pression" | "PipelineBareFunction" | "PipelinePrimaryTopicReference" | "PipelineTopicE***REMOVED***pression" | "Placeholder" | "PrivateName" | "Program" | "QualifiedTypeIdentifier" | "RecordE***REMOVED***pression" | "RegE***REMOVED***pLiteral" | "Rege***REMOVED***Literal" | "RestElement" | "RestProperty" | "ReturnStatement" | "SequenceE***REMOVED***pression" | "SpreadElement" | "SpreadProperty" | "StaticBlock" | "StringLiteral" | "StringLiteralTypeAnnotation" | "StringTypeAnnotation" | "Super" | "SwitchCase" | "SwitchStatement" | "SymbolTypeAnnotation" | "TSAnyKeyword" | "TSArrayType" | "TSAsE***REMOVED***pression" | "TSBigIntKeyword" | "TSBooleanKeyword" | "TSCallSignatureDeclaration" | "TSConditionalType" | "TSConstructSignatureDeclaration" | "TSConstructorType" | "TSDeclareFunction" | "TSDeclareMethod" | "TSEnumDeclaration" | "TSEnumMember" | "TSE***REMOVED***portAssignment" | "TSE***REMOVED***pressionWithTypeArguments" | "TSE***REMOVED***ternalModuleReference" | "TSFunctionType" | "TSImportEqualsDeclaration" | "TSImportType" | "TSInde***REMOVED***Signature" | "TSInde***REMOVED***edAccessType" | "TSInferType" | "TSInstantiationE***REMOVED***pression" | "TSInterfaceBody" | "TSInterfaceDeclaration" | "TSIntersectionType" | "TSIntrinsicKeyword" | "TSLiteralType" | "TSMappedType" | "TSMethodSignature" | "TSModuleBlock" | "TSModuleDeclaration" | "TSNamedTupleMember" | "TSNamespaceE***REMOVED***portDeclaration" | "TSNeverKeyword" | "TSNonNullE***REMOVED***pression" | "TSNullKeyword" | "TSNumberKeyword" | "TSObjectKeyword" | "TSOptionalType" | "TSParameterProperty" | "TSParenthesizedType" | "TSPropertySignature" | "TSQualifiedName" | "TSRestType" | "TSSatisfiesE***REMOVED***pression" | "TSStringKeyword" | "TSSymbolKeyword" | "TSThisType" | "TSTupleType" | "TSTypeAliasDeclaration" | "TSTypeAnnotation" | "TSTypeAssertion" | "TSTypeLiteral" | "TSTypeOperator" | "TSTypeParameter" | "TSTypeParameterDeclaration" | "TSTypeParameterInstantiation" | "TSTypePredicate" | "TSTypeQuery" | "TSTypeReference" | "TSUndefinedKeyword" | "TSUnionType" | "TSUnknownKeyword" | "TSVoidKeyword" | "TaggedTemplateE***REMOVED***pression" | "TemplateElement" | "TemplateLiteral" | "ThisE***REMOVED***pression" | "ThisTypeAnnotation" | "ThrowStatement" | "TopicReference" | "TryStatement" | "TupleE***REMOVED***pression" | "TupleTypeAnnotation" | "TypeAlias" | "TypeAnnotation" | "TypeCastE***REMOVED***pression" | "TypeParameter" | "TypeParameterDeclaration" | "TypeParameterInstantiation" | "TypeofTypeAnnotation" | "UnaryE***REMOVED***pression" | "UnionTypeAnnotation" | "UpdateE***REMOVED***pression" | "V8IntrinsicIdentifier" | "VariableDeclaration" | "VariableDeclarator" | "Variance" | "VoidTypeAnnotation" | "WhileStatement" | "WithStatement" | "YieldE***REMOVED***pression" | keyof Aliases)[];
declare const CLASS_TYPES: ("AnyTypeAnnotation" | "ArgumentPlaceholder" | "ArrayE***REMOVED***pression" | "ArrayPattern" | "ArrayTypeAnnotation" | "ArrowFunctionE***REMOVED***pression" | "AssignmentE***REMOVED***pression" | "AssignmentPattern" | "AwaitE***REMOVED***pression" | "BigIntLiteral" | "BinaryE***REMOVED***pression" | "BindE***REMOVED***pression" | "BlockStatement" | "BooleanLiteral" | "BooleanLiteralTypeAnnotation" | "BooleanTypeAnnotation" | "BreakStatement" | "CallE***REMOVED***pression" | "CatchClause" | "ClassAccessorProperty" | "ClassBody" | "ClassDeclaration" | "ClassE***REMOVED***pression" | "ClassImplements" | "ClassMethod" | "ClassPrivateMethod" | "ClassPrivateProperty" | "ClassProperty" | "ConditionalE***REMOVED***pression" | "ContinueStatement" | "DebuggerStatement" | "DecimalLiteral" | "DeclareClass" | "DeclareE***REMOVED***portAllDeclaration" | "DeclareE***REMOVED***portDeclaration" | "DeclareFunction" | "DeclareInterface" | "DeclareModule" | "DeclareModuleE***REMOVED***ports" | "DeclareOpaqueType" | "DeclareTypeAlias" | "DeclareVariable" | "DeclaredPredicate" | "Decorator" | "Directive" | "DirectiveLiteral" | "DoE***REMOVED***pression" | "DoWhileStatement" | "EmptyStatement" | "EmptyTypeAnnotation" | "EnumBooleanBody" | "EnumBooleanMember" | "EnumDeclaration" | "EnumDefaultedMember" | "EnumNumberBody" | "EnumNumberMember" | "EnumStringBody" | "EnumStringMember" | "EnumSymbolBody" | "E***REMOVED***istsTypeAnnotation" | "E***REMOVED***portAllDeclaration" | "E***REMOVED***portDefaultDeclaration" | "E***REMOVED***portDefaultSpecifier" | "E***REMOVED***portNamedDeclaration" | "E***REMOVED***portNamespaceSpecifier" | "E***REMOVED***portSpecifier" | "E***REMOVED***pressionStatement" | "File" | "ForInStatement" | "ForOfStatement" | "ForStatement" | "FunctionDeclaration" | "FunctionE***REMOVED***pression" | "FunctionTypeAnnotation" | "FunctionTypeParam" | "GenericTypeAnnotation" | "Identifier" | "IfStatement" | "Import" | "ImportAttribute" | "ImportDeclaration" | "ImportDefaultSpecifier" | "ImportE***REMOVED***pression" | "ImportNamespaceSpecifier" | "ImportSpecifier" | "Inde***REMOVED***edAccessType" | "InferredPredicate" | "InterfaceDeclaration" | "InterfaceE***REMOVED***tends" | "InterfaceTypeAnnotation" | "InterpreterDirective" | "IntersectionTypeAnnotation" | "JSXAttribute" | "JSXClosingElement" | "JSXClosingFragment" | "JSXElement" | "JSXEmptyE***REMOVED***pression" | "JSXE***REMOVED***pressionContainer" | "JSXFragment" | "JSXIdentifier" | "JSXMemberE***REMOVED***pression" | "JSXNamespacedName" | "JSXOpeningElement" | "JSXOpeningFragment" | "JSXSpreadAttribute" | "JSXSpreadChild" | "JSXTe***REMOVED***t" | "LabeledStatement" | "LogicalE***REMOVED***pression" | "MemberE***REMOVED***pression" | "MetaProperty" | "Mi***REMOVED***edTypeAnnotation" | "ModuleE***REMOVED***pression" | "NewE***REMOVED***pression" | "Noop" | "NullLiteral" | "NullLiteralTypeAnnotation" | "NullableTypeAnnotation" | "NumberLiteral" | "NumberLiteralTypeAnnotation" | "NumberTypeAnnotation" | "NumericLiteral" | "ObjectE***REMOVED***pression" | "ObjectMethod" | "ObjectPattern" | "ObjectProperty" | "ObjectTypeAnnotation" | "ObjectTypeCallProperty" | "ObjectTypeInde***REMOVED***er" | "ObjectTypeInternalSlot" | "ObjectTypeProperty" | "ObjectTypeSpreadProperty" | "OpaqueType" | "OptionalCallE***REMOVED***pression" | "OptionalInde***REMOVED***edAccessType" | "OptionalMemberE***REMOVED***pression" | "ParenthesizedE***REMOVED***pression" | "PipelineBareFunction" | "PipelinePrimaryTopicReference" | "PipelineTopicE***REMOVED***pression" | "Placeholder" | "PrivateName" | "Program" | "QualifiedTypeIdentifier" | "RecordE***REMOVED***pression" | "RegE***REMOVED***pLiteral" | "Rege***REMOVED***Literal" | "RestElement" | "RestProperty" | "ReturnStatement" | "SequenceE***REMOVED***pression" | "SpreadElement" | "SpreadProperty" | "StaticBlock" | "StringLiteral" | "StringLiteralTypeAnnotation" | "StringTypeAnnotation" | "Super" | "SwitchCase" | "SwitchStatement" | "SymbolTypeAnnotation" | "TSAnyKeyword" | "TSArrayType" | "TSAsE***REMOVED***pression" | "TSBigIntKeyword" | "TSBooleanKeyword" | "TSCallSignatureDeclaration" | "TSConditionalType" | "TSConstructSignatureDeclaration" | "TSConstructorType" | "TSDeclareFunction" | "TSDeclareMethod" | "TSEnumDeclaration" | "TSEnumMember" | "TSE***REMOVED***portAssignment" | "TSE***REMOVED***pressionWithTypeArguments" | "TSE***REMOVED***ternalModuleReference" | "TSFunctionType" | "TSImportEqualsDeclaration" | "TSImportType" | "TSInde***REMOVED***Signature" | "TSInde***REMOVED***edAccessType" | "TSInferType" | "TSInstantiationE***REMOVED***pression" | "TSInterfaceBody" | "TSInterfaceDeclaration" | "TSIntersectionType" | "TSIntrinsicKeyword" | "TSLiteralType" | "TSMappedType" | "TSMethodSignature" | "TSModuleBlock" | "TSModuleDeclaration" | "TSNamedTupleMember" | "TSNamespaceE***REMOVED***portDeclaration" | "TSNeverKeyword" | "TSNonNullE***REMOVED***pression" | "TSNullKeyword" | "TSNumberKeyword" | "TSObjectKeyword" | "TSOptionalType" | "TSParameterProperty" | "TSParenthesizedType" | "TSPropertySignature" | "TSQualifiedName" | "TSRestType" | "TSSatisfiesE***REMOVED***pression" | "TSStringKeyword" | "TSSymbolKeyword" | "TSThisType" | "TSTupleType" | "TSTypeAliasDeclaration" | "TSTypeAnnotation" | "TSTypeAssertion" | "TSTypeLiteral" | "TSTypeOperator" | "TSTypeParameter" | "TSTypeParameterDeclaration" | "TSTypeParameterInstantiation" | "TSTypePredicate" | "TSTypeQuery" | "TSTypeReference" | "TSUndefinedKeyword" | "TSUnionType" | "TSUnknownKeyword" | "TSVoidKeyword" | "TaggedTemplateE***REMOVED***pression" | "TemplateElement" | "TemplateLiteral" | "ThisE***REMOVED***pression" | "ThisTypeAnnotation" | "ThrowStatement" | "TopicReference" | "TryStatement" | "TupleE***REMOVED***pression" | "TupleTypeAnnotation" | "TypeAlias" | "TypeAnnotation" | "TypeCastE***REMOVED***pression" | "TypeParameter" | "TypeParameterDeclaration" | "TypeParameterInstantiation" | "TypeofTypeAnnotation" | "UnaryE***REMOVED***pression" | "UnionTypeAnnotation" | "UpdateE***REMOVED***pression" | "V8IntrinsicIdentifier" | "VariableDeclaration" | "VariableDeclarator" | "Variance" | "VoidTypeAnnotation" | "WhileStatement" | "WithStatement" | "YieldE***REMOVED***pression" | keyof Aliases)[];
declare const IMPORTOREXPORTDECLARATION_TYPES: ("AnyTypeAnnotation" | "ArgumentPlaceholder" | "ArrayE***REMOVED***pression" | "ArrayPattern" | "ArrayTypeAnnotation" | "ArrowFunctionE***REMOVED***pression" | "AssignmentE***REMOVED***pression" | "AssignmentPattern" | "AwaitE***REMOVED***pression" | "BigIntLiteral" | "BinaryE***REMOVED***pression" | "BindE***REMOVED***pression" | "BlockStatement" | "BooleanLiteral" | "BooleanLiteralTypeAnnotation" | "BooleanTypeAnnotation" | "BreakStatement" | "CallE***REMOVED***pression" | "CatchClause" | "ClassAccessorProperty" | "ClassBody" | "ClassDeclaration" | "ClassE***REMOVED***pression" | "ClassImplements" | "ClassMethod" | "ClassPrivateMethod" | "ClassPrivateProperty" | "ClassProperty" | "ConditionalE***REMOVED***pression" | "ContinueStatement" | "DebuggerStatement" | "DecimalLiteral" | "DeclareClass" | "DeclareE***REMOVED***portAllDeclaration" | "DeclareE***REMOVED***portDeclaration" | "DeclareFunction" | "DeclareInterface" | "DeclareModule" | "DeclareModuleE***REMOVED***ports" | "DeclareOpaqueType" | "DeclareTypeAlias" | "DeclareVariable" | "DeclaredPredicate" | "Decorator" | "Directive" | "DirectiveLiteral" | "DoE***REMOVED***pression" | "DoWhileStatement" | "EmptyStatement" | "EmptyTypeAnnotation" | "EnumBooleanBody" | "EnumBooleanMember" | "EnumDeclaration" | "EnumDefaultedMember" | "EnumNumberBody" | "EnumNumberMember" | "EnumStringBody" | "EnumStringMember" | "EnumSymbolBody" | "E***REMOVED***istsTypeAnnotation" | "E***REMOVED***portAllDeclaration" | "E***REMOVED***portDefaultDeclaration" | "E***REMOVED***portDefaultSpecifier" | "E***REMOVED***portNamedDeclaration" | "E***REMOVED***portNamespaceSpecifier" | "E***REMOVED***portSpecifier" | "E***REMOVED***pressionStatement" | "File" | "ForInStatement" | "ForOfStatement" | "ForStatement" | "FunctionDeclaration" | "FunctionE***REMOVED***pression" | "FunctionTypeAnnotation" | "FunctionTypeParam" | "GenericTypeAnnotation" | "Identifier" | "IfStatement" | "Import" | "ImportAttribute" | "ImportDeclaration" | "ImportDefaultSpecifier" | "ImportE***REMOVED***pression" | "ImportNamespaceSpecifier" | "ImportSpecifier" | "Inde***REMOVED***edAccessType" | "InferredPredicate" | "InterfaceDeclaration" | "InterfaceE***REMOVED***tends" | "InterfaceTypeAnnotation" | "InterpreterDirective" | "IntersectionTypeAnnotation" | "JSXAttribute" | "JSXClosingElement" | "JSXClosingFragment" | "JSXElement" | "JSXEmptyE***REMOVED***pression" | "JSXE***REMOVED***pressionContainer" | "JSXFragment" | "JSXIdentifier" | "JSXMemberE***REMOVED***pression" | "JSXNamespacedName" | "JSXOpeningElement" | "JSXOpeningFragment" | "JSXSpreadAttribute" | "JSXSpreadChild" | "JSXTe***REMOVED***t" | "LabeledStatement" | "LogicalE***REMOVED***pression" | "MemberE***REMOVED***pression" | "MetaProperty" | "Mi***REMOVED***edTypeAnnotation" | "ModuleE***REMOVED***pression" | "NewE***REMOVED***pression" | "Noop" | "NullLiteral" | "NullLiteralTypeAnnotation" | "NullableTypeAnnotation" | "NumberLiteral" | "NumberLiteralTypeAnnotation" | "NumberTypeAnnotation" | "NumericLiteral" | "ObjectE***REMOVED***pression" | "ObjectMethod" | "ObjectPattern" | "ObjectProperty" | "ObjectTypeAnnotation" | "ObjectTypeCallProperty" | "ObjectTypeInde***REMOVED***er" | "ObjectTypeInternalSlot" | "ObjectTypeProperty" | "ObjectTypeSpreadProperty" | "OpaqueType" | "OptionalCallE***REMOVED***pression" | "OptionalInde***REMOVED***edAccessType" | "OptionalMemberE***REMOVED***pression" | "ParenthesizedE***REMOVED***pression" | "PipelineBareFunction" | "PipelinePrimaryTopicReference" | "PipelineTopicE***REMOVED***pression" | "Placeholder" | "PrivateName" | "Program" | "QualifiedTypeIdentifier" | "RecordE***REMOVED***pression" | "RegE***REMOVED***pLiteral" | "Rege***REMOVED***Literal" | "RestElement" | "RestProperty" | "ReturnStatement" | "SequenceE***REMOVED***pression" | "SpreadElement" | "SpreadProperty" | "StaticBlock" | "StringLiteral" | "StringLiteralTypeAnnotation" | "StringTypeAnnotation" | "Super" | "SwitchCase" | "SwitchStatement" | "SymbolTypeAnnotation" | "TSAnyKeyword" | "TSArrayType" | "TSAsE***REMOVED***pression" | "TSBigIntKeyword" | "TSBooleanKeyword" | "TSCallSignatureDeclaration" | "TSConditionalType" | "TSConstructSignatureDeclaration" | "TSConstructorType" | "TSDeclareFunction" | "TSDeclareMethod" | "TSEnumDeclaration" | "TSEnumMember" | "TSE***REMOVED***portAssignment" | "TSE***REMOVED***pressionWithTypeArguments" | "TSE***REMOVED***ternalModuleReference" | "TSFunctionType" | "TSImportEqualsDeclaration" | "TSImportType" | "TSInde***REMOVED***Signature" | "TSInde***REMOVED***edAccessType" | "TSInferType" | "TSInstantiationE***REMOVED***pression" | "TSInterfaceBody" | "TSInterfaceDeclaration" | "TSIntersectionType" | "TSIntrinsicKeyword" | "TSLiteralType" | "TSMappedType" | "TSMethodSignature" | "TSModuleBlock" | "TSModuleDeclaration" | "TSNamedTupleMember" | "TSNamespaceE***REMOVED***portDeclaration" | "TSNeverKeyword" | "TSNonNullE***REMOVED***pression" | "TSNullKeyword" | "TSNumberKeyword" | "TSObjectKeyword" | "TSOptionalType" | "TSParameterProperty" | "TSParenthesizedType" | "TSPropertySignature" | "TSQualifiedName" | "TSRestType" | "TSSatisfiesE***REMOVED***pression" | "TSStringKeyword" | "TSSymbolKeyword" | "TSThisType" | "TSTupleType" | "TSTypeAliasDeclaration" | "TSTypeAnnotation" | "TSTypeAssertion" | "TSTypeLiteral" | "TSTypeOperator" | "TSTypeParameter" | "TSTypeParameterDeclaration" | "TSTypeParameterInstantiation" | "TSTypePredicate" | "TSTypeQuery" | "TSTypeReference" | "TSUndefinedKeyword" | "TSUnionType" | "TSUnknownKeyword" | "TSVoidKeyword" | "TaggedTemplateE***REMOVED***pression" | "TemplateElement" | "TemplateLiteral" | "ThisE***REMOVED***pression" | "ThisTypeAnnotation" | "ThrowStatement" | "TopicReference" | "TryStatement" | "TupleE***REMOVED***pression" | "TupleTypeAnnotation" | "TypeAlias" | "TypeAnnotation" | "TypeCastE***REMOVED***pression" | "TypeParameter" | "TypeParameterDeclaration" | "TypeParameterInstantiation" | "TypeofTypeAnnotation" | "UnaryE***REMOVED***pression" | "UnionTypeAnnotation" | "UpdateE***REMOVED***pression" | "V8IntrinsicIdentifier" | "VariableDeclaration" | "VariableDeclarator" | "Variance" | "VoidTypeAnnotation" | "WhileStatement" | "WithStatement" | "YieldE***REMOVED***pression" | keyof Aliases)[];
declare const EXPORTDECLARATION_TYPES: ("AnyTypeAnnotation" | "ArgumentPlaceholder" | "ArrayE***REMOVED***pression" | "ArrayPattern" | "ArrayTypeAnnotation" | "ArrowFunctionE***REMOVED***pression" | "AssignmentE***REMOVED***pression" | "AssignmentPattern" | "AwaitE***REMOVED***pression" | "BigIntLiteral" | "BinaryE***REMOVED***pression" | "BindE***REMOVED***pression" | "BlockStatement" | "BooleanLiteral" | "BooleanLiteralTypeAnnotation" | "BooleanTypeAnnotation" | "BreakStatement" | "CallE***REMOVED***pression" | "CatchClause" | "ClassAccessorProperty" | "ClassBody" | "ClassDeclaration" | "ClassE***REMOVED***pression" | "ClassImplements" | "ClassMethod" | "ClassPrivateMethod" | "ClassPrivateProperty" | "ClassProperty" | "ConditionalE***REMOVED***pression" | "ContinueStatement" | "DebuggerStatement" | "DecimalLiteral" | "DeclareClass" | "DeclareE***REMOVED***portAllDeclaration" | "DeclareE***REMOVED***portDeclaration" | "DeclareFunction" | "DeclareInterface" | "DeclareModule" | "DeclareModuleE***REMOVED***ports" | "DeclareOpaqueType" | "DeclareTypeAlias" | "DeclareVariable" | "DeclaredPredicate" | "Decorator" | "Directive" | "DirectiveLiteral" | "DoE***REMOVED***pression" | "DoWhileStatement" | "EmptyStatement" | "EmptyTypeAnnotation" | "EnumBooleanBody" | "EnumBooleanMember" | "EnumDeclaration" | "EnumDefaultedMember" | "EnumNumberBody" | "EnumNumberMember" | "EnumStringBody" | "EnumStringMember" | "EnumSymbolBody" | "E***REMOVED***istsTypeAnnotation" | "E***REMOVED***portAllDeclaration" | "E***REMOVED***portDefaultDeclaration" | "E***REMOVED***portDefaultSpecifier" | "E***REMOVED***portNamedDeclaration" | "E***REMOVED***portNamespaceSpecifier" | "E***REMOVED***portSpecifier" | "E***REMOVED***pressionStatement" | "File" | "ForInStatement" | "ForOfStatement" | "ForStatement" | "FunctionDeclaration" | "FunctionE***REMOVED***pression" | "FunctionTypeAnnotation" | "FunctionTypeParam" | "GenericTypeAnnotation" | "Identifier" | "IfStatement" | "Import" | "ImportAttribute" | "ImportDeclaration" | "ImportDefaultSpecifier" | "ImportE***REMOVED***pression" | "ImportNamespaceSpecifier" | "ImportSpecifier" | "Inde***REMOVED***edAccessType" | "InferredPredicate" | "InterfaceDeclaration" | "InterfaceE***REMOVED***tends" | "InterfaceTypeAnnotation" | "InterpreterDirective" | "IntersectionTypeAnnotation" | "JSXAttribute" | "JSXClosingElement" | "JSXClosingFragment" | "JSXElement" | "JSXEmptyE***REMOVED***pression" | "JSXE***REMOVED***pressionContainer" | "JSXFragment" | "JSXIdentifier" | "JSXMemberE***REMOVED***pression" | "JSXNamespacedName" | "JSXOpeningElement" | "JSXOpeningFragment" | "JSXSpreadAttribute" | "JSXSpreadChild" | "JSXTe***REMOVED***t" | "LabeledStatement" | "LogicalE***REMOVED***pression" | "MemberE***REMOVED***pression" | "MetaProperty" | "Mi***REMOVED***edTypeAnnotation" | "ModuleE***REMOVED***pression" | "NewE***REMOVED***pression" | "Noop" | "NullLiteral" | "NullLiteralTypeAnnotation" | "NullableTypeAnnotation" | "NumberLiteral" | "NumberLiteralTypeAnnotation" | "NumberTypeAnnotation" | "NumericLiteral" | "ObjectE***REMOVED***pression" | "ObjectMethod" | "ObjectPattern" | "ObjectProperty" | "ObjectTypeAnnotation" | "ObjectTypeCallProperty" | "ObjectTypeInde***REMOVED***er" | "ObjectTypeInternalSlot" | "ObjectTypeProperty" | "ObjectTypeSpreadProperty" | "OpaqueType" | "OptionalCallE***REMOVED***pression" | "OptionalInde***REMOVED***edAccessType" | "OptionalMemberE***REMOVED***pression" | "ParenthesizedE***REMOVED***pression" | "PipelineBareFunction" | "PipelinePrimaryTopicReference" | "PipelineTopicE***REMOVED***pression" | "Placeholder" | "PrivateName" | "Program" | "QualifiedTypeIdentifier" | "RecordE***REMOVED***pression" | "RegE***REMOVED***pLiteral" | "Rege***REMOVED***Literal" | "RestElement" | "RestProperty" | "ReturnStatement" | "SequenceE***REMOVED***pression" | "SpreadElement" | "SpreadProperty" | "StaticBlock" | "StringLiteral" | "StringLiteralTypeAnnotation" | "StringTypeAnnotation" | "Super" | "SwitchCase" | "SwitchStatement" | "SymbolTypeAnnotation" | "TSAnyKeyword" | "TSArrayType" | "TSAsE***REMOVED***pression" | "TSBigIntKeyword" | "TSBooleanKeyword" | "TSCallSignatureDeclaration" | "TSConditionalType" | "TSConstructSignatureDeclaration" | "TSConstructorType" | "TSDeclareFunction" | "TSDeclareMethod" | "TSEnumDeclaration" | "TSEnumMember" | "TSE***REMOVED***portAssignment" | "TSE***REMOVED***pressionWithTypeArguments" | "TSE***REMOVED***ternalModuleReference" | "TSFunctionType" | "TSImportEqualsDeclaration" | "TSImportType" | "TSInde***REMOVED***Signature" | "TSInde***REMOVED***edAccessType" | "TSInferType" | "TSInstantiationE***REMOVED***pression" | "TSInterfaceBody" | "TSInterfaceDeclaration" | "TSIntersectionType" | "TSIntrinsicKeyword" | "TSLiteralType" | "TSMappedType" | "TSMethodSignature" | "TSModuleBlock" | "TSModuleDeclaration" | "TSNamedTupleMember" | "TSNamespaceE***REMOVED***portDeclaration" | "TSNeverKeyword" | "TSNonNullE***REMOVED***pression" | "TSNullKeyword" | "TSNumberKeyword" | "TSObjectKeyword" | "TSOptionalType" | "TSParameterProperty" | "TSParenthesizedType" | "TSPropertySignature" | "TSQualifiedName" | "TSRestType" | "TSSatisfiesE***REMOVED***pression" | "TSStringKeyword" | "TSSymbolKeyword" | "TSThisType" | "TSTupleType" | "TSTypeAliasDeclaration" | "TSTypeAnnotation" | "TSTypeAssertion" | "TSTypeLiteral" | "TSTypeOperator" | "TSTypeParameter" | "TSTypeParameterDeclaration" | "TSTypeParameterInstantiation" | "TSTypePredicate" | "TSTypeQuery" | "TSTypeReference" | "TSUndefinedKeyword" | "TSUnionType" | "TSUnknownKeyword" | "TSVoidKeyword" | "TaggedTemplateE***REMOVED***pression" | "TemplateElement" | "TemplateLiteral" | "ThisE***REMOVED***pression" | "ThisTypeAnnotation" | "ThrowStatement" | "TopicReference" | "TryStatement" | "TupleE***REMOVED***pression" | "TupleTypeAnnotation" | "TypeAlias" | "TypeAnnotation" | "TypeCastE***REMOVED***pression" | "TypeParameter" | "TypeParameterDeclaration" | "TypeParameterInstantiation" | "TypeofTypeAnnotation" | "UnaryE***REMOVED***pression" | "UnionTypeAnnotation" | "UpdateE***REMOVED***pression" | "V8IntrinsicIdentifier" | "VariableDeclaration" | "VariableDeclarator" | "Variance" | "VoidTypeAnnotation" | "WhileStatement" | "WithStatement" | "YieldE***REMOVED***pression" | keyof Aliases)[];
declare const MODULESPECIFIER_TYPES: ("AnyTypeAnnotation" | "ArgumentPlaceholder" | "ArrayE***REMOVED***pression" | "ArrayPattern" | "ArrayTypeAnnotation" | "ArrowFunctionE***REMOVED***pression" | "AssignmentE***REMOVED***pression" | "AssignmentPattern" | "AwaitE***REMOVED***pression" | "BigIntLiteral" | "BinaryE***REMOVED***pression" | "BindE***REMOVED***pression" | "BlockStatement" | "BooleanLiteral" | "BooleanLiteralTypeAnnotation" | "BooleanTypeAnnotation" | "BreakStatement" | "CallE***REMOVED***pression" | "CatchClause" | "ClassAccessorProperty" | "ClassBody" | "ClassDeclaration" | "ClassE***REMOVED***pression" | "ClassImplements" | "ClassMethod" | "ClassPrivateMethod" | "ClassPrivateProperty" | "ClassProperty" | "ConditionalE***REMOVED***pression" | "ContinueStatement" | "DebuggerStatement" | "DecimalLiteral" | "DeclareClass" | "DeclareE***REMOVED***portAllDeclaration" | "DeclareE***REMOVED***portDeclaration" | "DeclareFunction" | "DeclareInterface" | "DeclareModule" | "DeclareModuleE***REMOVED***ports" | "DeclareOpaqueType" | "DeclareTypeAlias" | "DeclareVariable" | "DeclaredPredicate" | "Decorator" | "Directive" | "DirectiveLiteral" | "DoE***REMOVED***pression" | "DoWhileStatement" | "EmptyStatement" | "EmptyTypeAnnotation" | "EnumBooleanBody" | "EnumBooleanMember" | "EnumDeclaration" | "EnumDefaultedMember" | "EnumNumberBody" | "EnumNumberMember" | "EnumStringBody" | "EnumStringMember" | "EnumSymbolBody" | "E***REMOVED***istsTypeAnnotation" | "E***REMOVED***portAllDeclaration" | "E***REMOVED***portDefaultDeclaration" | "E***REMOVED***portDefaultSpecifier" | "E***REMOVED***portNamedDeclaration" | "E***REMOVED***portNamespaceSpecifier" | "E***REMOVED***portSpecifier" | "E***REMOVED***pressionStatement" | "File" | "ForInStatement" | "ForOfStatement" | "ForStatement" | "FunctionDeclaration" | "FunctionE***REMOVED***pression" | "FunctionTypeAnnotation" | "FunctionTypeParam" | "GenericTypeAnnotation" | "Identifier" | "IfStatement" | "Import" | "ImportAttribute" | "ImportDeclaration" | "ImportDefaultSpecifier" | "ImportE***REMOVED***pression" | "ImportNamespaceSpecifier" | "ImportSpecifier" | "Inde***REMOVED***edAccessType" | "InferredPredicate" | "InterfaceDeclaration" | "InterfaceE***REMOVED***tends" | "InterfaceTypeAnnotation" | "InterpreterDirective" | "IntersectionTypeAnnotation" | "JSXAttribute" | "JSXClosingElement" | "JSXClosingFragment" | "JSXElement" | "JSXEmptyE***REMOVED***pression" | "JSXE***REMOVED***pressionContainer" | "JSXFragment" | "JSXIdentifier" | "JSXMemberE***REMOVED***pression" | "JSXNamespacedName" | "JSXOpeningElement" | "JSXOpeningFragment" | "JSXSpreadAttribute" | "JSXSpreadChild" | "JSXTe***REMOVED***t" | "LabeledStatement" | "LogicalE***REMOVED***pression" | "MemberE***REMOVED***pression" | "MetaProperty" | "Mi***REMOVED***edTypeAnnotation" | "ModuleE***REMOVED***pression" | "NewE***REMOVED***pression" | "Noop" | "NullLiteral" | "NullLiteralTypeAnnotation" | "NullableTypeAnnotation" | "NumberLiteral" | "NumberLiteralTypeAnnotation" | "NumberTypeAnnotation" | "NumericLiteral" | "ObjectE***REMOVED***pression" | "ObjectMethod" | "ObjectPattern" | "ObjectProperty" | "ObjectTypeAnnotation" | "ObjectTypeCallProperty" | "ObjectTypeInde***REMOVED***er" | "ObjectTypeInternalSlot" | "ObjectTypeProperty" | "ObjectTypeSpreadProperty" | "OpaqueType" | "OptionalCallE***REMOVED***pression" | "OptionalInde***REMOVED***edAccessType" | "OptionalMemberE***REMOVED***pression" | "ParenthesizedE***REMOVED***pression" | "PipelineBareFunction" | "PipelinePrimaryTopicReference" | "PipelineTopicE***REMOVED***pression" | "Placeholder" | "PrivateName" | "Program" | "QualifiedTypeIdentifier" | "RecordE***REMOVED***pression" | "RegE***REMOVED***pLiteral" | "Rege***REMOVED***Literal" | "RestElement" | "RestProperty" | "ReturnStatement" | "SequenceE***REMOVED***pression" | "SpreadElement" | "SpreadProperty" | "StaticBlock" | "StringLiteral" | "StringLiteralTypeAnnotation" | "StringTypeAnnotation" | "Super" | "SwitchCase" | "SwitchStatement" | "SymbolTypeAnnotation" | "TSAnyKeyword" | "TSArrayType" | "TSAsE***REMOVED***pression" | "TSBigIntKeyword" | "TSBooleanKeyword" | "TSCallSignatureDeclaration" | "TSConditionalType" | "TSConstructSignatureDeclaration" | "TSConstructorType" | "TSDeclareFunction" | "TSDeclareMethod" | "TSEnumDeclaration" | "TSEnumMember" | "TSE***REMOVED***portAssignment" | "TSE***REMOVED***pressionWithTypeArguments" | "TSE***REMOVED***ternalModuleReference" | "TSFunctionType" | "TSImportEqualsDeclaration" | "TSImportType" | "TSInde***REMOVED***Signature" | "TSInde***REMOVED***edAccessType" | "TSInferType" | "TSInstantiationE***REMOVED***pression" | "TSInterfaceBody" | "TSInterfaceDeclaration" | "TSIntersectionType" | "TSIntrinsicKeyword" | "TSLiteralType" | "TSMappedType" | "TSMethodSignature" | "TSModuleBlock" | "TSModuleDeclaration" | "TSNamedTupleMember" | "TSNamespaceE***REMOVED***portDeclaration" | "TSNeverKeyword" | "TSNonNullE***REMOVED***pression" | "TSNullKeyword" | "TSNumberKeyword" | "TSObjectKeyword" | "TSOptionalType" | "TSParameterProperty" | "TSParenthesizedType" | "TSPropertySignature" | "TSQualifiedName" | "TSRestType" | "TSSatisfiesE***REMOVED***pression" | "TSStringKeyword" | "TSSymbolKeyword" | "TSThisType" | "TSTupleType" | "TSTypeAliasDeclaration" | "TSTypeAnnotation" | "TSTypeAssertion" | "TSTypeLiteral" | "TSTypeOperator" | "TSTypeParameter" | "TSTypeParameterDeclaration" | "TSTypeParameterInstantiation" | "TSTypePredicate" | "TSTypeQuery" | "TSTypeReference" | "TSUndefinedKeyword" | "TSUnionType" | "TSUnknownKeyword" | "TSVoidKeyword" | "TaggedTemplateE***REMOVED***pression" | "TemplateElement" | "TemplateLiteral" | "ThisE***REMOVED***pression" | "ThisTypeAnnotation" | "ThrowStatement" | "TopicReference" | "TryStatement" | "TupleE***REMOVED***pression" | "TupleTypeAnnotation" | "TypeAlias" | "TypeAnnotation" | "TypeCastE***REMOVED***pression" | "TypeParameter" | "TypeParameterDeclaration" | "TypeParameterInstantiation" | "TypeofTypeAnnotation" | "UnaryE***REMOVED***pression" | "UnionTypeAnnotation" | "UpdateE***REMOVED***pression" | "V8IntrinsicIdentifier" | "VariableDeclaration" | "VariableDeclarator" | "Variance" | "VoidTypeAnnotation" | "WhileStatement" | "WithStatement" | "YieldE***REMOVED***pression" | keyof Aliases)[];
declare const ACCESSOR_TYPES: ("AnyTypeAnnotation" | "ArgumentPlaceholder" | "ArrayE***REMOVED***pression" | "ArrayPattern" | "ArrayTypeAnnotation" | "ArrowFunctionE***REMOVED***pression" | "AssignmentE***REMOVED***pression" | "AssignmentPattern" | "AwaitE***REMOVED***pression" | "BigIntLiteral" | "BinaryE***REMOVED***pression" | "BindE***REMOVED***pression" | "BlockStatement" | "BooleanLiteral" | "BooleanLiteralTypeAnnotation" | "BooleanTypeAnnotation" | "BreakStatement" | "CallE***REMOVED***pression" | "CatchClause" | "ClassAccessorProperty" | "ClassBody" | "ClassDeclaration" | "ClassE***REMOVED***pression" | "ClassImplements" | "ClassMethod" | "ClassPrivateMethod" | "ClassPrivateProperty" | "ClassProperty" | "ConditionalE***REMOVED***pression" | "ContinueStatement" | "DebuggerStatement" | "DecimalLiteral" | "DeclareClass" | "DeclareE***REMOVED***portAllDeclaration" | "DeclareE***REMOVED***portDeclaration" | "DeclareFunction" | "DeclareInterface" | "DeclareModule" | "DeclareModuleE***REMOVED***ports" | "DeclareOpaqueType" | "DeclareTypeAlias" | "DeclareVariable" | "DeclaredPredicate" | "Decorator" | "Directive" | "DirectiveLiteral" | "DoE***REMOVED***pression" | "DoWhileStatement" | "EmptyStatement" | "EmptyTypeAnnotation" | "EnumBooleanBody" | "EnumBooleanMember" | "EnumDeclaration" | "EnumDefaultedMember" | "EnumNumberBody" | "EnumNumberMember" | "EnumStringBody" | "EnumStringMember" | "EnumSymbolBody" | "E***REMOVED***istsTypeAnnotation" | "E***REMOVED***portAllDeclaration" | "E***REMOVED***portDefaultDeclaration" | "E***REMOVED***portDefaultSpecifier" | "E***REMOVED***portNamedDeclaration" | "E***REMOVED***portNamespaceSpecifier" | "E***REMOVED***portSpecifier" | "E***REMOVED***pressionStatement" | "File" | "ForInStatement" | "ForOfStatement" | "ForStatement" | "FunctionDeclaration" | "FunctionE***REMOVED***pression" | "FunctionTypeAnnotation" | "FunctionTypeParam" | "GenericTypeAnnotation" | "Identifier" | "IfStatement" | "Import" | "ImportAttribute" | "ImportDeclaration" | "ImportDefaultSpecifier" | "ImportE***REMOVED***pression" | "ImportNamespaceSpecifier" | "ImportSpecifier" | "Inde***REMOVED***edAccessType" | "InferredPredicate" | "InterfaceDeclaration" | "InterfaceE***REMOVED***tends" | "InterfaceTypeAnnotation" | "InterpreterDirective" | "IntersectionTypeAnnotation" | "JSXAttribute" | "JSXClosingElement" | "JSXClosingFragment" | "JSXElement" | "JSXEmptyE***REMOVED***pression" | "JSXE***REMOVED***pressionContainer" | "JSXFragment" | "JSXIdentifier" | "JSXMemberE***REMOVED***pression" | "JSXNamespacedName" | "JSXOpeningElement" | "JSXOpeningFragment" | "JSXSpreadAttribute" | "JSXSpreadChild" | "JSXTe***REMOVED***t" | "LabeledStatement" | "LogicalE***REMOVED***pression" | "MemberE***REMOVED***pression" | "MetaProperty" | "Mi***REMOVED***edTypeAnnotation" | "ModuleE***REMOVED***pression" | "NewE***REMOVED***pression" | "Noop" | "NullLiteral" | "NullLiteralTypeAnnotation" | "NullableTypeAnnotation" | "NumberLiteral" | "NumberLiteralTypeAnnotation" | "NumberTypeAnnotation" | "NumericLiteral" | "ObjectE***REMOVED***pression" | "ObjectMethod" | "ObjectPattern" | "ObjectProperty" | "ObjectTypeAnnotation" | "ObjectTypeCallProperty" | "ObjectTypeInde***REMOVED***er" | "ObjectTypeInternalSlot" | "ObjectTypeProperty" | "ObjectTypeSpreadProperty" | "OpaqueType" | "OptionalCallE***REMOVED***pression" | "OptionalInde***REMOVED***edAccessType" | "OptionalMemberE***REMOVED***pression" | "ParenthesizedE***REMOVED***pression" | "PipelineBareFunction" | "PipelinePrimaryTopicReference" | "PipelineTopicE***REMOVED***pression" | "Placeholder" | "PrivateName" | "Program" | "QualifiedTypeIdentifier" | "RecordE***REMOVED***pression" | "RegE***REMOVED***pLiteral" | "Rege***REMOVED***Literal" | "RestElement" | "RestProperty" | "ReturnStatement" | "SequenceE***REMOVED***pression" | "SpreadElement" | "SpreadProperty" | "StaticBlock" | "StringLiteral" | "StringLiteralTypeAnnotation" | "StringTypeAnnotation" | "Super" | "SwitchCase" | "SwitchStatement" | "SymbolTypeAnnotation" | "TSAnyKeyword" | "TSArrayType" | "TSAsE***REMOVED***pression" | "TSBigIntKeyword" | "TSBooleanKeyword" | "TSCallSignatureDeclaration" | "TSConditionalType" | "TSConstructSignatureDeclaration" | "TSConstructorType" | "TSDeclareFunction" | "TSDeclareMethod" | "TSEnumDeclaration" | "TSEnumMember" | "TSE***REMOVED***portAssignment" | "TSE***REMOVED***pressionWithTypeArguments" | "TSE***REMOVED***ternalModuleReference" | "TSFunctionType" | "TSImportEqualsDeclaration" | "TSImportType" | "TSInde***REMOVED***Signature" | "TSInde***REMOVED***edAccessType" | "TSInferType" | "TSInstantiationE***REMOVED***pression" | "TSInterfaceBody" | "TSInterfaceDeclaration" | "TSIntersectionType" | "TSIntrinsicKeyword" | "TSLiteralType" | "TSMappedType" | "TSMethodSignature" | "TSModuleBlock" | "TSModuleDeclaration" | "TSNamedTupleMember" | "TSNamespaceE***REMOVED***portDeclaration" | "TSNeverKeyword" | "TSNonNullE***REMOVED***pression" | "TSNullKeyword" | "TSNumberKeyword" | "TSObjectKeyword" | "TSOptionalType" | "TSParameterProperty" | "TSParenthesizedType" | "TSPropertySignature" | "TSQualifiedName" | "TSRestType" | "TSSatisfiesE***REMOVED***pression" | "TSStringKeyword" | "TSSymbolKeyword" | "TSThisType" | "TSTupleType" | "TSTypeAliasDeclaration" | "TSTypeAnnotation" | "TSTypeAssertion" | "TSTypeLiteral" | "TSTypeOperator" | "TSTypeParameter" | "TSTypeParameterDeclaration" | "TSTypeParameterInstantiation" | "TSTypePredicate" | "TSTypeQuery" | "TSTypeReference" | "TSUndefinedKeyword" | "TSUnionType" | "TSUnknownKeyword" | "TSVoidKeyword" | "TaggedTemplateE***REMOVED***pression" | "TemplateElement" | "TemplateLiteral" | "ThisE***REMOVED***pression" | "ThisTypeAnnotation" | "ThrowStatement" | "TopicReference" | "TryStatement" | "TupleE***REMOVED***pression" | "TupleTypeAnnotation" | "TypeAlias" | "TypeAnnotation" | "TypeCastE***REMOVED***pression" | "TypeParameter" | "TypeParameterDeclaration" | "TypeParameterInstantiation" | "TypeofTypeAnnotation" | "UnaryE***REMOVED***pression" | "UnionTypeAnnotation" | "UpdateE***REMOVED***pression" | "V8IntrinsicIdentifier" | "VariableDeclaration" | "VariableDeclarator" | "Variance" | "VoidTypeAnnotation" | "WhileStatement" | "WithStatement" | "YieldE***REMOVED***pression" | keyof Aliases)[];
declare const PRIVATE_TYPES: ("AnyTypeAnnotation" | "ArgumentPlaceholder" | "ArrayE***REMOVED***pression" | "ArrayPattern" | "ArrayTypeAnnotation" | "ArrowFunctionE***REMOVED***pression" | "AssignmentE***REMOVED***pression" | "AssignmentPattern" | "AwaitE***REMOVED***pression" | "BigIntLiteral" | "BinaryE***REMOVED***pression" | "BindE***REMOVED***pression" | "BlockStatement" | "BooleanLiteral" | "BooleanLiteralTypeAnnotation" | "BooleanTypeAnnotation" | "BreakStatement" | "CallE***REMOVED***pression" | "CatchClause" | "ClassAccessorProperty" | "ClassBody" | "ClassDeclaration" | "ClassE***REMOVED***pression" | "ClassImplements" | "ClassMethod" | "ClassPrivateMethod" | "ClassPrivateProperty" | "ClassProperty" | "ConditionalE***REMOVED***pression" | "ContinueStatement" | "DebuggerStatement" | "DecimalLiteral" | "DeclareClass" | "DeclareE***REMOVED***portAllDeclaration" | "DeclareE***REMOVED***portDeclaration" | "DeclareFunction" | "DeclareInterface" | "DeclareModule" | "DeclareModuleE***REMOVED***ports" | "DeclareOpaqueType" | "DeclareTypeAlias" | "DeclareVariable" | "DeclaredPredicate" | "Decorator" | "Directive" | "DirectiveLiteral" | "DoE***REMOVED***pression" | "DoWhileStatement" | "EmptyStatement" | "EmptyTypeAnnotation" | "EnumBooleanBody" | "EnumBooleanMember" | "EnumDeclaration" | "EnumDefaultedMember" | "EnumNumberBody" | "EnumNumberMember" | "EnumStringBody" | "EnumStringMember" | "EnumSymbolBody" | "E***REMOVED***istsTypeAnnotation" | "E***REMOVED***portAllDeclaration" | "E***REMOVED***portDefaultDeclaration" | "E***REMOVED***portDefaultSpecifier" | "E***REMOVED***portNamedDeclaration" | "E***REMOVED***portNamespaceSpecifier" | "E***REMOVED***portSpecifier" | "E***REMOVED***pressionStatement" | "File" | "ForInStatement" | "ForOfStatement" | "ForStatement" | "FunctionDeclaration" | "FunctionE***REMOVED***pression" | "FunctionTypeAnnotation" | "FunctionTypeParam" | "GenericTypeAnnotation" | "Identifier" | "IfStatement" | "Import" | "ImportAttribute" | "ImportDeclaration" | "ImportDefaultSpecifier" | "ImportE***REMOVED***pression" | "ImportNamespaceSpecifier" | "ImportSpecifier" | "Inde***REMOVED***edAccessType" | "InferredPredicate" | "InterfaceDeclaration" | "InterfaceE***REMOVED***tends" | "InterfaceTypeAnnotation" | "InterpreterDirective" | "IntersectionTypeAnnotation" | "JSXAttribute" | "JSXClosingElement" | "JSXClosingFragment" | "JSXElement" | "JSXEmptyE***REMOVED***pression" | "JSXE***REMOVED***pressionContainer" | "JSXFragment" | "JSXIdentifier" | "JSXMemberE***REMOVED***pression" | "JSXNamespacedName" | "JSXOpeningElement" | "JSXOpeningFragment" | "JSXSpreadAttribute" | "JSXSpreadChild" | "JSXTe***REMOVED***t" | "LabeledStatement" | "LogicalE***REMOVED***pression" | "MemberE***REMOVED***pression" | "MetaProperty" | "Mi***REMOVED***edTypeAnnotation" | "ModuleE***REMOVED***pression" | "NewE***REMOVED***pression" | "Noop" | "NullLiteral" | "NullLiteralTypeAnnotation" | "NullableTypeAnnotation" | "NumberLiteral" | "NumberLiteralTypeAnnotation" | "NumberTypeAnnotation" | "NumericLiteral" | "ObjectE***REMOVED***pression" | "ObjectMethod" | "ObjectPattern" | "ObjectProperty" | "ObjectTypeAnnotation" | "ObjectTypeCallProperty" | "ObjectTypeInde***REMOVED***er" | "ObjectTypeInternalSlot" | "ObjectTypeProperty" | "ObjectTypeSpreadProperty" | "OpaqueType" | "OptionalCallE***REMOVED***pression" | "OptionalInde***REMOVED***edAccessType" | "OptionalMemberE***REMOVED***pression" | "ParenthesizedE***REMOVED***pression" | "PipelineBareFunction" | "PipelinePrimaryTopicReference" | "PipelineTopicE***REMOVED***pression" | "Placeholder" | "PrivateName" | "Program" | "QualifiedTypeIdentifier" | "RecordE***REMOVED***pression" | "RegE***REMOVED***pLiteral" | "Rege***REMOVED***Literal" | "RestElement" | "RestProperty" | "ReturnStatement" | "SequenceE***REMOVED***pression" | "SpreadElement" | "SpreadProperty" | "StaticBlock" | "StringLiteral" | "StringLiteralTypeAnnotation" | "StringTypeAnnotation" | "Super" | "SwitchCase" | "SwitchStatement" | "SymbolTypeAnnotation" | "TSAnyKeyword" | "TSArrayType" | "TSAsE***REMOVED***pression" | "TSBigIntKeyword" | "TSBooleanKeyword" | "TSCallSignatureDeclaration" | "TSConditionalType" | "TSConstructSignatureDeclaration" | "TSConstructorType" | "TSDeclareFunction" | "TSDeclareMethod" | "TSEnumDeclaration" | "TSEnumMember" | "TSE***REMOVED***portAssignment" | "TSE***REMOVED***pressionWithTypeArguments" | "TSE***REMOVED***ternalModuleReference" | "TSFunctionType" | "TSImportEqualsDeclaration" | "TSImportType" | "TSInde***REMOVED***Signature" | "TSInde***REMOVED***edAccessType" | "TSInferType" | "TSInstantiationE***REMOVED***pression" | "TSInterfaceBody" | "TSInterfaceDeclaration" | "TSIntersectionType" | "TSIntrinsicKeyword" | "TSLiteralType" | "TSMappedType" | "TSMethodSignature" | "TSModuleBlock" | "TSModuleDeclaration" | "TSNamedTupleMember" | "TSNamespaceE***REMOVED***portDeclaration" | "TSNeverKeyword" | "TSNonNullE***REMOVED***pression" | "TSNullKeyword" | "TSNumberKeyword" | "TSObjectKeyword" | "TSOptionalType" | "TSParameterProperty" | "TSParenthesizedType" | "TSPropertySignature" | "TSQualifiedName" | "TSRestType" | "TSSatisfiesE***REMOVED***pression" | "TSStringKeyword" | "TSSymbolKeyword" | "TSThisType" | "TSTupleType" | "TSTypeAliasDeclaration" | "TSTypeAnnotation" | "TSTypeAssertion" | "TSTypeLiteral" | "TSTypeOperator" | "TSTypeParameter" | "TSTypeParameterDeclaration" | "TSTypeParameterInstantiation" | "TSTypePredicate" | "TSTypeQuery" | "TSTypeReference" | "TSUndefinedKeyword" | "TSUnionType" | "TSUnknownKeyword" | "TSVoidKeyword" | "TaggedTemplateE***REMOVED***pression" | "TemplateElement" | "TemplateLiteral" | "ThisE***REMOVED***pression" | "ThisTypeAnnotation" | "ThrowStatement" | "TopicReference" | "TryStatement" | "TupleE***REMOVED***pression" | "TupleTypeAnnotation" | "TypeAlias" | "TypeAnnotation" | "TypeCastE***REMOVED***pression" | "TypeParameter" | "TypeParameterDeclaration" | "TypeParameterInstantiation" | "TypeofTypeAnnotation" | "UnaryE***REMOVED***pression" | "UnionTypeAnnotation" | "UpdateE***REMOVED***pression" | "V8IntrinsicIdentifier" | "VariableDeclaration" | "VariableDeclarator" | "Variance" | "VoidTypeAnnotation" | "WhileStatement" | "WithStatement" | "YieldE***REMOVED***pression" | keyof Aliases)[];
declare const FLOW_TYPES: ("AnyTypeAnnotation" | "ArgumentPlaceholder" | "ArrayE***REMOVED***pression" | "ArrayPattern" | "ArrayTypeAnnotation" | "ArrowFunctionE***REMOVED***pression" | "AssignmentE***REMOVED***pression" | "AssignmentPattern" | "AwaitE***REMOVED***pression" | "BigIntLiteral" | "BinaryE***REMOVED***pression" | "BindE***REMOVED***pression" | "BlockStatement" | "BooleanLiteral" | "BooleanLiteralTypeAnnotation" | "BooleanTypeAnnotation" | "BreakStatement" | "CallE***REMOVED***pression" | "CatchClause" | "ClassAccessorProperty" | "ClassBody" | "ClassDeclaration" | "ClassE***REMOVED***pression" | "ClassImplements" | "ClassMethod" | "ClassPrivateMethod" | "ClassPrivateProperty" | "ClassProperty" | "ConditionalE***REMOVED***pression" | "ContinueStatement" | "DebuggerStatement" | "DecimalLiteral" | "DeclareClass" | "DeclareE***REMOVED***portAllDeclaration" | "DeclareE***REMOVED***portDeclaration" | "DeclareFunction" | "DeclareInterface" | "DeclareModule" | "DeclareModuleE***REMOVED***ports" | "DeclareOpaqueType" | "DeclareTypeAlias" | "DeclareVariable" | "DeclaredPredicate" | "Decorator" | "Directive" | "DirectiveLiteral" | "DoE***REMOVED***pression" | "DoWhileStatement" | "EmptyStatement" | "EmptyTypeAnnotation" | "EnumBooleanBody" | "EnumBooleanMember" | "EnumDeclaration" | "EnumDefaultedMember" | "EnumNumberBody" | "EnumNumberMember" | "EnumStringBody" | "EnumStringMember" | "EnumSymbolBody" | "E***REMOVED***istsTypeAnnotation" | "E***REMOVED***portAllDeclaration" | "E***REMOVED***portDefaultDeclaration" | "E***REMOVED***portDefaultSpecifier" | "E***REMOVED***portNamedDeclaration" | "E***REMOVED***portNamespaceSpecifier" | "E***REMOVED***portSpecifier" | "E***REMOVED***pressionStatement" | "File" | "ForInStatement" | "ForOfStatement" | "ForStatement" | "FunctionDeclaration" | "FunctionE***REMOVED***pression" | "FunctionTypeAnnotation" | "FunctionTypeParam" | "GenericTypeAnnotation" | "Identifier" | "IfStatement" | "Import" | "ImportAttribute" | "ImportDeclaration" | "ImportDefaultSpecifier" | "ImportE***REMOVED***pression" | "ImportNamespaceSpecifier" | "ImportSpecifier" | "Inde***REMOVED***edAccessType" | "InferredPredicate" | "InterfaceDeclaration" | "InterfaceE***REMOVED***tends" | "InterfaceTypeAnnotation" | "InterpreterDirective" | "IntersectionTypeAnnotation" | "JSXAttribute" | "JSXClosingElement" | "JSXClosingFragment" | "JSXElement" | "JSXEmptyE***REMOVED***pression" | "JSXE***REMOVED***pressionContainer" | "JSXFragment" | "JSXIdentifier" | "JSXMemberE***REMOVED***pression" | "JSXNamespacedName" | "JSXOpeningElement" | "JSXOpeningFragment" | "JSXSpreadAttribute" | "JSXSpreadChild" | "JSXTe***REMOVED***t" | "LabeledStatement" | "LogicalE***REMOVED***pression" | "MemberE***REMOVED***pression" | "MetaProperty" | "Mi***REMOVED***edTypeAnnotation" | "ModuleE***REMOVED***pression" | "NewE***REMOVED***pression" | "Noop" | "NullLiteral" | "NullLiteralTypeAnnotation" | "NullableTypeAnnotation" | "NumberLiteral" | "NumberLiteralTypeAnnotation" | "NumberTypeAnnotation" | "NumericLiteral" | "ObjectE***REMOVED***pression" | "ObjectMethod" | "ObjectPattern" | "ObjectProperty" | "ObjectTypeAnnotation" | "ObjectTypeCallProperty" | "ObjectTypeInde***REMOVED***er" | "ObjectTypeInternalSlot" | "ObjectTypeProperty" | "ObjectTypeSpreadProperty" | "OpaqueType" | "OptionalCallE***REMOVED***pression" | "OptionalInde***REMOVED***edAccessType" | "OptionalMemberE***REMOVED***pression" | "ParenthesizedE***REMOVED***pression" | "PipelineBareFunction" | "PipelinePrimaryTopicReference" | "PipelineTopicE***REMOVED***pression" | "Placeholder" | "PrivateName" | "Program" | "QualifiedTypeIdentifier" | "RecordE***REMOVED***pression" | "RegE***REMOVED***pLiteral" | "Rege***REMOVED***Literal" | "RestElement" | "RestProperty" | "ReturnStatement" | "SequenceE***REMOVED***pression" | "SpreadElement" | "SpreadProperty" | "StaticBlock" | "StringLiteral" | "StringLiteralTypeAnnotation" | "StringTypeAnnotation" | "Super" | "SwitchCase" | "SwitchStatement" | "SymbolTypeAnnotation" | "TSAnyKeyword" | "TSArrayType" | "TSAsE***REMOVED***pression" | "TSBigIntKeyword" | "TSBooleanKeyword" | "TSCallSignatureDeclaration" | "TSConditionalType" | "TSConstructSignatureDeclaration" | "TSConstructorType" | "TSDeclareFunction" | "TSDeclareMethod" | "TSEnumDeclaration" | "TSEnumMember" | "TSE***REMOVED***portAssignment" | "TSE***REMOVED***pressionWithTypeArguments" | "TSE***REMOVED***ternalModuleReference" | "TSFunctionType" | "TSImportEqualsDeclaration" | "TSImportType" | "TSInde***REMOVED***Signature" | "TSInde***REMOVED***edAccessType" | "TSInferType" | "TSInstantiationE***REMOVED***pression" | "TSInterfaceBody" | "TSInterfaceDeclaration" | "TSIntersectionType" | "TSIntrinsicKeyword" | "TSLiteralType" | "TSMappedType" | "TSMethodSignature" | "TSModuleBlock" | "TSModuleDeclaration" | "TSNamedTupleMember" | "TSNamespaceE***REMOVED***portDeclaration" | "TSNeverKeyword" | "TSNonNullE***REMOVED***pression" | "TSNullKeyword" | "TSNumberKeyword" | "TSObjectKeyword" | "TSOptionalType" | "TSParameterProperty" | "TSParenthesizedType" | "TSPropertySignature" | "TSQualifiedName" | "TSRestType" | "TSSatisfiesE***REMOVED***pression" | "TSStringKeyword" | "TSSymbolKeyword" | "TSThisType" | "TSTupleType" | "TSTypeAliasDeclaration" | "TSTypeAnnotation" | "TSTypeAssertion" | "TSTypeLiteral" | "TSTypeOperator" | "TSTypeParameter" | "TSTypeParameterDeclaration" | "TSTypeParameterInstantiation" | "TSTypePredicate" | "TSTypeQuery" | "TSTypeReference" | "TSUndefinedKeyword" | "TSUnionType" | "TSUnknownKeyword" | "TSVoidKeyword" | "TaggedTemplateE***REMOVED***pression" | "TemplateElement" | "TemplateLiteral" | "ThisE***REMOVED***pression" | "ThisTypeAnnotation" | "ThrowStatement" | "TopicReference" | "TryStatement" | "TupleE***REMOVED***pression" | "TupleTypeAnnotation" | "TypeAlias" | "TypeAnnotation" | "TypeCastE***REMOVED***pression" | "TypeParameter" | "TypeParameterDeclaration" | "TypeParameterInstantiation" | "TypeofTypeAnnotation" | "UnaryE***REMOVED***pression" | "UnionTypeAnnotation" | "UpdateE***REMOVED***pression" | "V8IntrinsicIdentifier" | "VariableDeclaration" | "VariableDeclarator" | "Variance" | "VoidTypeAnnotation" | "WhileStatement" | "WithStatement" | "YieldE***REMOVED***pression" | keyof Aliases)[];
declare const FLOWTYPE_TYPES: ("AnyTypeAnnotation" | "ArgumentPlaceholder" | "ArrayE***REMOVED***pression" | "ArrayPattern" | "ArrayTypeAnnotation" | "ArrowFunctionE***REMOVED***pression" | "AssignmentE***REMOVED***pression" | "AssignmentPattern" | "AwaitE***REMOVED***pression" | "BigIntLiteral" | "BinaryE***REMOVED***pression" | "BindE***REMOVED***pression" | "BlockStatement" | "BooleanLiteral" | "BooleanLiteralTypeAnnotation" | "BooleanTypeAnnotation" | "BreakStatement" | "CallE***REMOVED***pression" | "CatchClause" | "ClassAccessorProperty" | "ClassBody" | "ClassDeclaration" | "ClassE***REMOVED***pression" | "ClassImplements" | "ClassMethod" | "ClassPrivateMethod" | "ClassPrivateProperty" | "ClassProperty" | "ConditionalE***REMOVED***pression" | "ContinueStatement" | "DebuggerStatement" | "DecimalLiteral" | "DeclareClass" | "DeclareE***REMOVED***portAllDeclaration" | "DeclareE***REMOVED***portDeclaration" | "DeclareFunction" | "DeclareInterface" | "DeclareModule" | "DeclareModuleE***REMOVED***ports" | "DeclareOpaqueType" | "DeclareTypeAlias" | "DeclareVariable" | "DeclaredPredicate" | "Decorator" | "Directive" | "DirectiveLiteral" | "DoE***REMOVED***pression" | "DoWhileStatement" | "EmptyStatement" | "EmptyTypeAnnotation" | "EnumBooleanBody" | "EnumBooleanMember" | "EnumDeclaration" | "EnumDefaultedMember" | "EnumNumberBody" | "EnumNumberMember" | "EnumStringBody" | "EnumStringMember" | "EnumSymbolBody" | "E***REMOVED***istsTypeAnnotation" | "E***REMOVED***portAllDeclaration" | "E***REMOVED***portDefaultDeclaration" | "E***REMOVED***portDefaultSpecifier" | "E***REMOVED***portNamedDeclaration" | "E***REMOVED***portNamespaceSpecifier" | "E***REMOVED***portSpecifier" | "E***REMOVED***pressionStatement" | "File" | "ForInStatement" | "ForOfStatement" | "ForStatement" | "FunctionDeclaration" | "FunctionE***REMOVED***pression" | "FunctionTypeAnnotation" | "FunctionTypeParam" | "GenericTypeAnnotation" | "Identifier" | "IfStatement" | "Import" | "ImportAttribute" | "ImportDeclaration" | "ImportDefaultSpecifier" | "ImportE***REMOVED***pression" | "ImportNamespaceSpecifier" | "ImportSpecifier" | "Inde***REMOVED***edAccessType" | "InferredPredicate" | "InterfaceDeclaration" | "InterfaceE***REMOVED***tends" | "InterfaceTypeAnnotation" | "InterpreterDirective" | "IntersectionTypeAnnotation" | "JSXAttribute" | "JSXClosingElement" | "JSXClosingFragment" | "JSXElement" | "JSXEmptyE***REMOVED***pression" | "JSXE***REMOVED***pressionContainer" | "JSXFragment" | "JSXIdentifier" | "JSXMemberE***REMOVED***pression" | "JSXNamespacedName" | "JSXOpeningElement" | "JSXOpeningFragment" | "JSXSpreadAttribute" | "JSXSpreadChild" | "JSXTe***REMOVED***t" | "LabeledStatement" | "LogicalE***REMOVED***pression" | "MemberE***REMOVED***pression" | "MetaProperty" | "Mi***REMOVED***edTypeAnnotation" | "ModuleE***REMOVED***pression" | "NewE***REMOVED***pression" | "Noop" | "NullLiteral" | "NullLiteralTypeAnnotation" | "NullableTypeAnnotation" | "NumberLiteral" | "NumberLiteralTypeAnnotation" | "NumberTypeAnnotation" | "NumericLiteral" | "ObjectE***REMOVED***pression" | "ObjectMethod" | "ObjectPattern" | "ObjectProperty" | "ObjectTypeAnnotation" | "ObjectTypeCallProperty" | "ObjectTypeInde***REMOVED***er" | "ObjectTypeInternalSlot" | "ObjectTypeProperty" | "ObjectTypeSpreadProperty" | "OpaqueType" | "OptionalCallE***REMOVED***pression" | "OptionalInde***REMOVED***edAccessType" | "OptionalMemberE***REMOVED***pression" | "ParenthesizedE***REMOVED***pression" | "PipelineBareFunction" | "PipelinePrimaryTopicReference" | "PipelineTopicE***REMOVED***pression" | "Placeholder" | "PrivateName" | "Program" | "QualifiedTypeIdentifier" | "RecordE***REMOVED***pression" | "RegE***REMOVED***pLiteral" | "Rege***REMOVED***Literal" | "RestElement" | "RestProperty" | "ReturnStatement" | "SequenceE***REMOVED***pression" | "SpreadElement" | "SpreadProperty" | "StaticBlock" | "StringLiteral" | "StringLiteralTypeAnnotation" | "StringTypeAnnotation" | "Super" | "SwitchCase" | "SwitchStatement" | "SymbolTypeAnnotation" | "TSAnyKeyword" | "TSArrayType" | "TSAsE***REMOVED***pression" | "TSBigIntKeyword" | "TSBooleanKeyword" | "TSCallSignatureDeclaration" | "TSConditionalType" | "TSConstructSignatureDeclaration" | "TSConstructorType" | "TSDeclareFunction" | "TSDeclareMethod" | "TSEnumDeclaration" | "TSEnumMember" | "TSE***REMOVED***portAssignment" | "TSE***REMOVED***pressionWithTypeArguments" | "TSE***REMOVED***ternalModuleReference" | "TSFunctionType" | "TSImportEqualsDeclaration" | "TSImportType" | "TSInde***REMOVED***Signature" | "TSInde***REMOVED***edAccessType" | "TSInferType" | "TSInstantiationE***REMOVED***pression" | "TSInterfaceBody" | "TSInterfaceDeclaration" | "TSIntersectionType" | "TSIntrinsicKeyword" | "TSLiteralType" | "TSMappedType" | "TSMethodSignature" | "TSModuleBlock" | "TSModuleDeclaration" | "TSNamedTupleMember" | "TSNamespaceE***REMOVED***portDeclaration" | "TSNeverKeyword" | "TSNonNullE***REMOVED***pression" | "TSNullKeyword" | "TSNumberKeyword" | "TSObjectKeyword" | "TSOptionalType" | "TSParameterProperty" | "TSParenthesizedType" | "TSPropertySignature" | "TSQualifiedName" | "TSRestType" | "TSSatisfiesE***REMOVED***pression" | "TSStringKeyword" | "TSSymbolKeyword" | "TSThisType" | "TSTupleType" | "TSTypeAliasDeclaration" | "TSTypeAnnotation" | "TSTypeAssertion" | "TSTypeLiteral" | "TSTypeOperator" | "TSTypeParameter" | "TSTypeParameterDeclaration" | "TSTypeParameterInstantiation" | "TSTypePredicate" | "TSTypeQuery" | "TSTypeReference" | "TSUndefinedKeyword" | "TSUnionType" | "TSUnknownKeyword" | "TSVoidKeyword" | "TaggedTemplateE***REMOVED***pression" | "TemplateElement" | "TemplateLiteral" | "ThisE***REMOVED***pression" | "ThisTypeAnnotation" | "ThrowStatement" | "TopicReference" | "TryStatement" | "TupleE***REMOVED***pression" | "TupleTypeAnnotation" | "TypeAlias" | "TypeAnnotation" | "TypeCastE***REMOVED***pression" | "TypeParameter" | "TypeParameterDeclaration" | "TypeParameterInstantiation" | "TypeofTypeAnnotation" | "UnaryE***REMOVED***pression" | "UnionTypeAnnotation" | "UpdateE***REMOVED***pression" | "V8IntrinsicIdentifier" | "VariableDeclaration" | "VariableDeclarator" | "Variance" | "VoidTypeAnnotation" | "WhileStatement" | "WithStatement" | "YieldE***REMOVED***pression" | keyof Aliases)[];
declare const FLOWBASEANNOTATION_TYPES: ("AnyTypeAnnotation" | "ArgumentPlaceholder" | "ArrayE***REMOVED***pression" | "ArrayPattern" | "ArrayTypeAnnotation" | "ArrowFunctionE***REMOVED***pression" | "AssignmentE***REMOVED***pression" | "AssignmentPattern" | "AwaitE***REMOVED***pression" | "BigIntLiteral" | "BinaryE***REMOVED***pression" | "BindE***REMOVED***pression" | "BlockStatement" | "BooleanLiteral" | "BooleanLiteralTypeAnnotation" | "BooleanTypeAnnotation" | "BreakStatement" | "CallE***REMOVED***pression" | "CatchClause" | "ClassAccessorProperty" | "ClassBody" | "ClassDeclaration" | "ClassE***REMOVED***pression" | "ClassImplements" | "ClassMethod" | "ClassPrivateMethod" | "ClassPrivateProperty" | "ClassProperty" | "ConditionalE***REMOVED***pression" | "ContinueStatement" | "DebuggerStatement" | "DecimalLiteral" | "DeclareClass" | "DeclareE***REMOVED***portAllDeclaration" | "DeclareE***REMOVED***portDeclaration" | "DeclareFunction" | "DeclareInterface" | "DeclareModule" | "DeclareModuleE***REMOVED***ports" | "DeclareOpaqueType" | "DeclareTypeAlias" | "DeclareVariable" | "DeclaredPredicate" | "Decorator" | "Directive" | "DirectiveLiteral" | "DoE***REMOVED***pression" | "DoWhileStatement" | "EmptyStatement" | "EmptyTypeAnnotation" | "EnumBooleanBody" | "EnumBooleanMember" | "EnumDeclaration" | "EnumDefaultedMember" | "EnumNumberBody" | "EnumNumberMember" | "EnumStringBody" | "EnumStringMember" | "EnumSymbolBody" | "E***REMOVED***istsTypeAnnotation" | "E***REMOVED***portAllDeclaration" | "E***REMOVED***portDefaultDeclaration" | "E***REMOVED***portDefaultSpecifier" | "E***REMOVED***portNamedDeclaration" | "E***REMOVED***portNamespaceSpecifier" | "E***REMOVED***portSpecifier" | "E***REMOVED***pressionStatement" | "File" | "ForInStatement" | "ForOfStatement" | "ForStatement" | "FunctionDeclaration" | "FunctionE***REMOVED***pression" | "FunctionTypeAnnotation" | "FunctionTypeParam" | "GenericTypeAnnotation" | "Identifier" | "IfStatement" | "Import" | "ImportAttribute" | "ImportDeclaration" | "ImportDefaultSpecifier" | "ImportE***REMOVED***pression" | "ImportNamespaceSpecifier" | "ImportSpecifier" | "Inde***REMOVED***edAccessType" | "InferredPredicate" | "InterfaceDeclaration" | "InterfaceE***REMOVED***tends" | "InterfaceTypeAnnotation" | "InterpreterDirective" | "IntersectionTypeAnnotation" | "JSXAttribute" | "JSXClosingElement" | "JSXClosingFragment" | "JSXElement" | "JSXEmptyE***REMOVED***pression" | "JSXE***REMOVED***pressionContainer" | "JSXFragment" | "JSXIdentifier" | "JSXMemberE***REMOVED***pression" | "JSXNamespacedName" | "JSXOpeningElement" | "JSXOpeningFragment" | "JSXSpreadAttribute" | "JSXSpreadChild" | "JSXTe***REMOVED***t" | "LabeledStatement" | "LogicalE***REMOVED***pression" | "MemberE***REMOVED***pression" | "MetaProperty" | "Mi***REMOVED***edTypeAnnotation" | "ModuleE***REMOVED***pression" | "NewE***REMOVED***pression" | "Noop" | "NullLiteral" | "NullLiteralTypeAnnotation" | "NullableTypeAnnotation" | "NumberLiteral" | "NumberLiteralTypeAnnotation" | "NumberTypeAnnotation" | "NumericLiteral" | "ObjectE***REMOVED***pression" | "ObjectMethod" | "ObjectPattern" | "ObjectProperty" | "ObjectTypeAnnotation" | "ObjectTypeCallProperty" | "ObjectTypeInde***REMOVED***er" | "ObjectTypeInternalSlot" | "ObjectTypeProperty" | "ObjectTypeSpreadProperty" | "OpaqueType" | "OptionalCallE***REMOVED***pression" | "OptionalInde***REMOVED***edAccessType" | "OptionalMemberE***REMOVED***pression" | "ParenthesizedE***REMOVED***pression" | "PipelineBareFunction" | "PipelinePrimaryTopicReference" | "PipelineTopicE***REMOVED***pression" | "Placeholder" | "PrivateName" | "Program" | "QualifiedTypeIdentifier" | "RecordE***REMOVED***pression" | "RegE***REMOVED***pLiteral" | "Rege***REMOVED***Literal" | "RestElement" | "RestProperty" | "ReturnStatement" | "SequenceE***REMOVED***pression" | "SpreadElement" | "SpreadProperty" | "StaticBlock" | "StringLiteral" | "StringLiteralTypeAnnotation" | "StringTypeAnnotation" | "Super" | "SwitchCase" | "SwitchStatement" | "SymbolTypeAnnotation" | "TSAnyKeyword" | "TSArrayType" | "TSAsE***REMOVED***pression" | "TSBigIntKeyword" | "TSBooleanKeyword" | "TSCallSignatureDeclaration" | "TSConditionalType" | "TSConstructSignatureDeclaration" | "TSConstructorType" | "TSDeclareFunction" | "TSDeclareMethod" | "TSEnumDeclaration" | "TSEnumMember" | "TSE***REMOVED***portAssignment" | "TSE***REMOVED***pressionWithTypeArguments" | "TSE***REMOVED***ternalModuleReference" | "TSFunctionType" | "TSImportEqualsDeclaration" | "TSImportType" | "TSInde***REMOVED***Signature" | "TSInde***REMOVED***edAccessType" | "TSInferType" | "TSInstantiationE***REMOVED***pression" | "TSInterfaceBody" | "TSInterfaceDeclaration" | "TSIntersectionType" | "TSIntrinsicKeyword" | "TSLiteralType" | "TSMappedType" | "TSMethodSignature" | "TSModuleBlock" | "TSModuleDeclaration" | "TSNamedTupleMember" | "TSNamespaceE***REMOVED***portDeclaration" | "TSNeverKeyword" | "TSNonNullE***REMOVED***pression" | "TSNullKeyword" | "TSNumberKeyword" | "TSObjectKeyword" | "TSOptionalType" | "TSParameterProperty" | "TSParenthesizedType" | "TSPropertySignature" | "TSQualifiedName" | "TSRestType" | "TSSatisfiesE***REMOVED***pression" | "TSStringKeyword" | "TSSymbolKeyword" | "TSThisType" | "TSTupleType" | "TSTypeAliasDeclaration" | "TSTypeAnnotation" | "TSTypeAssertion" | "TSTypeLiteral" | "TSTypeOperator" | "TSTypeParameter" | "TSTypeParameterDeclaration" | "TSTypeParameterInstantiation" | "TSTypePredicate" | "TSTypeQuery" | "TSTypeReference" | "TSUndefinedKeyword" | "TSUnionType" | "TSUnknownKeyword" | "TSVoidKeyword" | "TaggedTemplateE***REMOVED***pression" | "TemplateElement" | "TemplateLiteral" | "ThisE***REMOVED***pression" | "ThisTypeAnnotation" | "ThrowStatement" | "TopicReference" | "TryStatement" | "TupleE***REMOVED***pression" | "TupleTypeAnnotation" | "TypeAlias" | "TypeAnnotation" | "TypeCastE***REMOVED***pression" | "TypeParameter" | "TypeParameterDeclaration" | "TypeParameterInstantiation" | "TypeofTypeAnnotation" | "UnaryE***REMOVED***pression" | "UnionTypeAnnotation" | "UpdateE***REMOVED***pression" | "V8IntrinsicIdentifier" | "VariableDeclaration" | "VariableDeclarator" | "Variance" | "VoidTypeAnnotation" | "WhileStatement" | "WithStatement" | "YieldE***REMOVED***pression" | keyof Aliases)[];
declare const FLOWDECLARATION_TYPES: ("AnyTypeAnnotation" | "ArgumentPlaceholder" | "ArrayE***REMOVED***pression" | "ArrayPattern" | "ArrayTypeAnnotation" | "ArrowFunctionE***REMOVED***pression" | "AssignmentE***REMOVED***pression" | "AssignmentPattern" | "AwaitE***REMOVED***pression" | "BigIntLiteral" | "BinaryE***REMOVED***pression" | "BindE***REMOVED***pression" | "BlockStatement" | "BooleanLiteral" | "BooleanLiteralTypeAnnotation" | "BooleanTypeAnnotation" | "BreakStatement" | "CallE***REMOVED***pression" | "CatchClause" | "ClassAccessorProperty" | "ClassBody" | "ClassDeclaration" | "ClassE***REMOVED***pression" | "ClassImplements" | "ClassMethod" | "ClassPrivateMethod" | "ClassPrivateProperty" | "ClassProperty" | "ConditionalE***REMOVED***pression" | "ContinueStatement" | "DebuggerStatement" | "DecimalLiteral" | "DeclareClass" | "DeclareE***REMOVED***portAllDeclaration" | "DeclareE***REMOVED***portDeclaration" | "DeclareFunction" | "DeclareInterface" | "DeclareModule" | "DeclareModuleE***REMOVED***ports" | "DeclareOpaqueType" | "DeclareTypeAlias" | "DeclareVariable" | "DeclaredPredicate" | "Decorator" | "Directive" | "DirectiveLiteral" | "DoE***REMOVED***pression" | "DoWhileStatement" | "EmptyStatement" | "EmptyTypeAnnotation" | "EnumBooleanBody" | "EnumBooleanMember" | "EnumDeclaration" | "EnumDefaultedMember" | "EnumNumberBody" | "EnumNumberMember" | "EnumStringBody" | "EnumStringMember" | "EnumSymbolBody" | "E***REMOVED***istsTypeAnnotation" | "E***REMOVED***portAllDeclaration" | "E***REMOVED***portDefaultDeclaration" | "E***REMOVED***portDefaultSpecifier" | "E***REMOVED***portNamedDeclaration" | "E***REMOVED***portNamespaceSpecifier" | "E***REMOVED***portSpecifier" | "E***REMOVED***pressionStatement" | "File" | "ForInStatement" | "ForOfStatement" | "ForStatement" | "FunctionDeclaration" | "FunctionE***REMOVED***pression" | "FunctionTypeAnnotation" | "FunctionTypeParam" | "GenericTypeAnnotation" | "Identifier" | "IfStatement" | "Import" | "ImportAttribute" | "ImportDeclaration" | "ImportDefaultSpecifier" | "ImportE***REMOVED***pression" | "ImportNamespaceSpecifier" | "ImportSpecifier" | "Inde***REMOVED***edAccessType" | "InferredPredicate" | "InterfaceDeclaration" | "InterfaceE***REMOVED***tends" | "InterfaceTypeAnnotation" | "InterpreterDirective" | "IntersectionTypeAnnotation" | "JSXAttribute" | "JSXClosingElement" | "JSXClosingFragment" | "JSXElement" | "JSXEmptyE***REMOVED***pression" | "JSXE***REMOVED***pressionContainer" | "JSXFragment" | "JSXIdentifier" | "JSXMemberE***REMOVED***pression" | "JSXNamespacedName" | "JSXOpeningElement" | "JSXOpeningFragment" | "JSXSpreadAttribute" | "JSXSpreadChild" | "JSXTe***REMOVED***t" | "LabeledStatement" | "LogicalE***REMOVED***pression" | "MemberE***REMOVED***pression" | "MetaProperty" | "Mi***REMOVED***edTypeAnnotation" | "ModuleE***REMOVED***pression" | "NewE***REMOVED***pression" | "Noop" | "NullLiteral" | "NullLiteralTypeAnnotation" | "NullableTypeAnnotation" | "NumberLiteral" | "NumberLiteralTypeAnnotation" | "NumberTypeAnnotation" | "NumericLiteral" | "ObjectE***REMOVED***pression" | "ObjectMethod" | "ObjectPattern" | "ObjectProperty" | "ObjectTypeAnnotation" | "ObjectTypeCallProperty" | "ObjectTypeInde***REMOVED***er" | "ObjectTypeInternalSlot" | "ObjectTypeProperty" | "ObjectTypeSpreadProperty" | "OpaqueType" | "OptionalCallE***REMOVED***pression" | "OptionalInde***REMOVED***edAccessType" | "OptionalMemberE***REMOVED***pression" | "ParenthesizedE***REMOVED***pression" | "PipelineBareFunction" | "PipelinePrimaryTopicReference" | "PipelineTopicE***REMOVED***pression" | "Placeholder" | "PrivateName" | "Program" | "QualifiedTypeIdentifier" | "RecordE***REMOVED***pression" | "RegE***REMOVED***pLiteral" | "Rege***REMOVED***Literal" | "RestElement" | "RestProperty" | "ReturnStatement" | "SequenceE***REMOVED***pression" | "SpreadElement" | "SpreadProperty" | "StaticBlock" | "StringLiteral" | "StringLiteralTypeAnnotation" | "StringTypeAnnotation" | "Super" | "SwitchCase" | "SwitchStatement" | "SymbolTypeAnnotation" | "TSAnyKeyword" | "TSArrayType" | "TSAsE***REMOVED***pression" | "TSBigIntKeyword" | "TSBooleanKeyword" | "TSCallSignatureDeclaration" | "TSConditionalType" | "TSConstructSignatureDeclaration" | "TSConstructorType" | "TSDeclareFunction" | "TSDeclareMethod" | "TSEnumDeclaration" | "TSEnumMember" | "TSE***REMOVED***portAssignment" | "TSE***REMOVED***pressionWithTypeArguments" | "TSE***REMOVED***ternalModuleReference" | "TSFunctionType" | "TSImportEqualsDeclaration" | "TSImportType" | "TSInde***REMOVED***Signature" | "TSInde***REMOVED***edAccessType" | "TSInferType" | "TSInstantiationE***REMOVED***pression" | "TSInterfaceBody" | "TSInterfaceDeclaration" | "TSIntersectionType" | "TSIntrinsicKeyword" | "TSLiteralType" | "TSMappedType" | "TSMethodSignature" | "TSModuleBlock" | "TSModuleDeclaration" | "TSNamedTupleMember" | "TSNamespaceE***REMOVED***portDeclaration" | "TSNeverKeyword" | "TSNonNullE***REMOVED***pression" | "TSNullKeyword" | "TSNumberKeyword" | "TSObjectKeyword" | "TSOptionalType" | "TSParameterProperty" | "TSParenthesizedType" | "TSPropertySignature" | "TSQualifiedName" | "TSRestType" | "TSSatisfiesE***REMOVED***pression" | "TSStringKeyword" | "TSSymbolKeyword" | "TSThisType" | "TSTupleType" | "TSTypeAliasDeclaration" | "TSTypeAnnotation" | "TSTypeAssertion" | "TSTypeLiteral" | "TSTypeOperator" | "TSTypeParameter" | "TSTypeParameterDeclaration" | "TSTypeParameterInstantiation" | "TSTypePredicate" | "TSTypeQuery" | "TSTypeReference" | "TSUndefinedKeyword" | "TSUnionType" | "TSUnknownKeyword" | "TSVoidKeyword" | "TaggedTemplateE***REMOVED***pression" | "TemplateElement" | "TemplateLiteral" | "ThisE***REMOVED***pression" | "ThisTypeAnnotation" | "ThrowStatement" | "TopicReference" | "TryStatement" | "TupleE***REMOVED***pression" | "TupleTypeAnnotation" | "TypeAlias" | "TypeAnnotation" | "TypeCastE***REMOVED***pression" | "TypeParameter" | "TypeParameterDeclaration" | "TypeParameterInstantiation" | "TypeofTypeAnnotation" | "UnaryE***REMOVED***pression" | "UnionTypeAnnotation" | "UpdateE***REMOVED***pression" | "V8IntrinsicIdentifier" | "VariableDeclaration" | "VariableDeclarator" | "Variance" | "VoidTypeAnnotation" | "WhileStatement" | "WithStatement" | "YieldE***REMOVED***pression" | keyof Aliases)[];
declare const FLOWPREDICATE_TYPES: ("AnyTypeAnnotation" | "ArgumentPlaceholder" | "ArrayE***REMOVED***pression" | "ArrayPattern" | "ArrayTypeAnnotation" | "ArrowFunctionE***REMOVED***pression" | "AssignmentE***REMOVED***pression" | "AssignmentPattern" | "AwaitE***REMOVED***pression" | "BigIntLiteral" | "BinaryE***REMOVED***pression" | "BindE***REMOVED***pression" | "BlockStatement" | "BooleanLiteral" | "BooleanLiteralTypeAnnotation" | "BooleanTypeAnnotation" | "BreakStatement" | "CallE***REMOVED***pression" | "CatchClause" | "ClassAccessorProperty" | "ClassBody" | "ClassDeclaration" | "ClassE***REMOVED***pression" | "ClassImplements" | "ClassMethod" | "ClassPrivateMethod" | "ClassPrivateProperty" | "ClassProperty" | "ConditionalE***REMOVED***pression" | "ContinueStatement" | "DebuggerStatement" | "DecimalLiteral" | "DeclareClass" | "DeclareE***REMOVED***portAllDeclaration" | "DeclareE***REMOVED***portDeclaration" | "DeclareFunction" | "DeclareInterface" | "DeclareModule" | "DeclareModuleE***REMOVED***ports" | "DeclareOpaqueType" | "DeclareTypeAlias" | "DeclareVariable" | "DeclaredPredicate" | "Decorator" | "Directive" | "DirectiveLiteral" | "DoE***REMOVED***pression" | "DoWhileStatement" | "EmptyStatement" | "EmptyTypeAnnotation" | "EnumBooleanBody" | "EnumBooleanMember" | "EnumDeclaration" | "EnumDefaultedMember" | "EnumNumberBody" | "EnumNumberMember" | "EnumStringBody" | "EnumStringMember" | "EnumSymbolBody" | "E***REMOVED***istsTypeAnnotation" | "E***REMOVED***portAllDeclaration" | "E***REMOVED***portDefaultDeclaration" | "E***REMOVED***portDefaultSpecifier" | "E***REMOVED***portNamedDeclaration" | "E***REMOVED***portNamespaceSpecifier" | "E***REMOVED***portSpecifier" | "E***REMOVED***pressionStatement" | "File" | "ForInStatement" | "ForOfStatement" | "ForStatement" | "FunctionDeclaration" | "FunctionE***REMOVED***pression" | "FunctionTypeAnnotation" | "FunctionTypeParam" | "GenericTypeAnnotation" | "Identifier" | "IfStatement" | "Import" | "ImportAttribute" | "ImportDeclaration" | "ImportDefaultSpecifier" | "ImportE***REMOVED***pression" | "ImportNamespaceSpecifier" | "ImportSpecifier" | "Inde***REMOVED***edAccessType" | "InferredPredicate" | "InterfaceDeclaration" | "InterfaceE***REMOVED***tends" | "InterfaceTypeAnnotation" | "InterpreterDirective" | "IntersectionTypeAnnotation" | "JSXAttribute" | "JSXClosingElement" | "JSXClosingFragment" | "JSXElement" | "JSXEmptyE***REMOVED***pression" | "JSXE***REMOVED***pressionContainer" | "JSXFragment" | "JSXIdentifier" | "JSXMemberE***REMOVED***pression" | "JSXNamespacedName" | "JSXOpeningElement" | "JSXOpeningFragment" | "JSXSpreadAttribute" | "JSXSpreadChild" | "JSXTe***REMOVED***t" | "LabeledStatement" | "LogicalE***REMOVED***pression" | "MemberE***REMOVED***pression" | "MetaProperty" | "Mi***REMOVED***edTypeAnnotation" | "ModuleE***REMOVED***pression" | "NewE***REMOVED***pression" | "Noop" | "NullLiteral" | "NullLiteralTypeAnnotation" | "NullableTypeAnnotation" | "NumberLiteral" | "NumberLiteralTypeAnnotation" | "NumberTypeAnnotation" | "NumericLiteral" | "ObjectE***REMOVED***pression" | "ObjectMethod" | "ObjectPattern" | "ObjectProperty" | "ObjectTypeAnnotation" | "ObjectTypeCallProperty" | "ObjectTypeInde***REMOVED***er" | "ObjectTypeInternalSlot" | "ObjectTypeProperty" | "ObjectTypeSpreadProperty" | "OpaqueType" | "OptionalCallE***REMOVED***pression" | "OptionalInde***REMOVED***edAccessType" | "OptionalMemberE***REMOVED***pression" | "ParenthesizedE***REMOVED***pression" | "PipelineBareFunction" | "PipelinePrimaryTopicReference" | "PipelineTopicE***REMOVED***pression" | "Placeholder" | "PrivateName" | "Program" | "QualifiedTypeIdentifier" | "RecordE***REMOVED***pression" | "RegE***REMOVED***pLiteral" | "Rege***REMOVED***Literal" | "RestElement" | "RestProperty" | "ReturnStatement" | "SequenceE***REMOVED***pression" | "SpreadElement" | "SpreadProperty" | "StaticBlock" | "StringLiteral" | "StringLiteralTypeAnnotation" | "StringTypeAnnotation" | "Super" | "SwitchCase" | "SwitchStatement" | "SymbolTypeAnnotation" | "TSAnyKeyword" | "TSArrayType" | "TSAsE***REMOVED***pression" | "TSBigIntKeyword" | "TSBooleanKeyword" | "TSCallSignatureDeclaration" | "TSConditionalType" | "TSConstructSignatureDeclaration" | "TSConstructorType" | "TSDeclareFunction" | "TSDeclareMethod" | "TSEnumDeclaration" | "TSEnumMember" | "TSE***REMOVED***portAssignment" | "TSE***REMOVED***pressionWithTypeArguments" | "TSE***REMOVED***ternalModuleReference" | "TSFunctionType" | "TSImportEqualsDeclaration" | "TSImportType" | "TSInde***REMOVED***Signature" | "TSInde***REMOVED***edAccessType" | "TSInferType" | "TSInstantiationE***REMOVED***pression" | "TSInterfaceBody" | "TSInterfaceDeclaration" | "TSIntersectionType" | "TSIntrinsicKeyword" | "TSLiteralType" | "TSMappedType" | "TSMethodSignature" | "TSModuleBlock" | "TSModuleDeclaration" | "TSNamedTupleMember" | "TSNamespaceE***REMOVED***portDeclaration" | "TSNeverKeyword" | "TSNonNullE***REMOVED***pression" | "TSNullKeyword" | "TSNumberKeyword" | "TSObjectKeyword" | "TSOptionalType" | "TSParameterProperty" | "TSParenthesizedType" | "TSPropertySignature" | "TSQualifiedName" | "TSRestType" | "TSSatisfiesE***REMOVED***pression" | "TSStringKeyword" | "TSSymbolKeyword" | "TSThisType" | "TSTupleType" | "TSTypeAliasDeclaration" | "TSTypeAnnotation" | "TSTypeAssertion" | "TSTypeLiteral" | "TSTypeOperator" | "TSTypeParameter" | "TSTypeParameterDeclaration" | "TSTypeParameterInstantiation" | "TSTypePredicate" | "TSTypeQuery" | "TSTypeReference" | "TSUndefinedKeyword" | "TSUnionType" | "TSUnknownKeyword" | "TSVoidKeyword" | "TaggedTemplateE***REMOVED***pression" | "TemplateElement" | "TemplateLiteral" | "ThisE***REMOVED***pression" | "ThisTypeAnnotation" | "ThrowStatement" | "TopicReference" | "TryStatement" | "TupleE***REMOVED***pression" | "TupleTypeAnnotation" | "TypeAlias" | "TypeAnnotation" | "TypeCastE***REMOVED***pression" | "TypeParameter" | "TypeParameterDeclaration" | "TypeParameterInstantiation" | "TypeofTypeAnnotation" | "UnaryE***REMOVED***pression" | "UnionTypeAnnotation" | "UpdateE***REMOVED***pression" | "V8IntrinsicIdentifier" | "VariableDeclaration" | "VariableDeclarator" | "Variance" | "VoidTypeAnnotation" | "WhileStatement" | "WithStatement" | "YieldE***REMOVED***pression" | keyof Aliases)[];
declare const ENUMBODY_TYPES: ("AnyTypeAnnotation" | "ArgumentPlaceholder" | "ArrayE***REMOVED***pression" | "ArrayPattern" | "ArrayTypeAnnotation" | "ArrowFunctionE***REMOVED***pression" | "AssignmentE***REMOVED***pression" | "AssignmentPattern" | "AwaitE***REMOVED***pression" | "BigIntLiteral" | "BinaryE***REMOVED***pression" | "BindE***REMOVED***pression" | "BlockStatement" | "BooleanLiteral" | "BooleanLiteralTypeAnnotation" | "BooleanTypeAnnotation" | "BreakStatement" | "CallE***REMOVED***pression" | "CatchClause" | "ClassAccessorProperty" | "ClassBody" | "ClassDeclaration" | "ClassE***REMOVED***pression" | "ClassImplements" | "ClassMethod" | "ClassPrivateMethod" | "ClassPrivateProperty" | "ClassProperty" | "ConditionalE***REMOVED***pression" | "ContinueStatement" | "DebuggerStatement" | "DecimalLiteral" | "DeclareClass" | "DeclareE***REMOVED***portAllDeclaration" | "DeclareE***REMOVED***portDeclaration" | "DeclareFunction" | "DeclareInterface" | "DeclareModule" | "DeclareModuleE***REMOVED***ports" | "DeclareOpaqueType" | "DeclareTypeAlias" | "DeclareVariable" | "DeclaredPredicate" | "Decorator" | "Directive" | "DirectiveLiteral" | "DoE***REMOVED***pression" | "DoWhileStatement" | "EmptyStatement" | "EmptyTypeAnnotation" | "EnumBooleanBody" | "EnumBooleanMember" | "EnumDeclaration" | "EnumDefaultedMember" | "EnumNumberBody" | "EnumNumberMember" | "EnumStringBody" | "EnumStringMember" | "EnumSymbolBody" | "E***REMOVED***istsTypeAnnotation" | "E***REMOVED***portAllDeclaration" | "E***REMOVED***portDefaultDeclaration" | "E***REMOVED***portDefaultSpecifier" | "E***REMOVED***portNamedDeclaration" | "E***REMOVED***portNamespaceSpecifier" | "E***REMOVED***portSpecifier" | "E***REMOVED***pressionStatement" | "File" | "ForInStatement" | "ForOfStatement" | "ForStatement" | "FunctionDeclaration" | "FunctionE***REMOVED***pression" | "FunctionTypeAnnotation" | "FunctionTypeParam" | "GenericTypeAnnotation" | "Identifier" | "IfStatement" | "Import" | "ImportAttribute" | "ImportDeclaration" | "ImportDefaultSpecifier" | "ImportE***REMOVED***pression" | "ImportNamespaceSpecifier" | "ImportSpecifier" | "Inde***REMOVED***edAccessType" | "InferredPredicate" | "InterfaceDeclaration" | "InterfaceE***REMOVED***tends" | "InterfaceTypeAnnotation" | "InterpreterDirective" | "IntersectionTypeAnnotation" | "JSXAttribute" | "JSXClosingElement" | "JSXClosingFragment" | "JSXElement" | "JSXEmptyE***REMOVED***pression" | "JSXE***REMOVED***pressionContainer" | "JSXFragment" | "JSXIdentifier" | "JSXMemberE***REMOVED***pression" | "JSXNamespacedName" | "JSXOpeningElement" | "JSXOpeningFragment" | "JSXSpreadAttribute" | "JSXSpreadChild" | "JSXTe***REMOVED***t" | "LabeledStatement" | "LogicalE***REMOVED***pression" | "MemberE***REMOVED***pression" | "MetaProperty" | "Mi***REMOVED***edTypeAnnotation" | "ModuleE***REMOVED***pression" | "NewE***REMOVED***pression" | "Noop" | "NullLiteral" | "NullLiteralTypeAnnotation" | "NullableTypeAnnotation" | "NumberLiteral" | "NumberLiteralTypeAnnotation" | "NumberTypeAnnotation" | "NumericLiteral" | "ObjectE***REMOVED***pression" | "ObjectMethod" | "ObjectPattern" | "ObjectProperty" | "ObjectTypeAnnotation" | "ObjectTypeCallProperty" | "ObjectTypeInde***REMOVED***er" | "ObjectTypeInternalSlot" | "ObjectTypeProperty" | "ObjectTypeSpreadProperty" | "OpaqueType" | "OptionalCallE***REMOVED***pression" | "OptionalInde***REMOVED***edAccessType" | "OptionalMemberE***REMOVED***pression" | "ParenthesizedE***REMOVED***pression" | "PipelineBareFunction" | "PipelinePrimaryTopicReference" | "PipelineTopicE***REMOVED***pression" | "Placeholder" | "PrivateName" | "Program" | "QualifiedTypeIdentifier" | "RecordE***REMOVED***pression" | "RegE***REMOVED***pLiteral" | "Rege***REMOVED***Literal" | "RestElement" | "RestProperty" | "ReturnStatement" | "SequenceE***REMOVED***pression" | "SpreadElement" | "SpreadProperty" | "StaticBlock" | "StringLiteral" | "StringLiteralTypeAnnotation" | "StringTypeAnnotation" | "Super" | "SwitchCase" | "SwitchStatement" | "SymbolTypeAnnotation" | "TSAnyKeyword" | "TSArrayType" | "TSAsE***REMOVED***pression" | "TSBigIntKeyword" | "TSBooleanKeyword" | "TSCallSignatureDeclaration" | "TSConditionalType" | "TSConstructSignatureDeclaration" | "TSConstructorType" | "TSDeclareFunction" | "TSDeclareMethod" | "TSEnumDeclaration" | "TSEnumMember" | "TSE***REMOVED***portAssignment" | "TSE***REMOVED***pressionWithTypeArguments" | "TSE***REMOVED***ternalModuleReference" | "TSFunctionType" | "TSImportEqualsDeclaration" | "TSImportType" | "TSInde***REMOVED***Signature" | "TSInde***REMOVED***edAccessType" | "TSInferType" | "TSInstantiationE***REMOVED***pression" | "TSInterfaceBody" | "TSInterfaceDeclaration" | "TSIntersectionType" | "TSIntrinsicKeyword" | "TSLiteralType" | "TSMappedType" | "TSMethodSignature" | "TSModuleBlock" | "TSModuleDeclaration" | "TSNamedTupleMember" | "TSNamespaceE***REMOVED***portDeclaration" | "TSNeverKeyword" | "TSNonNullE***REMOVED***pression" | "TSNullKeyword" | "TSNumberKeyword" | "TSObjectKeyword" | "TSOptionalType" | "TSParameterProperty" | "TSParenthesizedType" | "TSPropertySignature" | "TSQualifiedName" | "TSRestType" | "TSSatisfiesE***REMOVED***pression" | "TSStringKeyword" | "TSSymbolKeyword" | "TSThisType" | "TSTupleType" | "TSTypeAliasDeclaration" | "TSTypeAnnotation" | "TSTypeAssertion" | "TSTypeLiteral" | "TSTypeOperator" | "TSTypeParameter" | "TSTypeParameterDeclaration" | "TSTypeParameterInstantiation" | "TSTypePredicate" | "TSTypeQuery" | "TSTypeReference" | "TSUndefinedKeyword" | "TSUnionType" | "TSUnknownKeyword" | "TSVoidKeyword" | "TaggedTemplateE***REMOVED***pression" | "TemplateElement" | "TemplateLiteral" | "ThisE***REMOVED***pression" | "ThisTypeAnnotation" | "ThrowStatement" | "TopicReference" | "TryStatement" | "TupleE***REMOVED***pression" | "TupleTypeAnnotation" | "TypeAlias" | "TypeAnnotation" | "TypeCastE***REMOVED***pression" | "TypeParameter" | "TypeParameterDeclaration" | "TypeParameterInstantiation" | "TypeofTypeAnnotation" | "UnaryE***REMOVED***pression" | "UnionTypeAnnotation" | "UpdateE***REMOVED***pression" | "V8IntrinsicIdentifier" | "VariableDeclaration" | "VariableDeclarator" | "Variance" | "VoidTypeAnnotation" | "WhileStatement" | "WithStatement" | "YieldE***REMOVED***pression" | keyof Aliases)[];
declare const ENUMMEMBER_TYPES: ("AnyTypeAnnotation" | "ArgumentPlaceholder" | "ArrayE***REMOVED***pression" | "ArrayPattern" | "ArrayTypeAnnotation" | "ArrowFunctionE***REMOVED***pression" | "AssignmentE***REMOVED***pression" | "AssignmentPattern" | "AwaitE***REMOVED***pression" | "BigIntLiteral" | "BinaryE***REMOVED***pression" | "BindE***REMOVED***pression" | "BlockStatement" | "BooleanLiteral" | "BooleanLiteralTypeAnnotation" | "BooleanTypeAnnotation" | "BreakStatement" | "CallE***REMOVED***pression" | "CatchClause" | "ClassAccessorProperty" | "ClassBody" | "ClassDeclaration" | "ClassE***REMOVED***pression" | "ClassImplements" | "ClassMethod" | "ClassPrivateMethod" | "ClassPrivateProperty" | "ClassProperty" | "ConditionalE***REMOVED***pression" | "ContinueStatement" | "DebuggerStatement" | "DecimalLiteral" | "DeclareClass" | "DeclareE***REMOVED***portAllDeclaration" | "DeclareE***REMOVED***portDeclaration" | "DeclareFunction" | "DeclareInterface" | "DeclareModule" | "DeclareModuleE***REMOVED***ports" | "DeclareOpaqueType" | "DeclareTypeAlias" | "DeclareVariable" | "DeclaredPredicate" | "Decorator" | "Directive" | "DirectiveLiteral" | "DoE***REMOVED***pression" | "DoWhileStatement" | "EmptyStatement" | "EmptyTypeAnnotation" | "EnumBooleanBody" | "EnumBooleanMember" | "EnumDeclaration" | "EnumDefaultedMember" | "EnumNumberBody" | "EnumNumberMember" | "EnumStringBody" | "EnumStringMember" | "EnumSymbolBody" | "E***REMOVED***istsTypeAnnotation" | "E***REMOVED***portAllDeclaration" | "E***REMOVED***portDefaultDeclaration" | "E***REMOVED***portDefaultSpecifier" | "E***REMOVED***portNamedDeclaration" | "E***REMOVED***portNamespaceSpecifier" | "E***REMOVED***portSpecifier" | "E***REMOVED***pressionStatement" | "File" | "ForInStatement" | "ForOfStatement" | "ForStatement" | "FunctionDeclaration" | "FunctionE***REMOVED***pression" | "FunctionTypeAnnotation" | "FunctionTypeParam" | "GenericTypeAnnotation" | "Identifier" | "IfStatement" | "Import" | "ImportAttribute" | "ImportDeclaration" | "ImportDefaultSpecifier" | "ImportE***REMOVED***pression" | "ImportNamespaceSpecifier" | "ImportSpecifier" | "Inde***REMOVED***edAccessType" | "InferredPredicate" | "InterfaceDeclaration" | "InterfaceE***REMOVED***tends" | "InterfaceTypeAnnotation" | "InterpreterDirective" | "IntersectionTypeAnnotation" | "JSXAttribute" | "JSXClosingElement" | "JSXClosingFragment" | "JSXElement" | "JSXEmptyE***REMOVED***pression" | "JSXE***REMOVED***pressionContainer" | "JSXFragment" | "JSXIdentifier" | "JSXMemberE***REMOVED***pression" | "JSXNamespacedName" | "JSXOpeningElement" | "JSXOpeningFragment" | "JSXSpreadAttribute" | "JSXSpreadChild" | "JSXTe***REMOVED***t" | "LabeledStatement" | "LogicalE***REMOVED***pression" | "MemberE***REMOVED***pression" | "MetaProperty" | "Mi***REMOVED***edTypeAnnotation" | "ModuleE***REMOVED***pression" | "NewE***REMOVED***pression" | "Noop" | "NullLiteral" | "NullLiteralTypeAnnotation" | "NullableTypeAnnotation" | "NumberLiteral" | "NumberLiteralTypeAnnotation" | "NumberTypeAnnotation" | "NumericLiteral" | "ObjectE***REMOVED***pression" | "ObjectMethod" | "ObjectPattern" | "ObjectProperty" | "ObjectTypeAnnotation" | "ObjectTypeCallProperty" | "ObjectTypeInde***REMOVED***er" | "ObjectTypeInternalSlot" | "ObjectTypeProperty" | "ObjectTypeSpreadProperty" | "OpaqueType" | "OptionalCallE***REMOVED***pression" | "OptionalInde***REMOVED***edAccessType" | "OptionalMemberE***REMOVED***pression" | "ParenthesizedE***REMOVED***pression" | "PipelineBareFunction" | "PipelinePrimaryTopicReference" | "PipelineTopicE***REMOVED***pression" | "Placeholder" | "PrivateName" | "Program" | "QualifiedTypeIdentifier" | "RecordE***REMOVED***pression" | "RegE***REMOVED***pLiteral" | "Rege***REMOVED***Literal" | "RestElement" | "RestProperty" | "ReturnStatement" | "SequenceE***REMOVED***pression" | "SpreadElement" | "SpreadProperty" | "StaticBlock" | "StringLiteral" | "StringLiteralTypeAnnotation" | "StringTypeAnnotation" | "Super" | "SwitchCase" | "SwitchStatement" | "SymbolTypeAnnotation" | "TSAnyKeyword" | "TSArrayType" | "TSAsE***REMOVED***pression" | "TSBigIntKeyword" | "TSBooleanKeyword" | "TSCallSignatureDeclaration" | "TSConditionalType" | "TSConstructSignatureDeclaration" | "TSConstructorType" | "TSDeclareFunction" | "TSDeclareMethod" | "TSEnumDeclaration" | "TSEnumMember" | "TSE***REMOVED***portAssignment" | "TSE***REMOVED***pressionWithTypeArguments" | "TSE***REMOVED***ternalModuleReference" | "TSFunctionType" | "TSImportEqualsDeclaration" | "TSImportType" | "TSInde***REMOVED***Signature" | "TSInde***REMOVED***edAccessType" | "TSInferType" | "TSInstantiationE***REMOVED***pression" | "TSInterfaceBody" | "TSInterfaceDeclaration" | "TSIntersectionType" | "TSIntrinsicKeyword" | "TSLiteralType" | "TSMappedType" | "TSMethodSignature" | "TSModuleBlock" | "TSModuleDeclaration" | "TSNamedTupleMember" | "TSNamespaceE***REMOVED***portDeclaration" | "TSNeverKeyword" | "TSNonNullE***REMOVED***pression" | "TSNullKeyword" | "TSNumberKeyword" | "TSObjectKeyword" | "TSOptionalType" | "TSParameterProperty" | "TSParenthesizedType" | "TSPropertySignature" | "TSQualifiedName" | "TSRestType" | "TSSatisfiesE***REMOVED***pression" | "TSStringKeyword" | "TSSymbolKeyword" | "TSThisType" | "TSTupleType" | "TSTypeAliasDeclaration" | "TSTypeAnnotation" | "TSTypeAssertion" | "TSTypeLiteral" | "TSTypeOperator" | "TSTypeParameter" | "TSTypeParameterDeclaration" | "TSTypeParameterInstantiation" | "TSTypePredicate" | "TSTypeQuery" | "TSTypeReference" | "TSUndefinedKeyword" | "TSUnionType" | "TSUnknownKeyword" | "TSVoidKeyword" | "TaggedTemplateE***REMOVED***pression" | "TemplateElement" | "TemplateLiteral" | "ThisE***REMOVED***pression" | "ThisTypeAnnotation" | "ThrowStatement" | "TopicReference" | "TryStatement" | "TupleE***REMOVED***pression" | "TupleTypeAnnotation" | "TypeAlias" | "TypeAnnotation" | "TypeCastE***REMOVED***pression" | "TypeParameter" | "TypeParameterDeclaration" | "TypeParameterInstantiation" | "TypeofTypeAnnotation" | "UnaryE***REMOVED***pression" | "UnionTypeAnnotation" | "UpdateE***REMOVED***pression" | "V8IntrinsicIdentifier" | "VariableDeclaration" | "VariableDeclarator" | "Variance" | "VoidTypeAnnotation" | "WhileStatement" | "WithStatement" | "YieldE***REMOVED***pression" | keyof Aliases)[];
declare const JSX_TYPES: ("AnyTypeAnnotation" | "ArgumentPlaceholder" | "ArrayE***REMOVED***pression" | "ArrayPattern" | "ArrayTypeAnnotation" | "ArrowFunctionE***REMOVED***pression" | "AssignmentE***REMOVED***pression" | "AssignmentPattern" | "AwaitE***REMOVED***pression" | "BigIntLiteral" | "BinaryE***REMOVED***pression" | "BindE***REMOVED***pression" | "BlockStatement" | "BooleanLiteral" | "BooleanLiteralTypeAnnotation" | "BooleanTypeAnnotation" | "BreakStatement" | "CallE***REMOVED***pression" | "CatchClause" | "ClassAccessorProperty" | "ClassBody" | "ClassDeclaration" | "ClassE***REMOVED***pression" | "ClassImplements" | "ClassMethod" | "ClassPrivateMethod" | "ClassPrivateProperty" | "ClassProperty" | "ConditionalE***REMOVED***pression" | "ContinueStatement" | "DebuggerStatement" | "DecimalLiteral" | "DeclareClass" | "DeclareE***REMOVED***portAllDeclaration" | "DeclareE***REMOVED***portDeclaration" | "DeclareFunction" | "DeclareInterface" | "DeclareModule" | "DeclareModuleE***REMOVED***ports" | "DeclareOpaqueType" | "DeclareTypeAlias" | "DeclareVariable" | "DeclaredPredicate" | "Decorator" | "Directive" | "DirectiveLiteral" | "DoE***REMOVED***pression" | "DoWhileStatement" | "EmptyStatement" | "EmptyTypeAnnotation" | "EnumBooleanBody" | "EnumBooleanMember" | "EnumDeclaration" | "EnumDefaultedMember" | "EnumNumberBody" | "EnumNumberMember" | "EnumStringBody" | "EnumStringMember" | "EnumSymbolBody" | "E***REMOVED***istsTypeAnnotation" | "E***REMOVED***portAllDeclaration" | "E***REMOVED***portDefaultDeclaration" | "E***REMOVED***portDefaultSpecifier" | "E***REMOVED***portNamedDeclaration" | "E***REMOVED***portNamespaceSpecifier" | "E***REMOVED***portSpecifier" | "E***REMOVED***pressionStatement" | "File" | "ForInStatement" | "ForOfStatement" | "ForStatement" | "FunctionDeclaration" | "FunctionE***REMOVED***pression" | "FunctionTypeAnnotation" | "FunctionTypeParam" | "GenericTypeAnnotation" | "Identifier" | "IfStatement" | "Import" | "ImportAttribute" | "ImportDeclaration" | "ImportDefaultSpecifier" | "ImportE***REMOVED***pression" | "ImportNamespaceSpecifier" | "ImportSpecifier" | "Inde***REMOVED***edAccessType" | "InferredPredicate" | "InterfaceDeclaration" | "InterfaceE***REMOVED***tends" | "InterfaceTypeAnnotation" | "InterpreterDirective" | "IntersectionTypeAnnotation" | "JSXAttribute" | "JSXClosingElement" | "JSXClosingFragment" | "JSXElement" | "JSXEmptyE***REMOVED***pression" | "JSXE***REMOVED***pressionContainer" | "JSXFragment" | "JSXIdentifier" | "JSXMemberE***REMOVED***pression" | "JSXNamespacedName" | "JSXOpeningElement" | "JSXOpeningFragment" | "JSXSpreadAttribute" | "JSXSpreadChild" | "JSXTe***REMOVED***t" | "LabeledStatement" | "LogicalE***REMOVED***pression" | "MemberE***REMOVED***pression" | "MetaProperty" | "Mi***REMOVED***edTypeAnnotation" | "ModuleE***REMOVED***pression" | "NewE***REMOVED***pression" | "Noop" | "NullLiteral" | "NullLiteralTypeAnnotation" | "NullableTypeAnnotation" | "NumberLiteral" | "NumberLiteralTypeAnnotation" | "NumberTypeAnnotation" | "NumericLiteral" | "ObjectE***REMOVED***pression" | "ObjectMethod" | "ObjectPattern" | "ObjectProperty" | "ObjectTypeAnnotation" | "ObjectTypeCallProperty" | "ObjectTypeInde***REMOVED***er" | "ObjectTypeInternalSlot" | "ObjectTypeProperty" | "ObjectTypeSpreadProperty" | "OpaqueType" | "OptionalCallE***REMOVED***pression" | "OptionalInde***REMOVED***edAccessType" | "OptionalMemberE***REMOVED***pression" | "ParenthesizedE***REMOVED***pression" | "PipelineBareFunction" | "PipelinePrimaryTopicReference" | "PipelineTopicE***REMOVED***pression" | "Placeholder" | "PrivateName" | "Program" | "QualifiedTypeIdentifier" | "RecordE***REMOVED***pression" | "RegE***REMOVED***pLiteral" | "Rege***REMOVED***Literal" | "RestElement" | "RestProperty" | "ReturnStatement" | "SequenceE***REMOVED***pression" | "SpreadElement" | "SpreadProperty" | "StaticBlock" | "StringLiteral" | "StringLiteralTypeAnnotation" | "StringTypeAnnotation" | "Super" | "SwitchCase" | "SwitchStatement" | "SymbolTypeAnnotation" | "TSAnyKeyword" | "TSArrayType" | "TSAsE***REMOVED***pression" | "TSBigIntKeyword" | "TSBooleanKeyword" | "TSCallSignatureDeclaration" | "TSConditionalType" | "TSConstructSignatureDeclaration" | "TSConstructorType" | "TSDeclareFunction" | "TSDeclareMethod" | "TSEnumDeclaration" | "TSEnumMember" | "TSE***REMOVED***portAssignment" | "TSE***REMOVED***pressionWithTypeArguments" | "TSE***REMOVED***ternalModuleReference" | "TSFunctionType" | "TSImportEqualsDeclaration" | "TSImportType" | "TSInde***REMOVED***Signature" | "TSInde***REMOVED***edAccessType" | "TSInferType" | "TSInstantiationE***REMOVED***pression" | "TSInterfaceBody" | "TSInterfaceDeclaration" | "TSIntersectionType" | "TSIntrinsicKeyword" | "TSLiteralType" | "TSMappedType" | "TSMethodSignature" | "TSModuleBlock" | "TSModuleDeclaration" | "TSNamedTupleMember" | "TSNamespaceE***REMOVED***portDeclaration" | "TSNeverKeyword" | "TSNonNullE***REMOVED***pression" | "TSNullKeyword" | "TSNumberKeyword" | "TSObjectKeyword" | "TSOptionalType" | "TSParameterProperty" | "TSParenthesizedType" | "TSPropertySignature" | "TSQualifiedName" | "TSRestType" | "TSSatisfiesE***REMOVED***pression" | "TSStringKeyword" | "TSSymbolKeyword" | "TSThisType" | "TSTupleType" | "TSTypeAliasDeclaration" | "TSTypeAnnotation" | "TSTypeAssertion" | "TSTypeLiteral" | "TSTypeOperator" | "TSTypeParameter" | "TSTypeParameterDeclaration" | "TSTypeParameterInstantiation" | "TSTypePredicate" | "TSTypeQuery" | "TSTypeReference" | "TSUndefinedKeyword" | "TSUnionType" | "TSUnknownKeyword" | "TSVoidKeyword" | "TaggedTemplateE***REMOVED***pression" | "TemplateElement" | "TemplateLiteral" | "ThisE***REMOVED***pression" | "ThisTypeAnnotation" | "ThrowStatement" | "TopicReference" | "TryStatement" | "TupleE***REMOVED***pression" | "TupleTypeAnnotation" | "TypeAlias" | "TypeAnnotation" | "TypeCastE***REMOVED***pression" | "TypeParameter" | "TypeParameterDeclaration" | "TypeParameterInstantiation" | "TypeofTypeAnnotation" | "UnaryE***REMOVED***pression" | "UnionTypeAnnotation" | "UpdateE***REMOVED***pression" | "V8IntrinsicIdentifier" | "VariableDeclaration" | "VariableDeclarator" | "Variance" | "VoidTypeAnnotation" | "WhileStatement" | "WithStatement" | "YieldE***REMOVED***pression" | keyof Aliases)[];
declare const MISCELLANEOUS_TYPES: ("AnyTypeAnnotation" | "ArgumentPlaceholder" | "ArrayE***REMOVED***pression" | "ArrayPattern" | "ArrayTypeAnnotation" | "ArrowFunctionE***REMOVED***pression" | "AssignmentE***REMOVED***pression" | "AssignmentPattern" | "AwaitE***REMOVED***pression" | "BigIntLiteral" | "BinaryE***REMOVED***pression" | "BindE***REMOVED***pression" | "BlockStatement" | "BooleanLiteral" | "BooleanLiteralTypeAnnotation" | "BooleanTypeAnnotation" | "BreakStatement" | "CallE***REMOVED***pression" | "CatchClause" | "ClassAccessorProperty" | "ClassBody" | "ClassDeclaration" | "ClassE***REMOVED***pression" | "ClassImplements" | "ClassMethod" | "ClassPrivateMethod" | "ClassPrivateProperty" | "ClassProperty" | "ConditionalE***REMOVED***pression" | "ContinueStatement" | "DebuggerStatement" | "DecimalLiteral" | "DeclareClass" | "DeclareE***REMOVED***portAllDeclaration" | "DeclareE***REMOVED***portDeclaration" | "DeclareFunction" | "DeclareInterface" | "DeclareModule" | "DeclareModuleE***REMOVED***ports" | "DeclareOpaqueType" | "DeclareTypeAlias" | "DeclareVariable" | "DeclaredPredicate" | "Decorator" | "Directive" | "DirectiveLiteral" | "DoE***REMOVED***pression" | "DoWhileStatement" | "EmptyStatement" | "EmptyTypeAnnotation" | "EnumBooleanBody" | "EnumBooleanMember" | "EnumDeclaration" | "EnumDefaultedMember" | "EnumNumberBody" | "EnumNumberMember" | "EnumStringBody" | "EnumStringMember" | "EnumSymbolBody" | "E***REMOVED***istsTypeAnnotation" | "E***REMOVED***portAllDeclaration" | "E***REMOVED***portDefaultDeclaration" | "E***REMOVED***portDefaultSpecifier" | "E***REMOVED***portNamedDeclaration" | "E***REMOVED***portNamespaceSpecifier" | "E***REMOVED***portSpecifier" | "E***REMOVED***pressionStatement" | "File" | "ForInStatement" | "ForOfStatement" | "ForStatement" | "FunctionDeclaration" | "FunctionE***REMOVED***pression" | "FunctionTypeAnnotation" | "FunctionTypeParam" | "GenericTypeAnnotation" | "Identifier" | "IfStatement" | "Import" | "ImportAttribute" | "ImportDeclaration" | "ImportDefaultSpecifier" | "ImportE***REMOVED***pression" | "ImportNamespaceSpecifier" | "ImportSpecifier" | "Inde***REMOVED***edAccessType" | "InferredPredicate" | "InterfaceDeclaration" | "InterfaceE***REMOVED***tends" | "InterfaceTypeAnnotation" | "InterpreterDirective" | "IntersectionTypeAnnotation" | "JSXAttribute" | "JSXClosingElement" | "JSXClosingFragment" | "JSXElement" | "JSXEmptyE***REMOVED***pression" | "JSXE***REMOVED***pressionContainer" | "JSXFragment" | "JSXIdentifier" | "JSXMemberE***REMOVED***pression" | "JSXNamespacedName" | "JSXOpeningElement" | "JSXOpeningFragment" | "JSXSpreadAttribute" | "JSXSpreadChild" | "JSXTe***REMOVED***t" | "LabeledStatement" | "LogicalE***REMOVED***pression" | "MemberE***REMOVED***pression" | "MetaProperty" | "Mi***REMOVED***edTypeAnnotation" | "ModuleE***REMOVED***pression" | "NewE***REMOVED***pression" | "Noop" | "NullLiteral" | "NullLiteralTypeAnnotation" | "NullableTypeAnnotation" | "NumberLiteral" | "NumberLiteralTypeAnnotation" | "NumberTypeAnnotation" | "NumericLiteral" | "ObjectE***REMOVED***pression" | "ObjectMethod" | "ObjectPattern" | "ObjectProperty" | "ObjectTypeAnnotation" | "ObjectTypeCallProperty" | "ObjectTypeInde***REMOVED***er" | "ObjectTypeInternalSlot" | "ObjectTypeProperty" | "ObjectTypeSpreadProperty" | "OpaqueType" | "OptionalCallE***REMOVED***pression" | "OptionalInde***REMOVED***edAccessType" | "OptionalMemberE***REMOVED***pression" | "ParenthesizedE***REMOVED***pression" | "PipelineBareFunction" | "PipelinePrimaryTopicReference" | "PipelineTopicE***REMOVED***pression" | "Placeholder" | "PrivateName" | "Program" | "QualifiedTypeIdentifier" | "RecordE***REMOVED***pression" | "RegE***REMOVED***pLiteral" | "Rege***REMOVED***Literal" | "RestElement" | "RestProperty" | "ReturnStatement" | "SequenceE***REMOVED***pression" | "SpreadElement" | "SpreadProperty" | "StaticBlock" | "StringLiteral" | "StringLiteralTypeAnnotation" | "StringTypeAnnotation" | "Super" | "SwitchCase" | "SwitchStatement" | "SymbolTypeAnnotation" | "TSAnyKeyword" | "TSArrayType" | "TSAsE***REMOVED***pression" | "TSBigIntKeyword" | "TSBooleanKeyword" | "TSCallSignatureDeclaration" | "TSConditionalType" | "TSConstructSignatureDeclaration" | "TSConstructorType" | "TSDeclareFunction" | "TSDeclareMethod" | "TSEnumDeclaration" | "TSEnumMember" | "TSE***REMOVED***portAssignment" | "TSE***REMOVED***pressionWithTypeArguments" | "TSE***REMOVED***ternalModuleReference" | "TSFunctionType" | "TSImportEqualsDeclaration" | "TSImportType" | "TSInde***REMOVED***Signature" | "TSInde***REMOVED***edAccessType" | "TSInferType" | "TSInstantiationE***REMOVED***pression" | "TSInterfaceBody" | "TSInterfaceDeclaration" | "TSIntersectionType" | "TSIntrinsicKeyword" | "TSLiteralType" | "TSMappedType" | "TSMethodSignature" | "TSModuleBlock" | "TSModuleDeclaration" | "TSNamedTupleMember" | "TSNamespaceE***REMOVED***portDeclaration" | "TSNeverKeyword" | "TSNonNullE***REMOVED***pression" | "TSNullKeyword" | "TSNumberKeyword" | "TSObjectKeyword" | "TSOptionalType" | "TSParameterProperty" | "TSParenthesizedType" | "TSPropertySignature" | "TSQualifiedName" | "TSRestType" | "TSSatisfiesE***REMOVED***pression" | "TSStringKeyword" | "TSSymbolKeyword" | "TSThisType" | "TSTupleType" | "TSTypeAliasDeclaration" | "TSTypeAnnotation" | "TSTypeAssertion" | "TSTypeLiteral" | "TSTypeOperator" | "TSTypeParameter" | "TSTypeParameterDeclaration" | "TSTypeParameterInstantiation" | "TSTypePredicate" | "TSTypeQuery" | "TSTypeReference" | "TSUndefinedKeyword" | "TSUnionType" | "TSUnknownKeyword" | "TSVoidKeyword" | "TaggedTemplateE***REMOVED***pression" | "TemplateElement" | "TemplateLiteral" | "ThisE***REMOVED***pression" | "ThisTypeAnnotation" | "ThrowStatement" | "TopicReference" | "TryStatement" | "TupleE***REMOVED***pression" | "TupleTypeAnnotation" | "TypeAlias" | "TypeAnnotation" | "TypeCastE***REMOVED***pression" | "TypeParameter" | "TypeParameterDeclaration" | "TypeParameterInstantiation" | "TypeofTypeAnnotation" | "UnaryE***REMOVED***pression" | "UnionTypeAnnotation" | "UpdateE***REMOVED***pression" | "V8IntrinsicIdentifier" | "VariableDeclaration" | "VariableDeclarator" | "Variance" | "VoidTypeAnnotation" | "WhileStatement" | "WithStatement" | "YieldE***REMOVED***pression" | keyof Aliases)[];
declare const TYPESCRIPT_TYPES: ("AnyTypeAnnotation" | "ArgumentPlaceholder" | "ArrayE***REMOVED***pression" | "ArrayPattern" | "ArrayTypeAnnotation" | "ArrowFunctionE***REMOVED***pression" | "AssignmentE***REMOVED***pression" | "AssignmentPattern" | "AwaitE***REMOVED***pression" | "BigIntLiteral" | "BinaryE***REMOVED***pression" | "BindE***REMOVED***pression" | "BlockStatement" | "BooleanLiteral" | "BooleanLiteralTypeAnnotation" | "BooleanTypeAnnotation" | "BreakStatement" | "CallE***REMOVED***pression" | "CatchClause" | "ClassAccessorProperty" | "ClassBody" | "ClassDeclaration" | "ClassE***REMOVED***pression" | "ClassImplements" | "ClassMethod" | "ClassPrivateMethod" | "ClassPrivateProperty" | "ClassProperty" | "ConditionalE***REMOVED***pression" | "ContinueStatement" | "DebuggerStatement" | "DecimalLiteral" | "DeclareClass" | "DeclareE***REMOVED***portAllDeclaration" | "DeclareE***REMOVED***portDeclaration" | "DeclareFunction" | "DeclareInterface" | "DeclareModule" | "DeclareModuleE***REMOVED***ports" | "DeclareOpaqueType" | "DeclareTypeAlias" | "DeclareVariable" | "DeclaredPredicate" | "Decorator" | "Directive" | "DirectiveLiteral" | "DoE***REMOVED***pression" | "DoWhileStatement" | "EmptyStatement" | "EmptyTypeAnnotation" | "EnumBooleanBody" | "EnumBooleanMember" | "EnumDeclaration" | "EnumDefaultedMember" | "EnumNumberBody" | "EnumNumberMember" | "EnumStringBody" | "EnumStringMember" | "EnumSymbolBody" | "E***REMOVED***istsTypeAnnotation" | "E***REMOVED***portAllDeclaration" | "E***REMOVED***portDefaultDeclaration" | "E***REMOVED***portDefaultSpecifier" | "E***REMOVED***portNamedDeclaration" | "E***REMOVED***portNamespaceSpecifier" | "E***REMOVED***portSpecifier" | "E***REMOVED***pressionStatement" | "File" | "ForInStatement" | "ForOfStatement" | "ForStatement" | "FunctionDeclaration" | "FunctionE***REMOVED***pression" | "FunctionTypeAnnotation" | "FunctionTypeParam" | "GenericTypeAnnotation" | "Identifier" | "IfStatement" | "Import" | "ImportAttribute" | "ImportDeclaration" | "ImportDefaultSpecifier" | "ImportE***REMOVED***pression" | "ImportNamespaceSpecifier" | "ImportSpecifier" | "Inde***REMOVED***edAccessType" | "InferredPredicate" | "InterfaceDeclaration" | "InterfaceE***REMOVED***tends" | "InterfaceTypeAnnotation" | "InterpreterDirective" | "IntersectionTypeAnnotation" | "JSXAttribute" | "JSXClosingElement" | "JSXClosingFragment" | "JSXElement" | "JSXEmptyE***REMOVED***pression" | "JSXE***REMOVED***pressionContainer" | "JSXFragment" | "JSXIdentifier" | "JSXMemberE***REMOVED***pression" | "JSXNamespacedName" | "JSXOpeningElement" | "JSXOpeningFragment" | "JSXSpreadAttribute" | "JSXSpreadChild" | "JSXTe***REMOVED***t" | "LabeledStatement" | "LogicalE***REMOVED***pression" | "MemberE***REMOVED***pression" | "MetaProperty" | "Mi***REMOVED***edTypeAnnotation" | "ModuleE***REMOVED***pression" | "NewE***REMOVED***pression" | "Noop" | "NullLiteral" | "NullLiteralTypeAnnotation" | "NullableTypeAnnotation" | "NumberLiteral" | "NumberLiteralTypeAnnotation" | "NumberTypeAnnotation" | "NumericLiteral" | "ObjectE***REMOVED***pression" | "ObjectMethod" | "ObjectPattern" | "ObjectProperty" | "ObjectTypeAnnotation" | "ObjectTypeCallProperty" | "ObjectTypeInde***REMOVED***er" | "ObjectTypeInternalSlot" | "ObjectTypeProperty" | "ObjectTypeSpreadProperty" | "OpaqueType" | "OptionalCallE***REMOVED***pression" | "OptionalInde***REMOVED***edAccessType" | "OptionalMemberE***REMOVED***pression" | "ParenthesizedE***REMOVED***pression" | "PipelineBareFunction" | "PipelinePrimaryTopicReference" | "PipelineTopicE***REMOVED***pression" | "Placeholder" | "PrivateName" | "Program" | "QualifiedTypeIdentifier" | "RecordE***REMOVED***pression" | "RegE***REMOVED***pLiteral" | "Rege***REMOVED***Literal" | "RestElement" | "RestProperty" | "ReturnStatement" | "SequenceE***REMOVED***pression" | "SpreadElement" | "SpreadProperty" | "StaticBlock" | "StringLiteral" | "StringLiteralTypeAnnotation" | "StringTypeAnnotation" | "Super" | "SwitchCase" | "SwitchStatement" | "SymbolTypeAnnotation" | "TSAnyKeyword" | "TSArrayType" | "TSAsE***REMOVED***pression" | "TSBigIntKeyword" | "TSBooleanKeyword" | "TSCallSignatureDeclaration" | "TSConditionalType" | "TSConstructSignatureDeclaration" | "TSConstructorType" | "TSDeclareFunction" | "TSDeclareMethod" | "TSEnumDeclaration" | "TSEnumMember" | "TSE***REMOVED***portAssignment" | "TSE***REMOVED***pressionWithTypeArguments" | "TSE***REMOVED***ternalModuleReference" | "TSFunctionType" | "TSImportEqualsDeclaration" | "TSImportType" | "TSInde***REMOVED***Signature" | "TSInde***REMOVED***edAccessType" | "TSInferType" | "TSInstantiationE***REMOVED***pression" | "TSInterfaceBody" | "TSInterfaceDeclaration" | "TSIntersectionType" | "TSIntrinsicKeyword" | "TSLiteralType" | "TSMappedType" | "TSMethodSignature" | "TSModuleBlock" | "TSModuleDeclaration" | "TSNamedTupleMember" | "TSNamespaceE***REMOVED***portDeclaration" | "TSNeverKeyword" | "TSNonNullE***REMOVED***pression" | "TSNullKeyword" | "TSNumberKeyword" | "TSObjectKeyword" | "TSOptionalType" | "TSParameterProperty" | "TSParenthesizedType" | "TSPropertySignature" | "TSQualifiedName" | "TSRestType" | "TSSatisfiesE***REMOVED***pression" | "TSStringKeyword" | "TSSymbolKeyword" | "TSThisType" | "TSTupleType" | "TSTypeAliasDeclaration" | "TSTypeAnnotation" | "TSTypeAssertion" | "TSTypeLiteral" | "TSTypeOperator" | "TSTypeParameter" | "TSTypeParameterDeclaration" | "TSTypeParameterInstantiation" | "TSTypePredicate" | "TSTypeQuery" | "TSTypeReference" | "TSUndefinedKeyword" | "TSUnionType" | "TSUnknownKeyword" | "TSVoidKeyword" | "TaggedTemplateE***REMOVED***pression" | "TemplateElement" | "TemplateLiteral" | "ThisE***REMOVED***pression" | "ThisTypeAnnotation" | "ThrowStatement" | "TopicReference" | "TryStatement" | "TupleE***REMOVED***pression" | "TupleTypeAnnotation" | "TypeAlias" | "TypeAnnotation" | "TypeCastE***REMOVED***pression" | "TypeParameter" | "TypeParameterDeclaration" | "TypeParameterInstantiation" | "TypeofTypeAnnotation" | "UnaryE***REMOVED***pression" | "UnionTypeAnnotation" | "UpdateE***REMOVED***pression" | "V8IntrinsicIdentifier" | "VariableDeclaration" | "VariableDeclarator" | "Variance" | "VoidTypeAnnotation" | "WhileStatement" | "WithStatement" | "YieldE***REMOVED***pression" | keyof Aliases)[];
declare const TSTYPEELEMENT_TYPES: ("AnyTypeAnnotation" | "ArgumentPlaceholder" | "ArrayE***REMOVED***pression" | "ArrayPattern" | "ArrayTypeAnnotation" | "ArrowFunctionE***REMOVED***pression" | "AssignmentE***REMOVED***pression" | "AssignmentPattern" | "AwaitE***REMOVED***pression" | "BigIntLiteral" | "BinaryE***REMOVED***pression" | "BindE***REMOVED***pression" | "BlockStatement" | "BooleanLiteral" | "BooleanLiteralTypeAnnotation" | "BooleanTypeAnnotation" | "BreakStatement" | "CallE***REMOVED***pression" | "CatchClause" | "ClassAccessorProperty" | "ClassBody" | "ClassDeclaration" | "ClassE***REMOVED***pression" | "ClassImplements" | "ClassMethod" | "ClassPrivateMethod" | "ClassPrivateProperty" | "ClassProperty" | "ConditionalE***REMOVED***pression" | "ContinueStatement" | "DebuggerStatement" | "DecimalLiteral" | "DeclareClass" | "DeclareE***REMOVED***portAllDeclaration" | "DeclareE***REMOVED***portDeclaration" | "DeclareFunction" | "DeclareInterface" | "DeclareModule" | "DeclareModuleE***REMOVED***ports" | "DeclareOpaqueType" | "DeclareTypeAlias" | "DeclareVariable" | "DeclaredPredicate" | "Decorator" | "Directive" | "DirectiveLiteral" | "DoE***REMOVED***pression" | "DoWhileStatement" | "EmptyStatement" | "EmptyTypeAnnotation" | "EnumBooleanBody" | "EnumBooleanMember" | "EnumDeclaration" | "EnumDefaultedMember" | "EnumNumberBody" | "EnumNumberMember" | "EnumStringBody" | "EnumStringMember" | "EnumSymbolBody" | "E***REMOVED***istsTypeAnnotation" | "E***REMOVED***portAllDeclaration" | "E***REMOVED***portDefaultDeclaration" | "E***REMOVED***portDefaultSpecifier" | "E***REMOVED***portNamedDeclaration" | "E***REMOVED***portNamespaceSpecifier" | "E***REMOVED***portSpecifier" | "E***REMOVED***pressionStatement" | "File" | "ForInStatement" | "ForOfStatement" | "ForStatement" | "FunctionDeclaration" | "FunctionE***REMOVED***pression" | "FunctionTypeAnnotation" | "FunctionTypeParam" | "GenericTypeAnnotation" | "Identifier" | "IfStatement" | "Import" | "ImportAttribute" | "ImportDeclaration" | "ImportDefaultSpecifier" | "ImportE***REMOVED***pression" | "ImportNamespaceSpecifier" | "ImportSpecifier" | "Inde***REMOVED***edAccessType" | "InferredPredicate" | "InterfaceDeclaration" | "InterfaceE***REMOVED***tends" | "InterfaceTypeAnnotation" | "InterpreterDirective" | "IntersectionTypeAnnotation" | "JSXAttribute" | "JSXClosingElement" | "JSXClosingFragment" | "JSXElement" | "JSXEmptyE***REMOVED***pression" | "JSXE***REMOVED***pressionContainer" | "JSXFragment" | "JSXIdentifier" | "JSXMemberE***REMOVED***pression" | "JSXNamespacedName" | "JSXOpeningElement" | "JSXOpeningFragment" | "JSXSpreadAttribute" | "JSXSpreadChild" | "JSXTe***REMOVED***t" | "LabeledStatement" | "LogicalE***REMOVED***pression" | "MemberE***REMOVED***pression" | "MetaProperty" | "Mi***REMOVED***edTypeAnnotation" | "ModuleE***REMOVED***pression" | "NewE***REMOVED***pression" | "Noop" | "NullLiteral" | "NullLiteralTypeAnnotation" | "NullableTypeAnnotation" | "NumberLiteral" | "NumberLiteralTypeAnnotation" | "NumberTypeAnnotation" | "NumericLiteral" | "ObjectE***REMOVED***pression" | "ObjectMethod" | "ObjectPattern" | "ObjectProperty" | "ObjectTypeAnnotation" | "ObjectTypeCallProperty" | "ObjectTypeInde***REMOVED***er" | "ObjectTypeInternalSlot" | "ObjectTypeProperty" | "ObjectTypeSpreadProperty" | "OpaqueType" | "OptionalCallE***REMOVED***pression" | "OptionalInde***REMOVED***edAccessType" | "OptionalMemberE***REMOVED***pression" | "ParenthesizedE***REMOVED***pression" | "PipelineBareFunction" | "PipelinePrimaryTopicReference" | "PipelineTopicE***REMOVED***pression" | "Placeholder" | "PrivateName" | "Program" | "QualifiedTypeIdentifier" | "RecordE***REMOVED***pression" | "RegE***REMOVED***pLiteral" | "Rege***REMOVED***Literal" | "RestElement" | "RestProperty" | "ReturnStatement" | "SequenceE***REMOVED***pression" | "SpreadElement" | "SpreadProperty" | "StaticBlock" | "StringLiteral" | "StringLiteralTypeAnnotation" | "StringTypeAnnotation" | "Super" | "SwitchCase" | "SwitchStatement" | "SymbolTypeAnnotation" | "TSAnyKeyword" | "TSArrayType" | "TSAsE***REMOVED***pression" | "TSBigIntKeyword" | "TSBooleanKeyword" | "TSCallSignatureDeclaration" | "TSConditionalType" | "TSConstructSignatureDeclaration" | "TSConstructorType" | "TSDeclareFunction" | "TSDeclareMethod" | "TSEnumDeclaration" | "TSEnumMember" | "TSE***REMOVED***portAssignment" | "TSE***REMOVED***pressionWithTypeArguments" | "TSE***REMOVED***ternalModuleReference" | "TSFunctionType" | "TSImportEqualsDeclaration" | "TSImportType" | "TSInde***REMOVED***Signature" | "TSInde***REMOVED***edAccessType" | "TSInferType" | "TSInstantiationE***REMOVED***pression" | "TSInterfaceBody" | "TSInterfaceDeclaration" | "TSIntersectionType" | "TSIntrinsicKeyword" | "TSLiteralType" | "TSMappedType" | "TSMethodSignature" | "TSModuleBlock" | "TSModuleDeclaration" | "TSNamedTupleMember" | "TSNamespaceE***REMOVED***portDeclaration" | "TSNeverKeyword" | "TSNonNullE***REMOVED***pression" | "TSNullKeyword" | "TSNumberKeyword" | "TSObjectKeyword" | "TSOptionalType" | "TSParameterProperty" | "TSParenthesizedType" | "TSPropertySignature" | "TSQualifiedName" | "TSRestType" | "TSSatisfiesE***REMOVED***pression" | "TSStringKeyword" | "TSSymbolKeyword" | "TSThisType" | "TSTupleType" | "TSTypeAliasDeclaration" | "TSTypeAnnotation" | "TSTypeAssertion" | "TSTypeLiteral" | "TSTypeOperator" | "TSTypeParameter" | "TSTypeParameterDeclaration" | "TSTypeParameterInstantiation" | "TSTypePredicate" | "TSTypeQuery" | "TSTypeReference" | "TSUndefinedKeyword" | "TSUnionType" | "TSUnknownKeyword" | "TSVoidKeyword" | "TaggedTemplateE***REMOVED***pression" | "TemplateElement" | "TemplateLiteral" | "ThisE***REMOVED***pression" | "ThisTypeAnnotation" | "ThrowStatement" | "TopicReference" | "TryStatement" | "TupleE***REMOVED***pression" | "TupleTypeAnnotation" | "TypeAlias" | "TypeAnnotation" | "TypeCastE***REMOVED***pression" | "TypeParameter" | "TypeParameterDeclaration" | "TypeParameterInstantiation" | "TypeofTypeAnnotation" | "UnaryE***REMOVED***pression" | "UnionTypeAnnotation" | "UpdateE***REMOVED***pression" | "V8IntrinsicIdentifier" | "VariableDeclaration" | "VariableDeclarator" | "Variance" | "VoidTypeAnnotation" | "WhileStatement" | "WithStatement" | "YieldE***REMOVED***pression" | keyof Aliases)[];
declare const TSTYPE_TYPES: ("AnyTypeAnnotation" | "ArgumentPlaceholder" | "ArrayE***REMOVED***pression" | "ArrayPattern" | "ArrayTypeAnnotation" | "ArrowFunctionE***REMOVED***pression" | "AssignmentE***REMOVED***pression" | "AssignmentPattern" | "AwaitE***REMOVED***pression" | "BigIntLiteral" | "BinaryE***REMOVED***pression" | "BindE***REMOVED***pression" | "BlockStatement" | "BooleanLiteral" | "BooleanLiteralTypeAnnotation" | "BooleanTypeAnnotation" | "BreakStatement" | "CallE***REMOVED***pression" | "CatchClause" | "ClassAccessorProperty" | "ClassBody" | "ClassDeclaration" | "ClassE***REMOVED***pression" | "ClassImplements" | "ClassMethod" | "ClassPrivateMethod" | "ClassPrivateProperty" | "ClassProperty" | "ConditionalE***REMOVED***pression" | "ContinueStatement" | "DebuggerStatement" | "DecimalLiteral" | "DeclareClass" | "DeclareE***REMOVED***portAllDeclaration" | "DeclareE***REMOVED***portDeclaration" | "DeclareFunction" | "DeclareInterface" | "DeclareModule" | "DeclareModuleE***REMOVED***ports" | "DeclareOpaqueType" | "DeclareTypeAlias" | "DeclareVariable" | "DeclaredPredicate" | "Decorator" | "Directive" | "DirectiveLiteral" | "DoE***REMOVED***pression" | "DoWhileStatement" | "EmptyStatement" | "EmptyTypeAnnotation" | "EnumBooleanBody" | "EnumBooleanMember" | "EnumDeclaration" | "EnumDefaultedMember" | "EnumNumberBody" | "EnumNumberMember" | "EnumStringBody" | "EnumStringMember" | "EnumSymbolBody" | "E***REMOVED***istsTypeAnnotation" | "E***REMOVED***portAllDeclaration" | "E***REMOVED***portDefaultDeclaration" | "E***REMOVED***portDefaultSpecifier" | "E***REMOVED***portNamedDeclaration" | "E***REMOVED***portNamespaceSpecifier" | "E***REMOVED***portSpecifier" | "E***REMOVED***pressionStatement" | "File" | "ForInStatement" | "ForOfStatement" | "ForStatement" | "FunctionDeclaration" | "FunctionE***REMOVED***pression" | "FunctionTypeAnnotation" | "FunctionTypeParam" | "GenericTypeAnnotation" | "Identifier" | "IfStatement" | "Import" | "ImportAttribute" | "ImportDeclaration" | "ImportDefaultSpecifier" | "ImportE***REMOVED***pression" | "ImportNamespaceSpecifier" | "ImportSpecifier" | "Inde***REMOVED***edAccessType" | "InferredPredicate" | "InterfaceDeclaration" | "InterfaceE***REMOVED***tends" | "InterfaceTypeAnnotation" | "InterpreterDirective" | "IntersectionTypeAnnotation" | "JSXAttribute" | "JSXClosingElement" | "JSXClosingFragment" | "JSXElement" | "JSXEmptyE***REMOVED***pression" | "JSXE***REMOVED***pressionContainer" | "JSXFragment" | "JSXIdentifier" | "JSXMemberE***REMOVED***pression" | "JSXNamespacedName" | "JSXOpeningElement" | "JSXOpeningFragment" | "JSXSpreadAttribute" | "JSXSpreadChild" | "JSXTe***REMOVED***t" | "LabeledStatement" | "LogicalE***REMOVED***pression" | "MemberE***REMOVED***pression" | "MetaProperty" | "Mi***REMOVED***edTypeAnnotation" | "ModuleE***REMOVED***pression" | "NewE***REMOVED***pression" | "Noop" | "NullLiteral" | "NullLiteralTypeAnnotation" | "NullableTypeAnnotation" | "NumberLiteral" | "NumberLiteralTypeAnnotation" | "NumberTypeAnnotation" | "NumericLiteral" | "ObjectE***REMOVED***pression" | "ObjectMethod" | "ObjectPattern" | "ObjectProperty" | "ObjectTypeAnnotation" | "ObjectTypeCallProperty" | "ObjectTypeInde***REMOVED***er" | "ObjectTypeInternalSlot" | "ObjectTypeProperty" | "ObjectTypeSpreadProperty" | "OpaqueType" | "OptionalCallE***REMOVED***pression" | "OptionalInde***REMOVED***edAccessType" | "OptionalMemberE***REMOVED***pression" | "ParenthesizedE***REMOVED***pression" | "PipelineBareFunction" | "PipelinePrimaryTopicReference" | "PipelineTopicE***REMOVED***pression" | "Placeholder" | "PrivateName" | "Program" | "QualifiedTypeIdentifier" | "RecordE***REMOVED***pression" | "RegE***REMOVED***pLiteral" | "Rege***REMOVED***Literal" | "RestElement" | "RestProperty" | "ReturnStatement" | "SequenceE***REMOVED***pression" | "SpreadElement" | "SpreadProperty" | "StaticBlock" | "StringLiteral" | "StringLiteralTypeAnnotation" | "StringTypeAnnotation" | "Super" | "SwitchCase" | "SwitchStatement" | "SymbolTypeAnnotation" | "TSAnyKeyword" | "TSArrayType" | "TSAsE***REMOVED***pression" | "TSBigIntKeyword" | "TSBooleanKeyword" | "TSCallSignatureDeclaration" | "TSConditionalType" | "TSConstructSignatureDeclaration" | "TSConstructorType" | "TSDeclareFunction" | "TSDeclareMethod" | "TSEnumDeclaration" | "TSEnumMember" | "TSE***REMOVED***portAssignment" | "TSE***REMOVED***pressionWithTypeArguments" | "TSE***REMOVED***ternalModuleReference" | "TSFunctionType" | "TSImportEqualsDeclaration" | "TSImportType" | "TSInde***REMOVED***Signature" | "TSInde***REMOVED***edAccessType" | "TSInferType" | "TSInstantiationE***REMOVED***pression" | "TSInterfaceBody" | "TSInterfaceDeclaration" | "TSIntersectionType" | "TSIntrinsicKeyword" | "TSLiteralType" | "TSMappedType" | "TSMethodSignature" | "TSModuleBlock" | "TSModuleDeclaration" | "TSNamedTupleMember" | "TSNamespaceE***REMOVED***portDeclaration" | "TSNeverKeyword" | "TSNonNullE***REMOVED***pression" | "TSNullKeyword" | "TSNumberKeyword" | "TSObjectKeyword" | "TSOptionalType" | "TSParameterProperty" | "TSParenthesizedType" | "TSPropertySignature" | "TSQualifiedName" | "TSRestType" | "TSSatisfiesE***REMOVED***pression" | "TSStringKeyword" | "TSSymbolKeyword" | "TSThisType" | "TSTupleType" | "TSTypeAliasDeclaration" | "TSTypeAnnotation" | "TSTypeAssertion" | "TSTypeLiteral" | "TSTypeOperator" | "TSTypeParameter" | "TSTypeParameterDeclaration" | "TSTypeParameterInstantiation" | "TSTypePredicate" | "TSTypeQuery" | "TSTypeReference" | "TSUndefinedKeyword" | "TSUnionType" | "TSUnknownKeyword" | "TSVoidKeyword" | "TaggedTemplateE***REMOVED***pression" | "TemplateElement" | "TemplateLiteral" | "ThisE***REMOVED***pression" | "ThisTypeAnnotation" | "ThrowStatement" | "TopicReference" | "TryStatement" | "TupleE***REMOVED***pression" | "TupleTypeAnnotation" | "TypeAlias" | "TypeAnnotation" | "TypeCastE***REMOVED***pression" | "TypeParameter" | "TypeParameterDeclaration" | "TypeParameterInstantiation" | "TypeofTypeAnnotation" | "UnaryE***REMOVED***pression" | "UnionTypeAnnotation" | "UpdateE***REMOVED***pression" | "V8IntrinsicIdentifier" | "VariableDeclaration" | "VariableDeclarator" | "Variance" | "VoidTypeAnnotation" | "WhileStatement" | "WithStatement" | "YieldE***REMOVED***pression" | keyof Aliases)[];
declare const TSBASETYPE_TYPES: ("AnyTypeAnnotation" | "ArgumentPlaceholder" | "ArrayE***REMOVED***pression" | "ArrayPattern" | "ArrayTypeAnnotation" | "ArrowFunctionE***REMOVED***pression" | "AssignmentE***REMOVED***pression" | "AssignmentPattern" | "AwaitE***REMOVED***pression" | "BigIntLiteral" | "BinaryE***REMOVED***pression" | "BindE***REMOVED***pression" | "BlockStatement" | "BooleanLiteral" | "BooleanLiteralTypeAnnotation" | "BooleanTypeAnnotation" | "BreakStatement" | "CallE***REMOVED***pression" | "CatchClause" | "ClassAccessorProperty" | "ClassBody" | "ClassDeclaration" | "ClassE***REMOVED***pression" | "ClassImplements" | "ClassMethod" | "ClassPrivateMethod" | "ClassPrivateProperty" | "ClassProperty" | "ConditionalE***REMOVED***pression" | "ContinueStatement" | "DebuggerStatement" | "DecimalLiteral" | "DeclareClass" | "DeclareE***REMOVED***portAllDeclaration" | "DeclareE***REMOVED***portDeclaration" | "DeclareFunction" | "DeclareInterface" | "DeclareModule" | "DeclareModuleE***REMOVED***ports" | "DeclareOpaqueType" | "DeclareTypeAlias" | "DeclareVariable" | "DeclaredPredicate" | "Decorator" | "Directive" | "DirectiveLiteral" | "DoE***REMOVED***pression" | "DoWhileStatement" | "EmptyStatement" | "EmptyTypeAnnotation" | "EnumBooleanBody" | "EnumBooleanMember" | "EnumDeclaration" | "EnumDefaultedMember" | "EnumNumberBody" | "EnumNumberMember" | "EnumStringBody" | "EnumStringMember" | "EnumSymbolBody" | "E***REMOVED***istsTypeAnnotation" | "E***REMOVED***portAllDeclaration" | "E***REMOVED***portDefaultDeclaration" | "E***REMOVED***portDefaultSpecifier" | "E***REMOVED***portNamedDeclaration" | "E***REMOVED***portNamespaceSpecifier" | "E***REMOVED***portSpecifier" | "E***REMOVED***pressionStatement" | "File" | "ForInStatement" | "ForOfStatement" | "ForStatement" | "FunctionDeclaration" | "FunctionE***REMOVED***pression" | "FunctionTypeAnnotation" | "FunctionTypeParam" | "GenericTypeAnnotation" | "Identifier" | "IfStatement" | "Import" | "ImportAttribute" | "ImportDeclaration" | "ImportDefaultSpecifier" | "ImportE***REMOVED***pression" | "ImportNamespaceSpecifier" | "ImportSpecifier" | "Inde***REMOVED***edAccessType" | "InferredPredicate" | "InterfaceDeclaration" | "InterfaceE***REMOVED***tends" | "InterfaceTypeAnnotation" | "InterpreterDirective" | "IntersectionTypeAnnotation" | "JSXAttribute" | "JSXClosingElement" | "JSXClosingFragment" | "JSXElement" | "JSXEmptyE***REMOVED***pression" | "JSXE***REMOVED***pressionContainer" | "JSXFragment" | "JSXIdentifier" | "JSXMemberE***REMOVED***pression" | "JSXNamespacedName" | "JSXOpeningElement" | "JSXOpeningFragment" | "JSXSpreadAttribute" | "JSXSpreadChild" | "JSXTe***REMOVED***t" | "LabeledStatement" | "LogicalE***REMOVED***pression" | "MemberE***REMOVED***pression" | "MetaProperty" | "Mi***REMOVED***edTypeAnnotation" | "ModuleE***REMOVED***pression" | "NewE***REMOVED***pression" | "Noop" | "NullLiteral" | "NullLiteralTypeAnnotation" | "NullableTypeAnnotation" | "NumberLiteral" | "NumberLiteralTypeAnnotation" | "NumberTypeAnnotation" | "NumericLiteral" | "ObjectE***REMOVED***pression" | "ObjectMethod" | "ObjectPattern" | "ObjectProperty" | "ObjectTypeAnnotation" | "ObjectTypeCallProperty" | "ObjectTypeInde***REMOVED***er" | "ObjectTypeInternalSlot" | "ObjectTypeProperty" | "ObjectTypeSpreadProperty" | "OpaqueType" | "OptionalCallE***REMOVED***pression" | "OptionalInde***REMOVED***edAccessType" | "OptionalMemberE***REMOVED***pression" | "ParenthesizedE***REMOVED***pression" | "PipelineBareFunction" | "PipelinePrimaryTopicReference" | "PipelineTopicE***REMOVED***pression" | "Placeholder" | "PrivateName" | "Program" | "QualifiedTypeIdentifier" | "RecordE***REMOVED***pression" | "RegE***REMOVED***pLiteral" | "Rege***REMOVED***Literal" | "RestElement" | "RestProperty" | "ReturnStatement" | "SequenceE***REMOVED***pression" | "SpreadElement" | "SpreadProperty" | "StaticBlock" | "StringLiteral" | "StringLiteralTypeAnnotation" | "StringTypeAnnotation" | "Super" | "SwitchCase" | "SwitchStatement" | "SymbolTypeAnnotation" | "TSAnyKeyword" | "TSArrayType" | "TSAsE***REMOVED***pression" | "TSBigIntKeyword" | "TSBooleanKeyword" | "TSCallSignatureDeclaration" | "TSConditionalType" | "TSConstructSignatureDeclaration" | "TSConstructorType" | "TSDeclareFunction" | "TSDeclareMethod" | "TSEnumDeclaration" | "TSEnumMember" | "TSE***REMOVED***portAssignment" | "TSE***REMOVED***pressionWithTypeArguments" | "TSE***REMOVED***ternalModuleReference" | "TSFunctionType" | "TSImportEqualsDeclaration" | "TSImportType" | "TSInde***REMOVED***Signature" | "TSInde***REMOVED***edAccessType" | "TSInferType" | "TSInstantiationE***REMOVED***pression" | "TSInterfaceBody" | "TSInterfaceDeclaration" | "TSIntersectionType" | "TSIntrinsicKeyword" | "TSLiteralType" | "TSMappedType" | "TSMethodSignature" | "TSModuleBlock" | "TSModuleDeclaration" | "TSNamedTupleMember" | "TSNamespaceE***REMOVED***portDeclaration" | "TSNeverKeyword" | "TSNonNullE***REMOVED***pression" | "TSNullKeyword" | "TSNumberKeyword" | "TSObjectKeyword" | "TSOptionalType" | "TSParameterProperty" | "TSParenthesizedType" | "TSPropertySignature" | "TSQualifiedName" | "TSRestType" | "TSSatisfiesE***REMOVED***pression" | "TSStringKeyword" | "TSSymbolKeyword" | "TSThisType" | "TSTupleType" | "TSTypeAliasDeclaration" | "TSTypeAnnotation" | "TSTypeAssertion" | "TSTypeLiteral" | "TSTypeOperator" | "TSTypeParameter" | "TSTypeParameterDeclaration" | "TSTypeParameterInstantiation" | "TSTypePredicate" | "TSTypeQuery" | "TSTypeReference" | "TSUndefinedKeyword" | "TSUnionType" | "TSUnknownKeyword" | "TSVoidKeyword" | "TaggedTemplateE***REMOVED***pression" | "TemplateElement" | "TemplateLiteral" | "ThisE***REMOVED***pression" | "ThisTypeAnnotation" | "ThrowStatement" | "TopicReference" | "TryStatement" | "TupleE***REMOVED***pression" | "TupleTypeAnnotation" | "TypeAlias" | "TypeAnnotation" | "TypeCastE***REMOVED***pression" | "TypeParameter" | "TypeParameterDeclaration" | "TypeParameterInstantiation" | "TypeofTypeAnnotation" | "UnaryE***REMOVED***pression" | "UnionTypeAnnotation" | "UpdateE***REMOVED***pression" | "V8IntrinsicIdentifier" | "VariableDeclaration" | "VariableDeclarator" | "Variance" | "VoidTypeAnnotation" | "WhileStatement" | "WithStatement" | "YieldE***REMOVED***pression" | keyof Aliases)[];
/**
 * @deprecated migrate to IMPORTOREXPORTDECLARATION_TYPES.
 */
declare const MODULEDECLARATION_TYPES: ("AnyTypeAnnotation" | "ArgumentPlaceholder" | "ArrayE***REMOVED***pression" | "ArrayPattern" | "ArrayTypeAnnotation" | "ArrowFunctionE***REMOVED***pression" | "AssignmentE***REMOVED***pression" | "AssignmentPattern" | "AwaitE***REMOVED***pression" | "BigIntLiteral" | "BinaryE***REMOVED***pression" | "BindE***REMOVED***pression" | "BlockStatement" | "BooleanLiteral" | "BooleanLiteralTypeAnnotation" | "BooleanTypeAnnotation" | "BreakStatement" | "CallE***REMOVED***pression" | "CatchClause" | "ClassAccessorProperty" | "ClassBody" | "ClassDeclaration" | "ClassE***REMOVED***pression" | "ClassImplements" | "ClassMethod" | "ClassPrivateMethod" | "ClassPrivateProperty" | "ClassProperty" | "ConditionalE***REMOVED***pression" | "ContinueStatement" | "DebuggerStatement" | "DecimalLiteral" | "DeclareClass" | "DeclareE***REMOVED***portAllDeclaration" | "DeclareE***REMOVED***portDeclaration" | "DeclareFunction" | "DeclareInterface" | "DeclareModule" | "DeclareModuleE***REMOVED***ports" | "DeclareOpaqueType" | "DeclareTypeAlias" | "DeclareVariable" | "DeclaredPredicate" | "Decorator" | "Directive" | "DirectiveLiteral" | "DoE***REMOVED***pression" | "DoWhileStatement" | "EmptyStatement" | "EmptyTypeAnnotation" | "EnumBooleanBody" | "EnumBooleanMember" | "EnumDeclaration" | "EnumDefaultedMember" | "EnumNumberBody" | "EnumNumberMember" | "EnumStringBody" | "EnumStringMember" | "EnumSymbolBody" | "E***REMOVED***istsTypeAnnotation" | "E***REMOVED***portAllDeclaration" | "E***REMOVED***portDefaultDeclaration" | "E***REMOVED***portDefaultSpecifier" | "E***REMOVED***portNamedDeclaration" | "E***REMOVED***portNamespaceSpecifier" | "E***REMOVED***portSpecifier" | "E***REMOVED***pressionStatement" | "File" | "ForInStatement" | "ForOfStatement" | "ForStatement" | "FunctionDeclaration" | "FunctionE***REMOVED***pression" | "FunctionTypeAnnotation" | "FunctionTypeParam" | "GenericTypeAnnotation" | "Identifier" | "IfStatement" | "Import" | "ImportAttribute" | "ImportDeclaration" | "ImportDefaultSpecifier" | "ImportE***REMOVED***pression" | "ImportNamespaceSpecifier" | "ImportSpecifier" | "Inde***REMOVED***edAccessType" | "InferredPredicate" | "InterfaceDeclaration" | "InterfaceE***REMOVED***tends" | "InterfaceTypeAnnotation" | "InterpreterDirective" | "IntersectionTypeAnnotation" | "JSXAttribute" | "JSXClosingElement" | "JSXClosingFragment" | "JSXElement" | "JSXEmptyE***REMOVED***pression" | "JSXE***REMOVED***pressionContainer" | "JSXFragment" | "JSXIdentifier" | "JSXMemberE***REMOVED***pression" | "JSXNamespacedName" | "JSXOpeningElement" | "JSXOpeningFragment" | "JSXSpreadAttribute" | "JSXSpreadChild" | "JSXTe***REMOVED***t" | "LabeledStatement" | "LogicalE***REMOVED***pression" | "MemberE***REMOVED***pression" | "MetaProperty" | "Mi***REMOVED***edTypeAnnotation" | "ModuleE***REMOVED***pression" | "NewE***REMOVED***pression" | "Noop" | "NullLiteral" | "NullLiteralTypeAnnotation" | "NullableTypeAnnotation" | "NumberLiteral" | "NumberLiteralTypeAnnotation" | "NumberTypeAnnotation" | "NumericLiteral" | "ObjectE***REMOVED***pression" | "ObjectMethod" | "ObjectPattern" | "ObjectProperty" | "ObjectTypeAnnotation" | "ObjectTypeCallProperty" | "ObjectTypeInde***REMOVED***er" | "ObjectTypeInternalSlot" | "ObjectTypeProperty" | "ObjectTypeSpreadProperty" | "OpaqueType" | "OptionalCallE***REMOVED***pression" | "OptionalInde***REMOVED***edAccessType" | "OptionalMemberE***REMOVED***pression" | "ParenthesizedE***REMOVED***pression" | "PipelineBareFunction" | "PipelinePrimaryTopicReference" | "PipelineTopicE***REMOVED***pression" | "Placeholder" | "PrivateName" | "Program" | "QualifiedTypeIdentifier" | "RecordE***REMOVED***pression" | "RegE***REMOVED***pLiteral" | "Rege***REMOVED***Literal" | "RestElement" | "RestProperty" | "ReturnStatement" | "SequenceE***REMOVED***pression" | "SpreadElement" | "SpreadProperty" | "StaticBlock" | "StringLiteral" | "StringLiteralTypeAnnotation" | "StringTypeAnnotation" | "Super" | "SwitchCase" | "SwitchStatement" | "SymbolTypeAnnotation" | "TSAnyKeyword" | "TSArrayType" | "TSAsE***REMOVED***pression" | "TSBigIntKeyword" | "TSBooleanKeyword" | "TSCallSignatureDeclaration" | "TSConditionalType" | "TSConstructSignatureDeclaration" | "TSConstructorType" | "TSDeclareFunction" | "TSDeclareMethod" | "TSEnumDeclaration" | "TSEnumMember" | "TSE***REMOVED***portAssignment" | "TSE***REMOVED***pressionWithTypeArguments" | "TSE***REMOVED***ternalModuleReference" | "TSFunctionType" | "TSImportEqualsDeclaration" | "TSImportType" | "TSInde***REMOVED***Signature" | "TSInde***REMOVED***edAccessType" | "TSInferType" | "TSInstantiationE***REMOVED***pression" | "TSInterfaceBody" | "TSInterfaceDeclaration" | "TSIntersectionType" | "TSIntrinsicKeyword" | "TSLiteralType" | "TSMappedType" | "TSMethodSignature" | "TSModuleBlock" | "TSModuleDeclaration" | "TSNamedTupleMember" | "TSNamespaceE***REMOVED***portDeclaration" | "TSNeverKeyword" | "TSNonNullE***REMOVED***pression" | "TSNullKeyword" | "TSNumberKeyword" | "TSObjectKeyword" | "TSOptionalType" | "TSParameterProperty" | "TSParenthesizedType" | "TSPropertySignature" | "TSQualifiedName" | "TSRestType" | "TSSatisfiesE***REMOVED***pression" | "TSStringKeyword" | "TSSymbolKeyword" | "TSThisType" | "TSTupleType" | "TSTypeAliasDeclaration" | "TSTypeAnnotation" | "TSTypeAssertion" | "TSTypeLiteral" | "TSTypeOperator" | "TSTypeParameter" | "TSTypeParameterDeclaration" | "TSTypeParameterInstantiation" | "TSTypePredicate" | "TSTypeQuery" | "TSTypeReference" | "TSUndefinedKeyword" | "TSUnionType" | "TSUnknownKeyword" | "TSVoidKeyword" | "TaggedTemplateE***REMOVED***pression" | "TemplateElement" | "TemplateLiteral" | "ThisE***REMOVED***pression" | "ThisTypeAnnotation" | "ThrowStatement" | "TopicReference" | "TryStatement" | "TupleE***REMOVED***pression" | "TupleTypeAnnotation" | "TypeAlias" | "TypeAnnotation" | "TypeCastE***REMOVED***pression" | "TypeParameter" | "TypeParameterDeclaration" | "TypeParameterInstantiation" | "TypeofTypeAnnotation" | "UnaryE***REMOVED***pression" | "UnionTypeAnnotation" | "UpdateE***REMOVED***pression" | "V8IntrinsicIdentifier" | "VariableDeclaration" | "VariableDeclarator" | "Variance" | "VoidTypeAnnotation" | "WhileStatement" | "WithStatement" | "YieldE***REMOVED***pression" | keyof Aliases)[];

declare const STATEMENT_OR_BLOCK_KEYS: string[];
declare const FLATTENABLE_KEYS: string[];
declare const FOR_INIT_KEYS: string[];
declare const COMMENT_KEYS: readonly ["leadingComments", "trailingComments", "innerComments"];
declare const LOGICAL_OPERATORS: string[];
declare const UPDATE_OPERATORS: string[];
declare const BOOLEAN_NUMBER_BINARY_OPERATORS: string[];
declare const EQUALITY_BINARY_OPERATORS: string[];
declare const COMPARISON_BINARY_OPERATORS: string[];
declare const BOOLEAN_BINARY_OPERATORS: string[];
declare const NUMBER_BINARY_OPERATORS: string[];
declare const BINARY_OPERATORS: string[];
declare const ASSIGNMENT_OPERATORS: string[];
declare const BOOLEAN_UNARY_OPERATORS: string[];
declare const NUMBER_UNARY_OPERATORS: string[];
declare const STRING_UNARY_OPERATORS: string[];
declare const UNARY_OPERATORS: string[];
declare const INHERIT_KEYS: {
    readonly optional: readonly ["typeAnnotation", "typeParameters", "returnType"];
    readonly force: readonly ["start", "loc", "end"];
};
declare const BLOCK_SCOPED_SYMBOL: unique symbol;
declare const NOT_LOCAL_BINDING: unique symbol;

/**
 * Ensure the `key` (defaults to "body") of a `node` is a block.
 * Casting it to a block if it is not.
 *
 * Returns the BlockStatement
 */
declare function ensureBlock(node: Node, key?: string): BlockStatement;

declare function toBindingIdentifierName(name: string): string;

declare function toBlock(node: Statement | E***REMOVED***pression, parent?: Node): BlockStatement;

declare function toComputedKey(node: ObjectMember | ObjectProperty | ClassMethod | ClassProperty | ClassAccessorProperty | MemberE***REMOVED***pression | OptionalMemberE***REMOVED***pression, key?: E***REMOVED***pression | PrivateName): PrivateName | E***REMOVED***pression;

declare const _default$3: {
    (node: Function): FunctionE***REMOVED***pression;
    (node: Class): ClassE***REMOVED***pression;
    (node: E***REMOVED***pressionStatement | E***REMOVED***pression | Class | Function): E***REMOVED***pression;
};
//# sourceMappingURL=toE***REMOVED***pression.d.ts.map

declare function toIdentifier(input: string): string;

declare function toKeyAlias(node: Method | Property, key?: Node): string;
declare namespace toKeyAlias {
    var uid: number;
    var increment: () => number;
}
//# sourceMappingURL=toKeyAlias.d.ts.map

declare const _default$2: {
    (node: AssignmentE***REMOVED***pression, ignore?: boolean): E***REMOVED***pressionStatement;
    <T e***REMOVED***tends Statement>(node: T, ignore: false): T;
    <T e***REMOVED***tends Statement>(node: T, ignore?: boolean): T | false;
    (node: Class, ignore: false): ClassDeclaration;
    (node: Class, ignore?: boolean): ClassDeclaration | false;
    (node: Function, ignore: false): FunctionDeclaration;
    (node: Function, ignore?: boolean): FunctionDeclaration | false;
    (node: Node, ignore: false): Statement;
    (node: Node, ignore?: boolean): Statement | false;
};
//# sourceMappingURL=toStatement.d.ts.map

declare const _default$1: {
    (value: undefined): Identifier;
    (value: boolean): BooleanLiteral;
    (value: null): NullLiteral;
    (value: string): StringLiteral;
    (value: number): NumericLiteral | BinaryE***REMOVED***pression | UnaryE***REMOVED***pression;
    (value: RegE***REMOVED***p): RegE***REMOVED***pLiteral;
    (value: ReadonlyArray<unknown>): ArrayE***REMOVED***pression;
    (value: object): ObjectE***REMOVED***pression;
    (value: unknown): E***REMOVED***pression;
};
//# sourceMappingURL=valueToNode.d.ts.map

declare const VISITOR_KEYS: Record<string, string[]>;
declare const ALIAS_KEYS: Partial<Record<NodeTypesWithoutComment, string[]>>;
declare const FLIPPED_ALIAS_KEYS: Record<string, NodeTypesWithoutComment[]>;
declare const NODE_FIELDS: Record<string, FieldDefinitions>;
declare const BUILDER_KEYS: Record<string, string[]>;
declare const DEPRECATED_KEYS: Record<string, NodeTypesWithoutComment>;
declare const NODE_PARENT_VALIDATIONS: Record<string, Validator>;
declare function getType(val: any): "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function" | "array" | "null";
type NodeTypesWithoutComment = Node["type"] | keyof Aliases;
type NodeTypes = NodeTypesWithoutComment | Comment["type"];
type PrimitiveTypes = ReturnType<typeof getType>;
type FieldDefinitions = {
    [***REMOVED***: string]: FieldOptions;
};
type Validator = ({
    type: PrimitiveTypes;
} | {
    each: Validator;
} | {
    chainOf: Validator[];
} | {
    oneOf: any[];
} | {
    oneOfNodeTypes: NodeTypes[];
} | {
    oneOfNodeOrValueTypes: (NodeTypes | PrimitiveTypes)[];
} | {
    shapeOf: {
        [***REMOVED***: string]: FieldOptions;
    };
} | object) & ((node: Node, key: string, val: any) => void);
type FieldOptions = {
    default?: string | number | boolean | [];
    optional?: boolean;
    deprecated?: boolean;
    validate?: Validator;
};

declare const PLACEHOLDERS: readonly ["Identifier", "StringLiteral", "E***REMOVED***pression", "Statement", "Declaration", "BlockStatement", "ClassBody", "Pattern"];
declare const PLACEHOLDERS_ALIAS: Record<string, string[]>;
declare const PLACEHOLDERS_FLIPPED_ALIAS: Record<string, string[]>;

declare const DEPRECATED_ALIASES: {
    ModuleDeclaration: string;
};

declare const TYPES: Array<string>;
//# sourceMappingURL=inde***REMOVED***.d.ts.map

/**
 * Append a node to a member e***REMOVED***pression.
 */
declare function appendToMemberE***REMOVED***pression(member: MemberE***REMOVED***pression, append: MemberE***REMOVED***pression["property"], computed?: boolean): MemberE***REMOVED***pression;

/**
 * Inherit all conte***REMOVED***tual properties from `parent` node to `child` node.
 */
declare function inherits<T e***REMOVED***tends Node | null | undefined>(child: T, parent: Node | null | undefined): T;

/**
 * Prepend a node to a member e***REMOVED***pression.
 */
declare function prependToMemberE***REMOVED***pression<T e***REMOVED***tends Pick<MemberE***REMOVED***pression, "object" | "property">>(member: T, prepend: MemberE***REMOVED***pression["object"]): T;

type Options = {
    preserveComments?: boolean;
};
/**
 * Remove all of the _* properties from a node along with the additional metadata
 * properties like location data and raw token data.
 */
declare function removeProperties(node: Node, opts?: Options): void;

declare function removePropertiesDeep<T e***REMOVED***tends Node>(tree: T, opts?: {
    preserveComments: boolean;
} | null): T;

/**
 * Dedupe type annotations.
 */
declare function removeTypeDuplicates(nodesIn: ReadonlyArray<FlowType | false | null | undefined>): FlowType[];

/**
 * For the given node, generate a map from assignment id names to the identifier node.
 * Unlike getBindingIdentifiers, this function does not handle declarations and imports.
 * @param node the assignment e***REMOVED***pression or forXstatement
 * @returns an object map
 * @see getBindingIdentifiers
 */
declare function getAssignmentIdentifiers(node: Node | Node[]): Record<string, Identifier>;

declare function getBindingIdentifiers(node: Node, duplicates: true, outerOnly?: boolean, newBindingsOnly?: boolean): Record<string, Array<Identifier>>;
declare function getBindingIdentifiers(node: Node, duplicates?: false, outerOnly?: boolean, newBindingsOnly?: boolean): Record<string, Identifier>;
declare function getBindingIdentifiers(node: Node, duplicates?: boolean, outerOnly?: boolean, newBindingsOnly?: boolean): Record<string, Identifier> | Record<string, Array<Identifier>>;
declare namespace getBindingIdentifiers {
    var keys: KeysMap;
}
/**
 * Mapping of types to their identifier keys.
 */
type KeysMap = {
    [N in Node as N["type"]]?: (keyof N)[];
};
//# sourceMappingURL=getBindingIdentifiers.d.ts.map

declare const _default: {
    (node: Node, duplicates: true): Record<string, Array<Identifier>>;
    (node: Node, duplicates?: false): Record<string, Identifier>;
    (node: Node, duplicates?: boolean): Record<string, Identifier> | Record<string, Array<Identifier>>;
};
//# sourceMappingURL=getOuterBindingIdentifiers.d.ts.map

type GetFunctionNameResult = {
    name: string;
    originalNode: Node;
} | null;
declare function getFunctionName(node: ObjectMethod | ClassMethod): GetFunctionNameResult;
declare function getFunctionName(node: Function | Class, parent: Node): GetFunctionNameResult;

type TraversalAncestors = Array<{
    node: Node;
    key: string;
    inde***REMOVED***?: number;
}>;
type TraversalHandler<T> = (this: undefined, node: Node, parent: TraversalAncestors, state: T) => void;
type TraversalHandlers<T> = {
    enter?: TraversalHandler<T>;
    e***REMOVED***it?: TraversalHandler<T>;
};
/**
 * A general AST traversal with both prefi***REMOVED*** and postfi***REMOVED*** handlers, and a
 * state object. E***REMOVED***poses ancestry data to each handler so that more comple***REMOVED***
 * AST data can be taken into account.
 */
declare function traverse<T>(node: Node, handlers: TraversalHandler<T> | TraversalHandlers<T>, state?: T): void;

/**
 * A prefi***REMOVED*** AST traversal implementation meant for simple searching
 * and processing.
 */
declare function traverseFast<Options = object>(node: Node | null | undefined, enter: (node: Node, opts?: Options) => void, opts?: Options): void;

declare function shallowEqual<T e***REMOVED***tends object>(actual: object, e***REMOVED***pected: T): actual is T;

declare function is<T e***REMOVED***tends Node["type"]>(type: T, node: Node | null | undefined, opts?: undefined): node is E***REMOVED***tract<Node, {
    type: T;
}>;
declare function is<T e***REMOVED***tends Node["type"], P e***REMOVED***tends E***REMOVED***tract<Node, {
    type: T;
}>>(type: T, n: Node | null | undefined, required: Partial<P>): n is P;
declare function is<P e***REMOVED***tends Node>(type: string, node: Node | null | undefined, opts: Partial<P>): node is P;
declare function is(type: string, node: Node | null | undefined, opts?: Partial<Node>): node is Node;

/**
 * Check if the input `node` is a binding identifier.
 */
declare function isBinding(node: Node, parent: Node, grandparent?: Node): boolean;

/**
 * Check if the input `node` is block scoped.
 */
declare function isBlockScoped(node: Node): boolean;

/**
 * Check if the input `node` is definitely immutable.
 */
declare function isImmutable(node: Node): boolean;

/**
 * Check if the input `node` is a `let` variable declaration.
 */
declare function isLet(node: Node): boolean;

declare function isNode(node: any): node is Node;

/**
 * Check if two nodes are equivalent
 */
declare function isNodesEquivalent<T e***REMOVED***tends Partial<Node>>(a: T, b: any): b is T;

/**
 * Test if a `placeholderType` is a `targetType` or if `targetType` is an alias of `placeholderType`.
 */
declare function isPlaceholderType(placeholderType: string, targetType: string): boolean;

/**
 * Check if the input `node` is a reference to a bound variable.
 */
declare function isReferenced(node: Node, parent: Node, grandparent?: Node): boolean;

/**
 * Check if the input `node` is a scope.
 */
declare function isScope(node: Node, parent: Node): boolean;

/**
 * Check if the input `specifier` is a `default` import or e***REMOVED***port.
 */
declare function isSpecifierDefault(specifier: ModuleSpecifier): boolean;

declare function isType<T e***REMOVED***tends Node["type"]>(nodeType: string, targetType: T): nodeType is T;
declare function isType(nodeType: string | null | undefined, targetType: string): boolean;

/**
 * Check if the input `name` is a valid identifier name according to the ES3 specification.
 *
 * Additional ES3 reserved words are
 */
declare function isValidES3Identifier(name: string): boolean;

/**
 * Check if the input `name` is a valid identifier name
 * and isn't a reserved word.
 */
declare function isValidIdentifier(name: string, reserved?: boolean): boolean;

/**
 * Check if the input `node` is a variable declaration.
 */
declare function isVar(node: Node): boolean;

/**
 * Determines whether or not the input node `member` matches the
 * input `match`.
 *
 * For e***REMOVED***ample, given the match `React.createClass` it would match the
 * parsed nodes of `React.createClass` and `React["createClass"]`.
 */
declare function matchesPattern(member: Node | null | undefined, match: string | string[], allowPartial?: boolean): boolean;

declare function validate(node: Node | undefined | null, key: string, val: unknown): void;

/**
 * Build a function that when called will return whether or not the
 * input `node` `MemberE***REMOVED***pression` matches the input `match`.
 *
 * For e***REMOVED***ample, given the match `React.createClass` it would match the
 * parsed nodes of `React.createClass` and `React["createClass"]`.
 */
declare function buildMatchMemberE***REMOVED***pression(match: string, allowPartial?: boolean): (member: Node) => boolean;

type Opts<Obj> = Partial<{
    [Prop in keyof Obj]: Obj[Prop] e***REMOVED***tends Node ? Node : Obj[Prop] e***REMOVED***tends Node[] ? Node[] : Obj[Prop];
}>;
declare function isArrayE***REMOVED***pression(node: Node | null | undefined, opts?: Opts<ArrayE***REMOVED***pression> | null): node is ArrayE***REMOVED***pression;
declare function isAssignmentE***REMOVED***pression(node: Node | null | undefined, opts?: Opts<AssignmentE***REMOVED***pression> | null): node is AssignmentE***REMOVED***pression;
declare function isBinaryE***REMOVED***pression(node: Node | null | undefined, opts?: Opts<BinaryE***REMOVED***pression> | null): node is BinaryE***REMOVED***pression;
declare function isInterpreterDirective(node: Node | null | undefined, opts?: Opts<InterpreterDirective> | null): node is InterpreterDirective;
declare function isDirective(node: Node | null | undefined, opts?: Opts<Directive> | null): node is Directive;
declare function isDirectiveLiteral(node: Node | null | undefined, opts?: Opts<DirectiveLiteral> | null): node is DirectiveLiteral;
declare function isBlockStatement(node: Node | null | undefined, opts?: Opts<BlockStatement> | null): node is BlockStatement;
declare function isBreakStatement(node: Node | null | undefined, opts?: Opts<BreakStatement> | null): node is BreakStatement;
declare function isCallE***REMOVED***pression(node: Node | null | undefined, opts?: Opts<CallE***REMOVED***pression> | null): node is CallE***REMOVED***pression;
declare function isCatchClause(node: Node | null | undefined, opts?: Opts<CatchClause> | null): node is CatchClause;
declare function isConditionalE***REMOVED***pression(node: Node | null | undefined, opts?: Opts<ConditionalE***REMOVED***pression> | null): node is ConditionalE***REMOVED***pression;
declare function isContinueStatement(node: Node | null | undefined, opts?: Opts<ContinueStatement> | null): node is ContinueStatement;
declare function isDebuggerStatement(node: Node | null | undefined, opts?: Opts<DebuggerStatement> | null): node is DebuggerStatement;
declare function isDoWhileStatement(node: Node | null | undefined, opts?: Opts<DoWhileStatement> | null): node is DoWhileStatement;
declare function isEmptyStatement(node: Node | null | undefined, opts?: Opts<EmptyStatement> | null): node is EmptyStatement;
declare function isE***REMOVED***pressionStatement(node: Node | null | undefined, opts?: Opts<E***REMOVED***pressionStatement> | null): node is E***REMOVED***pressionStatement;
declare function isFile(node: Node | null | undefined, opts?: Opts<File> | null): node is File;
declare function isForInStatement(node: Node | null | undefined, opts?: Opts<ForInStatement> | null): node is ForInStatement;
declare function isForStatement(node: Node | null | undefined, opts?: Opts<ForStatement> | null): node is ForStatement;
declare function isFunctionDeclaration(node: Node | null | undefined, opts?: Opts<FunctionDeclaration> | null): node is FunctionDeclaration;
declare function isFunctionE***REMOVED***pression(node: Node | null | undefined, opts?: Opts<FunctionE***REMOVED***pression> | null): node is FunctionE***REMOVED***pression;
declare function isIdentifier(node: Node | null | undefined, opts?: Opts<Identifier> | null): node is Identifier;
declare function isIfStatement(node: Node | null | undefined, opts?: Opts<IfStatement> | null): node is IfStatement;
declare function isLabeledStatement(node: Node | null | undefined, opts?: Opts<LabeledStatement> | null): node is LabeledStatement;
declare function isStringLiteral(node: Node | null | undefined, opts?: Opts<StringLiteral> | null): node is StringLiteral;
declare function isNumericLiteral(node: Node | null | undefined, opts?: Opts<NumericLiteral> | null): node is NumericLiteral;
declare function isNullLiteral(node: Node | null | undefined, opts?: Opts<NullLiteral> | null): node is NullLiteral;
declare function isBooleanLiteral(node: Node | null | undefined, opts?: Opts<BooleanLiteral> | null): node is BooleanLiteral;
declare function isRegE***REMOVED***pLiteral(node: Node | null | undefined, opts?: Opts<RegE***REMOVED***pLiteral> | null): node is RegE***REMOVED***pLiteral;
declare function isLogicalE***REMOVED***pression(node: Node | null | undefined, opts?: Opts<LogicalE***REMOVED***pression> | null): node is LogicalE***REMOVED***pression;
declare function isMemberE***REMOVED***pression(node: Node | null | undefined, opts?: Opts<MemberE***REMOVED***pression> | null): node is MemberE***REMOVED***pression;
declare function isNewE***REMOVED***pression(node: Node | null | undefined, opts?: Opts<NewE***REMOVED***pression> | null): node is NewE***REMOVED***pression;
declare function isProgram(node: Node | null | undefined, opts?: Opts<Program> | null): node is Program;
declare function isObjectE***REMOVED***pression(node: Node | null | undefined, opts?: Opts<ObjectE***REMOVED***pression> | null): node is ObjectE***REMOVED***pression;
declare function isObjectMethod(node: Node | null | undefined, opts?: Opts<ObjectMethod> | null): node is ObjectMethod;
declare function isObjectProperty(node: Node | null | undefined, opts?: Opts<ObjectProperty> | null): node is ObjectProperty;
declare function isRestElement(node: Node | null | undefined, opts?: Opts<RestElement> | null): node is RestElement;
declare function isReturnStatement(node: Node | null | undefined, opts?: Opts<ReturnStatement> | null): node is ReturnStatement;
declare function isSequenceE***REMOVED***pression(node: Node | null | undefined, opts?: Opts<SequenceE***REMOVED***pression> | null): node is SequenceE***REMOVED***pression;
declare function isParenthesizedE***REMOVED***pression(node: Node | null | undefined, opts?: Opts<ParenthesizedE***REMOVED***pression> | null): node is ParenthesizedE***REMOVED***pression;
declare function isSwitchCase(node: Node | null | undefined, opts?: Opts<SwitchCase> | null): node is SwitchCase;
declare function isSwitchStatement(node: Node | null | undefined, opts?: Opts<SwitchStatement> | null): node is SwitchStatement;
declare function isThisE***REMOVED***pression(node: Node | null | undefined, opts?: Opts<ThisE***REMOVED***pression> | null): node is ThisE***REMOVED***pression;
declare function isThrowStatement(node: Node | null | undefined, opts?: Opts<ThrowStatement> | null): node is ThrowStatement;
declare function isTryStatement(node: Node | null | undefined, opts?: Opts<TryStatement> | null): node is TryStatement;
declare function isUnaryE***REMOVED***pression(node: Node | null | undefined, opts?: Opts<UnaryE***REMOVED***pression> | null): node is UnaryE***REMOVED***pression;
declare function isUpdateE***REMOVED***pression(node: Node | null | undefined, opts?: Opts<UpdateE***REMOVED***pression> | null): node is UpdateE***REMOVED***pression;
declare function isVariableDeclaration(node: Node | null | undefined, opts?: Opts<VariableDeclaration> | null): node is VariableDeclaration;
declare function isVariableDeclarator(node: Node | null | undefined, opts?: Opts<VariableDeclarator> | null): node is VariableDeclarator;
declare function isWhileStatement(node: Node | null | undefined, opts?: Opts<WhileStatement> | null): node is WhileStatement;
declare function isWithStatement(node: Node | null | undefined, opts?: Opts<WithStatement> | null): node is WithStatement;
declare function isAssignmentPattern(node: Node | null | undefined, opts?: Opts<AssignmentPattern> | null): node is AssignmentPattern;
declare function isArrayPattern(node: Node | null | undefined, opts?: Opts<ArrayPattern> | null): node is ArrayPattern;
declare function isArrowFunctionE***REMOVED***pression(node: Node | null | undefined, opts?: Opts<ArrowFunctionE***REMOVED***pression> | null): node is ArrowFunctionE***REMOVED***pression;
declare function isClassBody(node: Node | null | undefined, opts?: Opts<ClassBody> | null): node is ClassBody;
declare function isClassE***REMOVED***pression(node: Node | null | undefined, opts?: Opts<ClassE***REMOVED***pression> | null): node is ClassE***REMOVED***pression;
declare function isClassDeclaration(node: Node | null | undefined, opts?: Opts<ClassDeclaration> | null): node is ClassDeclaration;
declare function isE***REMOVED***portAllDeclaration(node: Node | null | undefined, opts?: Opts<E***REMOVED***portAllDeclaration> | null): node is E***REMOVED***portAllDeclaration;
declare function isE***REMOVED***portDefaultDeclaration(node: Node | null | undefined, opts?: Opts<E***REMOVED***portDefaultDeclaration> | null): node is E***REMOVED***portDefaultDeclaration;
declare function isE***REMOVED***portNamedDeclaration(node: Node | null | undefined, opts?: Opts<E***REMOVED***portNamedDeclaration> | null): node is E***REMOVED***portNamedDeclaration;
declare function isE***REMOVED***portSpecifier(node: Node | null | undefined, opts?: Opts<E***REMOVED***portSpecifier> | null): node is E***REMOVED***portSpecifier;
declare function isForOfStatement(node: Node | null | undefined, opts?: Opts<ForOfStatement> | null): node is ForOfStatement;
declare function isImportDeclaration(node: Node | null | undefined, opts?: Opts<ImportDeclaration> | null): node is ImportDeclaration;
declare function isImportDefaultSpecifier(node: Node | null | undefined, opts?: Opts<ImportDefaultSpecifier> | null): node is ImportDefaultSpecifier;
declare function isImportNamespaceSpecifier(node: Node | null | undefined, opts?: Opts<ImportNamespaceSpecifier> | null): node is ImportNamespaceSpecifier;
declare function isImportSpecifier(node: Node | null | undefined, opts?: Opts<ImportSpecifier> | null): node is ImportSpecifier;
declare function isImportE***REMOVED***pression(node: Node | null | undefined, opts?: Opts<ImportE***REMOVED***pression> | null): node is ImportE***REMOVED***pression;
declare function isMetaProperty(node: Node | null | undefined, opts?: Opts<MetaProperty> | null): node is MetaProperty;
declare function isClassMethod(node: Node | null | undefined, opts?: Opts<ClassMethod> | null): node is ClassMethod;
declare function isObjectPattern(node: Node | null | undefined, opts?: Opts<ObjectPattern> | null): node is ObjectPattern;
declare function isSpreadElement(node: Node | null | undefined, opts?: Opts<SpreadElement> | null): node is SpreadElement;
declare function isSuper(node: Node | null | undefined, opts?: Opts<Super> | null): node is Super;
declare function isTaggedTemplateE***REMOVED***pression(node: Node | null | undefined, opts?: Opts<TaggedTemplateE***REMOVED***pression> | null): node is TaggedTemplateE***REMOVED***pression;
declare function isTemplateElement(node: Node | null | undefined, opts?: Opts<TemplateElement> | null): node is TemplateElement;
declare function isTemplateLiteral(node: Node | null | undefined, opts?: Opts<TemplateLiteral> | null): node is TemplateLiteral;
declare function isYieldE***REMOVED***pression(node: Node | null | undefined, opts?: Opts<YieldE***REMOVED***pression> | null): node is YieldE***REMOVED***pression;
declare function isAwaitE***REMOVED***pression(node: Node | null | undefined, opts?: Opts<AwaitE***REMOVED***pression> | null): node is AwaitE***REMOVED***pression;
declare function isImport(node: Node | null | undefined, opts?: Opts<Import> | null): node is Import;
declare function isBigIntLiteral(node: Node | null | undefined, opts?: Opts<BigIntLiteral> | null): node is BigIntLiteral;
declare function isE***REMOVED***portNamespaceSpecifier(node: Node | null | undefined, opts?: Opts<E***REMOVED***portNamespaceSpecifier> | null): node is E***REMOVED***portNamespaceSpecifier;
declare function isOptionalMemberE***REMOVED***pression(node: Node | null | undefined, opts?: Opts<OptionalMemberE***REMOVED***pression> | null): node is OptionalMemberE***REMOVED***pression;
declare function isOptionalCallE***REMOVED***pression(node: Node | null | undefined, opts?: Opts<OptionalCallE***REMOVED***pression> | null): node is OptionalCallE***REMOVED***pression;
declare function isClassProperty(node: Node | null | undefined, opts?: Opts<ClassProperty> | null): node is ClassProperty;
declare function isClassAccessorProperty(node: Node | null | undefined, opts?: Opts<ClassAccessorProperty> | null): node is ClassAccessorProperty;
declare function isClassPrivateProperty(node: Node | null | undefined, opts?: Opts<ClassPrivateProperty> | null): node is ClassPrivateProperty;
declare function isClassPrivateMethod(node: Node | null | undefined, opts?: Opts<ClassPrivateMethod> | null): node is ClassPrivateMethod;
declare function isPrivateName(node: Node | null | undefined, opts?: Opts<PrivateName> | null): node is PrivateName;
declare function isStaticBlock(node: Node | null | undefined, opts?: Opts<StaticBlock> | null): node is StaticBlock;
declare function isAnyTypeAnnotation(node: Node | null | undefined, opts?: Opts<AnyTypeAnnotation> | null): node is AnyTypeAnnotation;
declare function isArrayTypeAnnotation(node: Node | null | undefined, opts?: Opts<ArrayTypeAnnotation> | null): node is ArrayTypeAnnotation;
declare function isBooleanTypeAnnotation(node: Node | null | undefined, opts?: Opts<BooleanTypeAnnotation> | null): node is BooleanTypeAnnotation;
declare function isBooleanLiteralTypeAnnotation(node: Node | null | undefined, opts?: Opts<BooleanLiteralTypeAnnotation> | null): node is BooleanLiteralTypeAnnotation;
declare function isNullLiteralTypeAnnotation(node: Node | null | undefined, opts?: Opts<NullLiteralTypeAnnotation> | null): node is NullLiteralTypeAnnotation;
declare function isClassImplements(node: Node | null | undefined, opts?: Opts<ClassImplements> | null): node is ClassImplements;
declare function isDeclareClass(node: Node | null | undefined, opts?: Opts<DeclareClass> | null): node is DeclareClass;
declare function isDeclareFunction(node: Node | null | undefined, opts?: Opts<DeclareFunction> | null): node is DeclareFunction;
declare function isDeclareInterface(node: Node | null | undefined, opts?: Opts<DeclareInterface> | null): node is DeclareInterface;
declare function isDeclareModule(node: Node | null | undefined, opts?: Opts<DeclareModule> | null): node is DeclareModule;
declare function isDeclareModuleE***REMOVED***ports(node: Node | null | undefined, opts?: Opts<DeclareModuleE***REMOVED***ports> | null): node is DeclareModuleE***REMOVED***ports;
declare function isDeclareTypeAlias(node: Node | null | undefined, opts?: Opts<DeclareTypeAlias> | null): node is DeclareTypeAlias;
declare function isDeclareOpaqueType(node: Node | null | undefined, opts?: Opts<DeclareOpaqueType> | null): node is DeclareOpaqueType;
declare function isDeclareVariable(node: Node | null | undefined, opts?: Opts<DeclareVariable> | null): node is DeclareVariable;
declare function isDeclareE***REMOVED***portDeclaration(node: Node | null | undefined, opts?: Opts<DeclareE***REMOVED***portDeclaration> | null): node is DeclareE***REMOVED***portDeclaration;
declare function isDeclareE***REMOVED***portAllDeclaration(node: Node | null | undefined, opts?: Opts<DeclareE***REMOVED***portAllDeclaration> | null): node is DeclareE***REMOVED***portAllDeclaration;
declare function isDeclaredPredicate(node: Node | null | undefined, opts?: Opts<DeclaredPredicate> | null): node is DeclaredPredicate;
declare function isE***REMOVED***istsTypeAnnotation(node: Node | null | undefined, opts?: Opts<E***REMOVED***istsTypeAnnotation> | null): node is E***REMOVED***istsTypeAnnotation;
declare function isFunctionTypeAnnotation(node: Node | null | undefined, opts?: Opts<FunctionTypeAnnotation> | null): node is FunctionTypeAnnotation;
declare function isFunctionTypeParam(node: Node | null | undefined, opts?: Opts<FunctionTypeParam> | null): node is FunctionTypeParam;
declare function isGenericTypeAnnotation(node: Node | null | undefined, opts?: Opts<GenericTypeAnnotation> | null): node is GenericTypeAnnotation;
declare function isInferredPredicate(node: Node | null | undefined, opts?: Opts<InferredPredicate> | null): node is InferredPredicate;
declare function isInterfaceE***REMOVED***tends(node: Node | null | undefined, opts?: Opts<InterfaceE***REMOVED***tends> | null): node is InterfaceE***REMOVED***tends;
declare function isInterfaceDeclaration(node: Node | null | undefined, opts?: Opts<InterfaceDeclaration> | null): node is InterfaceDeclaration;
declare function isInterfaceTypeAnnotation(node: Node | null | undefined, opts?: Opts<InterfaceTypeAnnotation> | null): node is InterfaceTypeAnnotation;
declare function isIntersectionTypeAnnotation(node: Node | null | undefined, opts?: Opts<IntersectionTypeAnnotation> | null): node is IntersectionTypeAnnotation;
declare function isMi***REMOVED***edTypeAnnotation(node: Node | null | undefined, opts?: Opts<Mi***REMOVED***edTypeAnnotation> | null): node is Mi***REMOVED***edTypeAnnotation;
declare function isEmptyTypeAnnotation(node: Node | null | undefined, opts?: Opts<EmptyTypeAnnotation> | null): node is EmptyTypeAnnotation;
declare function isNullableTypeAnnotation(node: Node | null | undefined, opts?: Opts<NullableTypeAnnotation> | null): node is NullableTypeAnnotation;
declare function isNumberLiteralTypeAnnotation(node: Node | null | undefined, opts?: Opts<NumberLiteralTypeAnnotation> | null): node is NumberLiteralTypeAnnotation;
declare function isNumberTypeAnnotation(node: Node | null | undefined, opts?: Opts<NumberTypeAnnotation> | null): node is NumberTypeAnnotation;
declare function isObjectTypeAnnotation(node: Node | null | undefined, opts?: Opts<ObjectTypeAnnotation> | null): node is ObjectTypeAnnotation;
declare function isObjectTypeInternalSlot(node: Node | null | undefined, opts?: Opts<ObjectTypeInternalSlot> | null): node is ObjectTypeInternalSlot;
declare function isObjectTypeCallProperty(node: Node | null | undefined, opts?: Opts<ObjectTypeCallProperty> | null): node is ObjectTypeCallProperty;
declare function isObjectTypeInde***REMOVED***er(node: Node | null | undefined, opts?: Opts<ObjectTypeInde***REMOVED***er> | null): node is ObjectTypeInde***REMOVED***er;
declare function isObjectTypeProperty(node: Node | null | undefined, opts?: Opts<ObjectTypeProperty> | null): node is ObjectTypeProperty;
declare function isObjectTypeSpreadProperty(node: Node | null | undefined, opts?: Opts<ObjectTypeSpreadProperty> | null): node is ObjectTypeSpreadProperty;
declare function isOpaqueType(node: Node | null | undefined, opts?: Opts<OpaqueType> | null): node is OpaqueType;
declare function isQualifiedTypeIdentifier(node: Node | null | undefined, opts?: Opts<QualifiedTypeIdentifier> | null): node is QualifiedTypeIdentifier;
declare function isStringLiteralTypeAnnotation(node: Node | null | undefined, opts?: Opts<StringLiteralTypeAnnotation> | null): node is StringLiteralTypeAnnotation;
declare function isStringTypeAnnotation(node: Node | null | undefined, opts?: Opts<StringTypeAnnotation> | null): node is StringTypeAnnotation;
declare function isSymbolTypeAnnotation(node: Node | null | undefined, opts?: Opts<SymbolTypeAnnotation> | null): node is SymbolTypeAnnotation;
declare function isThisTypeAnnotation(node: Node | null | undefined, opts?: Opts<ThisTypeAnnotation> | null): node is ThisTypeAnnotation;
declare function isTupleTypeAnnotation(node: Node | null | undefined, opts?: Opts<TupleTypeAnnotation> | null): node is TupleTypeAnnotation;
declare function isTypeofTypeAnnotation(node: Node | null | undefined, opts?: Opts<TypeofTypeAnnotation> | null): node is TypeofTypeAnnotation;
declare function isTypeAlias(node: Node | null | undefined, opts?: Opts<TypeAlias> | null): node is TypeAlias;
declare function isTypeAnnotation(node: Node | null | undefined, opts?: Opts<TypeAnnotation> | null): node is TypeAnnotation;
declare function isTypeCastE***REMOVED***pression(node: Node | null | undefined, opts?: Opts<TypeCastE***REMOVED***pression> | null): node is TypeCastE***REMOVED***pression;
declare function isTypeParameter(node: Node | null | undefined, opts?: Opts<TypeParameter> | null): node is TypeParameter;
declare function isTypeParameterDeclaration(node: Node | null | undefined, opts?: Opts<TypeParameterDeclaration> | null): node is TypeParameterDeclaration;
declare function isTypeParameterInstantiation(node: Node | null | undefined, opts?: Opts<TypeParameterInstantiation> | null): node is TypeParameterInstantiation;
declare function isUnionTypeAnnotation(node: Node | null | undefined, opts?: Opts<UnionTypeAnnotation> | null): node is UnionTypeAnnotation;
declare function isVariance(node: Node | null | undefined, opts?: Opts<Variance> | null): node is Variance;
declare function isVoidTypeAnnotation(node: Node | null | undefined, opts?: Opts<VoidTypeAnnotation> | null): node is VoidTypeAnnotation;
declare function isEnumDeclaration(node: Node | null | undefined, opts?: Opts<EnumDeclaration> | null): node is EnumDeclaration;
declare function isEnumBooleanBody(node: Node | null | undefined, opts?: Opts<EnumBooleanBody> | null): node is EnumBooleanBody;
declare function isEnumNumberBody(node: Node | null | undefined, opts?: Opts<EnumNumberBody> | null): node is EnumNumberBody;
declare function isEnumStringBody(node: Node | null | undefined, opts?: Opts<EnumStringBody> | null): node is EnumStringBody;
declare function isEnumSymbolBody(node: Node | null | undefined, opts?: Opts<EnumSymbolBody> | null): node is EnumSymbolBody;
declare function isEnumBooleanMember(node: Node | null | undefined, opts?: Opts<EnumBooleanMember> | null): node is EnumBooleanMember;
declare function isEnumNumberMember(node: Node | null | undefined, opts?: Opts<EnumNumberMember> | null): node is EnumNumberMember;
declare function isEnumStringMember(node: Node | null | undefined, opts?: Opts<EnumStringMember> | null): node is EnumStringMember;
declare function isEnumDefaultedMember(node: Node | null | undefined, opts?: Opts<EnumDefaultedMember> | null): node is EnumDefaultedMember;
declare function isInde***REMOVED***edAccessType(node: Node | null | undefined, opts?: Opts<Inde***REMOVED***edAccessType> | null): node is Inde***REMOVED***edAccessType;
declare function isOptionalInde***REMOVED***edAccessType(node: Node | null | undefined, opts?: Opts<OptionalInde***REMOVED***edAccessType> | null): node is OptionalInde***REMOVED***edAccessType;
declare function isJSXAttribute(node: Node | null | undefined, opts?: Opts<JSXAttribute> | null): node is JSXAttribute;
declare function isJSXClosingElement(node: Node | null | undefined, opts?: Opts<JSXClosingElement> | null): node is JSXClosingElement;
declare function isJSXElement(node: Node | null | undefined, opts?: Opts<JSXElement> | null): node is JSXElement;
declare function isJSXEmptyE***REMOVED***pression(node: Node | null | undefined, opts?: Opts<JSXEmptyE***REMOVED***pression> | null): node is JSXEmptyE***REMOVED***pression;
declare function isJSXE***REMOVED***pressionContainer(node: Node | null | undefined, opts?: Opts<JSXE***REMOVED***pressionContainer> | null): node is JSXE***REMOVED***pressionContainer;
declare function isJSXSpreadChild(node: Node | null | undefined, opts?: Opts<JSXSpreadChild> | null): node is JSXSpreadChild;
declare function isJSXIdentifier(node: Node | null | undefined, opts?: Opts<JSXIdentifier> | null): node is JSXIdentifier;
declare function isJSXMemberE***REMOVED***pression(node: Node | null | undefined, opts?: Opts<JSXMemberE***REMOVED***pression> | null): node is JSXMemberE***REMOVED***pression;
declare function isJSXNamespacedName(node: Node | null | undefined, opts?: Opts<JSXNamespacedName> | null): node is JSXNamespacedName;
declare function isJSXOpeningElement(node: Node | null | undefined, opts?: Opts<JSXOpeningElement> | null): node is JSXOpeningElement;
declare function isJSXSpreadAttribute(node: Node | null | undefined, opts?: Opts<JSXSpreadAttribute> | null): node is JSXSpreadAttribute;
declare function isJSXTe***REMOVED***t(node: Node | null | undefined, opts?: Opts<JSXTe***REMOVED***t> | null): node is JSXTe***REMOVED***t;
declare function isJSXFragment(node: Node | null | undefined, opts?: Opts<JSXFragment> | null): node is JSXFragment;
declare function isJSXOpeningFragment(node: Node | null | undefined, opts?: Opts<JSXOpeningFragment> | null): node is JSXOpeningFragment;
declare function isJSXClosingFragment(node: Node | null | undefined, opts?: Opts<JSXClosingFragment> | null): node is JSXClosingFragment;
declare function isNoop(node: Node | null | undefined, opts?: Opts<Noop> | null): node is Noop;
declare function isPlaceholder(node: Node | null | undefined, opts?: Opts<Placeholder> | null): node is Placeholder;
declare function isV8IntrinsicIdentifier(node: Node | null | undefined, opts?: Opts<V8IntrinsicIdentifier> | null): node is V8IntrinsicIdentifier;
declare function isArgumentPlaceholder(node: Node | null | undefined, opts?: Opts<ArgumentPlaceholder> | null): node is ArgumentPlaceholder;
declare function isBindE***REMOVED***pression(node: Node | null | undefined, opts?: Opts<BindE***REMOVED***pression> | null): node is BindE***REMOVED***pression;
declare function isImportAttribute(node: Node | null | undefined, opts?: Opts<ImportAttribute> | null): node is ImportAttribute;
declare function isDecorator(node: Node | null | undefined, opts?: Opts<Decorator> | null): node is Decorator;
declare function isDoE***REMOVED***pression(node: Node | null | undefined, opts?: Opts<DoE***REMOVED***pression> | null): node is DoE***REMOVED***pression;
declare function isE***REMOVED***portDefaultSpecifier(node: Node | null | undefined, opts?: Opts<E***REMOVED***portDefaultSpecifier> | null): node is E***REMOVED***portDefaultSpecifier;
declare function isRecordE***REMOVED***pression(node: Node | null | undefined, opts?: Opts<RecordE***REMOVED***pression> | null): node is RecordE***REMOVED***pression;
declare function isTupleE***REMOVED***pression(node: Node | null | undefined, opts?: Opts<TupleE***REMOVED***pression> | null): node is TupleE***REMOVED***pression;
declare function isDecimalLiteral(node: Node | null | undefined, opts?: Opts<DecimalLiteral> | null): node is DecimalLiteral;
declare function isModuleE***REMOVED***pression(node: Node | null | undefined, opts?: Opts<ModuleE***REMOVED***pression> | null): node is ModuleE***REMOVED***pression;
declare function isTopicReference(node: Node | null | undefined, opts?: Opts<TopicReference> | null): node is TopicReference;
declare function isPipelineTopicE***REMOVED***pression(node: Node | null | undefined, opts?: Opts<PipelineTopicE***REMOVED***pression> | null): node is PipelineTopicE***REMOVED***pression;
declare function isPipelineBareFunction(node: Node | null | undefined, opts?: Opts<PipelineBareFunction> | null): node is PipelineBareFunction;
declare function isPipelinePrimaryTopicReference(node: Node | null | undefined, opts?: Opts<PipelinePrimaryTopicReference> | null): node is PipelinePrimaryTopicReference;
declare function isTSParameterProperty(node: Node | null | undefined, opts?: Opts<TSParameterProperty> | null): node is TSParameterProperty;
declare function isTSDeclareFunction(node: Node | null | undefined, opts?: Opts<TSDeclareFunction> | null): node is TSDeclareFunction;
declare function isTSDeclareMethod(node: Node | null | undefined, opts?: Opts<TSDeclareMethod> | null): node is TSDeclareMethod;
declare function isTSQualifiedName(node: Node | null | undefined, opts?: Opts<TSQualifiedName> | null): node is TSQualifiedName;
declare function isTSCallSignatureDeclaration(node: Node | null | undefined, opts?: Opts<TSCallSignatureDeclaration> | null): node is TSCallSignatureDeclaration;
declare function isTSConstructSignatureDeclaration(node: Node | null | undefined, opts?: Opts<TSConstructSignatureDeclaration> | null): node is TSConstructSignatureDeclaration;
declare function isTSPropertySignature(node: Node | null | undefined, opts?: Opts<TSPropertySignature> | null): node is TSPropertySignature;
declare function isTSMethodSignature(node: Node | null | undefined, opts?: Opts<TSMethodSignature> | null): node is TSMethodSignature;
declare function isTSInde***REMOVED***Signature(node: Node | null | undefined, opts?: Opts<TSInde***REMOVED***Signature> | null): node is TSInde***REMOVED***Signature;
declare function isTSAnyKeyword(node: Node | null | undefined, opts?: Opts<TSAnyKeyword> | null): node is TSAnyKeyword;
declare function isTSBooleanKeyword(node: Node | null | undefined, opts?: Opts<TSBooleanKeyword> | null): node is TSBooleanKeyword;
declare function isTSBigIntKeyword(node: Node | null | undefined, opts?: Opts<TSBigIntKeyword> | null): node is TSBigIntKeyword;
declare function isTSIntrinsicKeyword(node: Node | null | undefined, opts?: Opts<TSIntrinsicKeyword> | null): node is TSIntrinsicKeyword;
declare function isTSNeverKeyword(node: Node | null | undefined, opts?: Opts<TSNeverKeyword> | null): node is TSNeverKeyword;
declare function isTSNullKeyword(node: Node | null | undefined, opts?: Opts<TSNullKeyword> | null): node is TSNullKeyword;
declare function isTSNumberKeyword(node: Node | null | undefined, opts?: Opts<TSNumberKeyword> | null): node is TSNumberKeyword;
declare function isTSObjectKeyword(node: Node | null | undefined, opts?: Opts<TSObjectKeyword> | null): node is TSObjectKeyword;
declare function isTSStringKeyword(node: Node | null | undefined, opts?: Opts<TSStringKeyword> | null): node is TSStringKeyword;
declare function isTSSymbolKeyword(node: Node | null | undefined, opts?: Opts<TSSymbolKeyword> | null): node is TSSymbolKeyword;
declare function isTSUndefinedKeyword(node: Node | null | undefined, opts?: Opts<TSUndefinedKeyword> | null): node is TSUndefinedKeyword;
declare function isTSUnknownKeyword(node: Node | null | undefined, opts?: Opts<TSUnknownKeyword> | null): node is TSUnknownKeyword;
declare function isTSVoidKeyword(node: Node | null | undefined, opts?: Opts<TSVoidKeyword> | null): node is TSVoidKeyword;
declare function isTSThisType(node: Node | null | undefined, opts?: Opts<TSThisType> | null): node is TSThisType;
declare function isTSFunctionType(node: Node | null | undefined, opts?: Opts<TSFunctionType> | null): node is TSFunctionType;
declare function isTSConstructorType(node: Node | null | undefined, opts?: Opts<TSConstructorType> | null): node is TSConstructorType;
declare function isTSTypeReference(node: Node | null | undefined, opts?: Opts<TSTypeReference> | null): node is TSTypeReference;
declare function isTSTypePredicate(node: Node | null | undefined, opts?: Opts<TSTypePredicate> | null): node is TSTypePredicate;
declare function isTSTypeQuery(node: Node | null | undefined, opts?: Opts<TSTypeQuery> | null): node is TSTypeQuery;
declare function isTSTypeLiteral(node: Node | null | undefined, opts?: Opts<TSTypeLiteral> | null): node is TSTypeLiteral;
declare function isTSArrayType(node: Node | null | undefined, opts?: Opts<TSArrayType> | null): node is TSArrayType;
declare function isTSTupleType(node: Node | null | undefined, opts?: Opts<TSTupleType> | null): node is TSTupleType;
declare function isTSOptionalType(node: Node | null | undefined, opts?: Opts<TSOptionalType> | null): node is TSOptionalType;
declare function isTSRestType(node: Node | null | undefined, opts?: Opts<TSRestType> | null): node is TSRestType;
declare function isTSNamedTupleMember(node: Node | null | undefined, opts?: Opts<TSNamedTupleMember> | null): node is TSNamedTupleMember;
declare function isTSUnionType(node: Node | null | undefined, opts?: Opts<TSUnionType> | null): node is TSUnionType;
declare function isTSIntersectionType(node: Node | null | undefined, opts?: Opts<TSIntersectionType> | null): node is TSIntersectionType;
declare function isTSConditionalType(node: Node | null | undefined, opts?: Opts<TSConditionalType> | null): node is TSConditionalType;
declare function isTSInferType(node: Node | null | undefined, opts?: Opts<TSInferType> | null): node is TSInferType;
declare function isTSParenthesizedType(node: Node | null | undefined, opts?: Opts<TSParenthesizedType> | null): node is TSParenthesizedType;
declare function isTSTypeOperator(node: Node | null | undefined, opts?: Opts<TSTypeOperator> | null): node is TSTypeOperator;
declare function isTSInde***REMOVED***edAccessType(node: Node | null | undefined, opts?: Opts<TSInde***REMOVED***edAccessType> | null): node is TSInde***REMOVED***edAccessType;
declare function isTSMappedType(node: Node | null | undefined, opts?: Opts<TSMappedType> | null): node is TSMappedType;
declare function isTSLiteralType(node: Node | null | undefined, opts?: Opts<TSLiteralType> | null): node is TSLiteralType;
declare function isTSE***REMOVED***pressionWithTypeArguments(node: Node | null | undefined, opts?: Opts<TSE***REMOVED***pressionWithTypeArguments> | null): node is TSE***REMOVED***pressionWithTypeArguments;
declare function isTSInterfaceDeclaration(node: Node | null | undefined, opts?: Opts<TSInterfaceDeclaration> | null): node is TSInterfaceDeclaration;
declare function isTSInterfaceBody(node: Node | null | undefined, opts?: Opts<TSInterfaceBody> | null): node is TSInterfaceBody;
declare function isTSTypeAliasDeclaration(node: Node | null | undefined, opts?: Opts<TSTypeAliasDeclaration> | null): node is TSTypeAliasDeclaration;
declare function isTSInstantiationE***REMOVED***pression(node: Node | null | undefined, opts?: Opts<TSInstantiationE***REMOVED***pression> | null): node is TSInstantiationE***REMOVED***pression;
declare function isTSAsE***REMOVED***pression(node: Node | null | undefined, opts?: Opts<TSAsE***REMOVED***pression> | null): node is TSAsE***REMOVED***pression;
declare function isTSSatisfiesE***REMOVED***pression(node: Node | null | undefined, opts?: Opts<TSSatisfiesE***REMOVED***pression> | null): node is TSSatisfiesE***REMOVED***pression;
declare function isTSTypeAssertion(node: Node | null | undefined, opts?: Opts<TSTypeAssertion> | null): node is TSTypeAssertion;
declare function isTSEnumDeclaration(node: Node | null | undefined, opts?: Opts<TSEnumDeclaration> | null): node is TSEnumDeclaration;
declare function isTSEnumMember(node: Node | null | undefined, opts?: Opts<TSEnumMember> | null): node is TSEnumMember;
declare function isTSModuleDeclaration(node: Node | null | undefined, opts?: Opts<TSModuleDeclaration> | null): node is TSModuleDeclaration;
declare function isTSModuleBlock(node: Node | null | undefined, opts?: Opts<TSModuleBlock> | null): node is TSModuleBlock;
declare function isTSImportType(node: Node | null | undefined, opts?: Opts<TSImportType> | null): node is TSImportType;
declare function isTSImportEqualsDeclaration(node: Node | null | undefined, opts?: Opts<TSImportEqualsDeclaration> | null): node is TSImportEqualsDeclaration;
declare function isTSE***REMOVED***ternalModuleReference(node: Node | null | undefined, opts?: Opts<TSE***REMOVED***ternalModuleReference> | null): node is TSE***REMOVED***ternalModuleReference;
declare function isTSNonNullE***REMOVED***pression(node: Node | null | undefined, opts?: Opts<TSNonNullE***REMOVED***pression> | null): node is TSNonNullE***REMOVED***pression;
declare function isTSE***REMOVED***portAssignment(node: Node | null | undefined, opts?: Opts<TSE***REMOVED***portAssignment> | null): node is TSE***REMOVED***portAssignment;
declare function isTSNamespaceE***REMOVED***portDeclaration(node: Node | null | undefined, opts?: Opts<TSNamespaceE***REMOVED***portDeclaration> | null): node is TSNamespaceE***REMOVED***portDeclaration;
declare function isTSTypeAnnotation(node: Node | null | undefined, opts?: Opts<TSTypeAnnotation> | null): node is TSTypeAnnotation;
declare function isTSTypeParameterInstantiation(node: Node | null | undefined, opts?: Opts<TSTypeParameterInstantiation> | null): node is TSTypeParameterInstantiation;
declare function isTSTypeParameterDeclaration(node: Node | null | undefined, opts?: Opts<TSTypeParameterDeclaration> | null): node is TSTypeParameterDeclaration;
declare function isTSTypeParameter(node: Node | null | undefined, opts?: Opts<TSTypeParameter> | null): node is TSTypeParameter;
declare function isStandardized(node: Node | null | undefined, opts?: Opts<Standardized> | null): node is Standardized;
declare function isE***REMOVED***pression(node: Node | null | undefined, opts?: Opts<E***REMOVED***pression> | null): node is E***REMOVED***pression;
declare function isBinary(node: Node | null | undefined, opts?: Opts<Binary> | null): node is Binary;
declare function isScopable(node: Node | null | undefined, opts?: Opts<Scopable> | null): node is Scopable;
declare function isBlockParent(node: Node | null | undefined, opts?: Opts<BlockParent> | null): node is BlockParent;
declare function isBlock(node: Node | null | undefined, opts?: Opts<Block> | null): node is Block;
declare function isStatement(node: Node | null | undefined, opts?: Opts<Statement> | null): node is Statement;
declare function isTerminatorless(node: Node | null | undefined, opts?: Opts<Terminatorless> | null): node is Terminatorless;
declare function isCompletionStatement(node: Node | null | undefined, opts?: Opts<CompletionStatement> | null): node is CompletionStatement;
declare function isConditional(node: Node | null | undefined, opts?: Opts<Conditional> | null): node is Conditional;
declare function isLoop(node: Node | null | undefined, opts?: Opts<Loop> | null): node is Loop;
declare function isWhile(node: Node | null | undefined, opts?: Opts<While> | null): node is While;
declare function isE***REMOVED***pressionWrapper(node: Node | null | undefined, opts?: Opts<E***REMOVED***pressionWrapper> | null): node is E***REMOVED***pressionWrapper;
declare function isFor(node: Node | null | undefined, opts?: Opts<For> | null): node is For;
declare function isForXStatement(node: Node | null | undefined, opts?: Opts<ForXStatement> | null): node is ForXStatement;
declare function isFunction(node: Node | null | undefined, opts?: Opts<Function> | null): node is Function;
declare function isFunctionParent(node: Node | null | undefined, opts?: Opts<FunctionParent> | null): node is FunctionParent;
declare function isPureish(node: Node | null | undefined, opts?: Opts<Pureish> | null): node is Pureish;
declare function isDeclaration(node: Node | null | undefined, opts?: Opts<Declaration> | null): node is Declaration;
declare function isPatternLike(node: Node | null | undefined, opts?: Opts<PatternLike> | null): node is PatternLike;
declare function isLVal(node: Node | null | undefined, opts?: Opts<LVal> | null): node is LVal;
declare function isTSEntityName(node: Node | null | undefined, opts?: Opts<TSEntityName> | null): node is TSEntityName;
declare function isLiteral(node: Node | null | undefined, opts?: Opts<Literal> | null): node is Literal;
declare function isUserWhitespacable(node: Node | null | undefined, opts?: Opts<UserWhitespacable> | null): node is UserWhitespacable;
declare function isMethod(node: Node | null | undefined, opts?: Opts<Method> | null): node is Method;
declare function isObjectMember(node: Node | null | undefined, opts?: Opts<ObjectMember> | null): node is ObjectMember;
declare function isProperty(node: Node | null | undefined, opts?: Opts<Property> | null): node is Property;
declare function isUnaryLike(node: Node | null | undefined, opts?: Opts<UnaryLike> | null): node is UnaryLike;
declare function isPattern(node: Node | null | undefined, opts?: Opts<Pattern> | null): node is Pattern;
declare function isClass(node: Node | null | undefined, opts?: Opts<Class> | null): node is Class;
declare function isImportOrE***REMOVED***portDeclaration(node: Node | null | undefined, opts?: Opts<ImportOrE***REMOVED***portDeclaration> | null): node is ImportOrE***REMOVED***portDeclaration;
declare function isE***REMOVED***portDeclaration(node: Node | null | undefined, opts?: Opts<E***REMOVED***portDeclaration> | null): node is E***REMOVED***portDeclaration;
declare function isModuleSpecifier(node: Node | null | undefined, opts?: Opts<ModuleSpecifier> | null): node is ModuleSpecifier;
declare function isAccessor(node: Node | null | undefined, opts?: Opts<Accessor> | null): node is Accessor;
declare function isPrivate(node: Node | null | undefined, opts?: Opts<Private> | null): node is Private;
declare function isFlow(node: Node | null | undefined, opts?: Opts<Flow> | null): node is Flow;
declare function isFlowType(node: Node | null | undefined, opts?: Opts<FlowType> | null): node is FlowType;
declare function isFlowBaseAnnotation(node: Node | null | undefined, opts?: Opts<FlowBaseAnnotation> | null): node is FlowBaseAnnotation;
declare function isFlowDeclaration(node: Node | null | undefined, opts?: Opts<FlowDeclaration> | null): node is FlowDeclaration;
declare function isFlowPredicate(node: Node | null | undefined, opts?: Opts<FlowPredicate> | null): node is FlowPredicate;
declare function isEnumBody(node: Node | null | undefined, opts?: Opts<EnumBody> | null): node is EnumBody;
declare function isEnumMember(node: Node | null | undefined, opts?: Opts<EnumMember> | null): node is EnumMember;
declare function isJSX(node: Node | null | undefined, opts?: Opts<JSX> | null): node is JSX;
declare function isMiscellaneous(node: Node | null | undefined, opts?: Opts<Miscellaneous> | null): node is Miscellaneous;
declare function isTypeScript(node: Node | null | undefined, opts?: Opts<TypeScript> | null): node is TypeScript;
declare function isTSTypeElement(node: Node | null | undefined, opts?: Opts<TSTypeElement> | null): node is TSTypeElement;
declare function isTSType(node: Node | null | undefined, opts?: Opts<TSType> | null): node is TSType;
declare function isTSBaseType(node: Node | null | undefined, opts?: Opts<TSBaseType> | null): node is TSBaseType;
/**
 * @deprecated Use `isNumericLiteral`
 */
declare function isNumberLiteral(node: Node | null | undefined, opts?: Opts<NumberLiteral> | null): boolean;
/**
 * @deprecated Use `isRegE***REMOVED***pLiteral`
 */
declare function isRege***REMOVED***Literal(node: Node | null | undefined, opts?: Opts<Rege***REMOVED***Literal> | null): boolean;
/**
 * @deprecated Use `isRestElement`
 */
declare function isRestProperty(node: Node | null | undefined, opts?: Opts<RestProperty> | null): boolean;
/**
 * @deprecated Use `isSpreadElement`
 */
declare function isSpreadProperty(node: Node | null | undefined, opts?: Opts<SpreadProperty> | null): boolean;
/**
 * @deprecated Use `isImportOrE***REMOVED***portDeclaration`
 */
declare function isModuleDeclaration(node: Node | null | undefined, opts?: Opts<ModuleDeclaration> | null): node is ImportOrE***REMOVED***portDeclaration;

interface BaseComment {
    value: string;
    start?: number;
    end?: number;
    loc?: SourceLocation;
    ignore?: boolean;
    type: "CommentBlock" | "CommentLine";
}
interface Position {
    line: number;
    column: number;
    inde***REMOVED***: number;
}
interface CommentBlock e***REMOVED***tends BaseComment {
    type: "CommentBlock";
}
interface CommentLine e***REMOVED***tends BaseComment {
    type: "CommentLine";
}
type Comment = CommentBlock | CommentLine;
interface SourceLocation {
    start: Position;
    end: Position;
    filename: string;
    identifierName: string | undefined | null;
}
interface BaseNode {
    type: Node["type"];
    leadingComments?: Comment[] | null;
    innerComments?: Comment[] | null;
    trailingComments?: Comment[] | null;
    start?: number | null;
    end?: number | null;
    loc?: SourceLocation | null;
    range?: [number, number];
    e***REMOVED***tra?: Record<string, unknown>;
}
type CommentTypeShorthand = "leading" | "inner" | "trailing";
type Node = AnyTypeAnnotation | ArgumentPlaceholder | ArrayE***REMOVED***pression | ArrayPattern | ArrayTypeAnnotation | ArrowFunctionE***REMOVED***pression | AssignmentE***REMOVED***pression | AssignmentPattern | AwaitE***REMOVED***pression | BigIntLiteral | BinaryE***REMOVED***pression | BindE***REMOVED***pression | BlockStatement | BooleanLiteral | BooleanLiteralTypeAnnotation | BooleanTypeAnnotation | BreakStatement | CallE***REMOVED***pression | CatchClause | ClassAccessorProperty | ClassBody | ClassDeclaration | ClassE***REMOVED***pression | ClassImplements | ClassMethod | ClassPrivateMethod | ClassPrivateProperty | ClassProperty | ConditionalE***REMOVED***pression | ContinueStatement | DebuggerStatement | DecimalLiteral | DeclareClass | DeclareE***REMOVED***portAllDeclaration | DeclareE***REMOVED***portDeclaration | DeclareFunction | DeclareInterface | DeclareModule | DeclareModuleE***REMOVED***ports | DeclareOpaqueType | DeclareTypeAlias | DeclareVariable | DeclaredPredicate | Decorator | Directive | DirectiveLiteral | DoE***REMOVED***pression | DoWhileStatement | EmptyStatement | EmptyTypeAnnotation | EnumBooleanBody | EnumBooleanMember | EnumDeclaration | EnumDefaultedMember | EnumNumberBody | EnumNumberMember | EnumStringBody | EnumStringMember | EnumSymbolBody | E***REMOVED***istsTypeAnnotation | E***REMOVED***portAllDeclaration | E***REMOVED***portDefaultDeclaration | E***REMOVED***portDefaultSpecifier | E***REMOVED***portNamedDeclaration | E***REMOVED***portNamespaceSpecifier | E***REMOVED***portSpecifier | E***REMOVED***pressionStatement | File | ForInStatement | ForOfStatement | ForStatement | FunctionDeclaration | FunctionE***REMOVED***pression | FunctionTypeAnnotation | FunctionTypeParam | GenericTypeAnnotation | Identifier | IfStatement | Import | ImportAttribute | ImportDeclaration | ImportDefaultSpecifier | ImportE***REMOVED***pression | ImportNamespaceSpecifier | ImportSpecifier | Inde***REMOVED***edAccessType | InferredPredicate | InterfaceDeclaration | InterfaceE***REMOVED***tends | InterfaceTypeAnnotation | InterpreterDirective | IntersectionTypeAnnotation | JSXAttribute | JSXClosingElement | JSXClosingFragment | JSXElement | JSXEmptyE***REMOVED***pression | JSXE***REMOVED***pressionContainer | JSXFragment | JSXIdentifier | JSXMemberE***REMOVED***pression | JSXNamespacedName | JSXOpeningElement | JSXOpeningFragment | JSXSpreadAttribute | JSXSpreadChild | JSXTe***REMOVED***t | LabeledStatement | LogicalE***REMOVED***pression | MemberE***REMOVED***pression | MetaProperty | Mi***REMOVED***edTypeAnnotation | ModuleE***REMOVED***pression | NewE***REMOVED***pression | Noop | NullLiteral | NullLiteralTypeAnnotation | NullableTypeAnnotation | NumberLiteral | NumberLiteralTypeAnnotation | NumberTypeAnnotation | NumericLiteral | ObjectE***REMOVED***pression | ObjectMethod | ObjectPattern | ObjectProperty | ObjectTypeAnnotation | ObjectTypeCallProperty | ObjectTypeInde***REMOVED***er | ObjectTypeInternalSlot | ObjectTypeProperty | ObjectTypeSpreadProperty | OpaqueType | OptionalCallE***REMOVED***pression | OptionalInde***REMOVED***edAccessType | OptionalMemberE***REMOVED***pression | ParenthesizedE***REMOVED***pression | PipelineBareFunction | PipelinePrimaryTopicReference | PipelineTopicE***REMOVED***pression | Placeholder | PrivateName | Program | QualifiedTypeIdentifier | RecordE***REMOVED***pression | RegE***REMOVED***pLiteral | Rege***REMOVED***Literal | RestElement | RestProperty | ReturnStatement | SequenceE***REMOVED***pression | SpreadElement | SpreadProperty | StaticBlock | StringLiteral | StringLiteralTypeAnnotation | StringTypeAnnotation | Super | SwitchCase | SwitchStatement | SymbolTypeAnnotation | TSAnyKeyword | TSArrayType | TSAsE***REMOVED***pression | TSBigIntKeyword | TSBooleanKeyword | TSCallSignatureDeclaration | TSConditionalType | TSConstructSignatureDeclaration | TSConstructorType | TSDeclareFunction | TSDeclareMethod | TSEnumDeclaration | TSEnumMember | TSE***REMOVED***portAssignment | TSE***REMOVED***pressionWithTypeArguments | TSE***REMOVED***ternalModuleReference | TSFunctionType | TSImportEqualsDeclaration | TSImportType | TSInde***REMOVED***Signature | TSInde***REMOVED***edAccessType | TSInferType | TSInstantiationE***REMOVED***pression | TSInterfaceBody | TSInterfaceDeclaration | TSIntersectionType | TSIntrinsicKeyword | TSLiteralType | TSMappedType | TSMethodSignature | TSModuleBlock | TSModuleDeclaration | TSNamedTupleMember | TSNamespaceE***REMOVED***portDeclaration | TSNeverKeyword | TSNonNullE***REMOVED***pression | TSNullKeyword | TSNumberKeyword | TSObjectKeyword | TSOptionalType | TSParameterProperty | TSParenthesizedType | TSPropertySignature | TSQualifiedName | TSRestType | TSSatisfiesE***REMOVED***pression | TSStringKeyword | TSSymbolKeyword | TSThisType | TSTupleType | TSTypeAliasDeclaration | TSTypeAnnotation | TSTypeAssertion | TSTypeLiteral | TSTypeOperator | TSTypeParameter | TSTypeParameterDeclaration | TSTypeParameterInstantiation | TSTypePredicate | TSTypeQuery | TSTypeReference | TSUndefinedKeyword | TSUnionType | TSUnknownKeyword | TSVoidKeyword | TaggedTemplateE***REMOVED***pression | TemplateElement | TemplateLiteral | ThisE***REMOVED***pression | ThisTypeAnnotation | ThrowStatement | TopicReference | TryStatement | TupleE***REMOVED***pression | TupleTypeAnnotation | TypeAlias | TypeAnnotation | TypeCastE***REMOVED***pression | TypeParameter | TypeParameterDeclaration | TypeParameterInstantiation | TypeofTypeAnnotation | UnaryE***REMOVED***pression | UnionTypeAnnotation | UpdateE***REMOVED***pression | V8IntrinsicIdentifier | VariableDeclaration | VariableDeclarator | Variance | VoidTypeAnnotation | WhileStatement | WithStatement | YieldE***REMOVED***pression;
interface ArrayE***REMOVED***pression e***REMOVED***tends BaseNode {
    type: "ArrayE***REMOVED***pression";
    elements: Array<null | E***REMOVED***pression | SpreadElement>;
}
interface AssignmentE***REMOVED***pression e***REMOVED***tends BaseNode {
    type: "AssignmentE***REMOVED***pression";
    operator: string;
    left: LVal | OptionalMemberE***REMOVED***pression;
    right: E***REMOVED***pression;
}
interface BinaryE***REMOVED***pression e***REMOVED***tends BaseNode {
    type: "BinaryE***REMOVED***pression";
    operator: "+" | "-" | "/" | "%" | "*" | "**" | "&" | "|" | ">>" | ">>>" | "<<" | "^" | "==" | "===" | "!=" | "!==" | "in" | "instanceof" | ">" | "<" | ">=" | "<=" | "|>";
    left: E***REMOVED***pression | PrivateName;
    right: E***REMOVED***pression;
}
interface InterpreterDirective e***REMOVED***tends BaseNode {
    type: "InterpreterDirective";
    value: string;
}
interface Directive e***REMOVED***tends BaseNode {
    type: "Directive";
    value: DirectiveLiteral;
}
interface DirectiveLiteral e***REMOVED***tends BaseNode {
    type: "DirectiveLiteral";
    value: string;
}
interface BlockStatement e***REMOVED***tends BaseNode {
    type: "BlockStatement";
    body: Array<Statement>;
    directives: Array<Directive>;
}
interface BreakStatement e***REMOVED***tends BaseNode {
    type: "BreakStatement";
    label?: Identifier | null;
}
interface CallE***REMOVED***pression e***REMOVED***tends BaseNode {
    type: "CallE***REMOVED***pression";
    callee: E***REMOVED***pression | Super | V8IntrinsicIdentifier;
    arguments: Array<E***REMOVED***pression | SpreadElement | ArgumentPlaceholder>;
    optional?: boolean | null;
    typeArguments?: TypeParameterInstantiation | null;
    typeParameters?: TSTypeParameterInstantiation | null;
}
interface CatchClause e***REMOVED***tends BaseNode {
    type: "CatchClause";
    param?: Identifier | ArrayPattern | ObjectPattern | null;
    body: BlockStatement;
}
interface ConditionalE***REMOVED***pression e***REMOVED***tends BaseNode {
    type: "ConditionalE***REMOVED***pression";
    test: E***REMOVED***pression;
    consequent: E***REMOVED***pression;
    alternate: E***REMOVED***pression;
}
interface ContinueStatement e***REMOVED***tends BaseNode {
    type: "ContinueStatement";
    label?: Identifier | null;
}
interface DebuggerStatement e***REMOVED***tends BaseNode {
    type: "DebuggerStatement";
}
interface DoWhileStatement e***REMOVED***tends BaseNode {
    type: "DoWhileStatement";
    test: E***REMOVED***pression;
    body: Statement;
}
interface EmptyStatement e***REMOVED***tends BaseNode {
    type: "EmptyStatement";
}
interface E***REMOVED***pressionStatement e***REMOVED***tends BaseNode {
    type: "E***REMOVED***pressionStatement";
    e***REMOVED***pression: E***REMOVED***pression;
}
interface File e***REMOVED***tends BaseNode {
    type: "File";
    program: Program;
    comments?: Array<CommentBlock | CommentLine> | null;
    tokens?: Array<any> | null;
}
interface ForInStatement e***REMOVED***tends BaseNode {
    type: "ForInStatement";
    left: VariableDeclaration | LVal;
    right: E***REMOVED***pression;
    body: Statement;
}
interface ForStatement e***REMOVED***tends BaseNode {
    type: "ForStatement";
    init?: VariableDeclaration | E***REMOVED***pression | null;
    test?: E***REMOVED***pression | null;
    update?: E***REMOVED***pression | null;
    body: Statement;
}
interface FunctionDeclaration e***REMOVED***tends BaseNode {
    type: "FunctionDeclaration";
    id?: Identifier | null;
    params: Array<Identifier | Pattern | RestElement>;
    body: BlockStatement;
    generator: boolean;
    async: boolean;
    declare?: boolean | null;
    predicate?: DeclaredPredicate | InferredPredicate | null;
    returnType?: TypeAnnotation | TSTypeAnnotation | Noop | null;
    typeParameters?: TypeParameterDeclaration | TSTypeParameterDeclaration | Noop | null;
}
interface FunctionE***REMOVED***pression e***REMOVED***tends BaseNode {
    type: "FunctionE***REMOVED***pression";
    id?: Identifier | null;
    params: Array<Identifier | Pattern | RestElement>;
    body: BlockStatement;
    generator: boolean;
    async: boolean;
    predicate?: DeclaredPredicate | InferredPredicate | null;
    returnType?: TypeAnnotation | TSTypeAnnotation | Noop | null;
    typeParameters?: TypeParameterDeclaration | TSTypeParameterDeclaration | Noop | null;
}
interface Identifier e***REMOVED***tends BaseNode {
    type: "Identifier";
    name: string;
    decorators?: Array<Decorator> | null;
    optional?: boolean | null;
    typeAnnotation?: TypeAnnotation | TSTypeAnnotation | Noop | null;
}
interface IfStatement e***REMOVED***tends BaseNode {
    type: "IfStatement";
    test: E***REMOVED***pression;
    consequent: Statement;
    alternate?: Statement | null;
}
interface LabeledStatement e***REMOVED***tends BaseNode {
    type: "LabeledStatement";
    label: Identifier;
    body: Statement;
}
interface StringLiteral e***REMOVED***tends BaseNode {
    type: "StringLiteral";
    value: string;
}
interface NumericLiteral e***REMOVED***tends BaseNode {
    type: "NumericLiteral";
    value: number;
}
/**
 * @deprecated Use `NumericLiteral`
 */
interface NumberLiteral e***REMOVED***tends BaseNode {
    type: "NumberLiteral";
    value: number;
}
interface NullLiteral e***REMOVED***tends BaseNode {
    type: "NullLiteral";
}
interface BooleanLiteral e***REMOVED***tends BaseNode {
    type: "BooleanLiteral";
    value: boolean;
}
interface RegE***REMOVED***pLiteral e***REMOVED***tends BaseNode {
    type: "RegE***REMOVED***pLiteral";
    pattern: string;
    flags: string;
}
/**
 * @deprecated Use `RegE***REMOVED***pLiteral`
 */
interface Rege***REMOVED***Literal e***REMOVED***tends BaseNode {
    type: "Rege***REMOVED***Literal";
    pattern: string;
    flags: string;
}
interface LogicalE***REMOVED***pression e***REMOVED***tends BaseNode {
    type: "LogicalE***REMOVED***pression";
    operator: "||" | "&&" | "??";
    left: E***REMOVED***pression;
    right: E***REMOVED***pression;
}
interface MemberE***REMOVED***pression e***REMOVED***tends BaseNode {
    type: "MemberE***REMOVED***pression";
    object: E***REMOVED***pression | Super;
    property: E***REMOVED***pression | Identifier | PrivateName;
    computed: boolean;
    optional?: boolean | null;
}
interface NewE***REMOVED***pression e***REMOVED***tends BaseNode {
    type: "NewE***REMOVED***pression";
    callee: E***REMOVED***pression | Super | V8IntrinsicIdentifier;
    arguments: Array<E***REMOVED***pression | SpreadElement | ArgumentPlaceholder>;
    optional?: boolean | null;
    typeArguments?: TypeParameterInstantiation | null;
    typeParameters?: TSTypeParameterInstantiation | null;
}
interface Program e***REMOVED***tends BaseNode {
    type: "Program";
    body: Array<Statement>;
    directives: Array<Directive>;
    sourceType: "script" | "module";
    interpreter?: InterpreterDirective | null;
}
interface ObjectE***REMOVED***pression e***REMOVED***tends BaseNode {
    type: "ObjectE***REMOVED***pression";
    properties: Array<ObjectMethod | ObjectProperty | SpreadElement>;
}
interface ObjectMethod e***REMOVED***tends BaseNode {
    type: "ObjectMethod";
    kind: "method" | "get" | "set";
    key: E***REMOVED***pression | Identifier | StringLiteral | NumericLiteral | BigIntLiteral;
    params: Array<Identifier | Pattern | RestElement>;
    body: BlockStatement;
    computed: boolean;
    generator: boolean;
    async: boolean;
    decorators?: Array<Decorator> | null;
    returnType?: TypeAnnotation | TSTypeAnnotation | Noop | null;
    typeParameters?: TypeParameterDeclaration | TSTypeParameterDeclaration | Noop | null;
}
interface ObjectProperty e***REMOVED***tends BaseNode {
    type: "ObjectProperty";
    key: E***REMOVED***pression | Identifier | StringLiteral | NumericLiteral | BigIntLiteral | DecimalLiteral | PrivateName;
    value: E***REMOVED***pression | PatternLike;
    computed: boolean;
    shorthand: boolean;
    decorators?: Array<Decorator> | null;
}
interface RestElement e***REMOVED***tends BaseNode {
    type: "RestElement";
    argument: LVal;
    decorators?: Array<Decorator> | null;
    optional?: boolean | null;
    typeAnnotation?: TypeAnnotation | TSTypeAnnotation | Noop | null;
}
/**
 * @deprecated Use `RestElement`
 */
interface RestProperty e***REMOVED***tends BaseNode {
    type: "RestProperty";
    argument: LVal;
    decorators?: Array<Decorator> | null;
    optional?: boolean | null;
    typeAnnotation?: TypeAnnotation | TSTypeAnnotation | Noop | null;
}
interface ReturnStatement e***REMOVED***tends BaseNode {
    type: "ReturnStatement";
    argument?: E***REMOVED***pression | null;
}
interface SequenceE***REMOVED***pression e***REMOVED***tends BaseNode {
    type: "SequenceE***REMOVED***pression";
    e***REMOVED***pressions: Array<E***REMOVED***pression>;
}
interface ParenthesizedE***REMOVED***pression e***REMOVED***tends BaseNode {
    type: "ParenthesizedE***REMOVED***pression";
    e***REMOVED***pression: E***REMOVED***pression;
}
interface SwitchCase e***REMOVED***tends BaseNode {
    type: "SwitchCase";
    test?: E***REMOVED***pression | null;
    consequent: Array<Statement>;
}
interface SwitchStatement e***REMOVED***tends BaseNode {
    type: "SwitchStatement";
    discriminant: E***REMOVED***pression;
    cases: Array<SwitchCase>;
}
interface ThisE***REMOVED***pression e***REMOVED***tends BaseNode {
    type: "ThisE***REMOVED***pression";
}
interface ThrowStatement e***REMOVED***tends BaseNode {
    type: "ThrowStatement";
    argument: E***REMOVED***pression;
}
interface TryStatement e***REMOVED***tends BaseNode {
    type: "TryStatement";
    block: BlockStatement;
    handler?: CatchClause | null;
    finalizer?: BlockStatement | null;
}
interface UnaryE***REMOVED***pression e***REMOVED***tends BaseNode {
    type: "UnaryE***REMOVED***pression";
    operator: "void" | "throw" | "delete" | "!" | "+" | "-" | "~" | "typeof";
    argument: E***REMOVED***pression;
    prefi***REMOVED***: boolean;
}
interface UpdateE***REMOVED***pression e***REMOVED***tends BaseNode {
    type: "UpdateE***REMOVED***pression";
    operator: "++" | "--";
    argument: E***REMOVED***pression;
    prefi***REMOVED***: boolean;
}
interface VariableDeclaration e***REMOVED***tends BaseNode {
    type: "VariableDeclaration";
    kind: "var" | "let" | "const" | "using" | "await using";
    declarations: Array<VariableDeclarator>;
    declare?: boolean | null;
}
interface VariableDeclarator e***REMOVED***tends BaseNode {
    type: "VariableDeclarator";
    id: LVal;
    init?: E***REMOVED***pression | null;
    definite?: boolean | null;
}
interface WhileStatement e***REMOVED***tends BaseNode {
    type: "WhileStatement";
    test: E***REMOVED***pression;
    body: Statement;
}
interface WithStatement e***REMOVED***tends BaseNode {
    type: "WithStatement";
    object: E***REMOVED***pression;
    body: Statement;
}
interface AssignmentPattern e***REMOVED***tends BaseNode {
    type: "AssignmentPattern";
    left: Identifier | ObjectPattern | ArrayPattern | MemberE***REMOVED***pression | TSAsE***REMOVED***pression | TSSatisfiesE***REMOVED***pression | TSTypeAssertion | TSNonNullE***REMOVED***pression;
    right: E***REMOVED***pression;
    decorators?: Array<Decorator> | null;
    optional?: boolean | null;
    typeAnnotation?: TypeAnnotation | TSTypeAnnotation | Noop | null;
}
interface ArrayPattern e***REMOVED***tends BaseNode {
    type: "ArrayPattern";
    elements: Array<null | PatternLike | LVal>;
    decorators?: Array<Decorator> | null;
    optional?: boolean | null;
    typeAnnotation?: TypeAnnotation | TSTypeAnnotation | Noop | null;
}
interface ArrowFunctionE***REMOVED***pression e***REMOVED***tends BaseNode {
    type: "ArrowFunctionE***REMOVED***pression";
    params: Array<Identifier | Pattern | RestElement>;
    body: BlockStatement | E***REMOVED***pression;
    async: boolean;
    e***REMOVED***pression: boolean;
    generator?: boolean;
    predicate?: DeclaredPredicate | InferredPredicate | null;
    returnType?: TypeAnnotation | TSTypeAnnotation | Noop | null;
    typeParameters?: TypeParameterDeclaration | TSTypeParameterDeclaration | Noop | null;
}
interface ClassBody e***REMOVED***tends BaseNode {
    type: "ClassBody";
    body: Array<ClassMethod | ClassPrivateMethod | ClassProperty | ClassPrivateProperty | ClassAccessorProperty | TSDeclareMethod | TSInde***REMOVED***Signature | StaticBlock>;
}
interface ClassE***REMOVED***pression e***REMOVED***tends BaseNode {
    type: "ClassE***REMOVED***pression";
    id?: Identifier | null;
    superClass?: E***REMOVED***pression | null;
    body: ClassBody;
    decorators?: Array<Decorator> | null;
    implements?: Array<TSE***REMOVED***pressionWithTypeArguments | ClassImplements> | null;
    mi***REMOVED***ins?: InterfaceE***REMOVED***tends | null;
    superTypeParameters?: TypeParameterInstantiation | TSTypeParameterInstantiation | null;
    typeParameters?: TypeParameterDeclaration | TSTypeParameterDeclaration | Noop | null;
}
interface ClassDeclaration e***REMOVED***tends BaseNode {
    type: "ClassDeclaration";
    id?: Identifier | null;
    superClass?: E***REMOVED***pression | null;
    body: ClassBody;
    decorators?: Array<Decorator> | null;
    abstract?: boolean | null;
    declare?: boolean | null;
    implements?: Array<TSE***REMOVED***pressionWithTypeArguments | ClassImplements> | null;
    mi***REMOVED***ins?: InterfaceE***REMOVED***tends | null;
    superTypeParameters?: TypeParameterInstantiation | TSTypeParameterInstantiation | null;
    typeParameters?: TypeParameterDeclaration | TSTypeParameterDeclaration | Noop | null;
}
interface E***REMOVED***portAllDeclaration e***REMOVED***tends BaseNode {
    type: "E***REMOVED***portAllDeclaration";
    source: StringLiteral;
    /** @deprecated */
    assertions?: Array<ImportAttribute> | null;
    attributes?: Array<ImportAttribute> | null;
    e***REMOVED***portKind?: "type" | "value" | null;
}
interface E***REMOVED***portDefaultDeclaration e***REMOVED***tends BaseNode {
    type: "E***REMOVED***portDefaultDeclaration";
    declaration: TSDeclareFunction | FunctionDeclaration | ClassDeclaration | E***REMOVED***pression;
    e***REMOVED***portKind?: "value" | null;
}
interface E***REMOVED***portNamedDeclaration e***REMOVED***tends BaseNode {
    type: "E***REMOVED***portNamedDeclaration";
    declaration?: Declaration | null;
    specifiers: Array<E***REMOVED***portSpecifier | E***REMOVED***portDefaultSpecifier | E***REMOVED***portNamespaceSpecifier>;
    source?: StringLiteral | null;
    /** @deprecated */
    assertions?: Array<ImportAttribute> | null;
    attributes?: Array<ImportAttribute> | null;
    e***REMOVED***portKind?: "type" | "value" | null;
}
interface E***REMOVED***portSpecifier e***REMOVED***tends BaseNode {
    type: "E***REMOVED***portSpecifier";
    local: Identifier;
    e***REMOVED***ported: Identifier | StringLiteral;
    e***REMOVED***portKind?: "type" | "value" | null;
}
interface ForOfStatement e***REMOVED***tends BaseNode {
    type: "ForOfStatement";
    left: VariableDeclaration | LVal;
    right: E***REMOVED***pression;
    body: Statement;
    await: boolean;
}
interface ImportDeclaration e***REMOVED***tends BaseNode {
    type: "ImportDeclaration";
    specifiers: Array<ImportSpecifier | ImportDefaultSpecifier | ImportNamespaceSpecifier>;
    source: StringLiteral;
    /** @deprecated */
    assertions?: Array<ImportAttribute> | null;
    attributes?: Array<ImportAttribute> | null;
    importKind?: "type" | "typeof" | "value" | null;
    module?: boolean | null;
    phase?: "source" | "defer" | null;
}
interface ImportDefaultSpecifier e***REMOVED***tends BaseNode {
    type: "ImportDefaultSpecifier";
    local: Identifier;
}
interface ImportNamespaceSpecifier e***REMOVED***tends BaseNode {
    type: "ImportNamespaceSpecifier";
    local: Identifier;
}
interface ImportSpecifier e***REMOVED***tends BaseNode {
    type: "ImportSpecifier";
    local: Identifier;
    imported: Identifier | StringLiteral;
    importKind?: "type" | "typeof" | "value" | null;
}
interface ImportE***REMOVED***pression e***REMOVED***tends BaseNode {
    type: "ImportE***REMOVED***pression";
    source: E***REMOVED***pression;
    options?: E***REMOVED***pression | null;
    phase?: "source" | "defer" | null;
}
interface MetaProperty e***REMOVED***tends BaseNode {
    type: "MetaProperty";
    meta: Identifier;
    property: Identifier;
}
interface ClassMethod e***REMOVED***tends BaseNode {
    type: "ClassMethod";
    kind: "get" | "set" | "method" | "constructor";
    key: Identifier | StringLiteral | NumericLiteral | BigIntLiteral | E***REMOVED***pression;
    params: Array<Identifier | Pattern | RestElement | TSParameterProperty>;
    body: BlockStatement;
    computed: boolean;
    static: boolean;
    generator: boolean;
    async: boolean;
    abstract?: boolean | null;
    access?: "public" | "private" | "protected" | null;
    accessibility?: "public" | "private" | "protected" | null;
    decorators?: Array<Decorator> | null;
    optional?: boolean | null;
    override?: boolean;
    returnType?: TypeAnnotation | TSTypeAnnotation | Noop | null;
    typeParameters?: TypeParameterDeclaration | TSTypeParameterDeclaration | Noop | null;
}
interface ObjectPattern e***REMOVED***tends BaseNode {
    type: "ObjectPattern";
    properties: Array<RestElement | ObjectProperty>;
    decorators?: Array<Decorator> | null;
    optional?: boolean | null;
    typeAnnotation?: TypeAnnotation | TSTypeAnnotation | Noop | null;
}
interface SpreadElement e***REMOVED***tends BaseNode {
    type: "SpreadElement";
    argument: E***REMOVED***pression;
}
/**
 * @deprecated Use `SpreadElement`
 */
interface SpreadProperty e***REMOVED***tends BaseNode {
    type: "SpreadProperty";
    argument: E***REMOVED***pression;
}
interface Super e***REMOVED***tends BaseNode {
    type: "Super";
}
interface TaggedTemplateE***REMOVED***pression e***REMOVED***tends BaseNode {
    type: "TaggedTemplateE***REMOVED***pression";
    tag: E***REMOVED***pression;
    quasi: TemplateLiteral;
    typeParameters?: TypeParameterInstantiation | TSTypeParameterInstantiation | null;
}
interface TemplateElement e***REMOVED***tends BaseNode {
    type: "TemplateElement";
    value: {
        raw: string;
        cooked?: string;
    };
    tail: boolean;
}
interface TemplateLiteral e***REMOVED***tends BaseNode {
    type: "TemplateLiteral";
    quasis: Array<TemplateElement>;
    e***REMOVED***pressions: Array<E***REMOVED***pression | TSType>;
}
interface YieldE***REMOVED***pression e***REMOVED***tends BaseNode {
    type: "YieldE***REMOVED***pression";
    argument?: E***REMOVED***pression | null;
    delegate: boolean;
}
interface AwaitE***REMOVED***pression e***REMOVED***tends BaseNode {
    type: "AwaitE***REMOVED***pression";
    argument: E***REMOVED***pression;
}
interface Import e***REMOVED***tends BaseNode {
    type: "Import";
}
interface BigIntLiteral e***REMOVED***tends BaseNode {
    type: "BigIntLiteral";
    value: string;
}
interface E***REMOVED***portNamespaceSpecifier e***REMOVED***tends BaseNode {
    type: "E***REMOVED***portNamespaceSpecifier";
    e***REMOVED***ported: Identifier;
}
interface OptionalMemberE***REMOVED***pression e***REMOVED***tends BaseNode {
    type: "OptionalMemberE***REMOVED***pression";
    object: E***REMOVED***pression;
    property: E***REMOVED***pression | Identifier;
    computed: boolean;
    optional: boolean;
}
interface OptionalCallE***REMOVED***pression e***REMOVED***tends BaseNode {
    type: "OptionalCallE***REMOVED***pression";
    callee: E***REMOVED***pression;
    arguments: Array<E***REMOVED***pression | SpreadElement | ArgumentPlaceholder>;
    optional: boolean;
    typeArguments?: TypeParameterInstantiation | null;
    typeParameters?: TSTypeParameterInstantiation | null;
}
interface ClassProperty e***REMOVED***tends BaseNode {
    type: "ClassProperty";
    key: Identifier | StringLiteral | NumericLiteral | BigIntLiteral | E***REMOVED***pression;
    value?: E***REMOVED***pression | null;
    typeAnnotation?: TypeAnnotation | TSTypeAnnotation | Noop | null;
    decorators?: Array<Decorator> | null;
    computed: boolean;
    static: boolean;
    abstract?: boolean | null;
    accessibility?: "public" | "private" | "protected" | null;
    declare?: boolean | null;
    definite?: boolean | null;
    optional?: boolean | null;
    override?: boolean;
    readonly?: boolean | null;
    variance?: Variance | null;
}
interface ClassAccessorProperty e***REMOVED***tends BaseNode {
    type: "ClassAccessorProperty";
    key: Identifier | StringLiteral | NumericLiteral | BigIntLiteral | E***REMOVED***pression | PrivateName;
    value?: E***REMOVED***pression | null;
    typeAnnotation?: TypeAnnotation | TSTypeAnnotation | Noop | null;
    decorators?: Array<Decorator> | null;
    computed: boolean;
    static: boolean;
    abstract?: boolean | null;
    accessibility?: "public" | "private" | "protected" | null;
    declare?: boolean | null;
    definite?: boolean | null;
    optional?: boolean | null;
    override?: boolean;
    readonly?: boolean | null;
    variance?: Variance | null;
}
interface ClassPrivateProperty e***REMOVED***tends BaseNode {
    type: "ClassPrivateProperty";
    key: PrivateName;
    value?: E***REMOVED***pression | null;
    decorators?: Array<Decorator> | null;
    static: boolean;
    definite?: boolean | null;
    readonly?: boolean | null;
    typeAnnotation?: TypeAnnotation | TSTypeAnnotation | Noop | null;
    variance?: Variance | null;
}
interface ClassPrivateMethod e***REMOVED***tends BaseNode {
    type: "ClassPrivateMethod";
    kind: "get" | "set" | "method";
    key: PrivateName;
    params: Array<Identifier | Pattern | RestElement | TSParameterProperty>;
    body: BlockStatement;
    static: boolean;
    abstract?: boolean | null;
    access?: "public" | "private" | "protected" | null;
    accessibility?: "public" | "private" | "protected" | null;
    async?: boolean;
    computed?: boolean;
    decorators?: Array<Decorator> | null;
    generator?: boolean;
    optional?: boolean | null;
    override?: boolean;
    returnType?: TypeAnnotation | TSTypeAnnotation | Noop | null;
    typeParameters?: TypeParameterDeclaration | TSTypeParameterDeclaration | Noop | null;
}
interface PrivateName e***REMOVED***tends BaseNode {
    type: "PrivateName";
    id: Identifier;
}
interface StaticBlock e***REMOVED***tends BaseNode {
    type: "StaticBlock";
    body: Array<Statement>;
}
interface AnyTypeAnnotation e***REMOVED***tends BaseNode {
    type: "AnyTypeAnnotation";
}
interface ArrayTypeAnnotation e***REMOVED***tends BaseNode {
    type: "ArrayTypeAnnotation";
    elementType: FlowType;
}
interface BooleanTypeAnnotation e***REMOVED***tends BaseNode {
    type: "BooleanTypeAnnotation";
}
interface BooleanLiteralTypeAnnotation e***REMOVED***tends BaseNode {
    type: "BooleanLiteralTypeAnnotation";
    value: boolean;
}
interface NullLiteralTypeAnnotation e***REMOVED***tends BaseNode {
    type: "NullLiteralTypeAnnotation";
}
interface ClassImplements e***REMOVED***tends BaseNode {
    type: "ClassImplements";
    id: Identifier;
    typeParameters?: TypeParameterInstantiation | null;
}
interface DeclareClass e***REMOVED***tends BaseNode {
    type: "DeclareClass";
    id: Identifier;
    typeParameters?: TypeParameterDeclaration | null;
    e***REMOVED***tends?: Array<InterfaceE***REMOVED***tends> | null;
    body: ObjectTypeAnnotation;
    implements?: Array<ClassImplements> | null;
    mi***REMOVED***ins?: Array<InterfaceE***REMOVED***tends> | null;
}
interface DeclareFunction e***REMOVED***tends BaseNode {
    type: "DeclareFunction";
    id: Identifier;
    predicate?: DeclaredPredicate | null;
}
interface DeclareInterface e***REMOVED***tends BaseNode {
    type: "DeclareInterface";
    id: Identifier;
    typeParameters?: TypeParameterDeclaration | null;
    e***REMOVED***tends?: Array<InterfaceE***REMOVED***tends> | null;
    body: ObjectTypeAnnotation;
}
interface DeclareModule e***REMOVED***tends BaseNode {
    type: "DeclareModule";
    id: Identifier | StringLiteral;
    body: BlockStatement;
    kind?: "CommonJS" | "ES" | null;
}
interface DeclareModuleE***REMOVED***ports e***REMOVED***tends BaseNode {
    type: "DeclareModuleE***REMOVED***ports";
    typeAnnotation: TypeAnnotation;
}
interface DeclareTypeAlias e***REMOVED***tends BaseNode {
    type: "DeclareTypeAlias";
    id: Identifier;
    typeParameters?: TypeParameterDeclaration | null;
    right: FlowType;
}
interface DeclareOpaqueType e***REMOVED***tends BaseNode {
    type: "DeclareOpaqueType";
    id: Identifier;
    typeParameters?: TypeParameterDeclaration | null;
    supertype?: FlowType | null;
    impltype?: FlowType | null;
}
interface DeclareVariable e***REMOVED***tends BaseNode {
    type: "DeclareVariable";
    id: Identifier;
}
interface DeclareE***REMOVED***portDeclaration e***REMOVED***tends BaseNode {
    type: "DeclareE***REMOVED***portDeclaration";
    declaration?: Flow | null;
    specifiers?: Array<E***REMOVED***portSpecifier | E***REMOVED***portNamespaceSpecifier> | null;
    source?: StringLiteral | null;
    attributes?: Array<ImportAttribute> | null;
    /** @deprecated */
    assertions?: Array<ImportAttribute> | null;
    default?: boolean | null;
}
interface DeclareE***REMOVED***portAllDeclaration e***REMOVED***tends BaseNode {
    type: "DeclareE***REMOVED***portAllDeclaration";
    source: StringLiteral;
    attributes?: Array<ImportAttribute> | null;
    /** @deprecated */
    assertions?: Array<ImportAttribute> | null;
    e***REMOVED***portKind?: "type" | "value" | null;
}
interface DeclaredPredicate e***REMOVED***tends BaseNode {
    type: "DeclaredPredicate";
    value: Flow;
}
interface E***REMOVED***istsTypeAnnotation e***REMOVED***tends BaseNode {
    type: "E***REMOVED***istsTypeAnnotation";
}
interface FunctionTypeAnnotation e***REMOVED***tends BaseNode {
    type: "FunctionTypeAnnotation";
    typeParameters?: TypeParameterDeclaration | null;
    params: Array<FunctionTypeParam>;
    rest?: FunctionTypeParam | null;
    returnType: FlowType;
    this?: FunctionTypeParam | null;
}
interface FunctionTypeParam e***REMOVED***tends BaseNode {
    type: "FunctionTypeParam";
    name?: Identifier | null;
    typeAnnotation: FlowType;
    optional?: boolean | null;
}
interface GenericTypeAnnotation e***REMOVED***tends BaseNode {
    type: "GenericTypeAnnotation";
    id: Identifier | QualifiedTypeIdentifier;
    typeParameters?: TypeParameterInstantiation | null;
}
interface InferredPredicate e***REMOVED***tends BaseNode {
    type: "InferredPredicate";
}
interface InterfaceE***REMOVED***tends e***REMOVED***tends BaseNode {
    type: "InterfaceE***REMOVED***tends";
    id: Identifier | QualifiedTypeIdentifier;
    typeParameters?: TypeParameterInstantiation | null;
}
interface InterfaceDeclaration e***REMOVED***tends BaseNode {
    type: "InterfaceDeclaration";
    id: Identifier;
    typeParameters?: TypeParameterDeclaration | null;
    e***REMOVED***tends?: Array<InterfaceE***REMOVED***tends> | null;
    body: ObjectTypeAnnotation;
}
interface InterfaceTypeAnnotation e***REMOVED***tends BaseNode {
    type: "InterfaceTypeAnnotation";
    e***REMOVED***tends?: Array<InterfaceE***REMOVED***tends> | null;
    body: ObjectTypeAnnotation;
}
interface IntersectionTypeAnnotation e***REMOVED***tends BaseNode {
    type: "IntersectionTypeAnnotation";
    types: Array<FlowType>;
}
interface Mi***REMOVED***edTypeAnnotation e***REMOVED***tends BaseNode {
    type: "Mi***REMOVED***edTypeAnnotation";
}
interface EmptyTypeAnnotation e***REMOVED***tends BaseNode {
    type: "EmptyTypeAnnotation";
}
interface NullableTypeAnnotation e***REMOVED***tends BaseNode {
    type: "NullableTypeAnnotation";
    typeAnnotation: FlowType;
}
interface NumberLiteralTypeAnnotation e***REMOVED***tends BaseNode {
    type: "NumberLiteralTypeAnnotation";
    value: number;
}
interface NumberTypeAnnotation e***REMOVED***tends BaseNode {
    type: "NumberTypeAnnotation";
}
interface ObjectTypeAnnotation e***REMOVED***tends BaseNode {
    type: "ObjectTypeAnnotation";
    properties: Array<ObjectTypeProperty | ObjectTypeSpreadProperty>;
    inde***REMOVED***ers?: Array<ObjectTypeInde***REMOVED***er>;
    callProperties?: Array<ObjectTypeCallProperty>;
    internalSlots?: Array<ObjectTypeInternalSlot>;
    e***REMOVED***act: boolean;
    ine***REMOVED***act?: boolean | null;
}
interface ObjectTypeInternalSlot e***REMOVED***tends BaseNode {
    type: "ObjectTypeInternalSlot";
    id: Identifier;
    value: FlowType;
    optional: boolean;
    static: boolean;
    method: boolean;
}
interface ObjectTypeCallProperty e***REMOVED***tends BaseNode {
    type: "ObjectTypeCallProperty";
    value: FlowType;
    static: boolean;
}
interface ObjectTypeInde***REMOVED***er e***REMOVED***tends BaseNode {
    type: "ObjectTypeInde***REMOVED***er";
    id?: Identifier | null;
    key: FlowType;
    value: FlowType;
    variance?: Variance | null;
    static: boolean;
}
interface ObjectTypeProperty e***REMOVED***tends BaseNode {
    type: "ObjectTypeProperty";
    key: Identifier | StringLiteral;
    value: FlowType;
    variance?: Variance | null;
    kind: "init" | "get" | "set";
    method: boolean;
    optional: boolean;
    proto: boolean;
    static: boolean;
}
interface ObjectTypeSpreadProperty e***REMOVED***tends BaseNode {
    type: "ObjectTypeSpreadProperty";
    argument: FlowType;
}
interface OpaqueType e***REMOVED***tends BaseNode {
    type: "OpaqueType";
    id: Identifier;
    typeParameters?: TypeParameterDeclaration | null;
    supertype?: FlowType | null;
    impltype: FlowType;
}
interface QualifiedTypeIdentifier e***REMOVED***tends BaseNode {
    type: "QualifiedTypeIdentifier";
    id: Identifier;
    qualification: Identifier | QualifiedTypeIdentifier;
}
interface StringLiteralTypeAnnotation e***REMOVED***tends BaseNode {
    type: "StringLiteralTypeAnnotation";
    value: string;
}
interface StringTypeAnnotation e***REMOVED***tends BaseNode {
    type: "StringTypeAnnotation";
}
interface SymbolTypeAnnotation e***REMOVED***tends BaseNode {
    type: "SymbolTypeAnnotation";
}
interface ThisTypeAnnotation e***REMOVED***tends BaseNode {
    type: "ThisTypeAnnotation";
}
interface TupleTypeAnnotation e***REMOVED***tends BaseNode {
    type: "TupleTypeAnnotation";
    types: Array<FlowType>;
}
interface TypeofTypeAnnotation e***REMOVED***tends BaseNode {
    type: "TypeofTypeAnnotation";
    argument: FlowType;
}
interface TypeAlias e***REMOVED***tends BaseNode {
    type: "TypeAlias";
    id: Identifier;
    typeParameters?: TypeParameterDeclaration | null;
    right: FlowType;
}
interface TypeAnnotation e***REMOVED***tends BaseNode {
    type: "TypeAnnotation";
    typeAnnotation: FlowType;
}
interface TypeCastE***REMOVED***pression e***REMOVED***tends BaseNode {
    type: "TypeCastE***REMOVED***pression";
    e***REMOVED***pression: E***REMOVED***pression;
    typeAnnotation: TypeAnnotation;
}
interface TypeParameter e***REMOVED***tends BaseNode {
    type: "TypeParameter";
    bound?: TypeAnnotation | null;
    default?: FlowType | null;
    variance?: Variance | null;
    name: string;
}
interface TypeParameterDeclaration e***REMOVED***tends BaseNode {
    type: "TypeParameterDeclaration";
    params: Array<TypeParameter>;
}
interface TypeParameterInstantiation e***REMOVED***tends BaseNode {
    type: "TypeParameterInstantiation";
    params: Array<FlowType>;
}
interface UnionTypeAnnotation e***REMOVED***tends BaseNode {
    type: "UnionTypeAnnotation";
    types: Array<FlowType>;
}
interface Variance e***REMOVED***tends BaseNode {
    type: "Variance";
    kind: "minus" | "plus";
}
interface VoidTypeAnnotation e***REMOVED***tends BaseNode {
    type: "VoidTypeAnnotation";
}
interface EnumDeclaration e***REMOVED***tends BaseNode {
    type: "EnumDeclaration";
    id: Identifier;
    body: EnumBooleanBody | EnumNumberBody | EnumStringBody | EnumSymbolBody;
}
interface EnumBooleanBody e***REMOVED***tends BaseNode {
    type: "EnumBooleanBody";
    members: Array<EnumBooleanMember>;
    e***REMOVED***plicitType: boolean;
    hasUnknownMembers: boolean;
}
interface EnumNumberBody e***REMOVED***tends BaseNode {
    type: "EnumNumberBody";
    members: Array<EnumNumberMember>;
    e***REMOVED***plicitType: boolean;
    hasUnknownMembers: boolean;
}
interface EnumStringBody e***REMOVED***tends BaseNode {
    type: "EnumStringBody";
    members: Array<EnumStringMember | EnumDefaultedMember>;
    e***REMOVED***plicitType: boolean;
    hasUnknownMembers: boolean;
}
interface EnumSymbolBody e***REMOVED***tends BaseNode {
    type: "EnumSymbolBody";
    members: Array<EnumDefaultedMember>;
    hasUnknownMembers: boolean;
}
interface EnumBooleanMember e***REMOVED***tends BaseNode {
    type: "EnumBooleanMember";
    id: Identifier;
    init: BooleanLiteral;
}
interface EnumNumberMember e***REMOVED***tends BaseNode {
    type: "EnumNumberMember";
    id: Identifier;
    init: NumericLiteral;
}
interface EnumStringMember e***REMOVED***tends BaseNode {
    type: "EnumStringMember";
    id: Identifier;
    init: StringLiteral;
}
interface EnumDefaultedMember e***REMOVED***tends BaseNode {
    type: "EnumDefaultedMember";
    id: Identifier;
}
interface Inde***REMOVED***edAccessType e***REMOVED***tends BaseNode {
    type: "Inde***REMOVED***edAccessType";
    objectType: FlowType;
    inde***REMOVED***Type: FlowType;
}
interface OptionalInde***REMOVED***edAccessType e***REMOVED***tends BaseNode {
    type: "OptionalInde***REMOVED***edAccessType";
    objectType: FlowType;
    inde***REMOVED***Type: FlowType;
    optional: boolean;
}
interface JSXAttribute e***REMOVED***tends BaseNode {
    type: "JSXAttribute";
    name: JSXIdentifier | JSXNamespacedName;
    value?: JSXElement | JSXFragment | StringLiteral | JSXE***REMOVED***pressionContainer | null;
}
interface JSXClosingElement e***REMOVED***tends BaseNode {
    type: "JSXClosingElement";
    name: JSXIdentifier | JSXMemberE***REMOVED***pression | JSXNamespacedName;
}
interface JSXElement e***REMOVED***tends BaseNode {
    type: "JSXElement";
    openingElement: JSXOpeningElement;
    closingElement?: JSXClosingElement | null;
    children: Array<JSXTe***REMOVED***t | JSXE***REMOVED***pressionContainer | JSXSpreadChild | JSXElement | JSXFragment>;
    selfClosing?: boolean | null;
}
interface JSXEmptyE***REMOVED***pression e***REMOVED***tends BaseNode {
    type: "JSXEmptyE***REMOVED***pression";
}
interface JSXE***REMOVED***pressionContainer e***REMOVED***tends BaseNode {
    type: "JSXE***REMOVED***pressionContainer";
    e***REMOVED***pression: E***REMOVED***pression | JSXEmptyE***REMOVED***pression;
}
interface JSXSpreadChild e***REMOVED***tends BaseNode {
    type: "JSXSpreadChild";
    e***REMOVED***pression: E***REMOVED***pression;
}
interface JSXIdentifier e***REMOVED***tends BaseNode {
    type: "JSXIdentifier";
    name: string;
}
interface JSXMemberE***REMOVED***pression e***REMOVED***tends BaseNode {
    type: "JSXMemberE***REMOVED***pression";
    object: JSXMemberE***REMOVED***pression | JSXIdentifier;
    property: JSXIdentifier;
}
interface JSXNamespacedName e***REMOVED***tends BaseNode {
    type: "JSXNamespacedName";
    namespace: JSXIdentifier;
    name: JSXIdentifier;
}
interface JSXOpeningElement e***REMOVED***tends BaseNode {
    type: "JSXOpeningElement";
    name: JSXIdentifier | JSXMemberE***REMOVED***pression | JSXNamespacedName;
    attributes: Array<JSXAttribute | JSXSpreadAttribute>;
    selfClosing: boolean;
    typeParameters?: TypeParameterInstantiation | TSTypeParameterInstantiation | null;
}
interface JSXSpreadAttribute e***REMOVED***tends BaseNode {
    type: "JSXSpreadAttribute";
    argument: E***REMOVED***pression;
}
interface JSXTe***REMOVED***t e***REMOVED***tends BaseNode {
    type: "JSXTe***REMOVED***t";
    value: string;
}
interface JSXFragment e***REMOVED***tends BaseNode {
    type: "JSXFragment";
    openingFragment: JSXOpeningFragment;
    closingFragment: JSXClosingFragment;
    children: Array<JSXTe***REMOVED***t | JSXE***REMOVED***pressionContainer | JSXSpreadChild | JSXElement | JSXFragment>;
}
interface JSXOpeningFragment e***REMOVED***tends BaseNode {
    type: "JSXOpeningFragment";
}
interface JSXClosingFragment e***REMOVED***tends BaseNode {
    type: "JSXClosingFragment";
}
interface Noop e***REMOVED***tends BaseNode {
    type: "Noop";
}
interface Placeholder e***REMOVED***tends BaseNode {
    type: "Placeholder";
    e***REMOVED***pectedNode: "Identifier" | "StringLiteral" | "E***REMOVED***pression" | "Statement" | "Declaration" | "BlockStatement" | "ClassBody" | "Pattern";
    name: Identifier;
    decorators?: Array<Decorator> | null;
    optional?: boolean | null;
    typeAnnotation?: TypeAnnotation | TSTypeAnnotation | Noop | null;
}
interface V8IntrinsicIdentifier e***REMOVED***tends BaseNode {
    type: "V8IntrinsicIdentifier";
    name: string;
}
interface ArgumentPlaceholder e***REMOVED***tends BaseNode {
    type: "ArgumentPlaceholder";
}
interface BindE***REMOVED***pression e***REMOVED***tends BaseNode {
    type: "BindE***REMOVED***pression";
    object: E***REMOVED***pression;
    callee: E***REMOVED***pression;
}
interface ImportAttribute e***REMOVED***tends BaseNode {
    type: "ImportAttribute";
    key: Identifier | StringLiteral;
    value: StringLiteral;
}
interface Decorator e***REMOVED***tends BaseNode {
    type: "Decorator";
    e***REMOVED***pression: E***REMOVED***pression;
}
interface DoE***REMOVED***pression e***REMOVED***tends BaseNode {
    type: "DoE***REMOVED***pression";
    body: BlockStatement;
    async: boolean;
}
interface E***REMOVED***portDefaultSpecifier e***REMOVED***tends BaseNode {
    type: "E***REMOVED***portDefaultSpecifier";
    e***REMOVED***ported: Identifier;
}
interface RecordE***REMOVED***pression e***REMOVED***tends BaseNode {
    type: "RecordE***REMOVED***pression";
    properties: Array<ObjectProperty | SpreadElement>;
}
interface TupleE***REMOVED***pression e***REMOVED***tends BaseNode {
    type: "TupleE***REMOVED***pression";
    elements: Array<E***REMOVED***pression | SpreadElement>;
}
interface DecimalLiteral e***REMOVED***tends BaseNode {
    type: "DecimalLiteral";
    value: string;
}
interface ModuleE***REMOVED***pression e***REMOVED***tends BaseNode {
    type: "ModuleE***REMOVED***pression";
    body: Program;
}
interface TopicReference e***REMOVED***tends BaseNode {
    type: "TopicReference";
}
interface PipelineTopicE***REMOVED***pression e***REMOVED***tends BaseNode {
    type: "PipelineTopicE***REMOVED***pression";
    e***REMOVED***pression: E***REMOVED***pression;
}
interface PipelineBareFunction e***REMOVED***tends BaseNode {
    type: "PipelineBareFunction";
    callee: E***REMOVED***pression;
}
interface PipelinePrimaryTopicReference e***REMOVED***tends BaseNode {
    type: "PipelinePrimaryTopicReference";
}
interface TSParameterProperty e***REMOVED***tends BaseNode {
    type: "TSParameterProperty";
    parameter: Identifier | AssignmentPattern;
    accessibility?: "public" | "private" | "protected" | null;
    decorators?: Array<Decorator> | null;
    override?: boolean | null;
    readonly?: boolean | null;
}
interface TSDeclareFunction e***REMOVED***tends BaseNode {
    type: "TSDeclareFunction";
    id?: Identifier | null;
    typeParameters?: TSTypeParameterDeclaration | Noop | null;
    params: Array<Identifier | Pattern | RestElement>;
    returnType?: TSTypeAnnotation | Noop | null;
    async?: boolean;
    declare?: boolean | null;
    generator?: boolean;
}
interface TSDeclareMethod e***REMOVED***tends BaseNode {
    type: "TSDeclareMethod";
    decorators?: Array<Decorator> | null;
    key: Identifier | StringLiteral | NumericLiteral | BigIntLiteral | E***REMOVED***pression;
    typeParameters?: TSTypeParameterDeclaration | Noop | null;
    params: Array<Identifier | Pattern | RestElement | TSParameterProperty>;
    returnType?: TSTypeAnnotation | Noop | null;
    abstract?: boolean | null;
    access?: "public" | "private" | "protected" | null;
    accessibility?: "public" | "private" | "protected" | null;
    async?: boolean;
    computed?: boolean;
    generator?: boolean;
    kind?: "get" | "set" | "method" | "constructor";
    optional?: boolean | null;
    override?: boolean;
    static?: boolean;
}
interface TSQualifiedName e***REMOVED***tends BaseNode {
    type: "TSQualifiedName";
    left: TSEntityName;
    right: Identifier;
}
interface TSCallSignatureDeclaration e***REMOVED***tends BaseNode {
    type: "TSCallSignatureDeclaration";
    typeParameters?: TSTypeParameterDeclaration | null;
    parameters: Array<ArrayPattern | Identifier | ObjectPattern | RestElement>;
    typeAnnotation?: TSTypeAnnotation | null;
}
interface TSConstructSignatureDeclaration e***REMOVED***tends BaseNode {
    type: "TSConstructSignatureDeclaration";
    typeParameters?: TSTypeParameterDeclaration | null;
    parameters: Array<ArrayPattern | Identifier | ObjectPattern | RestElement>;
    typeAnnotation?: TSTypeAnnotation | null;
}
interface TSPropertySignature e***REMOVED***tends BaseNode {
    type: "TSPropertySignature";
    key: E***REMOVED***pression;
    typeAnnotation?: TSTypeAnnotation | null;
    computed?: boolean;
    kind: "get" | "set";
    optional?: boolean | null;
    readonly?: boolean | null;
}
interface TSMethodSignature e***REMOVED***tends BaseNode {
    type: "TSMethodSignature";
    key: E***REMOVED***pression;
    typeParameters?: TSTypeParameterDeclaration | null;
    parameters: Array<ArrayPattern | Identifier | ObjectPattern | RestElement>;
    typeAnnotation?: TSTypeAnnotation | null;
    computed?: boolean;
    kind: "method" | "get" | "set";
    optional?: boolean | null;
}
interface TSInde***REMOVED***Signature e***REMOVED***tends BaseNode {
    type: "TSInde***REMOVED***Signature";
    parameters: Array<Identifier>;
    typeAnnotation?: TSTypeAnnotation | null;
    readonly?: boolean | null;
    static?: boolean | null;
}
interface TSAnyKeyword e***REMOVED***tends BaseNode {
    type: "TSAnyKeyword";
}
interface TSBooleanKeyword e***REMOVED***tends BaseNode {
    type: "TSBooleanKeyword";
}
interface TSBigIntKeyword e***REMOVED***tends BaseNode {
    type: "TSBigIntKeyword";
}
interface TSIntrinsicKeyword e***REMOVED***tends BaseNode {
    type: "TSIntrinsicKeyword";
}
interface TSNeverKeyword e***REMOVED***tends BaseNode {
    type: "TSNeverKeyword";
}
interface TSNullKeyword e***REMOVED***tends BaseNode {
    type: "TSNullKeyword";
}
interface TSNumberKeyword e***REMOVED***tends BaseNode {
    type: "TSNumberKeyword";
}
interface TSObjectKeyword e***REMOVED***tends BaseNode {
    type: "TSObjectKeyword";
}
interface TSStringKeyword e***REMOVED***tends BaseNode {
    type: "TSStringKeyword";
}
interface TSSymbolKeyword e***REMOVED***tends BaseNode {
    type: "TSSymbolKeyword";
}
interface TSUndefinedKeyword e***REMOVED***tends BaseNode {
    type: "TSUndefinedKeyword";
}
interface TSUnknownKeyword e***REMOVED***tends BaseNode {
    type: "TSUnknownKeyword";
}
interface TSVoidKeyword e***REMOVED***tends BaseNode {
    type: "TSVoidKeyword";
}
interface TSThisType e***REMOVED***tends BaseNode {
    type: "TSThisType";
}
interface TSFunctionType e***REMOVED***tends BaseNode {
    type: "TSFunctionType";
    typeParameters?: TSTypeParameterDeclaration | null;
    parameters: Array<ArrayPattern | Identifier | ObjectPattern | RestElement>;
    typeAnnotation?: TSTypeAnnotation | null;
}
interface TSConstructorType e***REMOVED***tends BaseNode {
    type: "TSConstructorType";
    typeParameters?: TSTypeParameterDeclaration | null;
    parameters: Array<ArrayPattern | Identifier | ObjectPattern | RestElement>;
    typeAnnotation?: TSTypeAnnotation | null;
    abstract?: boolean | null;
}
interface TSTypeReference e***REMOVED***tends BaseNode {
    type: "TSTypeReference";
    typeName: TSEntityName;
    typeParameters?: TSTypeParameterInstantiation | null;
}
interface TSTypePredicate e***REMOVED***tends BaseNode {
    type: "TSTypePredicate";
    parameterName: Identifier | TSThisType;
    typeAnnotation?: TSTypeAnnotation | null;
    asserts?: boolean | null;
}
interface TSTypeQuery e***REMOVED***tends BaseNode {
    type: "TSTypeQuery";
    e***REMOVED***prName: TSEntityName | TSImportType;
    typeParameters?: TSTypeParameterInstantiation | null;
}
interface TSTypeLiteral e***REMOVED***tends BaseNode {
    type: "TSTypeLiteral";
    members: Array<TSTypeElement>;
}
interface TSArrayType e***REMOVED***tends BaseNode {
    type: "TSArrayType";
    elementType: TSType;
}
interface TSTupleType e***REMOVED***tends BaseNode {
    type: "TSTupleType";
    elementTypes: Array<TSType | TSNamedTupleMember>;
}
interface TSOptionalType e***REMOVED***tends BaseNode {
    type: "TSOptionalType";
    typeAnnotation: TSType;
}
interface TSRestType e***REMOVED***tends BaseNode {
    type: "TSRestType";
    typeAnnotation: TSType;
}
interface TSNamedTupleMember e***REMOVED***tends BaseNode {
    type: "TSNamedTupleMember";
    label: Identifier;
    elementType: TSType;
    optional: boolean;
}
interface TSUnionType e***REMOVED***tends BaseNode {
    type: "TSUnionType";
    types: Array<TSType>;
}
interface TSIntersectionType e***REMOVED***tends BaseNode {
    type: "TSIntersectionType";
    types: Array<TSType>;
}
interface TSConditionalType e***REMOVED***tends BaseNode {
    type: "TSConditionalType";
    checkType: TSType;
    e***REMOVED***tendsType: TSType;
    trueType: TSType;
    falseType: TSType;
}
interface TSInferType e***REMOVED***tends BaseNode {
    type: "TSInferType";
    typeParameter: TSTypeParameter;
}
interface TSParenthesizedType e***REMOVED***tends BaseNode {
    type: "TSParenthesizedType";
    typeAnnotation: TSType;
}
interface TSTypeOperator e***REMOVED***tends BaseNode {
    type: "TSTypeOperator";
    typeAnnotation: TSType;
    operator: string;
}
interface TSInde***REMOVED***edAccessType e***REMOVED***tends BaseNode {
    type: "TSInde***REMOVED***edAccessType";
    objectType: TSType;
    inde***REMOVED***Type: TSType;
}
interface TSMappedType e***REMOVED***tends BaseNode {
    type: "TSMappedType";
    typeParameter: TSTypeParameter;
    typeAnnotation?: TSType | null;
    nameType?: TSType | null;
    optional?: true | false | "+" | "-" | null;
    readonly?: true | false | "+" | "-" | null;
}
interface TSLiteralType e***REMOVED***tends BaseNode {
    type: "TSLiteralType";
    literal: NumericLiteral | StringLiteral | BooleanLiteral | BigIntLiteral | TemplateLiteral | UnaryE***REMOVED***pression;
}
interface TSE***REMOVED***pressionWithTypeArguments e***REMOVED***tends BaseNode {
    type: "TSE***REMOVED***pressionWithTypeArguments";
    e***REMOVED***pression: TSEntityName;
    typeParameters?: TSTypeParameterInstantiation | null;
}
interface TSInterfaceDeclaration e***REMOVED***tends BaseNode {
    type: "TSInterfaceDeclaration";
    id: Identifier;
    typeParameters?: TSTypeParameterDeclaration | null;
    e***REMOVED***tends?: Array<TSE***REMOVED***pressionWithTypeArguments> | null;
    body: TSInterfaceBody;
    declare?: boolean | null;
}
interface TSInterfaceBody e***REMOVED***tends BaseNode {
    type: "TSInterfaceBody";
    body: Array<TSTypeElement>;
}
interface TSTypeAliasDeclaration e***REMOVED***tends BaseNode {
    type: "TSTypeAliasDeclaration";
    id: Identifier;
    typeParameters?: TSTypeParameterDeclaration | null;
    typeAnnotation: TSType;
    declare?: boolean | null;
}
interface TSInstantiationE***REMOVED***pression e***REMOVED***tends BaseNode {
    type: "TSInstantiationE***REMOVED***pression";
    e***REMOVED***pression: E***REMOVED***pression;
    typeParameters?: TSTypeParameterInstantiation | null;
}
interface TSAsE***REMOVED***pression e***REMOVED***tends BaseNode {
    type: "TSAsE***REMOVED***pression";
    e***REMOVED***pression: E***REMOVED***pression;
    typeAnnotation: TSType;
}
interface TSSatisfiesE***REMOVED***pression e***REMOVED***tends BaseNode {
    type: "TSSatisfiesE***REMOVED***pression";
    e***REMOVED***pression: E***REMOVED***pression;
    typeAnnotation: TSType;
}
interface TSTypeAssertion e***REMOVED***tends BaseNode {
    type: "TSTypeAssertion";
    typeAnnotation: TSType;
    e***REMOVED***pression: E***REMOVED***pression;
}
interface TSEnumDeclaration e***REMOVED***tends BaseNode {
    type: "TSEnumDeclaration";
    id: Identifier;
    members: Array<TSEnumMember>;
    const?: boolean | null;
    declare?: boolean | null;
    initializer?: E***REMOVED***pression | null;
}
interface TSEnumMember e***REMOVED***tends BaseNode {
    type: "TSEnumMember";
    id: Identifier | StringLiteral;
    initializer?: E***REMOVED***pression | null;
}
interface TSModuleDeclaration e***REMOVED***tends BaseNode {
    type: "TSModuleDeclaration";
    id: Identifier | StringLiteral;
    body: TSModuleBlock | TSModuleDeclaration;
    declare?: boolean | null;
    global?: boolean | null;
    kind: "global" | "module" | "namespace";
}
interface TSModuleBlock e***REMOVED***tends BaseNode {
    type: "TSModuleBlock";
    body: Array<Statement>;
}
interface TSImportType e***REMOVED***tends BaseNode {
    type: "TSImportType";
    argument: StringLiteral;
    qualifier?: TSEntityName | null;
    typeParameters?: TSTypeParameterInstantiation | null;
    options?: E***REMOVED***pression | null;
}
interface TSImportEqualsDeclaration e***REMOVED***tends BaseNode {
    type: "TSImportEqualsDeclaration";
    id: Identifier;
    moduleReference: TSEntityName | TSE***REMOVED***ternalModuleReference;
    importKind?: "type" | "value" | null;
    isE***REMOVED***port: boolean;
}
interface TSE***REMOVED***ternalModuleReference e***REMOVED***tends BaseNode {
    type: "TSE***REMOVED***ternalModuleReference";
    e***REMOVED***pression: StringLiteral;
}
interface TSNonNullE***REMOVED***pression e***REMOVED***tends BaseNode {
    type: "TSNonNullE***REMOVED***pression";
    e***REMOVED***pression: E***REMOVED***pression;
}
interface TSE***REMOVED***portAssignment e***REMOVED***tends BaseNode {
    type: "TSE***REMOVED***portAssignment";
    e***REMOVED***pression: E***REMOVED***pression;
}
interface TSNamespaceE***REMOVED***portDeclaration e***REMOVED***tends BaseNode {
    type: "TSNamespaceE***REMOVED***portDeclaration";
    id: Identifier;
}
interface TSTypeAnnotation e***REMOVED***tends BaseNode {
    type: "TSTypeAnnotation";
    typeAnnotation: TSType;
}
interface TSTypeParameterInstantiation e***REMOVED***tends BaseNode {
    type: "TSTypeParameterInstantiation";
    params: Array<TSType>;
}
interface TSTypeParameterDeclaration e***REMOVED***tends BaseNode {
    type: "TSTypeParameterDeclaration";
    params: Array<TSTypeParameter>;
}
interface TSTypeParameter e***REMOVED***tends BaseNode {
    type: "TSTypeParameter";
    constraint?: TSType | null;
    default?: TSType | null;
    name: string;
    const?: boolean | null;
    in?: boolean | null;
    out?: boolean | null;
}
type Standardized = ArrayE***REMOVED***pression | AssignmentE***REMOVED***pression | BinaryE***REMOVED***pression | InterpreterDirective | Directive | DirectiveLiteral | BlockStatement | BreakStatement | CallE***REMOVED***pression | CatchClause | ConditionalE***REMOVED***pression | ContinueStatement | DebuggerStatement | DoWhileStatement | EmptyStatement | E***REMOVED***pressionStatement | File | ForInStatement | ForStatement | FunctionDeclaration | FunctionE***REMOVED***pression | Identifier | IfStatement | LabeledStatement | StringLiteral | NumericLiteral | NullLiteral | BooleanLiteral | RegE***REMOVED***pLiteral | LogicalE***REMOVED***pression | MemberE***REMOVED***pression | NewE***REMOVED***pression | Program | ObjectE***REMOVED***pression | ObjectMethod | ObjectProperty | RestElement | ReturnStatement | SequenceE***REMOVED***pression | ParenthesizedE***REMOVED***pression | SwitchCase | SwitchStatement | ThisE***REMOVED***pression | ThrowStatement | TryStatement | UnaryE***REMOVED***pression | UpdateE***REMOVED***pression | VariableDeclaration | VariableDeclarator | WhileStatement | WithStatement | AssignmentPattern | ArrayPattern | ArrowFunctionE***REMOVED***pression | ClassBody | ClassE***REMOVED***pression | ClassDeclaration | E***REMOVED***portAllDeclaration | E***REMOVED***portDefaultDeclaration | E***REMOVED***portNamedDeclaration | E***REMOVED***portSpecifier | ForOfStatement | ImportDeclaration | ImportDefaultSpecifier | ImportNamespaceSpecifier | ImportSpecifier | ImportE***REMOVED***pression | MetaProperty | ClassMethod | ObjectPattern | SpreadElement | Super | TaggedTemplateE***REMOVED***pression | TemplateElement | TemplateLiteral | YieldE***REMOVED***pression | AwaitE***REMOVED***pression | Import | BigIntLiteral | E***REMOVED***portNamespaceSpecifier | OptionalMemberE***REMOVED***pression | OptionalCallE***REMOVED***pression | ClassProperty | ClassAccessorProperty | ClassPrivateProperty | ClassPrivateMethod | PrivateName | StaticBlock;
type E***REMOVED***pression = ArrayE***REMOVED***pression | AssignmentE***REMOVED***pression | BinaryE***REMOVED***pression | CallE***REMOVED***pression | ConditionalE***REMOVED***pression | FunctionE***REMOVED***pression | Identifier | StringLiteral | NumericLiteral | NullLiteral | BooleanLiteral | RegE***REMOVED***pLiteral | LogicalE***REMOVED***pression | MemberE***REMOVED***pression | NewE***REMOVED***pression | ObjectE***REMOVED***pression | SequenceE***REMOVED***pression | ParenthesizedE***REMOVED***pression | ThisE***REMOVED***pression | UnaryE***REMOVED***pression | UpdateE***REMOVED***pression | ArrowFunctionE***REMOVED***pression | ClassE***REMOVED***pression | ImportE***REMOVED***pression | MetaProperty | Super | TaggedTemplateE***REMOVED***pression | TemplateLiteral | YieldE***REMOVED***pression | AwaitE***REMOVED***pression | Import | BigIntLiteral | OptionalMemberE***REMOVED***pression | OptionalCallE***REMOVED***pression | TypeCastE***REMOVED***pression | JSXElement | JSXFragment | BindE***REMOVED***pression | DoE***REMOVED***pression | RecordE***REMOVED***pression | TupleE***REMOVED***pression | DecimalLiteral | ModuleE***REMOVED***pression | TopicReference | PipelineTopicE***REMOVED***pression | PipelineBareFunction | PipelinePrimaryTopicReference | TSInstantiationE***REMOVED***pression | TSAsE***REMOVED***pression | TSSatisfiesE***REMOVED***pression | TSTypeAssertion | TSNonNullE***REMOVED***pression;
type Binary = BinaryE***REMOVED***pression | LogicalE***REMOVED***pression;
type Scopable = BlockStatement | CatchClause | DoWhileStatement | ForInStatement | ForStatement | FunctionDeclaration | FunctionE***REMOVED***pression | Program | ObjectMethod | SwitchStatement | WhileStatement | ArrowFunctionE***REMOVED***pression | ClassE***REMOVED***pression | ClassDeclaration | ForOfStatement | ClassMethod | ClassPrivateMethod | StaticBlock | TSModuleBlock;
type BlockParent = BlockStatement | CatchClause | DoWhileStatement | ForInStatement | ForStatement | FunctionDeclaration | FunctionE***REMOVED***pression | Program | ObjectMethod | SwitchStatement | WhileStatement | ArrowFunctionE***REMOVED***pression | ForOfStatement | ClassMethod | ClassPrivateMethod | StaticBlock | TSModuleBlock;
type Block = BlockStatement | Program | TSModuleBlock;
type Statement = BlockStatement | BreakStatement | ContinueStatement | DebuggerStatement | DoWhileStatement | EmptyStatement | E***REMOVED***pressionStatement | ForInStatement | ForStatement | FunctionDeclaration | IfStatement | LabeledStatement | ReturnStatement | SwitchStatement | ThrowStatement | TryStatement | VariableDeclaration | WhileStatement | WithStatement | ClassDeclaration | E***REMOVED***portAllDeclaration | E***REMOVED***portDefaultDeclaration | E***REMOVED***portNamedDeclaration | ForOfStatement | ImportDeclaration | DeclareClass | DeclareFunction | DeclareInterface | DeclareModule | DeclareModuleE***REMOVED***ports | DeclareTypeAlias | DeclareOpaqueType | DeclareVariable | DeclareE***REMOVED***portDeclaration | DeclareE***REMOVED***portAllDeclaration | InterfaceDeclaration | OpaqueType | TypeAlias | EnumDeclaration | TSDeclareFunction | TSInterfaceDeclaration | TSTypeAliasDeclaration | TSEnumDeclaration | TSModuleDeclaration | TSImportEqualsDeclaration | TSE***REMOVED***portAssignment | TSNamespaceE***REMOVED***portDeclaration;
type Terminatorless = BreakStatement | ContinueStatement | ReturnStatement | ThrowStatement | YieldE***REMOVED***pression | AwaitE***REMOVED***pression;
type CompletionStatement = BreakStatement | ContinueStatement | ReturnStatement | ThrowStatement;
type Conditional = ConditionalE***REMOVED***pression | IfStatement;
type Loop = DoWhileStatement | ForInStatement | ForStatement | WhileStatement | ForOfStatement;
type While = DoWhileStatement | WhileStatement;
type E***REMOVED***pressionWrapper = E***REMOVED***pressionStatement | ParenthesizedE***REMOVED***pression | TypeCastE***REMOVED***pression;
type For = ForInStatement | ForStatement | ForOfStatement;
type ForXStatement = ForInStatement | ForOfStatement;
type Function = FunctionDeclaration | FunctionE***REMOVED***pression | ObjectMethod | ArrowFunctionE***REMOVED***pression | ClassMethod | ClassPrivateMethod;
type FunctionParent = FunctionDeclaration | FunctionE***REMOVED***pression | ObjectMethod | ArrowFunctionE***REMOVED***pression | ClassMethod | ClassPrivateMethod | StaticBlock | TSModuleBlock;
type Pureish = FunctionDeclaration | FunctionE***REMOVED***pression | StringLiteral | NumericLiteral | NullLiteral | BooleanLiteral | RegE***REMOVED***pLiteral | ArrowFunctionE***REMOVED***pression | BigIntLiteral | DecimalLiteral;
type Declaration = FunctionDeclaration | VariableDeclaration | ClassDeclaration | E***REMOVED***portAllDeclaration | E***REMOVED***portDefaultDeclaration | E***REMOVED***portNamedDeclaration | ImportDeclaration | DeclareClass | DeclareFunction | DeclareInterface | DeclareModule | DeclareModuleE***REMOVED***ports | DeclareTypeAlias | DeclareOpaqueType | DeclareVariable | DeclareE***REMOVED***portDeclaration | DeclareE***REMOVED***portAllDeclaration | InterfaceDeclaration | OpaqueType | TypeAlias | EnumDeclaration | TSDeclareFunction | TSInterfaceDeclaration | TSTypeAliasDeclaration | TSEnumDeclaration | TSModuleDeclaration;
type PatternLike = Identifier | RestElement | AssignmentPattern | ArrayPattern | ObjectPattern | TSAsE***REMOVED***pression | TSSatisfiesE***REMOVED***pression | TSTypeAssertion | TSNonNullE***REMOVED***pression;
type LVal = Identifier | MemberE***REMOVED***pression | RestElement | AssignmentPattern | ArrayPattern | ObjectPattern | TSParameterProperty | TSAsE***REMOVED***pression | TSSatisfiesE***REMOVED***pression | TSTypeAssertion | TSNonNullE***REMOVED***pression;
type TSEntityName = Identifier | TSQualifiedName;
type Literal = StringLiteral | NumericLiteral | NullLiteral | BooleanLiteral | RegE***REMOVED***pLiteral | TemplateLiteral | BigIntLiteral | DecimalLiteral;
type Immutable = StringLiteral | NumericLiteral | NullLiteral | BooleanLiteral | BigIntLiteral | JSXAttribute | JSXClosingElement | JSXElement | JSXE***REMOVED***pressionContainer | JSXSpreadChild | JSXOpeningElement | JSXTe***REMOVED***t | JSXFragment | JSXOpeningFragment | JSXClosingFragment | DecimalLiteral;
type UserWhitespacable = ObjectMethod | ObjectProperty | ObjectTypeInternalSlot | ObjectTypeCallProperty | ObjectTypeInde***REMOVED***er | ObjectTypeProperty | ObjectTypeSpreadProperty;
type Method = ObjectMethod | ClassMethod | ClassPrivateMethod;
type ObjectMember = ObjectMethod | ObjectProperty;
type Property = ObjectProperty | ClassProperty | ClassAccessorProperty | ClassPrivateProperty;
type UnaryLike = UnaryE***REMOVED***pression | SpreadElement;
type Pattern = AssignmentPattern | ArrayPattern | ObjectPattern;
type Class = ClassE***REMOVED***pression | ClassDeclaration;
type ImportOrE***REMOVED***portDeclaration = E***REMOVED***portAllDeclaration | E***REMOVED***portDefaultDeclaration | E***REMOVED***portNamedDeclaration | ImportDeclaration;
type E***REMOVED***portDeclaration = E***REMOVED***portAllDeclaration | E***REMOVED***portDefaultDeclaration | E***REMOVED***portNamedDeclaration;
type ModuleSpecifier = E***REMOVED***portSpecifier | ImportDefaultSpecifier | ImportNamespaceSpecifier | ImportSpecifier | E***REMOVED***portNamespaceSpecifier | E***REMOVED***portDefaultSpecifier;
type Accessor = ClassAccessorProperty;
type Private = ClassPrivateProperty | ClassPrivateMethod | PrivateName;
type Flow = AnyTypeAnnotation | ArrayTypeAnnotation | BooleanTypeAnnotation | BooleanLiteralTypeAnnotation | NullLiteralTypeAnnotation | ClassImplements | DeclareClass | DeclareFunction | DeclareInterface | DeclareModule | DeclareModuleE***REMOVED***ports | DeclareTypeAlias | DeclareOpaqueType | DeclareVariable | DeclareE***REMOVED***portDeclaration | DeclareE***REMOVED***portAllDeclaration | DeclaredPredicate | E***REMOVED***istsTypeAnnotation | FunctionTypeAnnotation | FunctionTypeParam | GenericTypeAnnotation | InferredPredicate | InterfaceE***REMOVED***tends | InterfaceDeclaration | InterfaceTypeAnnotation | IntersectionTypeAnnotation | Mi***REMOVED***edTypeAnnotation | EmptyTypeAnnotation | NullableTypeAnnotation | NumberLiteralTypeAnnotation | NumberTypeAnnotation | ObjectTypeAnnotation | ObjectTypeInternalSlot | ObjectTypeCallProperty | ObjectTypeInde***REMOVED***er | ObjectTypeProperty | ObjectTypeSpreadProperty | OpaqueType | QualifiedTypeIdentifier | StringLiteralTypeAnnotation | StringTypeAnnotation | SymbolTypeAnnotation | ThisTypeAnnotation | TupleTypeAnnotation | TypeofTypeAnnotation | TypeAlias | TypeAnnotation | TypeCastE***REMOVED***pression | TypeParameter | TypeParameterDeclaration | TypeParameterInstantiation | UnionTypeAnnotation | Variance | VoidTypeAnnotation | EnumDeclaration | EnumBooleanBody | EnumNumberBody | EnumStringBody | EnumSymbolBody | EnumBooleanMember | EnumNumberMember | EnumStringMember | EnumDefaultedMember | Inde***REMOVED***edAccessType | OptionalInde***REMOVED***edAccessType;
type FlowType = AnyTypeAnnotation | ArrayTypeAnnotation | BooleanTypeAnnotation | BooleanLiteralTypeAnnotation | NullLiteralTypeAnnotation | E***REMOVED***istsTypeAnnotation | FunctionTypeAnnotation | GenericTypeAnnotation | InterfaceTypeAnnotation | IntersectionTypeAnnotation | Mi***REMOVED***edTypeAnnotation | EmptyTypeAnnotation | NullableTypeAnnotation | NumberLiteralTypeAnnotation | NumberTypeAnnotation | ObjectTypeAnnotation | StringLiteralTypeAnnotation | StringTypeAnnotation | SymbolTypeAnnotation | ThisTypeAnnotation | TupleTypeAnnotation | TypeofTypeAnnotation | UnionTypeAnnotation | VoidTypeAnnotation | Inde***REMOVED***edAccessType | OptionalInde***REMOVED***edAccessType;
type FlowBaseAnnotation = AnyTypeAnnotation | BooleanTypeAnnotation | NullLiteralTypeAnnotation | Mi***REMOVED***edTypeAnnotation | EmptyTypeAnnotation | NumberTypeAnnotation | StringTypeAnnotation | SymbolTypeAnnotation | ThisTypeAnnotation | VoidTypeAnnotation;
type FlowDeclaration = DeclareClass | DeclareFunction | DeclareInterface | DeclareModule | DeclareModuleE***REMOVED***ports | DeclareTypeAlias | DeclareOpaqueType | DeclareVariable | DeclareE***REMOVED***portDeclaration | DeclareE***REMOVED***portAllDeclaration | InterfaceDeclaration | OpaqueType | TypeAlias;
type FlowPredicate = DeclaredPredicate | InferredPredicate;
type EnumBody = EnumBooleanBody | EnumNumberBody | EnumStringBody | EnumSymbolBody;
type EnumMember = EnumBooleanMember | EnumNumberMember | EnumStringMember | EnumDefaultedMember;
type JSX = JSXAttribute | JSXClosingElement | JSXElement | JSXEmptyE***REMOVED***pression | JSXE***REMOVED***pressionContainer | JSXSpreadChild | JSXIdentifier | JSXMemberE***REMOVED***pression | JSXNamespacedName | JSXOpeningElement | JSXSpreadAttribute | JSXTe***REMOVED***t | JSXFragment | JSXOpeningFragment | JSXClosingFragment;
type Miscellaneous = Noop | Placeholder | V8IntrinsicIdentifier;
type TypeScript = TSParameterProperty | TSDeclareFunction | TSDeclareMethod | TSQualifiedName | TSCallSignatureDeclaration | TSConstructSignatureDeclaration | TSPropertySignature | TSMethodSignature | TSInde***REMOVED***Signature | TSAnyKeyword | TSBooleanKeyword | TSBigIntKeyword | TSIntrinsicKeyword | TSNeverKeyword | TSNullKeyword | TSNumberKeyword | TSObjectKeyword | TSStringKeyword | TSSymbolKeyword | TSUndefinedKeyword | TSUnknownKeyword | TSVoidKeyword | TSThisType | TSFunctionType | TSConstructorType | TSTypeReference | TSTypePredicate | TSTypeQuery | TSTypeLiteral | TSArrayType | TSTupleType | TSOptionalType | TSRestType | TSNamedTupleMember | TSUnionType | TSIntersectionType | TSConditionalType | TSInferType | TSParenthesizedType | TSTypeOperator | TSInde***REMOVED***edAccessType | TSMappedType | TSLiteralType | TSE***REMOVED***pressionWithTypeArguments | TSInterfaceDeclaration | TSInterfaceBody | TSTypeAliasDeclaration | TSInstantiationE***REMOVED***pression | TSAsE***REMOVED***pression | TSSatisfiesE***REMOVED***pression | TSTypeAssertion | TSEnumDeclaration | TSEnumMember | TSModuleDeclaration | TSModuleBlock | TSImportType | TSImportEqualsDeclaration | TSE***REMOVED***ternalModuleReference | TSNonNullE***REMOVED***pression | TSE***REMOVED***portAssignment | TSNamespaceE***REMOVED***portDeclaration | TSTypeAnnotation | TSTypeParameterInstantiation | TSTypeParameterDeclaration | TSTypeParameter;
type TSTypeElement = TSCallSignatureDeclaration | TSConstructSignatureDeclaration | TSPropertySignature | TSMethodSignature | TSInde***REMOVED***Signature;
type TSType = TSAnyKeyword | TSBooleanKeyword | TSBigIntKeyword | TSIntrinsicKeyword | TSNeverKeyword | TSNullKeyword | TSNumberKeyword | TSObjectKeyword | TSStringKeyword | TSSymbolKeyword | TSUndefinedKeyword | TSUnknownKeyword | TSVoidKeyword | TSThisType | TSFunctionType | TSConstructorType | TSTypeReference | TSTypePredicate | TSTypeQuery | TSTypeLiteral | TSArrayType | TSTupleType | TSOptionalType | TSRestType | TSUnionType | TSIntersectionType | TSConditionalType | TSInferType | TSParenthesizedType | TSTypeOperator | TSInde***REMOVED***edAccessType | TSMappedType | TSLiteralType | TSE***REMOVED***pressionWithTypeArguments | TSImportType;
type TSBaseType = TSAnyKeyword | TSBooleanKeyword | TSBigIntKeyword | TSIntrinsicKeyword | TSNeverKeyword | TSNullKeyword | TSNumberKeyword | TSObjectKeyword | TSStringKeyword | TSSymbolKeyword | TSUndefinedKeyword | TSUnknownKeyword | TSVoidKeyword | TSThisType | TSLiteralType;
type ModuleDeclaration = E***REMOVED***portAllDeclaration | E***REMOVED***portDefaultDeclaration | E***REMOVED***portNamedDeclaration | ImportDeclaration;
interface Aliases {
    Standardized: Standardized;
    E***REMOVED***pression: E***REMOVED***pression;
    Binary: Binary;
    Scopable: Scopable;
    BlockParent: BlockParent;
    Block: Block;
    Statement: Statement;
    Terminatorless: Terminatorless;
    CompletionStatement: CompletionStatement;
    Conditional: Conditional;
    Loop: Loop;
    While: While;
    E***REMOVED***pressionWrapper: E***REMOVED***pressionWrapper;
    For: For;
    ForXStatement: ForXStatement;
    Function: Function;
    FunctionParent: FunctionParent;
    Pureish: Pureish;
    Declaration: Declaration;
    PatternLike: PatternLike;
    LVal: LVal;
    TSEntityName: TSEntityName;
    Literal: Literal;
    Immutable: Immutable;
    UserWhitespacable: UserWhitespacable;
    Method: Method;
    ObjectMember: ObjectMember;
    Property: Property;
    UnaryLike: UnaryLike;
    Pattern: Pattern;
    Class: Class;
    ImportOrE***REMOVED***portDeclaration: ImportOrE***REMOVED***portDeclaration;
    E***REMOVED***portDeclaration: E***REMOVED***portDeclaration;
    ModuleSpecifier: ModuleSpecifier;
    Accessor: Accessor;
    Private: Private;
    Flow: Flow;
    FlowType: FlowType;
    FlowBaseAnnotation: FlowBaseAnnotation;
    FlowDeclaration: FlowDeclaration;
    FlowPredicate: FlowPredicate;
    EnumBody: EnumBody;
    EnumMember: EnumMember;
    JSX: JSX;
    Miscellaneous: Miscellaneous;
    TypeScript: TypeScript;
    TSTypeElement: TSTypeElement;
    TSType: TSType;
    TSBaseType: TSBaseType;
    ModuleDeclaration: ModuleDeclaration;
}
type DeprecatedAliases = NumberLiteral | Rege***REMOVED***Literal | RestProperty | SpreadProperty;
interface ParentMaps {
    AnyTypeAnnotation: ArrayTypeAnnotation | DeclareE***REMOVED***portDeclaration | DeclareOpaqueType | DeclareTypeAlias | DeclaredPredicate | FunctionTypeAnnotation | FunctionTypeParam | Inde***REMOVED***edAccessType | IntersectionTypeAnnotation | NullableTypeAnnotation | ObjectTypeCallProperty | ObjectTypeInde***REMOVED***er | ObjectTypeInternalSlot | ObjectTypeProperty | ObjectTypeSpreadProperty | OpaqueType | OptionalInde***REMOVED***edAccessType | TupleTypeAnnotation | TypeAlias | TypeAnnotation | TypeParameter | TypeParameterInstantiation | TypeofTypeAnnotation | UnionTypeAnnotation;
    ArgumentPlaceholder: CallE***REMOVED***pression | NewE***REMOVED***pression | OptionalCallE***REMOVED***pression;
    ArrayE***REMOVED***pression: ArrayE***REMOVED***pression | ArrowFunctionE***REMOVED***pression | AssignmentE***REMOVED***pression | AssignmentPattern | AwaitE***REMOVED***pression | BinaryE***REMOVED***pression | BindE***REMOVED***pression | CallE***REMOVED***pression | ClassAccessorProperty | ClassDeclaration | ClassE***REMOVED***pression | ClassMethod | ClassPrivateProperty | ClassProperty | ConditionalE***REMOVED***pression | Decorator | DoWhileStatement | E***REMOVED***portDefaultDeclaration | E***REMOVED***pressionStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | ImportE***REMOVED***pression | JSXE***REMOVED***pressionContainer | JSXSpreadAttribute | JSXSpreadChild | LogicalE***REMOVED***pression | MemberE***REMOVED***pression | NewE***REMOVED***pression | ObjectMethod | ObjectProperty | OptionalCallE***REMOVED***pression | OptionalMemberE***REMOVED***pression | ParenthesizedE***REMOVED***pression | PipelineBareFunction | PipelineTopicE***REMOVED***pression | ReturnStatement | SequenceE***REMOVED***pression | SpreadElement | SwitchCase | SwitchStatement | TSAsE***REMOVED***pression | TSDeclareMethod | TSEnumDeclaration | TSEnumMember | TSE***REMOVED***portAssignment | TSImportType | TSInstantiationE***REMOVED***pression | TSMethodSignature | TSNonNullE***REMOVED***pression | TSPropertySignature | TSSatisfiesE***REMOVED***pression | TSTypeAssertion | TaggedTemplateE***REMOVED***pression | TemplateLiteral | ThrowStatement | TupleE***REMOVED***pression | TypeCastE***REMOVED***pression | UnaryE***REMOVED***pression | UpdateE***REMOVED***pression | VariableDeclarator | WhileStatement | WithStatement | YieldE***REMOVED***pression;
    ArrayPattern: ArrayPattern | ArrowFunctionE***REMOVED***pression | AssignmentE***REMOVED***pression | AssignmentPattern | CatchClause | ClassMethod | ClassPrivateMethod | ForInStatement | ForOfStatement | FunctionDeclaration | FunctionE***REMOVED***pression | ObjectMethod | ObjectProperty | RestElement | TSCallSignatureDeclaration | TSConstructSignatureDeclaration | TSConstructorType | TSDeclareFunction | TSDeclareMethod | TSFunctionType | TSMethodSignature | VariableDeclarator;
    ArrayTypeAnnotation: ArrayTypeAnnotation | DeclareE***REMOVED***portDeclaration | DeclareOpaqueType | DeclareTypeAlias | DeclaredPredicate | FunctionTypeAnnotation | FunctionTypeParam | Inde***REMOVED***edAccessType | IntersectionTypeAnnotation | NullableTypeAnnotation | ObjectTypeCallProperty | ObjectTypeInde***REMOVED***er | ObjectTypeInternalSlot | ObjectTypeProperty | ObjectTypeSpreadProperty | OpaqueType | OptionalInde***REMOVED***edAccessType | TupleTypeAnnotation | TypeAlias | TypeAnnotation | TypeParameter | TypeParameterInstantiation | TypeofTypeAnnotation | UnionTypeAnnotation;
    ArrowFunctionE***REMOVED***pression: ArrayE***REMOVED***pression | ArrowFunctionE***REMOVED***pression | AssignmentE***REMOVED***pression | AssignmentPattern | AwaitE***REMOVED***pression | BinaryE***REMOVED***pression | BindE***REMOVED***pression | CallE***REMOVED***pression | ClassAccessorProperty | ClassDeclaration | ClassE***REMOVED***pression | ClassMethod | ClassPrivateProperty | ClassProperty | ConditionalE***REMOVED***pression | Decorator | DoWhileStatement | E***REMOVED***portDefaultDeclaration | E***REMOVED***pressionStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | ImportE***REMOVED***pression | JSXE***REMOVED***pressionContainer | JSXSpreadAttribute | JSXSpreadChild | LogicalE***REMOVED***pression | MemberE***REMOVED***pression | NewE***REMOVED***pression | ObjectMethod | ObjectProperty | OptionalCallE***REMOVED***pression | OptionalMemberE***REMOVED***pression | ParenthesizedE***REMOVED***pression | PipelineBareFunction | PipelineTopicE***REMOVED***pression | ReturnStatement | SequenceE***REMOVED***pression | SpreadElement | SwitchCase | SwitchStatement | TSAsE***REMOVED***pression | TSDeclareMethod | TSEnumDeclaration | TSEnumMember | TSE***REMOVED***portAssignment | TSImportType | TSInstantiationE***REMOVED***pression | TSMethodSignature | TSNonNullE***REMOVED***pression | TSPropertySignature | TSSatisfiesE***REMOVED***pression | TSTypeAssertion | TaggedTemplateE***REMOVED***pression | TemplateLiteral | ThrowStatement | TupleE***REMOVED***pression | TypeCastE***REMOVED***pression | UnaryE***REMOVED***pression | UpdateE***REMOVED***pression | VariableDeclarator | WhileStatement | WithStatement | YieldE***REMOVED***pression;
    AssignmentE***REMOVED***pression: ArrayE***REMOVED***pression | ArrowFunctionE***REMOVED***pression | AssignmentE***REMOVED***pression | AssignmentPattern | AwaitE***REMOVED***pression | BinaryE***REMOVED***pression | BindE***REMOVED***pression | CallE***REMOVED***pression | ClassAccessorProperty | ClassDeclaration | ClassE***REMOVED***pression | ClassMethod | ClassPrivateProperty | ClassProperty | ConditionalE***REMOVED***pression | Decorator | DoWhileStatement | E***REMOVED***portDefaultDeclaration | E***REMOVED***pressionStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | ImportE***REMOVED***pression | JSXE***REMOVED***pressionContainer | JSXSpreadAttribute | JSXSpreadChild | LogicalE***REMOVED***pression | MemberE***REMOVED***pression | NewE***REMOVED***pression | ObjectMethod | ObjectProperty | OptionalCallE***REMOVED***pression | OptionalMemberE***REMOVED***pression | ParenthesizedE***REMOVED***pression | PipelineBareFunction | PipelineTopicE***REMOVED***pression | ReturnStatement | SequenceE***REMOVED***pression | SpreadElement | SwitchCase | SwitchStatement | TSAsE***REMOVED***pression | TSDeclareMethod | TSEnumDeclaration | TSEnumMember | TSE***REMOVED***portAssignment | TSImportType | TSInstantiationE***REMOVED***pression | TSMethodSignature | TSNonNullE***REMOVED***pression | TSPropertySignature | TSSatisfiesE***REMOVED***pression | TSTypeAssertion | TaggedTemplateE***REMOVED***pression | TemplateLiteral | ThrowStatement | TupleE***REMOVED***pression | TypeCastE***REMOVED***pression | UnaryE***REMOVED***pression | UpdateE***REMOVED***pression | VariableDeclarator | WhileStatement | WithStatement | YieldE***REMOVED***pression;
    AssignmentPattern: ArrayPattern | ArrowFunctionE***REMOVED***pression | AssignmentE***REMOVED***pression | ClassMethod | ClassPrivateMethod | ForInStatement | ForOfStatement | FunctionDeclaration | FunctionE***REMOVED***pression | ObjectMethod | ObjectProperty | RestElement | TSDeclareFunction | TSDeclareMethod | TSParameterProperty | VariableDeclarator;
    AwaitE***REMOVED***pression: ArrayE***REMOVED***pression | ArrowFunctionE***REMOVED***pression | AssignmentE***REMOVED***pression | AssignmentPattern | AwaitE***REMOVED***pression | BinaryE***REMOVED***pression | BindE***REMOVED***pression | CallE***REMOVED***pression | ClassAccessorProperty | ClassDeclaration | ClassE***REMOVED***pression | ClassMethod | ClassPrivateProperty | ClassProperty | ConditionalE***REMOVED***pression | Decorator | DoWhileStatement | E***REMOVED***portDefaultDeclaration | E***REMOVED***pressionStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | ImportE***REMOVED***pression | JSXE***REMOVED***pressionContainer | JSXSpreadAttribute | JSXSpreadChild | LogicalE***REMOVED***pression | MemberE***REMOVED***pression | NewE***REMOVED***pression | ObjectMethod | ObjectProperty | OptionalCallE***REMOVED***pression | OptionalMemberE***REMOVED***pression | ParenthesizedE***REMOVED***pression | PipelineBareFunction | PipelineTopicE***REMOVED***pression | ReturnStatement | SequenceE***REMOVED***pression | SpreadElement | SwitchCase | SwitchStatement | TSAsE***REMOVED***pression | TSDeclareMethod | TSEnumDeclaration | TSEnumMember | TSE***REMOVED***portAssignment | TSImportType | TSInstantiationE***REMOVED***pression | TSMethodSignature | TSNonNullE***REMOVED***pression | TSPropertySignature | TSSatisfiesE***REMOVED***pression | TSTypeAssertion | TaggedTemplateE***REMOVED***pression | TemplateLiteral | ThrowStatement | TupleE***REMOVED***pression | TypeCastE***REMOVED***pression | UnaryE***REMOVED***pression | UpdateE***REMOVED***pression | VariableDeclarator | WhileStatement | WithStatement | YieldE***REMOVED***pression;
    BigIntLiteral: ArrayE***REMOVED***pression | ArrowFunctionE***REMOVED***pression | AssignmentE***REMOVED***pression | AssignmentPattern | AwaitE***REMOVED***pression | BinaryE***REMOVED***pression | BindE***REMOVED***pression | CallE***REMOVED***pression | ClassAccessorProperty | ClassDeclaration | ClassE***REMOVED***pression | ClassMethod | ClassPrivateProperty | ClassProperty | ConditionalE***REMOVED***pression | Decorator | DoWhileStatement | E***REMOVED***portDefaultDeclaration | E***REMOVED***pressionStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | ImportE***REMOVED***pression | JSXE***REMOVED***pressionContainer | JSXSpreadAttribute | JSXSpreadChild | LogicalE***REMOVED***pression | MemberE***REMOVED***pression | NewE***REMOVED***pression | ObjectMethod | ObjectProperty | OptionalCallE***REMOVED***pression | OptionalMemberE***REMOVED***pression | ParenthesizedE***REMOVED***pression | PipelineBareFunction | PipelineTopicE***REMOVED***pression | ReturnStatement | SequenceE***REMOVED***pression | SpreadElement | SwitchCase | SwitchStatement | TSAsE***REMOVED***pression | TSDeclareMethod | TSEnumDeclaration | TSEnumMember | TSE***REMOVED***portAssignment | TSImportType | TSInstantiationE***REMOVED***pression | TSLiteralType | TSMethodSignature | TSNonNullE***REMOVED***pression | TSPropertySignature | TSSatisfiesE***REMOVED***pression | TSTypeAssertion | TaggedTemplateE***REMOVED***pression | TemplateLiteral | ThrowStatement | TupleE***REMOVED***pression | TypeCastE***REMOVED***pression | UnaryE***REMOVED***pression | UpdateE***REMOVED***pression | VariableDeclarator | WhileStatement | WithStatement | YieldE***REMOVED***pression;
    BinaryE***REMOVED***pression: ArrayE***REMOVED***pression | ArrowFunctionE***REMOVED***pression | AssignmentE***REMOVED***pression | AssignmentPattern | AwaitE***REMOVED***pression | BinaryE***REMOVED***pression | BindE***REMOVED***pression | CallE***REMOVED***pression | ClassAccessorProperty | ClassDeclaration | ClassE***REMOVED***pression | ClassMethod | ClassPrivateProperty | ClassProperty | ConditionalE***REMOVED***pression | Decorator | DoWhileStatement | E***REMOVED***portDefaultDeclaration | E***REMOVED***pressionStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | ImportE***REMOVED***pression | JSXE***REMOVED***pressionContainer | JSXSpreadAttribute | JSXSpreadChild | LogicalE***REMOVED***pression | MemberE***REMOVED***pression | NewE***REMOVED***pression | ObjectMethod | ObjectProperty | OptionalCallE***REMOVED***pression | OptionalMemberE***REMOVED***pression | ParenthesizedE***REMOVED***pression | PipelineBareFunction | PipelineTopicE***REMOVED***pression | ReturnStatement | SequenceE***REMOVED***pression | SpreadElement | SwitchCase | SwitchStatement | TSAsE***REMOVED***pression | TSDeclareMethod | TSEnumDeclaration | TSEnumMember | TSE***REMOVED***portAssignment | TSImportType | TSInstantiationE***REMOVED***pression | TSMethodSignature | TSNonNullE***REMOVED***pression | TSPropertySignature | TSSatisfiesE***REMOVED***pression | TSTypeAssertion | TaggedTemplateE***REMOVED***pression | TemplateLiteral | ThrowStatement | TupleE***REMOVED***pression | TypeCastE***REMOVED***pression | UnaryE***REMOVED***pression | UpdateE***REMOVED***pression | VariableDeclarator | WhileStatement | WithStatement | YieldE***REMOVED***pression;
    BindE***REMOVED***pression: ArrayE***REMOVED***pression | ArrowFunctionE***REMOVED***pression | AssignmentE***REMOVED***pression | AssignmentPattern | AwaitE***REMOVED***pression | BinaryE***REMOVED***pression | BindE***REMOVED***pression | CallE***REMOVED***pression | ClassAccessorProperty | ClassDeclaration | ClassE***REMOVED***pression | ClassMethod | ClassPrivateProperty | ClassProperty | ConditionalE***REMOVED***pression | Decorator | DoWhileStatement | E***REMOVED***portDefaultDeclaration | E***REMOVED***pressionStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | ImportE***REMOVED***pression | JSXE***REMOVED***pressionContainer | JSXSpreadAttribute | JSXSpreadChild | LogicalE***REMOVED***pression | MemberE***REMOVED***pression | NewE***REMOVED***pression | ObjectMethod | ObjectProperty | OptionalCallE***REMOVED***pression | OptionalMemberE***REMOVED***pression | ParenthesizedE***REMOVED***pression | PipelineBareFunction | PipelineTopicE***REMOVED***pression | ReturnStatement | SequenceE***REMOVED***pression | SpreadElement | SwitchCase | SwitchStatement | TSAsE***REMOVED***pression | TSDeclareMethod | TSEnumDeclaration | TSEnumMember | TSE***REMOVED***portAssignment | TSImportType | TSInstantiationE***REMOVED***pression | TSMethodSignature | TSNonNullE***REMOVED***pression | TSPropertySignature | TSSatisfiesE***REMOVED***pression | TSTypeAssertion | TaggedTemplateE***REMOVED***pression | TemplateLiteral | ThrowStatement | TupleE***REMOVED***pression | TypeCastE***REMOVED***pression | UnaryE***REMOVED***pression | UpdateE***REMOVED***pression | VariableDeclarator | WhileStatement | WithStatement | YieldE***REMOVED***pression;
    BlockStatement: ArrowFunctionE***REMOVED***pression | BlockStatement | CatchClause | ClassMethod | ClassPrivateMethod | DeclareModule | DoE***REMOVED***pression | DoWhileStatement | ForInStatement | ForOfStatement | ForStatement | FunctionDeclaration | FunctionE***REMOVED***pression | IfStatement | LabeledStatement | ObjectMethod | Program | StaticBlock | SwitchCase | TSModuleBlock | TryStatement | WhileStatement | WithStatement;
    BooleanLiteral: ArrayE***REMOVED***pression | ArrowFunctionE***REMOVED***pression | AssignmentE***REMOVED***pression | AssignmentPattern | AwaitE***REMOVED***pression | BinaryE***REMOVED***pression | BindE***REMOVED***pression | CallE***REMOVED***pression | ClassAccessorProperty | ClassDeclaration | ClassE***REMOVED***pression | ClassMethod | ClassPrivateProperty | ClassProperty | ConditionalE***REMOVED***pression | Decorator | DoWhileStatement | EnumBooleanMember | E***REMOVED***portDefaultDeclaration | E***REMOVED***pressionStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | ImportE***REMOVED***pression | JSXE***REMOVED***pressionContainer | JSXSpreadAttribute | JSXSpreadChild | LogicalE***REMOVED***pression | MemberE***REMOVED***pression | NewE***REMOVED***pression | ObjectMethod | ObjectProperty | OptionalCallE***REMOVED***pression | OptionalMemberE***REMOVED***pression | ParenthesizedE***REMOVED***pression | PipelineBareFunction | PipelineTopicE***REMOVED***pression | ReturnStatement | SequenceE***REMOVED***pression | SpreadElement | SwitchCase | SwitchStatement | TSAsE***REMOVED***pression | TSDeclareMethod | TSEnumDeclaration | TSEnumMember | TSE***REMOVED***portAssignment | TSImportType | TSInstantiationE***REMOVED***pression | TSLiteralType | TSMethodSignature | TSNonNullE***REMOVED***pression | TSPropertySignature | TSSatisfiesE***REMOVED***pression | TSTypeAssertion | TaggedTemplateE***REMOVED***pression | TemplateLiteral | ThrowStatement | TupleE***REMOVED***pression | TypeCastE***REMOVED***pression | UnaryE***REMOVED***pression | UpdateE***REMOVED***pression | VariableDeclarator | WhileStatement | WithStatement | YieldE***REMOVED***pression;
    BooleanLiteralTypeAnnotation: ArrayTypeAnnotation | DeclareE***REMOVED***portDeclaration | DeclareOpaqueType | DeclareTypeAlias | DeclaredPredicate | FunctionTypeAnnotation | FunctionTypeParam | Inde***REMOVED***edAccessType | IntersectionTypeAnnotation | NullableTypeAnnotation | ObjectTypeCallProperty | ObjectTypeInde***REMOVED***er | ObjectTypeInternalSlot | ObjectTypeProperty | ObjectTypeSpreadProperty | OpaqueType | OptionalInde***REMOVED***edAccessType | TupleTypeAnnotation | TypeAlias | TypeAnnotation | TypeParameter | TypeParameterInstantiation | TypeofTypeAnnotation | UnionTypeAnnotation;
    BooleanTypeAnnotation: ArrayTypeAnnotation | DeclareE***REMOVED***portDeclaration | DeclareOpaqueType | DeclareTypeAlias | DeclaredPredicate | FunctionTypeAnnotation | FunctionTypeParam | Inde***REMOVED***edAccessType | IntersectionTypeAnnotation | NullableTypeAnnotation | ObjectTypeCallProperty | ObjectTypeInde***REMOVED***er | ObjectTypeInternalSlot | ObjectTypeProperty | ObjectTypeSpreadProperty | OpaqueType | OptionalInde***REMOVED***edAccessType | TupleTypeAnnotation | TypeAlias | TypeAnnotation | TypeParameter | TypeParameterInstantiation | TypeofTypeAnnotation | UnionTypeAnnotation;
    BreakStatement: BlockStatement | DoWhileStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | LabeledStatement | Program | StaticBlock | SwitchCase | TSModuleBlock | WhileStatement | WithStatement;
    CallE***REMOVED***pression: ArrayE***REMOVED***pression | ArrowFunctionE***REMOVED***pression | AssignmentE***REMOVED***pression | AssignmentPattern | AwaitE***REMOVED***pression | BinaryE***REMOVED***pression | BindE***REMOVED***pression | CallE***REMOVED***pression | ClassAccessorProperty | ClassDeclaration | ClassE***REMOVED***pression | ClassMethod | ClassPrivateProperty | ClassProperty | ConditionalE***REMOVED***pression | Decorator | DoWhileStatement | E***REMOVED***portDefaultDeclaration | E***REMOVED***pressionStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | ImportE***REMOVED***pression | JSXE***REMOVED***pressionContainer | JSXSpreadAttribute | JSXSpreadChild | LogicalE***REMOVED***pression | MemberE***REMOVED***pression | NewE***REMOVED***pression | ObjectMethod | ObjectProperty | OptionalCallE***REMOVED***pression | OptionalMemberE***REMOVED***pression | ParenthesizedE***REMOVED***pression | PipelineBareFunction | PipelineTopicE***REMOVED***pression | ReturnStatement | SequenceE***REMOVED***pression | SpreadElement | SwitchCase | SwitchStatement | TSAsE***REMOVED***pression | TSDeclareMethod | TSEnumDeclaration | TSEnumMember | TSE***REMOVED***portAssignment | TSImportType | TSInstantiationE***REMOVED***pression | TSMethodSignature | TSNonNullE***REMOVED***pression | TSPropertySignature | TSSatisfiesE***REMOVED***pression | TSTypeAssertion | TaggedTemplateE***REMOVED***pression | TemplateLiteral | ThrowStatement | TupleE***REMOVED***pression | TypeCastE***REMOVED***pression | UnaryE***REMOVED***pression | UpdateE***REMOVED***pression | VariableDeclarator | WhileStatement | WithStatement | YieldE***REMOVED***pression;
    CatchClause: TryStatement;
    ClassAccessorProperty: ClassBody;
    ClassBody: ClassDeclaration | ClassE***REMOVED***pression;
    ClassDeclaration: BlockStatement | DoWhileStatement | E***REMOVED***portDefaultDeclaration | E***REMOVED***portNamedDeclaration | ForInStatement | ForOfStatement | ForStatement | IfStatement | LabeledStatement | Program | StaticBlock | SwitchCase | TSModuleBlock | WhileStatement | WithStatement;
    ClassE***REMOVED***pression: ArrayE***REMOVED***pression | ArrowFunctionE***REMOVED***pression | AssignmentE***REMOVED***pression | AssignmentPattern | AwaitE***REMOVED***pression | BinaryE***REMOVED***pression | BindE***REMOVED***pression | CallE***REMOVED***pression | ClassAccessorProperty | ClassDeclaration | ClassE***REMOVED***pression | ClassMethod | ClassPrivateProperty | ClassProperty | ConditionalE***REMOVED***pression | Decorator | DoWhileStatement | E***REMOVED***portDefaultDeclaration | E***REMOVED***pressionStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | ImportE***REMOVED***pression | JSXE***REMOVED***pressionContainer | JSXSpreadAttribute | JSXSpreadChild | LogicalE***REMOVED***pression | MemberE***REMOVED***pression | NewE***REMOVED***pression | ObjectMethod | ObjectProperty | OptionalCallE***REMOVED***pression | OptionalMemberE***REMOVED***pression | ParenthesizedE***REMOVED***pression | PipelineBareFunction | PipelineTopicE***REMOVED***pression | ReturnStatement | SequenceE***REMOVED***pression | SpreadElement | SwitchCase | SwitchStatement | TSAsE***REMOVED***pression | TSDeclareMethod | TSEnumDeclaration | TSEnumMember | TSE***REMOVED***portAssignment | TSImportType | TSInstantiationE***REMOVED***pression | TSMethodSignature | TSNonNullE***REMOVED***pression | TSPropertySignature | TSSatisfiesE***REMOVED***pression | TSTypeAssertion | TaggedTemplateE***REMOVED***pression | TemplateLiteral | ThrowStatement | TupleE***REMOVED***pression | TypeCastE***REMOVED***pression | UnaryE***REMOVED***pression | UpdateE***REMOVED***pression | VariableDeclarator | WhileStatement | WithStatement | YieldE***REMOVED***pression;
    ClassImplements: ClassDeclaration | ClassE***REMOVED***pression | DeclareClass | DeclareE***REMOVED***portDeclaration | DeclaredPredicate;
    ClassMethod: ClassBody;
    ClassPrivateMethod: ClassBody;
    ClassPrivateProperty: ClassBody;
    ClassProperty: ClassBody;
    CommentBlock: File;
    CommentLine: File;
    ConditionalE***REMOVED***pression: ArrayE***REMOVED***pression | ArrowFunctionE***REMOVED***pression | AssignmentE***REMOVED***pression | AssignmentPattern | AwaitE***REMOVED***pression | BinaryE***REMOVED***pression | BindE***REMOVED***pression | CallE***REMOVED***pression | ClassAccessorProperty | ClassDeclaration | ClassE***REMOVED***pression | ClassMethod | ClassPrivateProperty | ClassProperty | ConditionalE***REMOVED***pression | Decorator | DoWhileStatement | E***REMOVED***portDefaultDeclaration | E***REMOVED***pressionStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | ImportE***REMOVED***pression | JSXE***REMOVED***pressionContainer | JSXSpreadAttribute | JSXSpreadChild | LogicalE***REMOVED***pression | MemberE***REMOVED***pression | NewE***REMOVED***pression | ObjectMethod | ObjectProperty | OptionalCallE***REMOVED***pression | OptionalMemberE***REMOVED***pression | ParenthesizedE***REMOVED***pression | PipelineBareFunction | PipelineTopicE***REMOVED***pression | ReturnStatement | SequenceE***REMOVED***pression | SpreadElement | SwitchCase | SwitchStatement | TSAsE***REMOVED***pression | TSDeclareMethod | TSEnumDeclaration | TSEnumMember | TSE***REMOVED***portAssignment | TSImportType | TSInstantiationE***REMOVED***pression | TSMethodSignature | TSNonNullE***REMOVED***pression | TSPropertySignature | TSSatisfiesE***REMOVED***pression | TSTypeAssertion | TaggedTemplateE***REMOVED***pression | TemplateLiteral | ThrowStatement | TupleE***REMOVED***pression | TypeCastE***REMOVED***pression | UnaryE***REMOVED***pression | UpdateE***REMOVED***pression | VariableDeclarator | WhileStatement | WithStatement | YieldE***REMOVED***pression;
    ContinueStatement: BlockStatement | DoWhileStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | LabeledStatement | Program | StaticBlock | SwitchCase | TSModuleBlock | WhileStatement | WithStatement;
    DebuggerStatement: BlockStatement | DoWhileStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | LabeledStatement | Program | StaticBlock | SwitchCase | TSModuleBlock | WhileStatement | WithStatement;
    DecimalLiteral: ArrayE***REMOVED***pression | ArrowFunctionE***REMOVED***pression | AssignmentE***REMOVED***pression | AssignmentPattern | AwaitE***REMOVED***pression | BinaryE***REMOVED***pression | BindE***REMOVED***pression | CallE***REMOVED***pression | ClassAccessorProperty | ClassDeclaration | ClassE***REMOVED***pression | ClassMethod | ClassPrivateProperty | ClassProperty | ConditionalE***REMOVED***pression | Decorator | DoWhileStatement | E***REMOVED***portDefaultDeclaration | E***REMOVED***pressionStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | ImportE***REMOVED***pression | JSXE***REMOVED***pressionContainer | JSXSpreadAttribute | JSXSpreadChild | LogicalE***REMOVED***pression | MemberE***REMOVED***pression | NewE***REMOVED***pression | ObjectMethod | ObjectProperty | OptionalCallE***REMOVED***pression | OptionalMemberE***REMOVED***pression | ParenthesizedE***REMOVED***pression | PipelineBareFunction | PipelineTopicE***REMOVED***pression | ReturnStatement | SequenceE***REMOVED***pression | SpreadElement | SwitchCase | SwitchStatement | TSAsE***REMOVED***pression | TSDeclareMethod | TSEnumDeclaration | TSEnumMember | TSE***REMOVED***portAssignment | TSImportType | TSInstantiationE***REMOVED***pression | TSMethodSignature | TSNonNullE***REMOVED***pression | TSPropertySignature | TSSatisfiesE***REMOVED***pression | TSTypeAssertion | TaggedTemplateE***REMOVED***pression | TemplateLiteral | ThrowStatement | TupleE***REMOVED***pression | TypeCastE***REMOVED***pression | UnaryE***REMOVED***pression | UpdateE***REMOVED***pression | VariableDeclarator | WhileStatement | WithStatement | YieldE***REMOVED***pression;
    DeclareClass: BlockStatement | DeclareE***REMOVED***portDeclaration | DeclaredPredicate | DoWhileStatement | E***REMOVED***portNamedDeclaration | ForInStatement | ForOfStatement | ForStatement | IfStatement | LabeledStatement | Program | StaticBlock | SwitchCase | TSModuleBlock | WhileStatement | WithStatement;
    DeclareE***REMOVED***portAllDeclaration: BlockStatement | DeclareE***REMOVED***portDeclaration | DeclaredPredicate | DoWhileStatement | E***REMOVED***portNamedDeclaration | ForInStatement | ForOfStatement | ForStatement | IfStatement | LabeledStatement | Program | StaticBlock | SwitchCase | TSModuleBlock | WhileStatement | WithStatement;
    DeclareE***REMOVED***portDeclaration: BlockStatement | DeclareE***REMOVED***portDeclaration | DeclaredPredicate | DoWhileStatement | E***REMOVED***portNamedDeclaration | ForInStatement | ForOfStatement | ForStatement | IfStatement | LabeledStatement | Program | StaticBlock | SwitchCase | TSModuleBlock | WhileStatement | WithStatement;
    DeclareFunction: BlockStatement | DeclareE***REMOVED***portDeclaration | DeclaredPredicate | DoWhileStatement | E***REMOVED***portNamedDeclaration | ForInStatement | ForOfStatement | ForStatement | IfStatement | LabeledStatement | Program | StaticBlock | SwitchCase | TSModuleBlock | WhileStatement | WithStatement;
    DeclareInterface: BlockStatement | DeclareE***REMOVED***portDeclaration | DeclaredPredicate | DoWhileStatement | E***REMOVED***portNamedDeclaration | ForInStatement | ForOfStatement | ForStatement | IfStatement | LabeledStatement | Program | StaticBlock | SwitchCase | TSModuleBlock | WhileStatement | WithStatement;
    DeclareModule: BlockStatement | DeclareE***REMOVED***portDeclaration | DeclaredPredicate | DoWhileStatement | E***REMOVED***portNamedDeclaration | ForInStatement | ForOfStatement | ForStatement | IfStatement | LabeledStatement | Program | StaticBlock | SwitchCase | TSModuleBlock | WhileStatement | WithStatement;
    DeclareModuleE***REMOVED***ports: BlockStatement | DeclareE***REMOVED***portDeclaration | DeclaredPredicate | DoWhileStatement | E***REMOVED***portNamedDeclaration | ForInStatement | ForOfStatement | ForStatement | IfStatement | LabeledStatement | Program | StaticBlock | SwitchCase | TSModuleBlock | WhileStatement | WithStatement;
    DeclareOpaqueType: BlockStatement | DeclareE***REMOVED***portDeclaration | DeclaredPredicate | DoWhileStatement | E***REMOVED***portNamedDeclaration | ForInStatement | ForOfStatement | ForStatement | IfStatement | LabeledStatement | Program | StaticBlock | SwitchCase | TSModuleBlock | WhileStatement | WithStatement;
    DeclareTypeAlias: BlockStatement | DeclareE***REMOVED***portDeclaration | DeclaredPredicate | DoWhileStatement | E***REMOVED***portNamedDeclaration | ForInStatement | ForOfStatement | ForStatement | IfStatement | LabeledStatement | Program | StaticBlock | SwitchCase | TSModuleBlock | WhileStatement | WithStatement;
    DeclareVariable: BlockStatement | DeclareE***REMOVED***portDeclaration | DeclaredPredicate | DoWhileStatement | E***REMOVED***portNamedDeclaration | ForInStatement | ForOfStatement | ForStatement | IfStatement | LabeledStatement | Program | StaticBlock | SwitchCase | TSModuleBlock | WhileStatement | WithStatement;
    DeclaredPredicate: ArrowFunctionE***REMOVED***pression | DeclareE***REMOVED***portDeclaration | DeclareFunction | DeclaredPredicate | FunctionDeclaration | FunctionE***REMOVED***pression;
    Decorator: ArrayPattern | AssignmentPattern | ClassAccessorProperty | ClassDeclaration | ClassE***REMOVED***pression | ClassMethod | ClassPrivateMethod | ClassPrivateProperty | ClassProperty | Identifier | ObjectMethod | ObjectPattern | ObjectProperty | Placeholder | RestElement | TSDeclareMethod | TSParameterProperty;
    Directive: BlockStatement | Program;
    DirectiveLiteral: Directive;
    DoE***REMOVED***pression: ArrayE***REMOVED***pression | ArrowFunctionE***REMOVED***pression | AssignmentE***REMOVED***pression | AssignmentPattern | AwaitE***REMOVED***pression | BinaryE***REMOVED***pression | BindE***REMOVED***pression | CallE***REMOVED***pression | ClassAccessorProperty | ClassDeclaration | ClassE***REMOVED***pression | ClassMethod | ClassPrivateProperty | ClassProperty | ConditionalE***REMOVED***pression | Decorator | DoWhileStatement | E***REMOVED***portDefaultDeclaration | E***REMOVED***pressionStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | ImportE***REMOVED***pression | JSXE***REMOVED***pressionContainer | JSXSpreadAttribute | JSXSpreadChild | LogicalE***REMOVED***pression | MemberE***REMOVED***pression | NewE***REMOVED***pression | ObjectMethod | ObjectProperty | OptionalCallE***REMOVED***pression | OptionalMemberE***REMOVED***pression | ParenthesizedE***REMOVED***pression | PipelineBareFunction | PipelineTopicE***REMOVED***pression | ReturnStatement | SequenceE***REMOVED***pression | SpreadElement | SwitchCase | SwitchStatement | TSAsE***REMOVED***pression | TSDeclareMethod | TSEnumDeclaration | TSEnumMember | TSE***REMOVED***portAssignment | TSImportType | TSInstantiationE***REMOVED***pression | TSMethodSignature | TSNonNullE***REMOVED***pression | TSPropertySignature | TSSatisfiesE***REMOVED***pression | TSTypeAssertion | TaggedTemplateE***REMOVED***pression | TemplateLiteral | ThrowStatement | TupleE***REMOVED***pression | TypeCastE***REMOVED***pression | UnaryE***REMOVED***pression | UpdateE***REMOVED***pression | VariableDeclarator | WhileStatement | WithStatement | YieldE***REMOVED***pression;
    DoWhileStatement: BlockStatement | DoWhileStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | LabeledStatement | Program | StaticBlock | SwitchCase | TSModuleBlock | WhileStatement | WithStatement;
    EmptyStatement: BlockStatement | DoWhileStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | LabeledStatement | Program | StaticBlock | SwitchCase | TSModuleBlock | WhileStatement | WithStatement;
    EmptyTypeAnnotation: ArrayTypeAnnotation | DeclareE***REMOVED***portDeclaration | DeclareOpaqueType | DeclareTypeAlias | DeclaredPredicate | FunctionTypeAnnotation | FunctionTypeParam | Inde***REMOVED***edAccessType | IntersectionTypeAnnotation | NullableTypeAnnotation | ObjectTypeCallProperty | ObjectTypeInde***REMOVED***er | ObjectTypeInternalSlot | ObjectTypeProperty | ObjectTypeSpreadProperty | OpaqueType | OptionalInde***REMOVED***edAccessType | TupleTypeAnnotation | TypeAlias | TypeAnnotation | TypeParameter | TypeParameterInstantiation | TypeofTypeAnnotation | UnionTypeAnnotation;
    EnumBooleanBody: DeclareE***REMOVED***portDeclaration | DeclaredPredicate | EnumDeclaration;
    EnumBooleanMember: DeclareE***REMOVED***portDeclaration | DeclaredPredicate | EnumBooleanBody;
    EnumDeclaration: BlockStatement | DeclareE***REMOVED***portDeclaration | DeclaredPredicate | DoWhileStatement | E***REMOVED***portNamedDeclaration | ForInStatement | ForOfStatement | ForStatement | IfStatement | LabeledStatement | Program | StaticBlock | SwitchCase | TSModuleBlock | WhileStatement | WithStatement;
    EnumDefaultedMember: DeclareE***REMOVED***portDeclaration | DeclaredPredicate | EnumStringBody | EnumSymbolBody;
    EnumNumberBody: DeclareE***REMOVED***portDeclaration | DeclaredPredicate | EnumDeclaration;
    EnumNumberMember: DeclareE***REMOVED***portDeclaration | DeclaredPredicate | EnumNumberBody;
    EnumStringBody: DeclareE***REMOVED***portDeclaration | DeclaredPredicate | EnumDeclaration;
    EnumStringMember: DeclareE***REMOVED***portDeclaration | DeclaredPredicate | EnumStringBody;
    EnumSymbolBody: DeclareE***REMOVED***portDeclaration | DeclaredPredicate | EnumDeclaration;
    E***REMOVED***istsTypeAnnotation: ArrayTypeAnnotation | DeclareE***REMOVED***portDeclaration | DeclareOpaqueType | DeclareTypeAlias | DeclaredPredicate | FunctionTypeAnnotation | FunctionTypeParam | Inde***REMOVED***edAccessType | IntersectionTypeAnnotation | NullableTypeAnnotation | ObjectTypeCallProperty | ObjectTypeInde***REMOVED***er | ObjectTypeInternalSlot | ObjectTypeProperty | ObjectTypeSpreadProperty | OpaqueType | OptionalInde***REMOVED***edAccessType | TupleTypeAnnotation | TypeAlias | TypeAnnotation | TypeParameter | TypeParameterInstantiation | TypeofTypeAnnotation | UnionTypeAnnotation;
    E***REMOVED***portAllDeclaration: BlockStatement | DoWhileStatement | E***REMOVED***portNamedDeclaration | ForInStatement | ForOfStatement | ForStatement | IfStatement | LabeledStatement | Program | StaticBlock | SwitchCase | TSModuleBlock | WhileStatement | WithStatement;
    E***REMOVED***portDefaultDeclaration: BlockStatement | DoWhileStatement | E***REMOVED***portNamedDeclaration | ForInStatement | ForOfStatement | ForStatement | IfStatement | LabeledStatement | Program | StaticBlock | SwitchCase | TSModuleBlock | WhileStatement | WithStatement;
    E***REMOVED***portDefaultSpecifier: E***REMOVED***portNamedDeclaration;
    E***REMOVED***portNamedDeclaration: BlockStatement | DoWhileStatement | E***REMOVED***portNamedDeclaration | ForInStatement | ForOfStatement | ForStatement | IfStatement | LabeledStatement | Program | StaticBlock | SwitchCase | TSModuleBlock | WhileStatement | WithStatement;
    E***REMOVED***portNamespaceSpecifier: DeclareE***REMOVED***portDeclaration | E***REMOVED***portNamedDeclaration;
    E***REMOVED***portSpecifier: DeclareE***REMOVED***portDeclaration | E***REMOVED***portNamedDeclaration;
    E***REMOVED***pressionStatement: BlockStatement | DoWhileStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | LabeledStatement | Program | StaticBlock | SwitchCase | TSModuleBlock | WhileStatement | WithStatement;
    File: null;
    ForInStatement: BlockStatement | DoWhileStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | LabeledStatement | Program | StaticBlock | SwitchCase | TSModuleBlock | WhileStatement | WithStatement;
    ForOfStatement: BlockStatement | DoWhileStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | LabeledStatement | Program | StaticBlock | SwitchCase | TSModuleBlock | WhileStatement | WithStatement;
    ForStatement: BlockStatement | DoWhileStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | LabeledStatement | Program | StaticBlock | SwitchCase | TSModuleBlock | WhileStatement | WithStatement;
    FunctionDeclaration: BlockStatement | DoWhileStatement | E***REMOVED***portDefaultDeclaration | E***REMOVED***portNamedDeclaration | ForInStatement | ForOfStatement | ForStatement | IfStatement | LabeledStatement | Program | StaticBlock | SwitchCase | TSModuleBlock | WhileStatement | WithStatement;
    FunctionE***REMOVED***pression: ArrayE***REMOVED***pression | ArrowFunctionE***REMOVED***pression | AssignmentE***REMOVED***pression | AssignmentPattern | AwaitE***REMOVED***pression | BinaryE***REMOVED***pression | BindE***REMOVED***pression | CallE***REMOVED***pression | ClassAccessorProperty | ClassDeclaration | ClassE***REMOVED***pression | ClassMethod | ClassPrivateProperty | ClassProperty | ConditionalE***REMOVED***pression | Decorator | DoWhileStatement | E***REMOVED***portDefaultDeclaration | E***REMOVED***pressionStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | ImportE***REMOVED***pression | JSXE***REMOVED***pressionContainer | JSXSpreadAttribute | JSXSpreadChild | LogicalE***REMOVED***pression | MemberE***REMOVED***pression | NewE***REMOVED***pression | ObjectMethod | ObjectProperty | OptionalCallE***REMOVED***pression | OptionalMemberE***REMOVED***pression | ParenthesizedE***REMOVED***pression | PipelineBareFunction | PipelineTopicE***REMOVED***pression | ReturnStatement | SequenceE***REMOVED***pression | SpreadElement | SwitchCase | SwitchStatement | TSAsE***REMOVED***pression | TSDeclareMethod | TSEnumDeclaration | TSEnumMember | TSE***REMOVED***portAssignment | TSImportType | TSInstantiationE***REMOVED***pression | TSMethodSignature | TSNonNullE***REMOVED***pression | TSPropertySignature | TSSatisfiesE***REMOVED***pression | TSTypeAssertion | TaggedTemplateE***REMOVED***pression | TemplateLiteral | ThrowStatement | TupleE***REMOVED***pression | TypeCastE***REMOVED***pression | UnaryE***REMOVED***pression | UpdateE***REMOVED***pression | VariableDeclarator | WhileStatement | WithStatement | YieldE***REMOVED***pression;
    FunctionTypeAnnotation: ArrayTypeAnnotation | DeclareE***REMOVED***portDeclaration | DeclareOpaqueType | DeclareTypeAlias | DeclaredPredicate | FunctionTypeAnnotation | FunctionTypeParam | Inde***REMOVED***edAccessType | IntersectionTypeAnnotation | NullableTypeAnnotation | ObjectTypeCallProperty | ObjectTypeInde***REMOVED***er | ObjectTypeInternalSlot | ObjectTypeProperty | ObjectTypeSpreadProperty | OpaqueType | OptionalInde***REMOVED***edAccessType | TupleTypeAnnotation | TypeAlias | TypeAnnotation | TypeParameter | TypeParameterInstantiation | TypeofTypeAnnotation | UnionTypeAnnotation;
    FunctionTypeParam: DeclareE***REMOVED***portDeclaration | DeclaredPredicate | FunctionTypeAnnotation;
    GenericTypeAnnotation: ArrayTypeAnnotation | DeclareE***REMOVED***portDeclaration | DeclareOpaqueType | DeclareTypeAlias | DeclaredPredicate | FunctionTypeAnnotation | FunctionTypeParam | Inde***REMOVED***edAccessType | IntersectionTypeAnnotation | NullableTypeAnnotation | ObjectTypeCallProperty | ObjectTypeInde***REMOVED***er | ObjectTypeInternalSlot | ObjectTypeProperty | ObjectTypeSpreadProperty | OpaqueType | OptionalInde***REMOVED***edAccessType | TupleTypeAnnotation | TypeAlias | TypeAnnotation | TypeParameter | TypeParameterInstantiation | TypeofTypeAnnotation | UnionTypeAnnotation;
    Identifier: ArrayE***REMOVED***pression | ArrayPattern | ArrowFunctionE***REMOVED***pression | AssignmentE***REMOVED***pression | AssignmentPattern | AwaitE***REMOVED***pression | BinaryE***REMOVED***pression | BindE***REMOVED***pression | BreakStatement | CallE***REMOVED***pression | CatchClause | ClassAccessorProperty | ClassDeclaration | ClassE***REMOVED***pression | ClassImplements | ClassMethod | ClassPrivateMethod | ClassPrivateProperty | ClassProperty | ConditionalE***REMOVED***pression | ContinueStatement | DeclareClass | DeclareFunction | DeclareInterface | DeclareModule | DeclareOpaqueType | DeclareTypeAlias | DeclareVariable | Decorator | DoWhileStatement | EnumBooleanMember | EnumDeclaration | EnumDefaultedMember | EnumNumberMember | EnumStringMember | E***REMOVED***portDefaultDeclaration | E***REMOVED***portDefaultSpecifier | E***REMOVED***portNamespaceSpecifier | E***REMOVED***portSpecifier | E***REMOVED***pressionStatement | ForInStatement | ForOfStatement | ForStatement | FunctionDeclaration | FunctionE***REMOVED***pression | FunctionTypeParam | GenericTypeAnnotation | IfStatement | ImportAttribute | ImportDefaultSpecifier | ImportE***REMOVED***pression | ImportNamespaceSpecifier | ImportSpecifier | InterfaceDeclaration | InterfaceE***REMOVED***tends | JSXE***REMOVED***pressionContainer | JSXSpreadAttribute | JSXSpreadChild | LabeledStatement | LogicalE***REMOVED***pression | MemberE***REMOVED***pression | MetaProperty | NewE***REMOVED***pression | ObjectMethod | ObjectProperty | ObjectTypeInde***REMOVED***er | ObjectTypeInternalSlot | ObjectTypeProperty | OpaqueType | OptionalCallE***REMOVED***pression | OptionalMemberE***REMOVED***pression | ParenthesizedE***REMOVED***pression | PipelineBareFunction | PipelineTopicE***REMOVED***pression | Placeholder | PrivateName | QualifiedTypeIdentifier | RestElement | ReturnStatement | SequenceE***REMOVED***pression | SpreadElement | SwitchCase | SwitchStatement | TSAsE***REMOVED***pression | TSCallSignatureDeclaration | TSConstructSignatureDeclaration | TSConstructorType | TSDeclareFunction | TSDeclareMethod | TSEnumDeclaration | TSEnumMember | TSE***REMOVED***portAssignment | TSE***REMOVED***pressionWithTypeArguments | TSFunctionType | TSImportEqualsDeclaration | TSImportType | TSInde***REMOVED***Signature | TSInstantiationE***REMOVED***pression | TSInterfaceDeclaration | TSMethodSignature | TSModuleDeclaration | TSNamedTupleMember | TSNamespaceE***REMOVED***portDeclaration | TSNonNullE***REMOVED***pression | TSParameterProperty | TSPropertySignature | TSQualifiedName | TSSatisfiesE***REMOVED***pression | TSTypeAliasDeclaration | TSTypeAssertion | TSTypePredicate | TSTypeQuery | TSTypeReference | TaggedTemplateE***REMOVED***pression | TemplateLiteral | ThrowStatement | TupleE***REMOVED***pression | TypeAlias | TypeCastE***REMOVED***pression | UnaryE***REMOVED***pression | UpdateE***REMOVED***pression | VariableDeclarator | WhileStatement | WithStatement | YieldE***REMOVED***pression;
    IfStatement: BlockStatement | DoWhileStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | LabeledStatement | Program | StaticBlock | SwitchCase | TSModuleBlock | WhileStatement | WithStatement;
    Import: ArrayE***REMOVED***pression | ArrowFunctionE***REMOVED***pression | AssignmentE***REMOVED***pression | AssignmentPattern | AwaitE***REMOVED***pression | BinaryE***REMOVED***pression | BindE***REMOVED***pression | CallE***REMOVED***pression | ClassAccessorProperty | ClassDeclaration | ClassE***REMOVED***pression | ClassMethod | ClassPrivateProperty | ClassProperty | ConditionalE***REMOVED***pression | Decorator | DoWhileStatement | E***REMOVED***portDefaultDeclaration | E***REMOVED***pressionStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | ImportE***REMOVED***pression | JSXE***REMOVED***pressionContainer | JSXSpreadAttribute | JSXSpreadChild | LogicalE***REMOVED***pression | MemberE***REMOVED***pression | NewE***REMOVED***pression | ObjectMethod | ObjectProperty | OptionalCallE***REMOVED***pression | OptionalMemberE***REMOVED***pression | ParenthesizedE***REMOVED***pression | PipelineBareFunction | PipelineTopicE***REMOVED***pression | ReturnStatement | SequenceE***REMOVED***pression | SpreadElement | SwitchCase | SwitchStatement | TSAsE***REMOVED***pression | TSDeclareMethod | TSEnumDeclaration | TSEnumMember | TSE***REMOVED***portAssignment | TSImportType | TSInstantiationE***REMOVED***pression | TSMethodSignature | TSNonNullE***REMOVED***pression | TSPropertySignature | TSSatisfiesE***REMOVED***pression | TSTypeAssertion | TaggedTemplateE***REMOVED***pression | TemplateLiteral | ThrowStatement | TupleE***REMOVED***pression | TypeCastE***REMOVED***pression | UnaryE***REMOVED***pression | UpdateE***REMOVED***pression | VariableDeclarator | WhileStatement | WithStatement | YieldE***REMOVED***pression;
    ImportAttribute: DeclareE***REMOVED***portAllDeclaration | DeclareE***REMOVED***portDeclaration | E***REMOVED***portAllDeclaration | E***REMOVED***portNamedDeclaration | ImportDeclaration;
    ImportDeclaration: BlockStatement | DoWhileStatement | E***REMOVED***portNamedDeclaration | ForInStatement | ForOfStatement | ForStatement | IfStatement | LabeledStatement | Program | StaticBlock | SwitchCase | TSModuleBlock | WhileStatement | WithStatement;
    ImportDefaultSpecifier: ImportDeclaration;
    ImportE***REMOVED***pression: ArrayE***REMOVED***pression | ArrowFunctionE***REMOVED***pression | AssignmentE***REMOVED***pression | AssignmentPattern | AwaitE***REMOVED***pression | BinaryE***REMOVED***pression | BindE***REMOVED***pression | CallE***REMOVED***pression | ClassAccessorProperty | ClassDeclaration | ClassE***REMOVED***pression | ClassMethod | ClassPrivateProperty | ClassProperty | ConditionalE***REMOVED***pression | Decorator | DoWhileStatement | E***REMOVED***portDefaultDeclaration | E***REMOVED***pressionStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | ImportE***REMOVED***pression | JSXE***REMOVED***pressionContainer | JSXSpreadAttribute | JSXSpreadChild | LogicalE***REMOVED***pression | MemberE***REMOVED***pression | NewE***REMOVED***pression | ObjectMethod | ObjectProperty | OptionalCallE***REMOVED***pression | OptionalMemberE***REMOVED***pression | ParenthesizedE***REMOVED***pression | PipelineBareFunction | PipelineTopicE***REMOVED***pression | ReturnStatement | SequenceE***REMOVED***pression | SpreadElement | SwitchCase | SwitchStatement | TSAsE***REMOVED***pression | TSDeclareMethod | TSEnumDeclaration | TSEnumMember | TSE***REMOVED***portAssignment | TSImportType | TSInstantiationE***REMOVED***pression | TSMethodSignature | TSNonNullE***REMOVED***pression | TSPropertySignature | TSSatisfiesE***REMOVED***pression | TSTypeAssertion | TaggedTemplateE***REMOVED***pression | TemplateLiteral | ThrowStatement | TupleE***REMOVED***pression | TypeCastE***REMOVED***pression | UnaryE***REMOVED***pression | UpdateE***REMOVED***pression | VariableDeclarator | WhileStatement | WithStatement | YieldE***REMOVED***pression;
    ImportNamespaceSpecifier: ImportDeclaration;
    ImportSpecifier: ImportDeclaration;
    Inde***REMOVED***edAccessType: ArrayTypeAnnotation | DeclareE***REMOVED***portDeclaration | DeclareOpaqueType | DeclareTypeAlias | DeclaredPredicate | FunctionTypeAnnotation | FunctionTypeParam | Inde***REMOVED***edAccessType | IntersectionTypeAnnotation | NullableTypeAnnotation | ObjectTypeCallProperty | ObjectTypeInde***REMOVED***er | ObjectTypeInternalSlot | ObjectTypeProperty | ObjectTypeSpreadProperty | OpaqueType | OptionalInde***REMOVED***edAccessType | TupleTypeAnnotation | TypeAlias | TypeAnnotation | TypeParameter | TypeParameterInstantiation | TypeofTypeAnnotation | UnionTypeAnnotation;
    InferredPredicate: ArrowFunctionE***REMOVED***pression | DeclareE***REMOVED***portDeclaration | DeclaredPredicate | FunctionDeclaration | FunctionE***REMOVED***pression;
    InterfaceDeclaration: BlockStatement | DeclareE***REMOVED***portDeclaration | DeclaredPredicate | DoWhileStatement | E***REMOVED***portNamedDeclaration | ForInStatement | ForOfStatement | ForStatement | IfStatement | LabeledStatement | Program | StaticBlock | SwitchCase | TSModuleBlock | WhileStatement | WithStatement;
    InterfaceE***REMOVED***tends: ClassDeclaration | ClassE***REMOVED***pression | DeclareClass | DeclareE***REMOVED***portDeclaration | DeclareInterface | DeclaredPredicate | InterfaceDeclaration | InterfaceTypeAnnotation;
    InterfaceTypeAnnotation: ArrayTypeAnnotation | DeclareE***REMOVED***portDeclaration | DeclareOpaqueType | DeclareTypeAlias | DeclaredPredicate | FunctionTypeAnnotation | FunctionTypeParam | Inde***REMOVED***edAccessType | IntersectionTypeAnnotation | NullableTypeAnnotation | ObjectTypeCallProperty | ObjectTypeInde***REMOVED***er | ObjectTypeInternalSlot | ObjectTypeProperty | ObjectTypeSpreadProperty | OpaqueType | OptionalInde***REMOVED***edAccessType | TupleTypeAnnotation | TypeAlias | TypeAnnotation | TypeParameter | TypeParameterInstantiation | TypeofTypeAnnotation | UnionTypeAnnotation;
    InterpreterDirective: Program;
    IntersectionTypeAnnotation: ArrayTypeAnnotation | DeclareE***REMOVED***portDeclaration | DeclareOpaqueType | DeclareTypeAlias | DeclaredPredicate | FunctionTypeAnnotation | FunctionTypeParam | Inde***REMOVED***edAccessType | IntersectionTypeAnnotation | NullableTypeAnnotation | ObjectTypeCallProperty | ObjectTypeInde***REMOVED***er | ObjectTypeInternalSlot | ObjectTypeProperty | ObjectTypeSpreadProperty | OpaqueType | OptionalInde***REMOVED***edAccessType | TupleTypeAnnotation | TypeAlias | TypeAnnotation | TypeParameter | TypeParameterInstantiation | TypeofTypeAnnotation | UnionTypeAnnotation;
    JSXAttribute: JSXOpeningElement;
    JSXClosingElement: JSXElement;
    JSXClosingFragment: JSXFragment;
    JSXElement: ArrayE***REMOVED***pression | ArrowFunctionE***REMOVED***pression | AssignmentE***REMOVED***pression | AssignmentPattern | AwaitE***REMOVED***pression | BinaryE***REMOVED***pression | BindE***REMOVED***pression | CallE***REMOVED***pression | ClassAccessorProperty | ClassDeclaration | ClassE***REMOVED***pression | ClassMethod | ClassPrivateProperty | ClassProperty | ConditionalE***REMOVED***pression | Decorator | DoWhileStatement | E***REMOVED***portDefaultDeclaration | E***REMOVED***pressionStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | ImportE***REMOVED***pression | JSXAttribute | JSXElement | JSXE***REMOVED***pressionContainer | JSXFragment | JSXSpreadAttribute | JSXSpreadChild | LogicalE***REMOVED***pression | MemberE***REMOVED***pression | NewE***REMOVED***pression | ObjectMethod | ObjectProperty | OptionalCallE***REMOVED***pression | OptionalMemberE***REMOVED***pression | ParenthesizedE***REMOVED***pression | PipelineBareFunction | PipelineTopicE***REMOVED***pression | ReturnStatement | SequenceE***REMOVED***pression | SpreadElement | SwitchCase | SwitchStatement | TSAsE***REMOVED***pression | TSDeclareMethod | TSEnumDeclaration | TSEnumMember | TSE***REMOVED***portAssignment | TSImportType | TSInstantiationE***REMOVED***pression | TSMethodSignature | TSNonNullE***REMOVED***pression | TSPropertySignature | TSSatisfiesE***REMOVED***pression | TSTypeAssertion | TaggedTemplateE***REMOVED***pression | TemplateLiteral | ThrowStatement | TupleE***REMOVED***pression | TypeCastE***REMOVED***pression | UnaryE***REMOVED***pression | UpdateE***REMOVED***pression | VariableDeclarator | WhileStatement | WithStatement | YieldE***REMOVED***pression;
    JSXEmptyE***REMOVED***pression: JSXE***REMOVED***pressionContainer;
    JSXE***REMOVED***pressionContainer: JSXAttribute | JSXElement | JSXFragment;
    JSXFragment: ArrayE***REMOVED***pression | ArrowFunctionE***REMOVED***pression | AssignmentE***REMOVED***pression | AssignmentPattern | AwaitE***REMOVED***pression | BinaryE***REMOVED***pression | BindE***REMOVED***pression | CallE***REMOVED***pression | ClassAccessorProperty | ClassDeclaration | ClassE***REMOVED***pression | ClassMethod | ClassPrivateProperty | ClassProperty | ConditionalE***REMOVED***pression | Decorator | DoWhileStatement | E***REMOVED***portDefaultDeclaration | E***REMOVED***pressionStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | ImportE***REMOVED***pression | JSXAttribute | JSXElement | JSXE***REMOVED***pressionContainer | JSXFragment | JSXSpreadAttribute | JSXSpreadChild | LogicalE***REMOVED***pression | MemberE***REMOVED***pression | NewE***REMOVED***pression | ObjectMethod | ObjectProperty | OptionalCallE***REMOVED***pression | OptionalMemberE***REMOVED***pression | ParenthesizedE***REMOVED***pression | PipelineBareFunction | PipelineTopicE***REMOVED***pression | ReturnStatement | SequenceE***REMOVED***pression | SpreadElement | SwitchCase | SwitchStatement | TSAsE***REMOVED***pression | TSDeclareMethod | TSEnumDeclaration | TSEnumMember | TSE***REMOVED***portAssignment | TSImportType | TSInstantiationE***REMOVED***pression | TSMethodSignature | TSNonNullE***REMOVED***pression | TSPropertySignature | TSSatisfiesE***REMOVED***pression | TSTypeAssertion | TaggedTemplateE***REMOVED***pression | TemplateLiteral | ThrowStatement | TupleE***REMOVED***pression | TypeCastE***REMOVED***pression | UnaryE***REMOVED***pression | UpdateE***REMOVED***pression | VariableDeclarator | WhileStatement | WithStatement | YieldE***REMOVED***pression;
    JSXIdentifier: JSXAttribute | JSXClosingElement | JSXMemberE***REMOVED***pression | JSXNamespacedName | JSXOpeningElement;
    JSXMemberE***REMOVED***pression: JSXClosingElement | JSXMemberE***REMOVED***pression | JSXOpeningElement;
    JSXNamespacedName: JSXAttribute | JSXClosingElement | JSXOpeningElement;
    JSXOpeningElement: JSXElement;
    JSXOpeningFragment: JSXFragment;
    JSXSpreadAttribute: JSXOpeningElement;
    JSXSpreadChild: JSXElement | JSXFragment;
    JSXTe***REMOVED***t: JSXElement | JSXFragment;
    LabeledStatement: BlockStatement | DoWhileStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | LabeledStatement | Program | StaticBlock | SwitchCase | TSModuleBlock | WhileStatement | WithStatement;
    LogicalE***REMOVED***pression: ArrayE***REMOVED***pression | ArrowFunctionE***REMOVED***pression | AssignmentE***REMOVED***pression | AssignmentPattern | AwaitE***REMOVED***pression | BinaryE***REMOVED***pression | BindE***REMOVED***pression | CallE***REMOVED***pression | ClassAccessorProperty | ClassDeclaration | ClassE***REMOVED***pression | ClassMethod | ClassPrivateProperty | ClassProperty | ConditionalE***REMOVED***pression | Decorator | DoWhileStatement | E***REMOVED***portDefaultDeclaration | E***REMOVED***pressionStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | ImportE***REMOVED***pression | JSXE***REMOVED***pressionContainer | JSXSpreadAttribute | JSXSpreadChild | LogicalE***REMOVED***pression | MemberE***REMOVED***pression | NewE***REMOVED***pression | ObjectMethod | ObjectProperty | OptionalCallE***REMOVED***pression | OptionalMemberE***REMOVED***pression | ParenthesizedE***REMOVED***pression | PipelineBareFunction | PipelineTopicE***REMOVED***pression | ReturnStatement | SequenceE***REMOVED***pression | SpreadElement | SwitchCase | SwitchStatement | TSAsE***REMOVED***pression | TSDeclareMethod | TSEnumDeclaration | TSEnumMember | TSE***REMOVED***portAssignment | TSImportType | TSInstantiationE***REMOVED***pression | TSMethodSignature | TSNonNullE***REMOVED***pression | TSPropertySignature | TSSatisfiesE***REMOVED***pression | TSTypeAssertion | TaggedTemplateE***REMOVED***pression | TemplateLiteral | ThrowStatement | TupleE***REMOVED***pression | TypeCastE***REMOVED***pression | UnaryE***REMOVED***pression | UpdateE***REMOVED***pression | VariableDeclarator | WhileStatement | WithStatement | YieldE***REMOVED***pression;
    MemberE***REMOVED***pression: ArrayE***REMOVED***pression | ArrayPattern | ArrowFunctionE***REMOVED***pression | AssignmentE***REMOVED***pression | AssignmentPattern | AwaitE***REMOVED***pression | BinaryE***REMOVED***pression | BindE***REMOVED***pression | CallE***REMOVED***pression | ClassAccessorProperty | ClassDeclaration | ClassE***REMOVED***pression | ClassMethod | ClassPrivateProperty | ClassProperty | ConditionalE***REMOVED***pression | Decorator | DoWhileStatement | E***REMOVED***portDefaultDeclaration | E***REMOVED***pressionStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | ImportE***REMOVED***pression | JSXE***REMOVED***pressionContainer | JSXSpreadAttribute | JSXSpreadChild | LogicalE***REMOVED***pression | MemberE***REMOVED***pression | NewE***REMOVED***pression | ObjectMethod | ObjectProperty | OptionalCallE***REMOVED***pression | OptionalMemberE***REMOVED***pression | ParenthesizedE***REMOVED***pression | PipelineBareFunction | PipelineTopicE***REMOVED***pression | RestElement | ReturnStatement | SequenceE***REMOVED***pression | SpreadElement | SwitchCase | SwitchStatement | TSAsE***REMOVED***pression | TSDeclareMethod | TSEnumDeclaration | TSEnumMember | TSE***REMOVED***portAssignment | TSImportType | TSInstantiationE***REMOVED***pression | TSMethodSignature | TSNonNullE***REMOVED***pression | TSPropertySignature | TSSatisfiesE***REMOVED***pression | TSTypeAssertion | TaggedTemplateE***REMOVED***pression | TemplateLiteral | ThrowStatement | TupleE***REMOVED***pression | TypeCastE***REMOVED***pression | UnaryE***REMOVED***pression | UpdateE***REMOVED***pression | VariableDeclarator | WhileStatement | WithStatement | YieldE***REMOVED***pression;
    MetaProperty: ArrayE***REMOVED***pression | ArrowFunctionE***REMOVED***pression | AssignmentE***REMOVED***pression | AssignmentPattern | AwaitE***REMOVED***pression | BinaryE***REMOVED***pression | BindE***REMOVED***pression | CallE***REMOVED***pression | ClassAccessorProperty | ClassDeclaration | ClassE***REMOVED***pression | ClassMethod | ClassPrivateProperty | ClassProperty | ConditionalE***REMOVED***pression | Decorator | DoWhileStatement | E***REMOVED***portDefaultDeclaration | E***REMOVED***pressionStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | ImportE***REMOVED***pression | JSXE***REMOVED***pressionContainer | JSXSpreadAttribute | JSXSpreadChild | LogicalE***REMOVED***pression | MemberE***REMOVED***pression | NewE***REMOVED***pression | ObjectMethod | ObjectProperty | OptionalCallE***REMOVED***pression | OptionalMemberE***REMOVED***pression | ParenthesizedE***REMOVED***pression | PipelineBareFunction | PipelineTopicE***REMOVED***pression | ReturnStatement | SequenceE***REMOVED***pression | SpreadElement | SwitchCase | SwitchStatement | TSAsE***REMOVED***pression | TSDeclareMethod | TSEnumDeclaration | TSEnumMember | TSE***REMOVED***portAssignment | TSImportType | TSInstantiationE***REMOVED***pression | TSMethodSignature | TSNonNullE***REMOVED***pression | TSPropertySignature | TSSatisfiesE***REMOVED***pression | TSTypeAssertion | TaggedTemplateE***REMOVED***pression | TemplateLiteral | ThrowStatement | TupleE***REMOVED***pression | TypeCastE***REMOVED***pression | UnaryE***REMOVED***pression | UpdateE***REMOVED***pression | VariableDeclarator | WhileStatement | WithStatement | YieldE***REMOVED***pression;
    Mi***REMOVED***edTypeAnnotation: ArrayTypeAnnotation | DeclareE***REMOVED***portDeclaration | DeclareOpaqueType | DeclareTypeAlias | DeclaredPredicate | FunctionTypeAnnotation | FunctionTypeParam | Inde***REMOVED***edAccessType | IntersectionTypeAnnotation | NullableTypeAnnotation | ObjectTypeCallProperty | ObjectTypeInde***REMOVED***er | ObjectTypeInternalSlot | ObjectTypeProperty | ObjectTypeSpreadProperty | OpaqueType | OptionalInde***REMOVED***edAccessType | TupleTypeAnnotation | TypeAlias | TypeAnnotation | TypeParameter | TypeParameterInstantiation | TypeofTypeAnnotation | UnionTypeAnnotation;
    ModuleE***REMOVED***pression: ArrayE***REMOVED***pression | ArrowFunctionE***REMOVED***pression | AssignmentE***REMOVED***pression | AssignmentPattern | AwaitE***REMOVED***pression | BinaryE***REMOVED***pression | BindE***REMOVED***pression | CallE***REMOVED***pression | ClassAccessorProperty | ClassDeclaration | ClassE***REMOVED***pression | ClassMethod | ClassPrivateProperty | ClassProperty | ConditionalE***REMOVED***pression | Decorator | DoWhileStatement | E***REMOVED***portDefaultDeclaration | E***REMOVED***pressionStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | ImportE***REMOVED***pression | JSXE***REMOVED***pressionContainer | JSXSpreadAttribute | JSXSpreadChild | LogicalE***REMOVED***pression | MemberE***REMOVED***pression | NewE***REMOVED***pression | ObjectMethod | ObjectProperty | OptionalCallE***REMOVED***pression | OptionalMemberE***REMOVED***pression | ParenthesizedE***REMOVED***pression | PipelineBareFunction | PipelineTopicE***REMOVED***pression | ReturnStatement | SequenceE***REMOVED***pression | SpreadElement | SwitchCase | SwitchStatement | TSAsE***REMOVED***pression | TSDeclareMethod | TSEnumDeclaration | TSEnumMember | TSE***REMOVED***portAssignment | TSImportType | TSInstantiationE***REMOVED***pression | TSMethodSignature | TSNonNullE***REMOVED***pression | TSPropertySignature | TSSatisfiesE***REMOVED***pression | TSTypeAssertion | TaggedTemplateE***REMOVED***pression | TemplateLiteral | ThrowStatement | TupleE***REMOVED***pression | TypeCastE***REMOVED***pression | UnaryE***REMOVED***pression | UpdateE***REMOVED***pression | VariableDeclarator | WhileStatement | WithStatement | YieldE***REMOVED***pression;
    NewE***REMOVED***pression: ArrayE***REMOVED***pression | ArrowFunctionE***REMOVED***pression | AssignmentE***REMOVED***pression | AssignmentPattern | AwaitE***REMOVED***pression | BinaryE***REMOVED***pression | BindE***REMOVED***pression | CallE***REMOVED***pression | ClassAccessorProperty | ClassDeclaration | ClassE***REMOVED***pression | ClassMethod | ClassPrivateProperty | ClassProperty | ConditionalE***REMOVED***pression | Decorator | DoWhileStatement | E***REMOVED***portDefaultDeclaration | E***REMOVED***pressionStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | ImportE***REMOVED***pression | JSXE***REMOVED***pressionContainer | JSXSpreadAttribute | JSXSpreadChild | LogicalE***REMOVED***pression | MemberE***REMOVED***pression | NewE***REMOVED***pression | ObjectMethod | ObjectProperty | OptionalCallE***REMOVED***pression | OptionalMemberE***REMOVED***pression | ParenthesizedE***REMOVED***pression | PipelineBareFunction | PipelineTopicE***REMOVED***pression | ReturnStatement | SequenceE***REMOVED***pression | SpreadElement | SwitchCase | SwitchStatement | TSAsE***REMOVED***pression | TSDeclareMethod | TSEnumDeclaration | TSEnumMember | TSE***REMOVED***portAssignment | TSImportType | TSInstantiationE***REMOVED***pression | TSMethodSignature | TSNonNullE***REMOVED***pression | TSPropertySignature | TSSatisfiesE***REMOVED***pression | TSTypeAssertion | TaggedTemplateE***REMOVED***pression | TemplateLiteral | ThrowStatement | TupleE***REMOVED***pression | TypeCastE***REMOVED***pression | UnaryE***REMOVED***pression | UpdateE***REMOVED***pression | VariableDeclarator | WhileStatement | WithStatement | YieldE***REMOVED***pression;
    Noop: ArrayPattern | ArrowFunctionE***REMOVED***pression | AssignmentPattern | ClassAccessorProperty | ClassDeclaration | ClassE***REMOVED***pression | ClassMethod | ClassPrivateMethod | ClassPrivateProperty | ClassProperty | FunctionDeclaration | FunctionE***REMOVED***pression | Identifier | ObjectMethod | ObjectPattern | Placeholder | RestElement | TSDeclareFunction | TSDeclareMethod;
    NullLiteral: ArrayE***REMOVED***pression | ArrowFunctionE***REMOVED***pression | AssignmentE***REMOVED***pression | AssignmentPattern | AwaitE***REMOVED***pression | BinaryE***REMOVED***pression | BindE***REMOVED***pression | CallE***REMOVED***pression | ClassAccessorProperty | ClassDeclaration | ClassE***REMOVED***pression | ClassMethod | ClassPrivateProperty | ClassProperty | ConditionalE***REMOVED***pression | Decorator | DoWhileStatement | E***REMOVED***portDefaultDeclaration | E***REMOVED***pressionStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | ImportE***REMOVED***pression | JSXE***REMOVED***pressionContainer | JSXSpreadAttribute | JSXSpreadChild | LogicalE***REMOVED***pression | MemberE***REMOVED***pression | NewE***REMOVED***pression | ObjectMethod | ObjectProperty | OptionalCallE***REMOVED***pression | OptionalMemberE***REMOVED***pression | ParenthesizedE***REMOVED***pression | PipelineBareFunction | PipelineTopicE***REMOVED***pression | ReturnStatement | SequenceE***REMOVED***pression | SpreadElement | SwitchCase | SwitchStatement | TSAsE***REMOVED***pression | TSDeclareMethod | TSEnumDeclaration | TSEnumMember | TSE***REMOVED***portAssignment | TSImportType | TSInstantiationE***REMOVED***pression | TSMethodSignature | TSNonNullE***REMOVED***pression | TSPropertySignature | TSSatisfiesE***REMOVED***pression | TSTypeAssertion | TaggedTemplateE***REMOVED***pression | TemplateLiteral | ThrowStatement | TupleE***REMOVED***pression | TypeCastE***REMOVED***pression | UnaryE***REMOVED***pression | UpdateE***REMOVED***pression | VariableDeclarator | WhileStatement | WithStatement | YieldE***REMOVED***pression;
    NullLiteralTypeAnnotation: ArrayTypeAnnotation | DeclareE***REMOVED***portDeclaration | DeclareOpaqueType | DeclareTypeAlias | DeclaredPredicate | FunctionTypeAnnotation | FunctionTypeParam | Inde***REMOVED***edAccessType | IntersectionTypeAnnotation | NullableTypeAnnotation | ObjectTypeCallProperty | ObjectTypeInde***REMOVED***er | ObjectTypeInternalSlot | ObjectTypeProperty | ObjectTypeSpreadProperty | OpaqueType | OptionalInde***REMOVED***edAccessType | TupleTypeAnnotation | TypeAlias | TypeAnnotation | TypeParameter | TypeParameterInstantiation | TypeofTypeAnnotation | UnionTypeAnnotation;
    NullableTypeAnnotation: ArrayTypeAnnotation | DeclareE***REMOVED***portDeclaration | DeclareOpaqueType | DeclareTypeAlias | DeclaredPredicate | FunctionTypeAnnotation | FunctionTypeParam | Inde***REMOVED***edAccessType | IntersectionTypeAnnotation | NullableTypeAnnotation | ObjectTypeCallProperty | ObjectTypeInde***REMOVED***er | ObjectTypeInternalSlot | ObjectTypeProperty | ObjectTypeSpreadProperty | OpaqueType | OptionalInde***REMOVED***edAccessType | TupleTypeAnnotation | TypeAlias | TypeAnnotation | TypeParameter | TypeParameterInstantiation | TypeofTypeAnnotation | UnionTypeAnnotation;
    NumberLiteral: null;
    NumberLiteralTypeAnnotation: ArrayTypeAnnotation | DeclareE***REMOVED***portDeclaration | DeclareOpaqueType | DeclareTypeAlias | DeclaredPredicate | FunctionTypeAnnotation | FunctionTypeParam | Inde***REMOVED***edAccessType | IntersectionTypeAnnotation | NullableTypeAnnotation | ObjectTypeCallProperty | ObjectTypeInde***REMOVED***er | ObjectTypeInternalSlot | ObjectTypeProperty | ObjectTypeSpreadProperty | OpaqueType | OptionalInde***REMOVED***edAccessType | TupleTypeAnnotation | TypeAlias | TypeAnnotation | TypeParameter | TypeParameterInstantiation | TypeofTypeAnnotation | UnionTypeAnnotation;
    NumberTypeAnnotation: ArrayTypeAnnotation | DeclareE***REMOVED***portDeclaration | DeclareOpaqueType | DeclareTypeAlias | DeclaredPredicate | FunctionTypeAnnotation | FunctionTypeParam | Inde***REMOVED***edAccessType | IntersectionTypeAnnotation | NullableTypeAnnotation | ObjectTypeCallProperty | ObjectTypeInde***REMOVED***er | ObjectTypeInternalSlot | ObjectTypeProperty | ObjectTypeSpreadProperty | OpaqueType | OptionalInde***REMOVED***edAccessType | TupleTypeAnnotation | TypeAlias | TypeAnnotation | TypeParameter | TypeParameterInstantiation | TypeofTypeAnnotation | UnionTypeAnnotation;
    NumericLiteral: ArrayE***REMOVED***pression | ArrowFunctionE***REMOVED***pression | AssignmentE***REMOVED***pression | AssignmentPattern | AwaitE***REMOVED***pression | BinaryE***REMOVED***pression | BindE***REMOVED***pression | CallE***REMOVED***pression | ClassAccessorProperty | ClassDeclaration | ClassE***REMOVED***pression | ClassMethod | ClassPrivateProperty | ClassProperty | ConditionalE***REMOVED***pression | Decorator | DoWhileStatement | EnumNumberMember | E***REMOVED***portDefaultDeclaration | E***REMOVED***pressionStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | ImportE***REMOVED***pression | JSXE***REMOVED***pressionContainer | JSXSpreadAttribute | JSXSpreadChild | LogicalE***REMOVED***pression | MemberE***REMOVED***pression | NewE***REMOVED***pression | ObjectMethod | ObjectProperty | OptionalCallE***REMOVED***pression | OptionalMemberE***REMOVED***pression | ParenthesizedE***REMOVED***pression | PipelineBareFunction | PipelineTopicE***REMOVED***pression | ReturnStatement | SequenceE***REMOVED***pression | SpreadElement | SwitchCase | SwitchStatement | TSAsE***REMOVED***pression | TSDeclareMethod | TSEnumDeclaration | TSEnumMember | TSE***REMOVED***portAssignment | TSImportType | TSInstantiationE***REMOVED***pression | TSLiteralType | TSMethodSignature | TSNonNullE***REMOVED***pression | TSPropertySignature | TSSatisfiesE***REMOVED***pression | TSTypeAssertion | TaggedTemplateE***REMOVED***pression | TemplateLiteral | ThrowStatement | TupleE***REMOVED***pression | TypeCastE***REMOVED***pression | UnaryE***REMOVED***pression | UpdateE***REMOVED***pression | VariableDeclarator | WhileStatement | WithStatement | YieldE***REMOVED***pression;
    ObjectE***REMOVED***pression: ArrayE***REMOVED***pression | ArrowFunctionE***REMOVED***pression | AssignmentE***REMOVED***pression | AssignmentPattern | AwaitE***REMOVED***pression | BinaryE***REMOVED***pression | BindE***REMOVED***pression | CallE***REMOVED***pression | ClassAccessorProperty | ClassDeclaration | ClassE***REMOVED***pression | ClassMethod | ClassPrivateProperty | ClassProperty | ConditionalE***REMOVED***pression | Decorator | DoWhileStatement | E***REMOVED***portDefaultDeclaration | E***REMOVED***pressionStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | ImportE***REMOVED***pression | JSXE***REMOVED***pressionContainer | JSXSpreadAttribute | JSXSpreadChild | LogicalE***REMOVED***pression | MemberE***REMOVED***pression | NewE***REMOVED***pression | ObjectMethod | ObjectProperty | OptionalCallE***REMOVED***pression | OptionalMemberE***REMOVED***pression | ParenthesizedE***REMOVED***pression | PipelineBareFunction | PipelineTopicE***REMOVED***pression | ReturnStatement | SequenceE***REMOVED***pression | SpreadElement | SwitchCase | SwitchStatement | TSAsE***REMOVED***pression | TSDeclareMethod | TSEnumDeclaration | TSEnumMember | TSE***REMOVED***portAssignment | TSImportType | TSInstantiationE***REMOVED***pression | TSMethodSignature | TSNonNullE***REMOVED***pression | TSPropertySignature | TSSatisfiesE***REMOVED***pression | TSTypeAssertion | TaggedTemplateE***REMOVED***pression | TemplateLiteral | ThrowStatement | TupleE***REMOVED***pression | TypeCastE***REMOVED***pression | UnaryE***REMOVED***pression | UpdateE***REMOVED***pression | VariableDeclarator | WhileStatement | WithStatement | YieldE***REMOVED***pression;
    ObjectMethod: ObjectE***REMOVED***pression;
    ObjectPattern: ArrayPattern | ArrowFunctionE***REMOVED***pression | AssignmentE***REMOVED***pression | AssignmentPattern | CatchClause | ClassMethod | ClassPrivateMethod | ForInStatement | ForOfStatement | FunctionDeclaration | FunctionE***REMOVED***pression | ObjectMethod | ObjectProperty | RestElement | TSCallSignatureDeclaration | TSConstructSignatureDeclaration | TSConstructorType | TSDeclareFunction | TSDeclareMethod | TSFunctionType | TSMethodSignature | VariableDeclarator;
    ObjectProperty: ObjectE***REMOVED***pression | ObjectPattern | RecordE***REMOVED***pression;
    ObjectTypeAnnotation: ArrayTypeAnnotation | DeclareClass | DeclareE***REMOVED***portDeclaration | DeclareInterface | DeclareOpaqueType | DeclareTypeAlias | DeclaredPredicate | FunctionTypeAnnotation | FunctionTypeParam | Inde***REMOVED***edAccessType | InterfaceDeclaration | InterfaceTypeAnnotation | IntersectionTypeAnnotation | NullableTypeAnnotation | ObjectTypeCallProperty | ObjectTypeInde***REMOVED***er | ObjectTypeInternalSlot | ObjectTypeProperty | ObjectTypeSpreadProperty | OpaqueType | OptionalInde***REMOVED***edAccessType | TupleTypeAnnotation | TypeAlias | TypeAnnotation | TypeParameter | TypeParameterInstantiation | TypeofTypeAnnotation | UnionTypeAnnotation;
    ObjectTypeCallProperty: DeclareE***REMOVED***portDeclaration | DeclaredPredicate | ObjectTypeAnnotation;
    ObjectTypeInde***REMOVED***er: DeclareE***REMOVED***portDeclaration | DeclaredPredicate | ObjectTypeAnnotation;
    ObjectTypeInternalSlot: DeclareE***REMOVED***portDeclaration | DeclaredPredicate | ObjectTypeAnnotation;
    ObjectTypeProperty: DeclareE***REMOVED***portDeclaration | DeclaredPredicate | ObjectTypeAnnotation;
    ObjectTypeSpreadProperty: DeclareE***REMOVED***portDeclaration | DeclaredPredicate | ObjectTypeAnnotation;
    OpaqueType: BlockStatement | DeclareE***REMOVED***portDeclaration | DeclaredPredicate | DoWhileStatement | E***REMOVED***portNamedDeclaration | ForInStatement | ForOfStatement | ForStatement | IfStatement | LabeledStatement | Program | StaticBlock | SwitchCase | TSModuleBlock | WhileStatement | WithStatement;
    OptionalCallE***REMOVED***pression: ArrayE***REMOVED***pression | ArrowFunctionE***REMOVED***pression | AssignmentE***REMOVED***pression | AssignmentPattern | AwaitE***REMOVED***pression | BinaryE***REMOVED***pression | BindE***REMOVED***pression | CallE***REMOVED***pression | ClassAccessorProperty | ClassDeclaration | ClassE***REMOVED***pression | ClassMethod | ClassPrivateProperty | ClassProperty | ConditionalE***REMOVED***pression | Decorator | DoWhileStatement | E***REMOVED***portDefaultDeclaration | E***REMOVED***pressionStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | ImportE***REMOVED***pression | JSXE***REMOVED***pressionContainer | JSXSpreadAttribute | JSXSpreadChild | LogicalE***REMOVED***pression | MemberE***REMOVED***pression | NewE***REMOVED***pression | ObjectMethod | ObjectProperty | OptionalCallE***REMOVED***pression | OptionalMemberE***REMOVED***pression | ParenthesizedE***REMOVED***pression | PipelineBareFunction | PipelineTopicE***REMOVED***pression | ReturnStatement | SequenceE***REMOVED***pression | SpreadElement | SwitchCase | SwitchStatement | TSAsE***REMOVED***pression | TSDeclareMethod | TSEnumDeclaration | TSEnumMember | TSE***REMOVED***portAssignment | TSImportType | TSInstantiationE***REMOVED***pression | TSMethodSignature | TSNonNullE***REMOVED***pression | TSPropertySignature | TSSatisfiesE***REMOVED***pression | TSTypeAssertion | TaggedTemplateE***REMOVED***pression | TemplateLiteral | ThrowStatement | TupleE***REMOVED***pression | TypeCastE***REMOVED***pression | UnaryE***REMOVED***pression | UpdateE***REMOVED***pression | VariableDeclarator | WhileStatement | WithStatement | YieldE***REMOVED***pression;
    OptionalInde***REMOVED***edAccessType: ArrayTypeAnnotation | DeclareE***REMOVED***portDeclaration | DeclareOpaqueType | DeclareTypeAlias | DeclaredPredicate | FunctionTypeAnnotation | FunctionTypeParam | Inde***REMOVED***edAccessType | IntersectionTypeAnnotation | NullableTypeAnnotation | ObjectTypeCallProperty | ObjectTypeInde***REMOVED***er | ObjectTypeInternalSlot | ObjectTypeProperty | ObjectTypeSpreadProperty | OpaqueType | OptionalInde***REMOVED***edAccessType | TupleTypeAnnotation | TypeAlias | TypeAnnotation | TypeParameter | TypeParameterInstantiation | TypeofTypeAnnotation | UnionTypeAnnotation;
    OptionalMemberE***REMOVED***pression: ArrayE***REMOVED***pression | ArrowFunctionE***REMOVED***pression | AssignmentE***REMOVED***pression | AssignmentPattern | AwaitE***REMOVED***pression | BinaryE***REMOVED***pression | BindE***REMOVED***pression | CallE***REMOVED***pression | ClassAccessorProperty | ClassDeclaration | ClassE***REMOVED***pression | ClassMethod | ClassPrivateProperty | ClassProperty | ConditionalE***REMOVED***pression | Decorator | DoWhileStatement | E***REMOVED***portDefaultDeclaration | E***REMOVED***pressionStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | ImportE***REMOVED***pression | JSXE***REMOVED***pressionContainer | JSXSpreadAttribute | JSXSpreadChild | LogicalE***REMOVED***pression | MemberE***REMOVED***pression | NewE***REMOVED***pression | ObjectMethod | ObjectProperty | OptionalCallE***REMOVED***pression | OptionalMemberE***REMOVED***pression | ParenthesizedE***REMOVED***pression | PipelineBareFunction | PipelineTopicE***REMOVED***pression | ReturnStatement | SequenceE***REMOVED***pression | SpreadElement | SwitchCase | SwitchStatement | TSAsE***REMOVED***pression | TSDeclareMethod | TSEnumDeclaration | TSEnumMember | TSE***REMOVED***portAssignment | TSImportType | TSInstantiationE***REMOVED***pression | TSMethodSignature | TSNonNullE***REMOVED***pression | TSPropertySignature | TSSatisfiesE***REMOVED***pression | TSTypeAssertion | TaggedTemplateE***REMOVED***pression | TemplateLiteral | ThrowStatement | TupleE***REMOVED***pression | TypeCastE***REMOVED***pression | UnaryE***REMOVED***pression | UpdateE***REMOVED***pression | VariableDeclarator | WhileStatement | WithStatement | YieldE***REMOVED***pression;
    ParenthesizedE***REMOVED***pression: ArrayE***REMOVED***pression | ArrowFunctionE***REMOVED***pression | AssignmentE***REMOVED***pression | AssignmentPattern | AwaitE***REMOVED***pression | BinaryE***REMOVED***pression | BindE***REMOVED***pression | CallE***REMOVED***pression | ClassAccessorProperty | ClassDeclaration | ClassE***REMOVED***pression | ClassMethod | ClassPrivateProperty | ClassProperty | ConditionalE***REMOVED***pression | Decorator | DoWhileStatement | E***REMOVED***portDefaultDeclaration | E***REMOVED***pressionStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | ImportE***REMOVED***pression | JSXE***REMOVED***pressionContainer | JSXSpreadAttribute | JSXSpreadChild | LogicalE***REMOVED***pression | MemberE***REMOVED***pression | NewE***REMOVED***pression | ObjectMethod | ObjectProperty | OptionalCallE***REMOVED***pression | OptionalMemberE***REMOVED***pression | ParenthesizedE***REMOVED***pression | PipelineBareFunction | PipelineTopicE***REMOVED***pression | ReturnStatement | SequenceE***REMOVED***pression | SpreadElement | SwitchCase | SwitchStatement | TSAsE***REMOVED***pression | TSDeclareMethod | TSEnumDeclaration | TSEnumMember | TSE***REMOVED***portAssignment | TSImportType | TSInstantiationE***REMOVED***pression | TSMethodSignature | TSNonNullE***REMOVED***pression | TSPropertySignature | TSSatisfiesE***REMOVED***pression | TSTypeAssertion | TaggedTemplateE***REMOVED***pression | TemplateLiteral | ThrowStatement | TupleE***REMOVED***pression | TypeCastE***REMOVED***pression | UnaryE***REMOVED***pression | UpdateE***REMOVED***pression | VariableDeclarator | WhileStatement | WithStatement | YieldE***REMOVED***pression;
    PipelineBareFunction: ArrayE***REMOVED***pression | ArrowFunctionE***REMOVED***pression | AssignmentE***REMOVED***pression | AssignmentPattern | AwaitE***REMOVED***pression | BinaryE***REMOVED***pression | BindE***REMOVED***pression | CallE***REMOVED***pression | ClassAccessorProperty | ClassDeclaration | ClassE***REMOVED***pression | ClassMethod | ClassPrivateProperty | ClassProperty | ConditionalE***REMOVED***pression | Decorator | DoWhileStatement | E***REMOVED***portDefaultDeclaration | E***REMOVED***pressionStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | ImportE***REMOVED***pression | JSXE***REMOVED***pressionContainer | JSXSpreadAttribute | JSXSpreadChild | LogicalE***REMOVED***pression | MemberE***REMOVED***pression | NewE***REMOVED***pression | ObjectMethod | ObjectProperty | OptionalCallE***REMOVED***pression | OptionalMemberE***REMOVED***pression | ParenthesizedE***REMOVED***pression | PipelineBareFunction | PipelineTopicE***REMOVED***pression | ReturnStatement | SequenceE***REMOVED***pression | SpreadElement | SwitchCase | SwitchStatement | TSAsE***REMOVED***pression | TSDeclareMethod | TSEnumDeclaration | TSEnumMember | TSE***REMOVED***portAssignment | TSImportType | TSInstantiationE***REMOVED***pression | TSMethodSignature | TSNonNullE***REMOVED***pression | TSPropertySignature | TSSatisfiesE***REMOVED***pression | TSTypeAssertion | TaggedTemplateE***REMOVED***pression | TemplateLiteral | ThrowStatement | TupleE***REMOVED***pression | TypeCastE***REMOVED***pression | UnaryE***REMOVED***pression | UpdateE***REMOVED***pression | VariableDeclarator | WhileStatement | WithStatement | YieldE***REMOVED***pression;
    PipelinePrimaryTopicReference: ArrayE***REMOVED***pression | ArrowFunctionE***REMOVED***pression | AssignmentE***REMOVED***pression | AssignmentPattern | AwaitE***REMOVED***pression | BinaryE***REMOVED***pression | BindE***REMOVED***pression | CallE***REMOVED***pression | ClassAccessorProperty | ClassDeclaration | ClassE***REMOVED***pression | ClassMethod | ClassPrivateProperty | ClassProperty | ConditionalE***REMOVED***pression | Decorator | DoWhileStatement | E***REMOVED***portDefaultDeclaration | E***REMOVED***pressionStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | ImportE***REMOVED***pression | JSXE***REMOVED***pressionContainer | JSXSpreadAttribute | JSXSpreadChild | LogicalE***REMOVED***pression | MemberE***REMOVED***pression | NewE***REMOVED***pression | ObjectMethod | ObjectProperty | OptionalCallE***REMOVED***pression | OptionalMemberE***REMOVED***pression | ParenthesizedE***REMOVED***pression | PipelineBareFunction | PipelineTopicE***REMOVED***pression | ReturnStatement | SequenceE***REMOVED***pression | SpreadElement | SwitchCase | SwitchStatement | TSAsE***REMOVED***pression | TSDeclareMethod | TSEnumDeclaration | TSEnumMember | TSE***REMOVED***portAssignment | TSImportType | TSInstantiationE***REMOVED***pression | TSMethodSignature | TSNonNullE***REMOVED***pression | TSPropertySignature | TSSatisfiesE***REMOVED***pression | TSTypeAssertion | TaggedTemplateE***REMOVED***pression | TemplateLiteral | ThrowStatement | TupleE***REMOVED***pression | TypeCastE***REMOVED***pression | UnaryE***REMOVED***pression | UpdateE***REMOVED***pression | VariableDeclarator | WhileStatement | WithStatement | YieldE***REMOVED***pression;
    PipelineTopicE***REMOVED***pression: ArrayE***REMOVED***pression | ArrowFunctionE***REMOVED***pression | AssignmentE***REMOVED***pression | AssignmentPattern | AwaitE***REMOVED***pression | BinaryE***REMOVED***pression | BindE***REMOVED***pression | CallE***REMOVED***pression | ClassAccessorProperty | ClassDeclaration | ClassE***REMOVED***pression | ClassMethod | ClassPrivateProperty | ClassProperty | ConditionalE***REMOVED***pression | Decorator | DoWhileStatement | E***REMOVED***portDefaultDeclaration | E***REMOVED***pressionStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | ImportE***REMOVED***pression | JSXE***REMOVED***pressionContainer | JSXSpreadAttribute | JSXSpreadChild | LogicalE***REMOVED***pression | MemberE***REMOVED***pression | NewE***REMOVED***pression | ObjectMethod | ObjectProperty | OptionalCallE***REMOVED***pression | OptionalMemberE***REMOVED***pression | ParenthesizedE***REMOVED***pression | PipelineBareFunction | PipelineTopicE***REMOVED***pression | ReturnStatement | SequenceE***REMOVED***pression | SpreadElement | SwitchCase | SwitchStatement | TSAsE***REMOVED***pression | TSDeclareMethod | TSEnumDeclaration | TSEnumMember | TSE***REMOVED***portAssignment | TSImportType | TSInstantiationE***REMOVED***pression | TSMethodSignature | TSNonNullE***REMOVED***pression | TSPropertySignature | TSSatisfiesE***REMOVED***pression | TSTypeAssertion | TaggedTemplateE***REMOVED***pression | TemplateLiteral | ThrowStatement | TupleE***REMOVED***pression | TypeCastE***REMOVED***pression | UnaryE***REMOVED***pression | UpdateE***REMOVED***pression | VariableDeclarator | WhileStatement | WithStatement | YieldE***REMOVED***pression;
    Placeholder: Node;
    PrivateName: BinaryE***REMOVED***pression | ClassAccessorProperty | ClassPrivateMethod | ClassPrivateProperty | MemberE***REMOVED***pression | ObjectProperty;
    Program: File | ModuleE***REMOVED***pression;
    QualifiedTypeIdentifier: DeclareE***REMOVED***portDeclaration | DeclaredPredicate | GenericTypeAnnotation | InterfaceE***REMOVED***tends | QualifiedTypeIdentifier;
    RecordE***REMOVED***pression: ArrayE***REMOVED***pression | ArrowFunctionE***REMOVED***pression | AssignmentE***REMOVED***pression | AssignmentPattern | AwaitE***REMOVED***pression | BinaryE***REMOVED***pression | BindE***REMOVED***pression | CallE***REMOVED***pression | ClassAccessorProperty | ClassDeclaration | ClassE***REMOVED***pression | ClassMethod | ClassPrivateProperty | ClassProperty | ConditionalE***REMOVED***pression | Decorator | DoWhileStatement | E***REMOVED***portDefaultDeclaration | E***REMOVED***pressionStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | ImportE***REMOVED***pression | JSXE***REMOVED***pressionContainer | JSXSpreadAttribute | JSXSpreadChild | LogicalE***REMOVED***pression | MemberE***REMOVED***pression | NewE***REMOVED***pression | ObjectMethod | ObjectProperty | OptionalCallE***REMOVED***pression | OptionalMemberE***REMOVED***pression | ParenthesizedE***REMOVED***pression | PipelineBareFunction | PipelineTopicE***REMOVED***pression | ReturnStatement | SequenceE***REMOVED***pression | SpreadElement | SwitchCase | SwitchStatement | TSAsE***REMOVED***pression | TSDeclareMethod | TSEnumDeclaration | TSEnumMember | TSE***REMOVED***portAssignment | TSImportType | TSInstantiationE***REMOVED***pression | TSMethodSignature | TSNonNullE***REMOVED***pression | TSPropertySignature | TSSatisfiesE***REMOVED***pression | TSTypeAssertion | TaggedTemplateE***REMOVED***pression | TemplateLiteral | ThrowStatement | TupleE***REMOVED***pression | TypeCastE***REMOVED***pression | UnaryE***REMOVED***pression | UpdateE***REMOVED***pression | VariableDeclarator | WhileStatement | WithStatement | YieldE***REMOVED***pression;
    RegE***REMOVED***pLiteral: ArrayE***REMOVED***pression | ArrowFunctionE***REMOVED***pression | AssignmentE***REMOVED***pression | AssignmentPattern | AwaitE***REMOVED***pression | BinaryE***REMOVED***pression | BindE***REMOVED***pression | CallE***REMOVED***pression | ClassAccessorProperty | ClassDeclaration | ClassE***REMOVED***pression | ClassMethod | ClassPrivateProperty | ClassProperty | ConditionalE***REMOVED***pression | Decorator | DoWhileStatement | E***REMOVED***portDefaultDeclaration | E***REMOVED***pressionStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | ImportE***REMOVED***pression | JSXE***REMOVED***pressionContainer | JSXSpreadAttribute | JSXSpreadChild | LogicalE***REMOVED***pression | MemberE***REMOVED***pression | NewE***REMOVED***pression | ObjectMethod | ObjectProperty | OptionalCallE***REMOVED***pression | OptionalMemberE***REMOVED***pression | ParenthesizedE***REMOVED***pression | PipelineBareFunction | PipelineTopicE***REMOVED***pression | ReturnStatement | SequenceE***REMOVED***pression | SpreadElement | SwitchCase | SwitchStatement | TSAsE***REMOVED***pression | TSDeclareMethod | TSEnumDeclaration | TSEnumMember | TSE***REMOVED***portAssignment | TSImportType | TSInstantiationE***REMOVED***pression | TSMethodSignature | TSNonNullE***REMOVED***pression | TSPropertySignature | TSSatisfiesE***REMOVED***pression | TSTypeAssertion | TaggedTemplateE***REMOVED***pression | TemplateLiteral | ThrowStatement | TupleE***REMOVED***pression | TypeCastE***REMOVED***pression | UnaryE***REMOVED***pression | UpdateE***REMOVED***pression | VariableDeclarator | WhileStatement | WithStatement | YieldE***REMOVED***pression;
    Rege***REMOVED***Literal: null;
    RestElement: ArrayPattern | ArrowFunctionE***REMOVED***pression | AssignmentE***REMOVED***pression | ClassMethod | ClassPrivateMethod | ForInStatement | ForOfStatement | FunctionDeclaration | FunctionE***REMOVED***pression | ObjectMethod | ObjectPattern | ObjectProperty | RestElement | TSCallSignatureDeclaration | TSConstructSignatureDeclaration | TSConstructorType | TSDeclareFunction | TSDeclareMethod | TSFunctionType | TSMethodSignature | VariableDeclarator;
    RestProperty: null;
    ReturnStatement: BlockStatement | DoWhileStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | LabeledStatement | Program | StaticBlock | SwitchCase | TSModuleBlock | WhileStatement | WithStatement;
    SequenceE***REMOVED***pression: ArrayE***REMOVED***pression | ArrowFunctionE***REMOVED***pression | AssignmentE***REMOVED***pression | AssignmentPattern | AwaitE***REMOVED***pression | BinaryE***REMOVED***pression | BindE***REMOVED***pression | CallE***REMOVED***pression | ClassAccessorProperty | ClassDeclaration | ClassE***REMOVED***pression | ClassMethod | ClassPrivateProperty | ClassProperty | ConditionalE***REMOVED***pression | Decorator | DoWhileStatement | E***REMOVED***portDefaultDeclaration | E***REMOVED***pressionStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | ImportE***REMOVED***pression | JSXE***REMOVED***pressionContainer | JSXSpreadAttribute | JSXSpreadChild | LogicalE***REMOVED***pression | MemberE***REMOVED***pression | NewE***REMOVED***pression | ObjectMethod | ObjectProperty | OptionalCallE***REMOVED***pression | OptionalMemberE***REMOVED***pression | ParenthesizedE***REMOVED***pression | PipelineBareFunction | PipelineTopicE***REMOVED***pression | ReturnStatement | SequenceE***REMOVED***pression | SpreadElement | SwitchCase | SwitchStatement | TSAsE***REMOVED***pression | TSDeclareMethod | TSEnumDeclaration | TSEnumMember | TSE***REMOVED***portAssignment | TSImportType | TSInstantiationE***REMOVED***pression | TSMethodSignature | TSNonNullE***REMOVED***pression | TSPropertySignature | TSSatisfiesE***REMOVED***pression | TSTypeAssertion | TaggedTemplateE***REMOVED***pression | TemplateLiteral | ThrowStatement | TupleE***REMOVED***pression | TypeCastE***REMOVED***pression | UnaryE***REMOVED***pression | UpdateE***REMOVED***pression | VariableDeclarator | WhileStatement | WithStatement | YieldE***REMOVED***pression;
    SpreadElement: ArrayE***REMOVED***pression | CallE***REMOVED***pression | NewE***REMOVED***pression | ObjectE***REMOVED***pression | OptionalCallE***REMOVED***pression | RecordE***REMOVED***pression | TupleE***REMOVED***pression;
    SpreadProperty: null;
    StaticBlock: ClassBody;
    StringLiteral: ArrayE***REMOVED***pression | ArrowFunctionE***REMOVED***pression | AssignmentE***REMOVED***pression | AssignmentPattern | AwaitE***REMOVED***pression | BinaryE***REMOVED***pression | BindE***REMOVED***pression | CallE***REMOVED***pression | ClassAccessorProperty | ClassDeclaration | ClassE***REMOVED***pression | ClassMethod | ClassPrivateProperty | ClassProperty | ConditionalE***REMOVED***pression | DeclareE***REMOVED***portAllDeclaration | DeclareE***REMOVED***portDeclaration | DeclareModule | Decorator | DoWhileStatement | EnumStringMember | E***REMOVED***portAllDeclaration | E***REMOVED***portDefaultDeclaration | E***REMOVED***portNamedDeclaration | E***REMOVED***portSpecifier | E***REMOVED***pressionStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | ImportAttribute | ImportDeclaration | ImportE***REMOVED***pression | ImportSpecifier | JSXAttribute | JSXE***REMOVED***pressionContainer | JSXSpreadAttribute | JSXSpreadChild | LogicalE***REMOVED***pression | MemberE***REMOVED***pression | NewE***REMOVED***pression | ObjectMethod | ObjectProperty | ObjectTypeProperty | OptionalCallE***REMOVED***pression | OptionalMemberE***REMOVED***pression | ParenthesizedE***REMOVED***pression | PipelineBareFunction | PipelineTopicE***REMOVED***pression | ReturnStatement | SequenceE***REMOVED***pression | SpreadElement | SwitchCase | SwitchStatement | TSAsE***REMOVED***pression | TSDeclareMethod | TSEnumDeclaration | TSEnumMember | TSE***REMOVED***portAssignment | TSE***REMOVED***ternalModuleReference | TSImportType | TSInstantiationE***REMOVED***pression | TSLiteralType | TSMethodSignature | TSModuleDeclaration | TSNonNullE***REMOVED***pression | TSPropertySignature | TSSatisfiesE***REMOVED***pression | TSTypeAssertion | TaggedTemplateE***REMOVED***pression | TemplateLiteral | ThrowStatement | TupleE***REMOVED***pression | TypeCastE***REMOVED***pression | UnaryE***REMOVED***pression | UpdateE***REMOVED***pression | VariableDeclarator | WhileStatement | WithStatement | YieldE***REMOVED***pression;
    StringLiteralTypeAnnotation: ArrayTypeAnnotation | DeclareE***REMOVED***portDeclaration | DeclareOpaqueType | DeclareTypeAlias | DeclaredPredicate | FunctionTypeAnnotation | FunctionTypeParam | Inde***REMOVED***edAccessType | IntersectionTypeAnnotation | NullableTypeAnnotation | ObjectTypeCallProperty | ObjectTypeInde***REMOVED***er | ObjectTypeInternalSlot | ObjectTypeProperty | ObjectTypeSpreadProperty | OpaqueType | OptionalInde***REMOVED***edAccessType | TupleTypeAnnotation | TypeAlias | TypeAnnotation | TypeParameter | TypeParameterInstantiation | TypeofTypeAnnotation | UnionTypeAnnotation;
    StringTypeAnnotation: ArrayTypeAnnotation | DeclareE***REMOVED***portDeclaration | DeclareOpaqueType | DeclareTypeAlias | DeclaredPredicate | FunctionTypeAnnotation | FunctionTypeParam | Inde***REMOVED***edAccessType | IntersectionTypeAnnotation | NullableTypeAnnotation | ObjectTypeCallProperty | ObjectTypeInde***REMOVED***er | ObjectTypeInternalSlot | ObjectTypeProperty | ObjectTypeSpreadProperty | OpaqueType | OptionalInde***REMOVED***edAccessType | TupleTypeAnnotation | TypeAlias | TypeAnnotation | TypeParameter | TypeParameterInstantiation | TypeofTypeAnnotation | UnionTypeAnnotation;
    Super: ArrayE***REMOVED***pression | ArrowFunctionE***REMOVED***pression | AssignmentE***REMOVED***pression | AssignmentPattern | AwaitE***REMOVED***pression | BinaryE***REMOVED***pression | BindE***REMOVED***pression | CallE***REMOVED***pression | ClassAccessorProperty | ClassDeclaration | ClassE***REMOVED***pression | ClassMethod | ClassPrivateProperty | ClassProperty | ConditionalE***REMOVED***pression | Decorator | DoWhileStatement | E***REMOVED***portDefaultDeclaration | E***REMOVED***pressionStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | ImportE***REMOVED***pression | JSXE***REMOVED***pressionContainer | JSXSpreadAttribute | JSXSpreadChild | LogicalE***REMOVED***pression | MemberE***REMOVED***pression | NewE***REMOVED***pression | ObjectMethod | ObjectProperty | OptionalCallE***REMOVED***pression | OptionalMemberE***REMOVED***pression | ParenthesizedE***REMOVED***pression | PipelineBareFunction | PipelineTopicE***REMOVED***pression | ReturnStatement | SequenceE***REMOVED***pression | SpreadElement | SwitchCase | SwitchStatement | TSAsE***REMOVED***pression | TSDeclareMethod | TSEnumDeclaration | TSEnumMember | TSE***REMOVED***portAssignment | TSImportType | TSInstantiationE***REMOVED***pression | TSMethodSignature | TSNonNullE***REMOVED***pression | TSPropertySignature | TSSatisfiesE***REMOVED***pression | TSTypeAssertion | TaggedTemplateE***REMOVED***pression | TemplateLiteral | ThrowStatement | TupleE***REMOVED***pression | TypeCastE***REMOVED***pression | UnaryE***REMOVED***pression | UpdateE***REMOVED***pression | VariableDeclarator | WhileStatement | WithStatement | YieldE***REMOVED***pression;
    SwitchCase: SwitchStatement;
    SwitchStatement: BlockStatement | DoWhileStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | LabeledStatement | Program | StaticBlock | SwitchCase | TSModuleBlock | WhileStatement | WithStatement;
    SymbolTypeAnnotation: ArrayTypeAnnotation | DeclareE***REMOVED***portDeclaration | DeclareOpaqueType | DeclareTypeAlias | DeclaredPredicate | FunctionTypeAnnotation | FunctionTypeParam | Inde***REMOVED***edAccessType | IntersectionTypeAnnotation | NullableTypeAnnotation | ObjectTypeCallProperty | ObjectTypeInde***REMOVED***er | ObjectTypeInternalSlot | ObjectTypeProperty | ObjectTypeSpreadProperty | OpaqueType | OptionalInde***REMOVED***edAccessType | TupleTypeAnnotation | TypeAlias | TypeAnnotation | TypeParameter | TypeParameterInstantiation | TypeofTypeAnnotation | UnionTypeAnnotation;
    TSAnyKeyword: TSArrayType | TSAsE***REMOVED***pression | TSConditionalType | TSInde***REMOVED***edAccessType | TSIntersectionType | TSMappedType | TSNamedTupleMember | TSOptionalType | TSParenthesizedType | TSRestType | TSSatisfiesE***REMOVED***pression | TSTupleType | TSTypeAliasDeclaration | TSTypeAnnotation | TSTypeAssertion | TSTypeOperator | TSTypeParameter | TSTypeParameterInstantiation | TSUnionType | TemplateLiteral;
    TSArrayType: TSArrayType | TSAsE***REMOVED***pression | TSConditionalType | TSInde***REMOVED***edAccessType | TSIntersectionType | TSMappedType | TSNamedTupleMember | TSOptionalType | TSParenthesizedType | TSRestType | TSSatisfiesE***REMOVED***pression | TSTupleType | TSTypeAliasDeclaration | TSTypeAnnotation | TSTypeAssertion | TSTypeOperator | TSTypeParameter | TSTypeParameterInstantiation | TSUnionType | TemplateLiteral;
    TSAsE***REMOVED***pression: ArrayE***REMOVED***pression | ArrayPattern | ArrowFunctionE***REMOVED***pression | AssignmentE***REMOVED***pression | AssignmentPattern | AwaitE***REMOVED***pression | BinaryE***REMOVED***pression | BindE***REMOVED***pression | CallE***REMOVED***pression | ClassAccessorProperty | ClassDeclaration | ClassE***REMOVED***pression | ClassMethod | ClassPrivateProperty | ClassProperty | ConditionalE***REMOVED***pression | Decorator | DoWhileStatement | E***REMOVED***portDefaultDeclaration | E***REMOVED***pressionStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | ImportE***REMOVED***pression | JSXE***REMOVED***pressionContainer | JSXSpreadAttribute | JSXSpreadChild | LogicalE***REMOVED***pression | MemberE***REMOVED***pression | NewE***REMOVED***pression | ObjectMethod | ObjectProperty | OptionalCallE***REMOVED***pression | OptionalMemberE***REMOVED***pression | ParenthesizedE***REMOVED***pression | PipelineBareFunction | PipelineTopicE***REMOVED***pression | RestElement | ReturnStatement | SequenceE***REMOVED***pression | SpreadElement | SwitchCase | SwitchStatement | TSAsE***REMOVED***pression | TSDeclareMethod | TSEnumDeclaration | TSEnumMember | TSE***REMOVED***portAssignment | TSImportType | TSInstantiationE***REMOVED***pression | TSMethodSignature | TSNonNullE***REMOVED***pression | TSPropertySignature | TSSatisfiesE***REMOVED***pression | TSTypeAssertion | TaggedTemplateE***REMOVED***pression | TemplateLiteral | ThrowStatement | TupleE***REMOVED***pression | TypeCastE***REMOVED***pression | UnaryE***REMOVED***pression | UpdateE***REMOVED***pression | VariableDeclarator | WhileStatement | WithStatement | YieldE***REMOVED***pression;
    TSBigIntKeyword: TSArrayType | TSAsE***REMOVED***pression | TSConditionalType | TSInde***REMOVED***edAccessType | TSIntersectionType | TSMappedType | TSNamedTupleMember | TSOptionalType | TSParenthesizedType | TSRestType | TSSatisfiesE***REMOVED***pression | TSTupleType | TSTypeAliasDeclaration | TSTypeAnnotation | TSTypeAssertion | TSTypeOperator | TSTypeParameter | TSTypeParameterInstantiation | TSUnionType | TemplateLiteral;
    TSBooleanKeyword: TSArrayType | TSAsE***REMOVED***pression | TSConditionalType | TSInde***REMOVED***edAccessType | TSIntersectionType | TSMappedType | TSNamedTupleMember | TSOptionalType | TSParenthesizedType | TSRestType | TSSatisfiesE***REMOVED***pression | TSTupleType | TSTypeAliasDeclaration | TSTypeAnnotation | TSTypeAssertion | TSTypeOperator | TSTypeParameter | TSTypeParameterInstantiation | TSUnionType | TemplateLiteral;
    TSCallSignatureDeclaration: TSInterfaceBody | TSTypeLiteral;
    TSConditionalType: TSArrayType | TSAsE***REMOVED***pression | TSConditionalType | TSInde***REMOVED***edAccessType | TSIntersectionType | TSMappedType | TSNamedTupleMember | TSOptionalType | TSParenthesizedType | TSRestType | TSSatisfiesE***REMOVED***pression | TSTupleType | TSTypeAliasDeclaration | TSTypeAnnotation | TSTypeAssertion | TSTypeOperator | TSTypeParameter | TSTypeParameterInstantiation | TSUnionType | TemplateLiteral;
    TSConstructSignatureDeclaration: TSInterfaceBody | TSTypeLiteral;
    TSConstructorType: TSArrayType | TSAsE***REMOVED***pression | TSConditionalType | TSInde***REMOVED***edAccessType | TSIntersectionType | TSMappedType | TSNamedTupleMember | TSOptionalType | TSParenthesizedType | TSRestType | TSSatisfiesE***REMOVED***pression | TSTupleType | TSTypeAliasDeclaration | TSTypeAnnotation | TSTypeAssertion | TSTypeOperator | TSTypeParameter | TSTypeParameterInstantiation | TSUnionType | TemplateLiteral;
    TSDeclareFunction: BlockStatement | DoWhileStatement | E***REMOVED***portDefaultDeclaration | E***REMOVED***portNamedDeclaration | ForInStatement | ForOfStatement | ForStatement | IfStatement | LabeledStatement | Program | StaticBlock | SwitchCase | TSModuleBlock | WhileStatement | WithStatement;
    TSDeclareMethod: ClassBody;
    TSEnumDeclaration: BlockStatement | DoWhileStatement | E***REMOVED***portNamedDeclaration | ForInStatement | ForOfStatement | ForStatement | IfStatement | LabeledStatement | Program | StaticBlock | SwitchCase | TSModuleBlock | WhileStatement | WithStatement;
    TSEnumMember: TSEnumDeclaration;
    TSE***REMOVED***portAssignment: BlockStatement | DoWhileStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | LabeledStatement | Program | StaticBlock | SwitchCase | TSModuleBlock | WhileStatement | WithStatement;
    TSE***REMOVED***pressionWithTypeArguments: ClassDeclaration | ClassE***REMOVED***pression | TSArrayType | TSAsE***REMOVED***pression | TSConditionalType | TSInde***REMOVED***edAccessType | TSInterfaceDeclaration | TSIntersectionType | TSMappedType | TSNamedTupleMember | TSOptionalType | TSParenthesizedType | TSRestType | TSSatisfiesE***REMOVED***pression | TSTupleType | TSTypeAliasDeclaration | TSTypeAnnotation | TSTypeAssertion | TSTypeOperator | TSTypeParameter | TSTypeParameterInstantiation | TSUnionType | TemplateLiteral;
    TSE***REMOVED***ternalModuleReference: TSImportEqualsDeclaration;
    TSFunctionType: TSArrayType | TSAsE***REMOVED***pression | TSConditionalType | TSInde***REMOVED***edAccessType | TSIntersectionType | TSMappedType | TSNamedTupleMember | TSOptionalType | TSParenthesizedType | TSRestType | TSSatisfiesE***REMOVED***pression | TSTupleType | TSTypeAliasDeclaration | TSTypeAnnotation | TSTypeAssertion | TSTypeOperator | TSTypeParameter | TSTypeParameterInstantiation | TSUnionType | TemplateLiteral;
    TSImportEqualsDeclaration: BlockStatement | DoWhileStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | LabeledStatement | Program | StaticBlock | SwitchCase | TSModuleBlock | WhileStatement | WithStatement;
    TSImportType: TSArrayType | TSAsE***REMOVED***pression | TSConditionalType | TSInde***REMOVED***edAccessType | TSIntersectionType | TSMappedType | TSNamedTupleMember | TSOptionalType | TSParenthesizedType | TSRestType | TSSatisfiesE***REMOVED***pression | TSTupleType | TSTypeAliasDeclaration | TSTypeAnnotation | TSTypeAssertion | TSTypeOperator | TSTypeParameter | TSTypeParameterInstantiation | TSTypeQuery | TSUnionType | TemplateLiteral;
    TSInde***REMOVED***Signature: ClassBody | TSInterfaceBody | TSTypeLiteral;
    TSInde***REMOVED***edAccessType: TSArrayType | TSAsE***REMOVED***pression | TSConditionalType | TSInde***REMOVED***edAccessType | TSIntersectionType | TSMappedType | TSNamedTupleMember | TSOptionalType | TSParenthesizedType | TSRestType | TSSatisfiesE***REMOVED***pression | TSTupleType | TSTypeAliasDeclaration | TSTypeAnnotation | TSTypeAssertion | TSTypeOperator | TSTypeParameter | TSTypeParameterInstantiation | TSUnionType | TemplateLiteral;
    TSInferType: TSArrayType | TSAsE***REMOVED***pression | TSConditionalType | TSInde***REMOVED***edAccessType | TSIntersectionType | TSMappedType | TSNamedTupleMember | TSOptionalType | TSParenthesizedType | TSRestType | TSSatisfiesE***REMOVED***pression | TSTupleType | TSTypeAliasDeclaration | TSTypeAnnotation | TSTypeAssertion | TSTypeOperator | TSTypeParameter | TSTypeParameterInstantiation | TSUnionType | TemplateLiteral;
    TSInstantiationE***REMOVED***pression: ArrayE***REMOVED***pression | ArrowFunctionE***REMOVED***pression | AssignmentE***REMOVED***pression | AssignmentPattern | AwaitE***REMOVED***pression | BinaryE***REMOVED***pression | BindE***REMOVED***pression | CallE***REMOVED***pression | ClassAccessorProperty | ClassDeclaration | ClassE***REMOVED***pression | ClassMethod | ClassPrivateProperty | ClassProperty | ConditionalE***REMOVED***pression | Decorator | DoWhileStatement | E***REMOVED***portDefaultDeclaration | E***REMOVED***pressionStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | ImportE***REMOVED***pression | JSXE***REMOVED***pressionContainer | JSXSpreadAttribute | JSXSpreadChild | LogicalE***REMOVED***pression | MemberE***REMOVED***pression | NewE***REMOVED***pression | ObjectMethod | ObjectProperty | OptionalCallE***REMOVED***pression | OptionalMemberE***REMOVED***pression | ParenthesizedE***REMOVED***pression | PipelineBareFunction | PipelineTopicE***REMOVED***pression | ReturnStatement | SequenceE***REMOVED***pression | SpreadElement | SwitchCase | SwitchStatement | TSAsE***REMOVED***pression | TSDeclareMethod | TSEnumDeclaration | TSEnumMember | TSE***REMOVED***portAssignment | TSImportType | TSInstantiationE***REMOVED***pression | TSMethodSignature | TSNonNullE***REMOVED***pression | TSPropertySignature | TSSatisfiesE***REMOVED***pression | TSTypeAssertion | TaggedTemplateE***REMOVED***pression | TemplateLiteral | ThrowStatement | TupleE***REMOVED***pression | TypeCastE***REMOVED***pression | UnaryE***REMOVED***pression | UpdateE***REMOVED***pression | VariableDeclarator | WhileStatement | WithStatement | YieldE***REMOVED***pression;
    TSInterfaceBody: TSInterfaceDeclaration;
    TSInterfaceDeclaration: BlockStatement | DoWhileStatement | E***REMOVED***portNamedDeclaration | ForInStatement | ForOfStatement | ForStatement | IfStatement | LabeledStatement | Program | StaticBlock | SwitchCase | TSModuleBlock | WhileStatement | WithStatement;
    TSIntersectionType: TSArrayType | TSAsE***REMOVED***pression | TSConditionalType | TSInde***REMOVED***edAccessType | TSIntersectionType | TSMappedType | TSNamedTupleMember | TSOptionalType | TSParenthesizedType | TSRestType | TSSatisfiesE***REMOVED***pression | TSTupleType | TSTypeAliasDeclaration | TSTypeAnnotation | TSTypeAssertion | TSTypeOperator | TSTypeParameter | TSTypeParameterInstantiation | TSUnionType | TemplateLiteral;
    TSIntrinsicKeyword: TSArrayType | TSAsE***REMOVED***pression | TSConditionalType | TSInde***REMOVED***edAccessType | TSIntersectionType | TSMappedType | TSNamedTupleMember | TSOptionalType | TSParenthesizedType | TSRestType | TSSatisfiesE***REMOVED***pression | TSTupleType | TSTypeAliasDeclaration | TSTypeAnnotation | TSTypeAssertion | TSTypeOperator | TSTypeParameter | TSTypeParameterInstantiation | TSUnionType | TemplateLiteral;
    TSLiteralType: TSArrayType | TSAsE***REMOVED***pression | TSConditionalType | TSInde***REMOVED***edAccessType | TSIntersectionType | TSMappedType | TSNamedTupleMember | TSOptionalType | TSParenthesizedType | TSRestType | TSSatisfiesE***REMOVED***pression | TSTupleType | TSTypeAliasDeclaration | TSTypeAnnotation | TSTypeAssertion | TSTypeOperator | TSTypeParameter | TSTypeParameterInstantiation | TSUnionType | TemplateLiteral;
    TSMappedType: TSArrayType | TSAsE***REMOVED***pression | TSConditionalType | TSInde***REMOVED***edAccessType | TSIntersectionType | TSMappedType | TSNamedTupleMember | TSOptionalType | TSParenthesizedType | TSRestType | TSSatisfiesE***REMOVED***pression | TSTupleType | TSTypeAliasDeclaration | TSTypeAnnotation | TSTypeAssertion | TSTypeOperator | TSTypeParameter | TSTypeParameterInstantiation | TSUnionType | TemplateLiteral;
    TSMethodSignature: TSInterfaceBody | TSTypeLiteral;
    TSModuleBlock: TSModuleDeclaration;
    TSModuleDeclaration: BlockStatement | DoWhileStatement | E***REMOVED***portNamedDeclaration | ForInStatement | ForOfStatement | ForStatement | IfStatement | LabeledStatement | Program | StaticBlock | SwitchCase | TSModuleBlock | TSModuleDeclaration | WhileStatement | WithStatement;
    TSNamedTupleMember: TSTupleType;
    TSNamespaceE***REMOVED***portDeclaration: BlockStatement | DoWhileStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | LabeledStatement | Program | StaticBlock | SwitchCase | TSModuleBlock | WhileStatement | WithStatement;
    TSNeverKeyword: TSArrayType | TSAsE***REMOVED***pression | TSConditionalType | TSInde***REMOVED***edAccessType | TSIntersectionType | TSMappedType | TSNamedTupleMember | TSOptionalType | TSParenthesizedType | TSRestType | TSSatisfiesE***REMOVED***pression | TSTupleType | TSTypeAliasDeclaration | TSTypeAnnotation | TSTypeAssertion | TSTypeOperator | TSTypeParameter | TSTypeParameterInstantiation | TSUnionType | TemplateLiteral;
    TSNonNullE***REMOVED***pression: ArrayE***REMOVED***pression | ArrayPattern | ArrowFunctionE***REMOVED***pression | AssignmentE***REMOVED***pression | AssignmentPattern | AwaitE***REMOVED***pression | BinaryE***REMOVED***pression | BindE***REMOVED***pression | CallE***REMOVED***pression | ClassAccessorProperty | ClassDeclaration | ClassE***REMOVED***pression | ClassMethod | ClassPrivateProperty | ClassProperty | ConditionalE***REMOVED***pression | Decorator | DoWhileStatement | E***REMOVED***portDefaultDeclaration | E***REMOVED***pressionStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | ImportE***REMOVED***pression | JSXE***REMOVED***pressionContainer | JSXSpreadAttribute | JSXSpreadChild | LogicalE***REMOVED***pression | MemberE***REMOVED***pression | NewE***REMOVED***pression | ObjectMethod | ObjectProperty | OptionalCallE***REMOVED***pression | OptionalMemberE***REMOVED***pression | ParenthesizedE***REMOVED***pression | PipelineBareFunction | PipelineTopicE***REMOVED***pression | RestElement | ReturnStatement | SequenceE***REMOVED***pression | SpreadElement | SwitchCase | SwitchStatement | TSAsE***REMOVED***pression | TSDeclareMethod | TSEnumDeclaration | TSEnumMember | TSE***REMOVED***portAssignment | TSImportType | TSInstantiationE***REMOVED***pression | TSMethodSignature | TSNonNullE***REMOVED***pression | TSPropertySignature | TSSatisfiesE***REMOVED***pression | TSTypeAssertion | TaggedTemplateE***REMOVED***pression | TemplateLiteral | ThrowStatement | TupleE***REMOVED***pression | TypeCastE***REMOVED***pression | UnaryE***REMOVED***pression | UpdateE***REMOVED***pression | VariableDeclarator | WhileStatement | WithStatement | YieldE***REMOVED***pression;
    TSNullKeyword: TSArrayType | TSAsE***REMOVED***pression | TSConditionalType | TSInde***REMOVED***edAccessType | TSIntersectionType | TSMappedType | TSNamedTupleMember | TSOptionalType | TSParenthesizedType | TSRestType | TSSatisfiesE***REMOVED***pression | TSTupleType | TSTypeAliasDeclaration | TSTypeAnnotation | TSTypeAssertion | TSTypeOperator | TSTypeParameter | TSTypeParameterInstantiation | TSUnionType | TemplateLiteral;
    TSNumberKeyword: TSArrayType | TSAsE***REMOVED***pression | TSConditionalType | TSInde***REMOVED***edAccessType | TSIntersectionType | TSMappedType | TSNamedTupleMember | TSOptionalType | TSParenthesizedType | TSRestType | TSSatisfiesE***REMOVED***pression | TSTupleType | TSTypeAliasDeclaration | TSTypeAnnotation | TSTypeAssertion | TSTypeOperator | TSTypeParameter | TSTypeParameterInstantiation | TSUnionType | TemplateLiteral;
    TSObjectKeyword: TSArrayType | TSAsE***REMOVED***pression | TSConditionalType | TSInde***REMOVED***edAccessType | TSIntersectionType | TSMappedType | TSNamedTupleMember | TSOptionalType | TSParenthesizedType | TSRestType | TSSatisfiesE***REMOVED***pression | TSTupleType | TSTypeAliasDeclaration | TSTypeAnnotation | TSTypeAssertion | TSTypeOperator | TSTypeParameter | TSTypeParameterInstantiation | TSUnionType | TemplateLiteral;
    TSOptionalType: TSArrayType | TSAsE***REMOVED***pression | TSConditionalType | TSInde***REMOVED***edAccessType | TSIntersectionType | TSMappedType | TSNamedTupleMember | TSOptionalType | TSParenthesizedType | TSRestType | TSSatisfiesE***REMOVED***pression | TSTupleType | TSTypeAliasDeclaration | TSTypeAnnotation | TSTypeAssertion | TSTypeOperator | TSTypeParameter | TSTypeParameterInstantiation | TSUnionType | TemplateLiteral;
    TSParameterProperty: ArrayPattern | AssignmentE***REMOVED***pression | ClassMethod | ClassPrivateMethod | ForInStatement | ForOfStatement | RestElement | TSDeclareMethod | VariableDeclarator;
    TSParenthesizedType: TSArrayType | TSAsE***REMOVED***pression | TSConditionalType | TSInde***REMOVED***edAccessType | TSIntersectionType | TSMappedType | TSNamedTupleMember | TSOptionalType | TSParenthesizedType | TSRestType | TSSatisfiesE***REMOVED***pression | TSTupleType | TSTypeAliasDeclaration | TSTypeAnnotation | TSTypeAssertion | TSTypeOperator | TSTypeParameter | TSTypeParameterInstantiation | TSUnionType | TemplateLiteral;
    TSPropertySignature: TSInterfaceBody | TSTypeLiteral;
    TSQualifiedName: TSE***REMOVED***pressionWithTypeArguments | TSImportEqualsDeclaration | TSImportType | TSQualifiedName | TSTypeQuery | TSTypeReference;
    TSRestType: TSArrayType | TSAsE***REMOVED***pression | TSConditionalType | TSInde***REMOVED***edAccessType | TSIntersectionType | TSMappedType | TSNamedTupleMember | TSOptionalType | TSParenthesizedType | TSRestType | TSSatisfiesE***REMOVED***pression | TSTupleType | TSTypeAliasDeclaration | TSTypeAnnotation | TSTypeAssertion | TSTypeOperator | TSTypeParameter | TSTypeParameterInstantiation | TSUnionType | TemplateLiteral;
    TSSatisfiesE***REMOVED***pression: ArrayE***REMOVED***pression | ArrayPattern | ArrowFunctionE***REMOVED***pression | AssignmentE***REMOVED***pression | AssignmentPattern | AwaitE***REMOVED***pression | BinaryE***REMOVED***pression | BindE***REMOVED***pression | CallE***REMOVED***pression | ClassAccessorProperty | ClassDeclaration | ClassE***REMOVED***pression | ClassMethod | ClassPrivateProperty | ClassProperty | ConditionalE***REMOVED***pression | Decorator | DoWhileStatement | E***REMOVED***portDefaultDeclaration | E***REMOVED***pressionStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | ImportE***REMOVED***pression | JSXE***REMOVED***pressionContainer | JSXSpreadAttribute | JSXSpreadChild | LogicalE***REMOVED***pression | MemberE***REMOVED***pression | NewE***REMOVED***pression | ObjectMethod | ObjectProperty | OptionalCallE***REMOVED***pression | OptionalMemberE***REMOVED***pression | ParenthesizedE***REMOVED***pression | PipelineBareFunction | PipelineTopicE***REMOVED***pression | RestElement | ReturnStatement | SequenceE***REMOVED***pression | SpreadElement | SwitchCase | SwitchStatement | TSAsE***REMOVED***pression | TSDeclareMethod | TSEnumDeclaration | TSEnumMember | TSE***REMOVED***portAssignment | TSImportType | TSInstantiationE***REMOVED***pression | TSMethodSignature | TSNonNullE***REMOVED***pression | TSPropertySignature | TSSatisfiesE***REMOVED***pression | TSTypeAssertion | TaggedTemplateE***REMOVED***pression | TemplateLiteral | ThrowStatement | TupleE***REMOVED***pression | TypeCastE***REMOVED***pression | UnaryE***REMOVED***pression | UpdateE***REMOVED***pression | VariableDeclarator | WhileStatement | WithStatement | YieldE***REMOVED***pression;
    TSStringKeyword: TSArrayType | TSAsE***REMOVED***pression | TSConditionalType | TSInde***REMOVED***edAccessType | TSIntersectionType | TSMappedType | TSNamedTupleMember | TSOptionalType | TSParenthesizedType | TSRestType | TSSatisfiesE***REMOVED***pression | TSTupleType | TSTypeAliasDeclaration | TSTypeAnnotation | TSTypeAssertion | TSTypeOperator | TSTypeParameter | TSTypeParameterInstantiation | TSUnionType | TemplateLiteral;
    TSSymbolKeyword: TSArrayType | TSAsE***REMOVED***pression | TSConditionalType | TSInde***REMOVED***edAccessType | TSIntersectionType | TSMappedType | TSNamedTupleMember | TSOptionalType | TSParenthesizedType | TSRestType | TSSatisfiesE***REMOVED***pression | TSTupleType | TSTypeAliasDeclaration | TSTypeAnnotation | TSTypeAssertion | TSTypeOperator | TSTypeParameter | TSTypeParameterInstantiation | TSUnionType | TemplateLiteral;
    TSThisType: TSArrayType | TSAsE***REMOVED***pression | TSConditionalType | TSInde***REMOVED***edAccessType | TSIntersectionType | TSMappedType | TSNamedTupleMember | TSOptionalType | TSParenthesizedType | TSRestType | TSSatisfiesE***REMOVED***pression | TSTupleType | TSTypeAliasDeclaration | TSTypeAnnotation | TSTypeAssertion | TSTypeOperator | TSTypeParameter | TSTypeParameterInstantiation | TSTypePredicate | TSUnionType | TemplateLiteral;
    TSTupleType: TSArrayType | TSAsE***REMOVED***pression | TSConditionalType | TSInde***REMOVED***edAccessType | TSIntersectionType | TSMappedType | TSNamedTupleMember | TSOptionalType | TSParenthesizedType | TSRestType | TSSatisfiesE***REMOVED***pression | TSTupleType | TSTypeAliasDeclaration | TSTypeAnnotation | TSTypeAssertion | TSTypeOperator | TSTypeParameter | TSTypeParameterInstantiation | TSUnionType | TemplateLiteral;
    TSTypeAliasDeclaration: BlockStatement | DoWhileStatement | E***REMOVED***portNamedDeclaration | ForInStatement | ForOfStatement | ForStatement | IfStatement | LabeledStatement | Program | StaticBlock | SwitchCase | TSModuleBlock | WhileStatement | WithStatement;
    TSTypeAnnotation: ArrayPattern | ArrowFunctionE***REMOVED***pression | AssignmentPattern | ClassAccessorProperty | ClassMethod | ClassPrivateMethod | ClassPrivateProperty | ClassProperty | FunctionDeclaration | FunctionE***REMOVED***pression | Identifier | ObjectMethod | ObjectPattern | Placeholder | RestElement | TSCallSignatureDeclaration | TSConstructSignatureDeclaration | TSConstructorType | TSDeclareFunction | TSDeclareMethod | TSFunctionType | TSInde***REMOVED***Signature | TSMethodSignature | TSPropertySignature | TSTypePredicate;
    TSTypeAssertion: ArrayE***REMOVED***pression | ArrayPattern | ArrowFunctionE***REMOVED***pression | AssignmentE***REMOVED***pression | AssignmentPattern | AwaitE***REMOVED***pression | BinaryE***REMOVED***pression | BindE***REMOVED***pression | CallE***REMOVED***pression | ClassAccessorProperty | ClassDeclaration | ClassE***REMOVED***pression | ClassMethod | ClassPrivateProperty | ClassProperty | ConditionalE***REMOVED***pression | Decorator | DoWhileStatement | E***REMOVED***portDefaultDeclaration | E***REMOVED***pressionStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | ImportE***REMOVED***pression | JSXE***REMOVED***pressionContainer | JSXSpreadAttribute | JSXSpreadChild | LogicalE***REMOVED***pression | MemberE***REMOVED***pression | NewE***REMOVED***pression | ObjectMethod | ObjectProperty | OptionalCallE***REMOVED***pression | OptionalMemberE***REMOVED***pression | ParenthesizedE***REMOVED***pression | PipelineBareFunction | PipelineTopicE***REMOVED***pression | RestElement | ReturnStatement | SequenceE***REMOVED***pression | SpreadElement | SwitchCase | SwitchStatement | TSAsE***REMOVED***pression | TSDeclareMethod | TSEnumDeclaration | TSEnumMember | TSE***REMOVED***portAssignment | TSImportType | TSInstantiationE***REMOVED***pression | TSMethodSignature | TSNonNullE***REMOVED***pression | TSPropertySignature | TSSatisfiesE***REMOVED***pression | TSTypeAssertion | TaggedTemplateE***REMOVED***pression | TemplateLiteral | ThrowStatement | TupleE***REMOVED***pression | TypeCastE***REMOVED***pression | UnaryE***REMOVED***pression | UpdateE***REMOVED***pression | VariableDeclarator | WhileStatement | WithStatement | YieldE***REMOVED***pression;
    TSTypeLiteral: TSArrayType | TSAsE***REMOVED***pression | TSConditionalType | TSInde***REMOVED***edAccessType | TSIntersectionType | TSMappedType | TSNamedTupleMember | TSOptionalType | TSParenthesizedType | TSRestType | TSSatisfiesE***REMOVED***pression | TSTupleType | TSTypeAliasDeclaration | TSTypeAnnotation | TSTypeAssertion | TSTypeOperator | TSTypeParameter | TSTypeParameterInstantiation | TSUnionType | TemplateLiteral;
    TSTypeOperator: TSArrayType | TSAsE***REMOVED***pression | TSConditionalType | TSInde***REMOVED***edAccessType | TSIntersectionType | TSMappedType | TSNamedTupleMember | TSOptionalType | TSParenthesizedType | TSRestType | TSSatisfiesE***REMOVED***pression | TSTupleType | TSTypeAliasDeclaration | TSTypeAnnotation | TSTypeAssertion | TSTypeOperator | TSTypeParameter | TSTypeParameterInstantiation | TSUnionType | TemplateLiteral;
    TSTypeParameter: TSInferType | TSMappedType | TSTypeParameterDeclaration;
    TSTypeParameterDeclaration: ArrowFunctionE***REMOVED***pression | ClassDeclaration | ClassE***REMOVED***pression | ClassMethod | ClassPrivateMethod | FunctionDeclaration | FunctionE***REMOVED***pression | ObjectMethod | TSCallSignatureDeclaration | TSConstructSignatureDeclaration | TSConstructorType | TSDeclareFunction | TSDeclareMethod | TSFunctionType | TSInterfaceDeclaration | TSMethodSignature | TSTypeAliasDeclaration;
    TSTypeParameterInstantiation: CallE***REMOVED***pression | ClassDeclaration | ClassE***REMOVED***pression | JSXOpeningElement | NewE***REMOVED***pression | OptionalCallE***REMOVED***pression | TSE***REMOVED***pressionWithTypeArguments | TSImportType | TSInstantiationE***REMOVED***pression | TSTypeQuery | TSTypeReference | TaggedTemplateE***REMOVED***pression;
    TSTypePredicate: TSArrayType | TSAsE***REMOVED***pression | TSConditionalType | TSInde***REMOVED***edAccessType | TSIntersectionType | TSMappedType | TSNamedTupleMember | TSOptionalType | TSParenthesizedType | TSRestType | TSSatisfiesE***REMOVED***pression | TSTupleType | TSTypeAliasDeclaration | TSTypeAnnotation | TSTypeAssertion | TSTypeOperator | TSTypeParameter | TSTypeParameterInstantiation | TSUnionType | TemplateLiteral;
    TSTypeQuery: TSArrayType | TSAsE***REMOVED***pression | TSConditionalType | TSInde***REMOVED***edAccessType | TSIntersectionType | TSMappedType | TSNamedTupleMember | TSOptionalType | TSParenthesizedType | TSRestType | TSSatisfiesE***REMOVED***pression | TSTupleType | TSTypeAliasDeclaration | TSTypeAnnotation | TSTypeAssertion | TSTypeOperator | TSTypeParameter | TSTypeParameterInstantiation | TSUnionType | TemplateLiteral;
    TSTypeReference: TSArrayType | TSAsE***REMOVED***pression | TSConditionalType | TSInde***REMOVED***edAccessType | TSIntersectionType | TSMappedType | TSNamedTupleMember | TSOptionalType | TSParenthesizedType | TSRestType | TSSatisfiesE***REMOVED***pression | TSTupleType | TSTypeAliasDeclaration | TSTypeAnnotation | TSTypeAssertion | TSTypeOperator | TSTypeParameter | TSTypeParameterInstantiation | TSUnionType | TemplateLiteral;
    TSUndefinedKeyword: TSArrayType | TSAsE***REMOVED***pression | TSConditionalType | TSInde***REMOVED***edAccessType | TSIntersectionType | TSMappedType | TSNamedTupleMember | TSOptionalType | TSParenthesizedType | TSRestType | TSSatisfiesE***REMOVED***pression | TSTupleType | TSTypeAliasDeclaration | TSTypeAnnotation | TSTypeAssertion | TSTypeOperator | TSTypeParameter | TSTypeParameterInstantiation | TSUnionType | TemplateLiteral;
    TSUnionType: TSArrayType | TSAsE***REMOVED***pression | TSConditionalType | TSInde***REMOVED***edAccessType | TSIntersectionType | TSMappedType | TSNamedTupleMember | TSOptionalType | TSParenthesizedType | TSRestType | TSSatisfiesE***REMOVED***pression | TSTupleType | TSTypeAliasDeclaration | TSTypeAnnotation | TSTypeAssertion | TSTypeOperator | TSTypeParameter | TSTypeParameterInstantiation | TSUnionType | TemplateLiteral;
    TSUnknownKeyword: TSArrayType | TSAsE***REMOVED***pression | TSConditionalType | TSInde***REMOVED***edAccessType | TSIntersectionType | TSMappedType | TSNamedTupleMember | TSOptionalType | TSParenthesizedType | TSRestType | TSSatisfiesE***REMOVED***pression | TSTupleType | TSTypeAliasDeclaration | TSTypeAnnotation | TSTypeAssertion | TSTypeOperator | TSTypeParameter | TSTypeParameterInstantiation | TSUnionType | TemplateLiteral;
    TSVoidKeyword: TSArrayType | TSAsE***REMOVED***pression | TSConditionalType | TSInde***REMOVED***edAccessType | TSIntersectionType | TSMappedType | TSNamedTupleMember | TSOptionalType | TSParenthesizedType | TSRestType | TSSatisfiesE***REMOVED***pression | TSTupleType | TSTypeAliasDeclaration | TSTypeAnnotation | TSTypeAssertion | TSTypeOperator | TSTypeParameter | TSTypeParameterInstantiation | TSUnionType | TemplateLiteral;
    TaggedTemplateE***REMOVED***pression: ArrayE***REMOVED***pression | ArrowFunctionE***REMOVED***pression | AssignmentE***REMOVED***pression | AssignmentPattern | AwaitE***REMOVED***pression | BinaryE***REMOVED***pression | BindE***REMOVED***pression | CallE***REMOVED***pression | ClassAccessorProperty | ClassDeclaration | ClassE***REMOVED***pression | ClassMethod | ClassPrivateProperty | ClassProperty | ConditionalE***REMOVED***pression | Decorator | DoWhileStatement | E***REMOVED***portDefaultDeclaration | E***REMOVED***pressionStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | ImportE***REMOVED***pression | JSXE***REMOVED***pressionContainer | JSXSpreadAttribute | JSXSpreadChild | LogicalE***REMOVED***pression | MemberE***REMOVED***pression | NewE***REMOVED***pression | ObjectMethod | ObjectProperty | OptionalCallE***REMOVED***pression | OptionalMemberE***REMOVED***pression | ParenthesizedE***REMOVED***pression | PipelineBareFunction | PipelineTopicE***REMOVED***pression | ReturnStatement | SequenceE***REMOVED***pression | SpreadElement | SwitchCase | SwitchStatement | TSAsE***REMOVED***pression | TSDeclareMethod | TSEnumDeclaration | TSEnumMember | TSE***REMOVED***portAssignment | TSImportType | TSInstantiationE***REMOVED***pression | TSMethodSignature | TSNonNullE***REMOVED***pression | TSPropertySignature | TSSatisfiesE***REMOVED***pression | TSTypeAssertion | TaggedTemplateE***REMOVED***pression | TemplateLiteral | ThrowStatement | TupleE***REMOVED***pression | TypeCastE***REMOVED***pression | UnaryE***REMOVED***pression | UpdateE***REMOVED***pression | VariableDeclarator | WhileStatement | WithStatement | YieldE***REMOVED***pression;
    TemplateElement: TemplateLiteral;
    TemplateLiteral: ArrayE***REMOVED***pression | ArrowFunctionE***REMOVED***pression | AssignmentE***REMOVED***pression | AssignmentPattern | AwaitE***REMOVED***pression | BinaryE***REMOVED***pression | BindE***REMOVED***pression | CallE***REMOVED***pression | ClassAccessorProperty | ClassDeclaration | ClassE***REMOVED***pression | ClassMethod | ClassPrivateProperty | ClassProperty | ConditionalE***REMOVED***pression | Decorator | DoWhileStatement | E***REMOVED***portDefaultDeclaration | E***REMOVED***pressionStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | ImportE***REMOVED***pression | JSXE***REMOVED***pressionContainer | JSXSpreadAttribute | JSXSpreadChild | LogicalE***REMOVED***pression | MemberE***REMOVED***pression | NewE***REMOVED***pression | ObjectMethod | ObjectProperty | OptionalCallE***REMOVED***pression | OptionalMemberE***REMOVED***pression | ParenthesizedE***REMOVED***pression | PipelineBareFunction | PipelineTopicE***REMOVED***pression | ReturnStatement | SequenceE***REMOVED***pression | SpreadElement | SwitchCase | SwitchStatement | TSAsE***REMOVED***pression | TSDeclareMethod | TSEnumDeclaration | TSEnumMember | TSE***REMOVED***portAssignment | TSImportType | TSInstantiationE***REMOVED***pression | TSLiteralType | TSMethodSignature | TSNonNullE***REMOVED***pression | TSPropertySignature | TSSatisfiesE***REMOVED***pression | TSTypeAssertion | TaggedTemplateE***REMOVED***pression | TemplateLiteral | ThrowStatement | TupleE***REMOVED***pression | TypeCastE***REMOVED***pression | UnaryE***REMOVED***pression | UpdateE***REMOVED***pression | VariableDeclarator | WhileStatement | WithStatement | YieldE***REMOVED***pression;
    ThisE***REMOVED***pression: ArrayE***REMOVED***pression | ArrowFunctionE***REMOVED***pression | AssignmentE***REMOVED***pression | AssignmentPattern | AwaitE***REMOVED***pression | BinaryE***REMOVED***pression | BindE***REMOVED***pression | CallE***REMOVED***pression | ClassAccessorProperty | ClassDeclaration | ClassE***REMOVED***pression | ClassMethod | ClassPrivateProperty | ClassProperty | ConditionalE***REMOVED***pression | Decorator | DoWhileStatement | E***REMOVED***portDefaultDeclaration | E***REMOVED***pressionStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | ImportE***REMOVED***pression | JSXE***REMOVED***pressionContainer | JSXSpreadAttribute | JSXSpreadChild | LogicalE***REMOVED***pression | MemberE***REMOVED***pression | NewE***REMOVED***pression | ObjectMethod | ObjectProperty | OptionalCallE***REMOVED***pression | OptionalMemberE***REMOVED***pression | ParenthesizedE***REMOVED***pression | PipelineBareFunction | PipelineTopicE***REMOVED***pression | ReturnStatement | SequenceE***REMOVED***pression | SpreadElement | SwitchCase | SwitchStatement | TSAsE***REMOVED***pression | TSDeclareMethod | TSEnumDeclaration | TSEnumMember | TSE***REMOVED***portAssignment | TSImportType | TSInstantiationE***REMOVED***pression | TSMethodSignature | TSNonNullE***REMOVED***pression | TSPropertySignature | TSSatisfiesE***REMOVED***pression | TSTypeAssertion | TaggedTemplateE***REMOVED***pression | TemplateLiteral | ThrowStatement | TupleE***REMOVED***pression | TypeCastE***REMOVED***pression | UnaryE***REMOVED***pression | UpdateE***REMOVED***pression | VariableDeclarator | WhileStatement | WithStatement | YieldE***REMOVED***pression;
    ThisTypeAnnotation: ArrayTypeAnnotation | DeclareE***REMOVED***portDeclaration | DeclareOpaqueType | DeclareTypeAlias | DeclaredPredicate | FunctionTypeAnnotation | FunctionTypeParam | Inde***REMOVED***edAccessType | IntersectionTypeAnnotation | NullableTypeAnnotation | ObjectTypeCallProperty | ObjectTypeInde***REMOVED***er | ObjectTypeInternalSlot | ObjectTypeProperty | ObjectTypeSpreadProperty | OpaqueType | OptionalInde***REMOVED***edAccessType | TupleTypeAnnotation | TypeAlias | TypeAnnotation | TypeParameter | TypeParameterInstantiation | TypeofTypeAnnotation | UnionTypeAnnotation;
    ThrowStatement: BlockStatement | DoWhileStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | LabeledStatement | Program | StaticBlock | SwitchCase | TSModuleBlock | WhileStatement | WithStatement;
    TopicReference: ArrayE***REMOVED***pression | ArrowFunctionE***REMOVED***pression | AssignmentE***REMOVED***pression | AssignmentPattern | AwaitE***REMOVED***pression | BinaryE***REMOVED***pression | BindE***REMOVED***pression | CallE***REMOVED***pression | ClassAccessorProperty | ClassDeclaration | ClassE***REMOVED***pression | ClassMethod | ClassPrivateProperty | ClassProperty | ConditionalE***REMOVED***pression | Decorator | DoWhileStatement | E***REMOVED***portDefaultDeclaration | E***REMOVED***pressionStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | ImportE***REMOVED***pression | JSXE***REMOVED***pressionContainer | JSXSpreadAttribute | JSXSpreadChild | LogicalE***REMOVED***pression | MemberE***REMOVED***pression | NewE***REMOVED***pression | ObjectMethod | ObjectProperty | OptionalCallE***REMOVED***pression | OptionalMemberE***REMOVED***pression | ParenthesizedE***REMOVED***pression | PipelineBareFunction | PipelineTopicE***REMOVED***pression | ReturnStatement | SequenceE***REMOVED***pression | SpreadElement | SwitchCase | SwitchStatement | TSAsE***REMOVED***pression | TSDeclareMethod | TSEnumDeclaration | TSEnumMember | TSE***REMOVED***portAssignment | TSImportType | TSInstantiationE***REMOVED***pression | TSMethodSignature | TSNonNullE***REMOVED***pression | TSPropertySignature | TSSatisfiesE***REMOVED***pression | TSTypeAssertion | TaggedTemplateE***REMOVED***pression | TemplateLiteral | ThrowStatement | TupleE***REMOVED***pression | TypeCastE***REMOVED***pression | UnaryE***REMOVED***pression | UpdateE***REMOVED***pression | VariableDeclarator | WhileStatement | WithStatement | YieldE***REMOVED***pression;
    TryStatement: BlockStatement | DoWhileStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | LabeledStatement | Program | StaticBlock | SwitchCase | TSModuleBlock | WhileStatement | WithStatement;
    TupleE***REMOVED***pression: ArrayE***REMOVED***pression | ArrowFunctionE***REMOVED***pression | AssignmentE***REMOVED***pression | AssignmentPattern | AwaitE***REMOVED***pression | BinaryE***REMOVED***pression | BindE***REMOVED***pression | CallE***REMOVED***pression | ClassAccessorProperty | ClassDeclaration | ClassE***REMOVED***pression | ClassMethod | ClassPrivateProperty | ClassProperty | ConditionalE***REMOVED***pression | Decorator | DoWhileStatement | E***REMOVED***portDefaultDeclaration | E***REMOVED***pressionStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | ImportE***REMOVED***pression | JSXE***REMOVED***pressionContainer | JSXSpreadAttribute | JSXSpreadChild | LogicalE***REMOVED***pression | MemberE***REMOVED***pression | NewE***REMOVED***pression | ObjectMethod | ObjectProperty | OptionalCallE***REMOVED***pression | OptionalMemberE***REMOVED***pression | ParenthesizedE***REMOVED***pression | PipelineBareFunction | PipelineTopicE***REMOVED***pression | ReturnStatement | SequenceE***REMOVED***pression | SpreadElement | SwitchCase | SwitchStatement | TSAsE***REMOVED***pression | TSDeclareMethod | TSEnumDeclaration | TSEnumMember | TSE***REMOVED***portAssignment | TSImportType | TSInstantiationE***REMOVED***pression | TSMethodSignature | TSNonNullE***REMOVED***pression | TSPropertySignature | TSSatisfiesE***REMOVED***pression | TSTypeAssertion | TaggedTemplateE***REMOVED***pression | TemplateLiteral | ThrowStatement | TupleE***REMOVED***pression | TypeCastE***REMOVED***pression | UnaryE***REMOVED***pression | UpdateE***REMOVED***pression | VariableDeclarator | WhileStatement | WithStatement | YieldE***REMOVED***pression;
    TupleTypeAnnotation: ArrayTypeAnnotation | DeclareE***REMOVED***portDeclaration | DeclareOpaqueType | DeclareTypeAlias | DeclaredPredicate | FunctionTypeAnnotation | FunctionTypeParam | Inde***REMOVED***edAccessType | IntersectionTypeAnnotation | NullableTypeAnnotation | ObjectTypeCallProperty | ObjectTypeInde***REMOVED***er | ObjectTypeInternalSlot | ObjectTypeProperty | ObjectTypeSpreadProperty | OpaqueType | OptionalInde***REMOVED***edAccessType | TupleTypeAnnotation | TypeAlias | TypeAnnotation | TypeParameter | TypeParameterInstantiation | TypeofTypeAnnotation | UnionTypeAnnotation;
    TypeAlias: BlockStatement | DeclareE***REMOVED***portDeclaration | DeclaredPredicate | DoWhileStatement | E***REMOVED***portNamedDeclaration | ForInStatement | ForOfStatement | ForStatement | IfStatement | LabeledStatement | Program | StaticBlock | SwitchCase | TSModuleBlock | WhileStatement | WithStatement;
    TypeAnnotation: ArrayPattern | ArrowFunctionE***REMOVED***pression | AssignmentPattern | ClassAccessorProperty | ClassMethod | ClassPrivateMethod | ClassPrivateProperty | ClassProperty | DeclareE***REMOVED***portDeclaration | DeclareModuleE***REMOVED***ports | DeclaredPredicate | FunctionDeclaration | FunctionE***REMOVED***pression | Identifier | ObjectMethod | ObjectPattern | Placeholder | RestElement | TypeCastE***REMOVED***pression | TypeParameter;
    TypeCastE***REMOVED***pression: ArrayE***REMOVED***pression | ArrowFunctionE***REMOVED***pression | AssignmentE***REMOVED***pression | AssignmentPattern | AwaitE***REMOVED***pression | BinaryE***REMOVED***pression | BindE***REMOVED***pression | CallE***REMOVED***pression | ClassAccessorProperty | ClassDeclaration | ClassE***REMOVED***pression | ClassMethod | ClassPrivateProperty | ClassProperty | ConditionalE***REMOVED***pression | DeclareE***REMOVED***portDeclaration | DeclaredPredicate | Decorator | DoWhileStatement | E***REMOVED***portDefaultDeclaration | E***REMOVED***pressionStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | ImportE***REMOVED***pression | JSXE***REMOVED***pressionContainer | JSXSpreadAttribute | JSXSpreadChild | LogicalE***REMOVED***pression | MemberE***REMOVED***pression | NewE***REMOVED***pression | ObjectMethod | ObjectProperty | OptionalCallE***REMOVED***pression | OptionalMemberE***REMOVED***pression | ParenthesizedE***REMOVED***pression | PipelineBareFunction | PipelineTopicE***REMOVED***pression | ReturnStatement | SequenceE***REMOVED***pression | SpreadElement | SwitchCase | SwitchStatement | TSAsE***REMOVED***pression | TSDeclareMethod | TSEnumDeclaration | TSEnumMember | TSE***REMOVED***portAssignment | TSImportType | TSInstantiationE***REMOVED***pression | TSMethodSignature | TSNonNullE***REMOVED***pression | TSPropertySignature | TSSatisfiesE***REMOVED***pression | TSTypeAssertion | TaggedTemplateE***REMOVED***pression | TemplateLiteral | ThrowStatement | TupleE***REMOVED***pression | TypeCastE***REMOVED***pression | UnaryE***REMOVED***pression | UpdateE***REMOVED***pression | VariableDeclarator | WhileStatement | WithStatement | YieldE***REMOVED***pression;
    TypeParameter: DeclareE***REMOVED***portDeclaration | DeclaredPredicate | TypeParameterDeclaration;
    TypeParameterDeclaration: ArrowFunctionE***REMOVED***pression | ClassDeclaration | ClassE***REMOVED***pression | ClassMethod | ClassPrivateMethod | DeclareClass | DeclareE***REMOVED***portDeclaration | DeclareInterface | DeclareOpaqueType | DeclareTypeAlias | DeclaredPredicate | FunctionDeclaration | FunctionE***REMOVED***pression | FunctionTypeAnnotation | InterfaceDeclaration | ObjectMethod | OpaqueType | TypeAlias;
    TypeParameterInstantiation: CallE***REMOVED***pression | ClassDeclaration | ClassE***REMOVED***pression | ClassImplements | DeclareE***REMOVED***portDeclaration | DeclaredPredicate | GenericTypeAnnotation | InterfaceE***REMOVED***tends | JSXOpeningElement | NewE***REMOVED***pression | OptionalCallE***REMOVED***pression | TaggedTemplateE***REMOVED***pression;
    TypeofTypeAnnotation: ArrayTypeAnnotation | DeclareE***REMOVED***portDeclaration | DeclareOpaqueType | DeclareTypeAlias | DeclaredPredicate | FunctionTypeAnnotation | FunctionTypeParam | Inde***REMOVED***edAccessType | IntersectionTypeAnnotation | NullableTypeAnnotation | ObjectTypeCallProperty | ObjectTypeInde***REMOVED***er | ObjectTypeInternalSlot | ObjectTypeProperty | ObjectTypeSpreadProperty | OpaqueType | OptionalInde***REMOVED***edAccessType | TupleTypeAnnotation | TypeAlias | TypeAnnotation | TypeParameter | TypeParameterInstantiation | TypeofTypeAnnotation | UnionTypeAnnotation;
    UnaryE***REMOVED***pression: ArrayE***REMOVED***pression | ArrowFunctionE***REMOVED***pression | AssignmentE***REMOVED***pression | AssignmentPattern | AwaitE***REMOVED***pression | BinaryE***REMOVED***pression | BindE***REMOVED***pression | CallE***REMOVED***pression | ClassAccessorProperty | ClassDeclaration | ClassE***REMOVED***pression | ClassMethod | ClassPrivateProperty | ClassProperty | ConditionalE***REMOVED***pression | Decorator | DoWhileStatement | E***REMOVED***portDefaultDeclaration | E***REMOVED***pressionStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | ImportE***REMOVED***pression | JSXE***REMOVED***pressionContainer | JSXSpreadAttribute | JSXSpreadChild | LogicalE***REMOVED***pression | MemberE***REMOVED***pression | NewE***REMOVED***pression | ObjectMethod | ObjectProperty | OptionalCallE***REMOVED***pression | OptionalMemberE***REMOVED***pression | ParenthesizedE***REMOVED***pression | PipelineBareFunction | PipelineTopicE***REMOVED***pression | ReturnStatement | SequenceE***REMOVED***pression | SpreadElement | SwitchCase | SwitchStatement | TSAsE***REMOVED***pression | TSDeclareMethod | TSEnumDeclaration | TSEnumMember | TSE***REMOVED***portAssignment | TSImportType | TSInstantiationE***REMOVED***pression | TSLiteralType | TSMethodSignature | TSNonNullE***REMOVED***pression | TSPropertySignature | TSSatisfiesE***REMOVED***pression | TSTypeAssertion | TaggedTemplateE***REMOVED***pression | TemplateLiteral | ThrowStatement | TupleE***REMOVED***pression | TypeCastE***REMOVED***pression | UnaryE***REMOVED***pression | UpdateE***REMOVED***pression | VariableDeclarator | WhileStatement | WithStatement | YieldE***REMOVED***pression;
    UnionTypeAnnotation: ArrayTypeAnnotation | DeclareE***REMOVED***portDeclaration | DeclareOpaqueType | DeclareTypeAlias | DeclaredPredicate | FunctionTypeAnnotation | FunctionTypeParam | Inde***REMOVED***edAccessType | IntersectionTypeAnnotation | NullableTypeAnnotation | ObjectTypeCallProperty | ObjectTypeInde***REMOVED***er | ObjectTypeInternalSlot | ObjectTypeProperty | ObjectTypeSpreadProperty | OpaqueType | OptionalInde***REMOVED***edAccessType | TupleTypeAnnotation | TypeAlias | TypeAnnotation | TypeParameter | TypeParameterInstantiation | TypeofTypeAnnotation | UnionTypeAnnotation;
    UpdateE***REMOVED***pression: ArrayE***REMOVED***pression | ArrowFunctionE***REMOVED***pression | AssignmentE***REMOVED***pression | AssignmentPattern | AwaitE***REMOVED***pression | BinaryE***REMOVED***pression | BindE***REMOVED***pression | CallE***REMOVED***pression | ClassAccessorProperty | ClassDeclaration | ClassE***REMOVED***pression | ClassMethod | ClassPrivateProperty | ClassProperty | ConditionalE***REMOVED***pression | Decorator | DoWhileStatement | E***REMOVED***portDefaultDeclaration | E***REMOVED***pressionStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | ImportE***REMOVED***pression | JSXE***REMOVED***pressionContainer | JSXSpreadAttribute | JSXSpreadChild | LogicalE***REMOVED***pression | MemberE***REMOVED***pression | NewE***REMOVED***pression | ObjectMethod | ObjectProperty | OptionalCallE***REMOVED***pression | OptionalMemberE***REMOVED***pression | ParenthesizedE***REMOVED***pression | PipelineBareFunction | PipelineTopicE***REMOVED***pression | ReturnStatement | SequenceE***REMOVED***pression | SpreadElement | SwitchCase | SwitchStatement | TSAsE***REMOVED***pression | TSDeclareMethod | TSEnumDeclaration | TSEnumMember | TSE***REMOVED***portAssignment | TSImportType | TSInstantiationE***REMOVED***pression | TSMethodSignature | TSNonNullE***REMOVED***pression | TSPropertySignature | TSSatisfiesE***REMOVED***pression | TSTypeAssertion | TaggedTemplateE***REMOVED***pression | TemplateLiteral | ThrowStatement | TupleE***REMOVED***pression | TypeCastE***REMOVED***pression | UnaryE***REMOVED***pression | UpdateE***REMOVED***pression | VariableDeclarator | WhileStatement | WithStatement | YieldE***REMOVED***pression;
    V8IntrinsicIdentifier: CallE***REMOVED***pression | NewE***REMOVED***pression;
    VariableDeclaration: BlockStatement | DoWhileStatement | E***REMOVED***portNamedDeclaration | ForInStatement | ForOfStatement | ForStatement | IfStatement | LabeledStatement | Program | StaticBlock | SwitchCase | TSModuleBlock | WhileStatement | WithStatement;
    VariableDeclarator: VariableDeclaration;
    Variance: ClassAccessorProperty | ClassPrivateProperty | ClassProperty | DeclareE***REMOVED***portDeclaration | DeclaredPredicate | ObjectTypeInde***REMOVED***er | ObjectTypeProperty | TypeParameter;
    VoidTypeAnnotation: ArrayTypeAnnotation | DeclareE***REMOVED***portDeclaration | DeclareOpaqueType | DeclareTypeAlias | DeclaredPredicate | FunctionTypeAnnotation | FunctionTypeParam | Inde***REMOVED***edAccessType | IntersectionTypeAnnotation | NullableTypeAnnotation | ObjectTypeCallProperty | ObjectTypeInde***REMOVED***er | ObjectTypeInternalSlot | ObjectTypeProperty | ObjectTypeSpreadProperty | OpaqueType | OptionalInde***REMOVED***edAccessType | TupleTypeAnnotation | TypeAlias | TypeAnnotation | TypeParameter | TypeParameterInstantiation | TypeofTypeAnnotation | UnionTypeAnnotation;
    WhileStatement: BlockStatement | DoWhileStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | LabeledStatement | Program | StaticBlock | SwitchCase | TSModuleBlock | WhileStatement | WithStatement;
    WithStatement: BlockStatement | DoWhileStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | LabeledStatement | Program | StaticBlock | SwitchCase | TSModuleBlock | WhileStatement | WithStatement;
    YieldE***REMOVED***pression: ArrayE***REMOVED***pression | ArrowFunctionE***REMOVED***pression | AssignmentE***REMOVED***pression | AssignmentPattern | AwaitE***REMOVED***pression | BinaryE***REMOVED***pression | BindE***REMOVED***pression | CallE***REMOVED***pression | ClassAccessorProperty | ClassDeclaration | ClassE***REMOVED***pression | ClassMethod | ClassPrivateProperty | ClassProperty | ConditionalE***REMOVED***pression | Decorator | DoWhileStatement | E***REMOVED***portDefaultDeclaration | E***REMOVED***pressionStatement | ForInStatement | ForOfStatement | ForStatement | IfStatement | ImportE***REMOVED***pression | JSXE***REMOVED***pressionContainer | JSXSpreadAttribute | JSXSpreadChild | LogicalE***REMOVED***pression | MemberE***REMOVED***pression | NewE***REMOVED***pression | ObjectMethod | ObjectProperty | OptionalCallE***REMOVED***pression | OptionalMemberE***REMOVED***pression | ParenthesizedE***REMOVED***pression | PipelineBareFunction | PipelineTopicE***REMOVED***pression | ReturnStatement | SequenceE***REMOVED***pression | SpreadElement | SwitchCase | SwitchStatement | TSAsE***REMOVED***pression | TSDeclareMethod | TSEnumDeclaration | TSEnumMember | TSE***REMOVED***portAssignment | TSImportType | TSInstantiationE***REMOVED***pression | TSMethodSignature | TSNonNullE***REMOVED***pression | TSPropertySignature | TSSatisfiesE***REMOVED***pression | TSTypeAssertion | TaggedTemplateE***REMOVED***pression | TemplateLiteral | ThrowStatement | TupleE***REMOVED***pression | TypeCastE***REMOVED***pression | UnaryE***REMOVED***pression | UpdateE***REMOVED***pression | VariableDeclarator | WhileStatement | WithStatement | YieldE***REMOVED***pression;
}

declare function deprecationWarning(oldName: string, newName: string, prefi***REMOVED***?: string): void;

declare const react: {
    isReactComponent: (member: Node) => boolean;
    isCompatTag: typeof isCompatTag;
    buildChildren: typeof buildChildren;
};

e***REMOVED***port { ACCESSOR_TYPES, ALIAS_KEYS, ASSIGNMENT_OPERATORS, Accessor, Aliases, AnyTypeAnnotation, ArgumentPlaceholder, ArrayE***REMOVED***pression, ArrayPattern, ArrayTypeAnnotation, ArrowFunctionE***REMOVED***pression, AssignmentE***REMOVED***pression, AssignmentPattern, AwaitE***REMOVED***pression, BINARY_OPERATORS, BINARY_TYPES, BLOCKPARENT_TYPES, BLOCK_SCOPED_SYMBOL, BLOCK_TYPES, BOOLEAN_BINARY_OPERATORS, BOOLEAN_NUMBER_BINARY_OPERATORS, BOOLEAN_UNARY_OPERATORS, BUILDER_KEYS, BigIntLiteral, Binary, BinaryE***REMOVED***pression, BindE***REMOVED***pression, Block, BlockParent, BlockStatement, BooleanLiteral, BooleanLiteralTypeAnnotation, BooleanTypeAnnotation, BreakStatement, CLASS_TYPES, COMMENT_KEYS, COMPARISON_BINARY_OPERATORS, COMPLETIONSTATEMENT_TYPES, CONDITIONAL_TYPES, CallE***REMOVED***pression, CatchClause, Class, ClassAccessorProperty, ClassBody, ClassDeclaration, ClassE***REMOVED***pression, ClassImplements, ClassMethod, ClassPrivateMethod, ClassPrivateProperty, ClassProperty, Comment, CommentBlock, CommentLine, CommentTypeShorthand, CompletionStatement, Conditional, ConditionalE***REMOVED***pression, ContinueStatement, DECLARATION_TYPES, DEPRECATED_ALIASES, DEPRECATED_KEYS, DebuggerStatement, DecimalLiteral, Declaration, DeclareClass, DeclareE***REMOVED***portAllDeclaration, DeclareE***REMOVED***portDeclaration, DeclareFunction, DeclareInterface, DeclareModule, DeclareModuleE***REMOVED***ports, DeclareOpaqueType, DeclareTypeAlias, DeclareVariable, DeclaredPredicate, Decorator, DeprecatedAliases, Directive, DirectiveLiteral, DoE***REMOVED***pression, DoWhileStatement, ENUMBODY_TYPES, ENUMMEMBER_TYPES, EQUALITY_BINARY_OPERATORS, EXPORTDECLARATION_TYPES, EXPRESSIONWRAPPER_TYPES, EXPRESSION_TYPES, EmptyStatement, EmptyTypeAnnotation, EnumBody, EnumBooleanBody, EnumBooleanMember, EnumDeclaration, EnumDefaultedMember, EnumMember, EnumNumberBody, EnumNumberMember, EnumStringBody, EnumStringMember, EnumSymbolBody, E***REMOVED***istsTypeAnnotation, E***REMOVED***portAllDeclaration, E***REMOVED***portDeclaration, E***REMOVED***portDefaultDeclaration, E***REMOVED***portDefaultSpecifier, E***REMOVED***portNamedDeclaration, E***REMOVED***portNamespaceSpecifier, E***REMOVED***portSpecifier, E***REMOVED***pression, E***REMOVED***pressionStatement, E***REMOVED***pressionWrapper, FLATTENABLE_KEYS, FLIPPED_ALIAS_KEYS, FLOWBASEANNOTATION_TYPES, FLOWDECLARATION_TYPES, FLOWPREDICATE_TYPES, FLOWTYPE_TYPES, FLOW_TYPES, FORXSTATEMENT_TYPES, FOR_INIT_KEYS, FOR_TYPES, FUNCTIONPARENT_TYPES, FUNCTION_TYPES, FieldOptions, File, Flow, FlowBaseAnnotation, FlowDeclaration, FlowPredicate, FlowType, For, ForInStatement, ForOfStatement, ForStatement, ForXStatement, Function, FunctionDeclaration, FunctionE***REMOVED***pression, FunctionParent, FunctionTypeAnnotation, FunctionTypeParam, GenericTypeAnnotation, IMMUTABLE_TYPES, IMPORTOREXPORTDECLARATION_TYPES, INHERIT_KEYS, Identifier, IfStatement, Immutable, Import, ImportAttribute, ImportDeclaration, ImportDefaultSpecifier, ImportE***REMOVED***pression, ImportNamespaceSpecifier, ImportOrE***REMOVED***portDeclaration, ImportSpecifier, Inde***REMOVED***edAccessType, InferredPredicate, InterfaceDeclaration, InterfaceE***REMOVED***tends, InterfaceTypeAnnotation, InterpreterDirective, IntersectionTypeAnnotation, JSX, JSXAttribute, JSXClosingElement, JSXClosingFragment, JSXElement, JSXEmptyE***REMOVED***pression, JSXE***REMOVED***pressionContainer, JSXFragment, JSXIdentifier, JSXMemberE***REMOVED***pression, JSXNamespacedName, JSXOpeningElement, JSXOpeningFragment, JSXSpreadAttribute, JSXSpreadChild, JSXTe***REMOVED***t, JSX_TYPES, LITERAL_TYPES, LOGICAL_OPERATORS, LOOP_TYPES, LVAL_TYPES, LVal, LabeledStatement, Literal, LogicalE***REMOVED***pression, Loop, METHOD_TYPES, MISCELLANEOUS_TYPES, MODULEDECLARATION_TYPES, MODULESPECIFIER_TYPES, MemberE***REMOVED***pression, MetaProperty, Method, Miscellaneous, Mi***REMOVED***edTypeAnnotation, ModuleDeclaration, ModuleE***REMOVED***pression, ModuleSpecifier, NODE_FIELDS, NODE_PARENT_VALIDATIONS, NOT_LOCAL_BINDING, NUMBER_BINARY_OPERATORS, NUMBER_UNARY_OPERATORS, NewE***REMOVED***pression, Node, Noop, NullLiteral, NullLiteralTypeAnnotation, NullableTypeAnnotation, NumberLiteral, NumberLiteralTypeAnnotation, NumberTypeAnnotation, NumericLiteral, OBJECTMEMBER_TYPES, ObjectE***REMOVED***pression, ObjectMember, ObjectMethod, ObjectPattern, ObjectProperty, ObjectTypeAnnotation, ObjectTypeCallProperty, ObjectTypeInde***REMOVED***er, ObjectTypeInternalSlot, ObjectTypeProperty, ObjectTypeSpreadProperty, OpaqueType, OptionalCallE***REMOVED***pression, OptionalInde***REMOVED***edAccessType, OptionalMemberE***REMOVED***pression, PATTERNLIKE_TYPES, PATTERN_TYPES, PLACEHOLDERS, PLACEHOLDERS_ALIAS, PLACEHOLDERS_FLIPPED_ALIAS, PRIVATE_TYPES, PROPERTY_TYPES, PUREISH_TYPES, ParentMaps, ParenthesizedE***REMOVED***pression, Pattern, PatternLike, PipelineBareFunction, PipelinePrimaryTopicReference, PipelineTopicE***REMOVED***pression, Placeholder, Private, PrivateName, Program, Property, Pureish, QualifiedTypeIdentifier, RecordE***REMOVED***pression, RegE***REMOVED***pLiteral, Rege***REMOVED***Literal, Options as RemovePropertiesOptions, RestElement, RestProperty, ReturnStatement, SCOPABLE_TYPES, STANDARDIZED_TYPES, STATEMENT_OR_BLOCK_KEYS, STATEMENT_TYPES, STRING_UNARY_OPERATORS, Scopable, SequenceE***REMOVED***pression, SourceLocation, SpreadElement, SpreadProperty, Standardized, Statement, StaticBlock, StringLiteral, StringLiteralTypeAnnotation, StringTypeAnnotation, Super, SwitchCase, SwitchStatement, SymbolTypeAnnotation, TERMINATORLESS_TYPES, TSAnyKeyword, TSArrayType, TSAsE***REMOVED***pression, TSBASETYPE_TYPES, TSBaseType, TSBigIntKeyword, TSBooleanKeyword, TSCallSignatureDeclaration, TSConditionalType, TSConstructSignatureDeclaration, TSConstructorType, TSDeclareFunction, TSDeclareMethod, TSENTITYNAME_TYPES, TSEntityName, TSEnumDeclaration, TSEnumMember, TSE***REMOVED***portAssignment, TSE***REMOVED***pressionWithTypeArguments, TSE***REMOVED***ternalModuleReference, TSFunctionType, TSImportEqualsDeclaration, TSImportType, TSInde***REMOVED***Signature, TSInde***REMOVED***edAccessType, TSInferType, TSInstantiationE***REMOVED***pression, TSInterfaceBody, TSInterfaceDeclaration, TSIntersectionType, TSIntrinsicKeyword, TSLiteralType, TSMappedType, TSMethodSignature, TSModuleBlock, TSModuleDeclaration, TSNamedTupleMember, TSNamespaceE***REMOVED***portDeclaration, TSNeverKeyword, TSNonNullE***REMOVED***pression, TSNullKeyword, TSNumberKeyword, TSObjectKeyword, TSOptionalType, TSParameterProperty, TSParenthesizedType, TSPropertySignature, TSQualifiedName, TSRestType, TSSatisfiesE***REMOVED***pression, TSStringKeyword, TSSymbolKeyword, TSTYPEELEMENT_TYPES, TSTYPE_TYPES, TSThisType, TSTupleType, TSType, TSTypeAliasDeclaration, TSTypeAnnotation, TSTypeAssertion, TSTypeElement, TSTypeLiteral, TSTypeOperator, TSTypeParameter, TSTypeParameterDeclaration, TSTypeParameterInstantiation, TSTypePredicate, TSTypeQuery, TSTypeReference, TSUndefinedKeyword, TSUnionType, TSUnknownKeyword, TSVoidKeyword, TYPES, TYPESCRIPT_TYPES, TaggedTemplateE***REMOVED***pression, TemplateElement, TemplateLiteral, Terminatorless, ThisE***REMOVED***pression, ThisTypeAnnotation, ThrowStatement, TopicReference, TraversalAncestors, TraversalHandler, TraversalHandlers, TryStatement, TupleE***REMOVED***pression, TupleTypeAnnotation, TypeAlias, TypeAnnotation, TypeCastE***REMOVED***pression, TypeParameter, TypeParameterDeclaration, TypeParameterInstantiation, TypeScript, TypeofTypeAnnotation, UNARYLIKE_TYPES, UNARY_OPERATORS, UPDATE_OPERATORS, USERWHITESPACABLE_TYPES, UnaryE***REMOVED***pression, UnaryLike, UnionTypeAnnotation, UpdateE***REMOVED***pression, UserWhitespacable, V8IntrinsicIdentifier, VISITOR_KEYS, VariableDeclaration, VariableDeclarator, Variance, VoidTypeAnnotation, WHILE_TYPES, While, WhileStatement, WithStatement, YieldE***REMOVED***pression, deprecationWarning as __internal__deprecationWarning, addComment, addComments, anyTypeAnnotation, appendToMemberE***REMOVED***pression, argumentPlaceholder, arrayE***REMOVED***pression, arrayPattern, arrayTypeAnnotation, arrowFunctionE***REMOVED***pression, assertAccessor, assertAnyTypeAnnotation, assertArgumentPlaceholder, assertArrayE***REMOVED***pression, assertArrayPattern, assertArrayTypeAnnotation, assertArrowFunctionE***REMOVED***pression, assertAssignmentE***REMOVED***pression, assertAssignmentPattern, assertAwaitE***REMOVED***pression, assertBigIntLiteral, assertBinary, assertBinaryE***REMOVED***pression, assertBindE***REMOVED***pression, assertBlock, assertBlockParent, assertBlockStatement, assertBooleanLiteral, assertBooleanLiteralTypeAnnotation, assertBooleanTypeAnnotation, assertBreakStatement, assertCallE***REMOVED***pression, assertCatchClause, assertClass, assertClassAccessorProperty, assertClassBody, assertClassDeclaration, assertClassE***REMOVED***pression, assertClassImplements, assertClassMethod, assertClassPrivateMethod, assertClassPrivateProperty, assertClassProperty, assertCompletionStatement, assertConditional, assertConditionalE***REMOVED***pression, assertContinueStatement, assertDebuggerStatement, assertDecimalLiteral, assertDeclaration, assertDeclareClass, assertDeclareE***REMOVED***portAllDeclaration, assertDeclareE***REMOVED***portDeclaration, assertDeclareFunction, assertDeclareInterface, assertDeclareModule, assertDeclareModuleE***REMOVED***ports, assertDeclareOpaqueType, assertDeclareTypeAlias, assertDeclareVariable, assertDeclaredPredicate, assertDecorator, assertDirective, assertDirectiveLiteral, assertDoE***REMOVED***pression, assertDoWhileStatement, assertEmptyStatement, assertEmptyTypeAnnotation, assertEnumBody, assertEnumBooleanBody, assertEnumBooleanMember, assertEnumDeclaration, assertEnumDefaultedMember, assertEnumMember, assertEnumNumberBody, assertEnumNumberMember, assertEnumStringBody, assertEnumStringMember, assertEnumSymbolBody, assertE***REMOVED***istsTypeAnnotation, assertE***REMOVED***portAllDeclaration, assertE***REMOVED***portDeclaration, assertE***REMOVED***portDefaultDeclaration, assertE***REMOVED***portDefaultSpecifier, assertE***REMOVED***portNamedDeclaration, assertE***REMOVED***portNamespaceSpecifier, assertE***REMOVED***portSpecifier, assertE***REMOVED***pression, assertE***REMOVED***pressionStatement, assertE***REMOVED***pressionWrapper, assertFile, assertFlow, assertFlowBaseAnnotation, assertFlowDeclaration, assertFlowPredicate, assertFlowType, assertFor, assertForInStatement, assertForOfStatement, assertForStatement, assertForXStatement, assertFunction, assertFunctionDeclaration, assertFunctionE***REMOVED***pression, assertFunctionParent, assertFunctionTypeAnnotation, assertFunctionTypeParam, assertGenericTypeAnnotation, assertIdentifier, assertIfStatement, assertImmutable, assertImport, assertImportAttribute, assertImportDeclaration, assertImportDefaultSpecifier, assertImportE***REMOVED***pression, assertImportNamespaceSpecifier, assertImportOrE***REMOVED***portDeclaration, assertImportSpecifier, assertInde***REMOVED***edAccessType, assertInferredPredicate, assertInterfaceDeclaration, assertInterfaceE***REMOVED***tends, assertInterfaceTypeAnnotation, assertInterpreterDirective, assertIntersectionTypeAnnotation, assertJSX, assertJSXAttribute, assertJSXClosingElement, assertJSXClosingFragment, assertJSXElement, assertJSXEmptyE***REMOVED***pression, assertJSXE***REMOVED***pressionContainer, assertJSXFragment, assertJSXIdentifier, assertJSXMemberE***REMOVED***pression, assertJSXNamespacedName, assertJSXOpeningElement, assertJSXOpeningFragment, assertJSXSpreadAttribute, assertJSXSpreadChild, assertJSXTe***REMOVED***t, assertLVal, assertLabeledStatement, assertLiteral, assertLogicalE***REMOVED***pression, assertLoop, assertMemberE***REMOVED***pression, assertMetaProperty, assertMethod, assertMiscellaneous, assertMi***REMOVED***edTypeAnnotation, assertModuleDeclaration, assertModuleE***REMOVED***pression, assertModuleSpecifier, assertNewE***REMOVED***pression, assertNode, assertNoop, assertNullLiteral, assertNullLiteralTypeAnnotation, assertNullableTypeAnnotation, assertNumberLiteral, assertNumberLiteralTypeAnnotation, assertNumberTypeAnnotation, assertNumericLiteral, assertObjectE***REMOVED***pression, assertObjectMember, assertObjectMethod, assertObjectPattern, assertObjectProperty, assertObjectTypeAnnotation, assertObjectTypeCallProperty, assertObjectTypeInde***REMOVED***er, assertObjectTypeInternalSlot, assertObjectTypeProperty, assertObjectTypeSpreadProperty, assertOpaqueType, assertOptionalCallE***REMOVED***pression, assertOptionalInde***REMOVED***edAccessType, assertOptionalMemberE***REMOVED***pression, assertParenthesizedE***REMOVED***pression, assertPattern, assertPatternLike, assertPipelineBareFunction, assertPipelinePrimaryTopicReference, assertPipelineTopicE***REMOVED***pression, assertPlaceholder, assertPrivate, assertPrivateName, assertProgram, assertProperty, assertPureish, assertQualifiedTypeIdentifier, assertRecordE***REMOVED***pression, assertRegE***REMOVED***pLiteral, assertRege***REMOVED***Literal, assertRestElement, assertRestProperty, assertReturnStatement, assertScopable, assertSequenceE***REMOVED***pression, assertSpreadElement, assertSpreadProperty, assertStandardized, assertStatement, assertStaticBlock, assertStringLiteral, assertStringLiteralTypeAnnotation, assertStringTypeAnnotation, assertSuper, assertSwitchCase, assertSwitchStatement, assertSymbolTypeAnnotation, assertTSAnyKeyword, assertTSArrayType, assertTSAsE***REMOVED***pression, assertTSBaseType, assertTSBigIntKeyword, assertTSBooleanKeyword, assertTSCallSignatureDeclaration, assertTSConditionalType, assertTSConstructSignatureDeclaration, assertTSConstructorType, assertTSDeclareFunction, assertTSDeclareMethod, assertTSEntityName, assertTSEnumDeclaration, assertTSEnumMember, assertTSE***REMOVED***portAssignment, assertTSE***REMOVED***pressionWithTypeArguments, assertTSE***REMOVED***ternalModuleReference, assertTSFunctionType, assertTSImportEqualsDeclaration, assertTSImportType, assertTSInde***REMOVED***Signature, assertTSInde***REMOVED***edAccessType, assertTSInferType, assertTSInstantiationE***REMOVED***pression, assertTSInterfaceBody, assertTSInterfaceDeclaration, assertTSIntersectionType, assertTSIntrinsicKeyword, assertTSLiteralType, assertTSMappedType, assertTSMethodSignature, assertTSModuleBlock, assertTSModuleDeclaration, assertTSNamedTupleMember, assertTSNamespaceE***REMOVED***portDeclaration, assertTSNeverKeyword, assertTSNonNullE***REMOVED***pression, assertTSNullKeyword, assertTSNumberKeyword, assertTSObjectKeyword, assertTSOptionalType, assertTSParameterProperty, assertTSParenthesizedType, assertTSPropertySignature, assertTSQualifiedName, assertTSRestType, assertTSSatisfiesE***REMOVED***pression, assertTSStringKeyword, assertTSSymbolKeyword, assertTSThisType, assertTSTupleType, assertTSType, assertTSTypeAliasDeclaration, assertTSTypeAnnotation, assertTSTypeAssertion, assertTSTypeElement, assertTSTypeLiteral, assertTSTypeOperator, assertTSTypeParameter, assertTSTypeParameterDeclaration, assertTSTypeParameterInstantiation, assertTSTypePredicate, assertTSTypeQuery, assertTSTypeReference, assertTSUndefinedKeyword, assertTSUnionType, assertTSUnknownKeyword, assertTSVoidKeyword, assertTaggedTemplateE***REMOVED***pression, assertTemplateElement, assertTemplateLiteral, assertTerminatorless, assertThisE***REMOVED***pression, assertThisTypeAnnotation, assertThrowStatement, assertTopicReference, assertTryStatement, assertTupleE***REMOVED***pression, assertTupleTypeAnnotation, assertTypeAlias, assertTypeAnnotation, assertTypeCastE***REMOVED***pression, assertTypeParameter, assertTypeParameterDeclaration, assertTypeParameterInstantiation, assertTypeScript, assertTypeofTypeAnnotation, assertUnaryE***REMOVED***pression, assertUnaryLike, assertUnionTypeAnnotation, assertUpdateE***REMOVED***pression, assertUserWhitespacable, assertV8IntrinsicIdentifier, assertVariableDeclaration, assertVariableDeclarator, assertVariance, assertVoidTypeAnnotation, assertWhile, assertWhileStatement, assertWithStatement, assertYieldE***REMOVED***pression, assignmentE***REMOVED***pression, assignmentPattern, awaitE***REMOVED***pression, bigIntLiteral, binaryE***REMOVED***pression, bindE***REMOVED***pression, blockStatement, booleanLiteral, booleanLiteralTypeAnnotation, booleanTypeAnnotation, breakStatement, buildMatchMemberE***REMOVED***pression, buildUndefinedNode, callE***REMOVED***pression, catchClause, classAccessorProperty, classBody, classDeclaration, classE***REMOVED***pression, classImplements, classMethod, classPrivateMethod, classPrivateProperty, classProperty, clone, cloneDeep, cloneDeepWithoutLoc, cloneNode, cloneWithoutLoc, conditionalE***REMOVED***pression, continueStatement, createFlowUnionType, createTSUnionType, _default$4 as createTypeAnnotationBasedOnTypeof, createFlowUnionType as createUnionTypeAnnotation, debuggerStatement, decimalLiteral, declareClass, declareE***REMOVED***portAllDeclaration, declareE***REMOVED***portDeclaration, declareFunction, declareInterface, declareModule, declareModuleE***REMOVED***ports, declareOpaqueType, declareTypeAlias, declareVariable, declaredPredicate, decorator, directive, directiveLiteral, doE***REMOVED***pression, doWhileStatement, emptyStatement, emptyTypeAnnotation, ensureBlock, enumBooleanBody, enumBooleanMember, enumDeclaration, enumDefaultedMember, enumNumberBody, enumNumberMember, enumStringBody, enumStringMember, enumSymbolBody, e***REMOVED***istsTypeAnnotation, e***REMOVED***portAllDeclaration, e***REMOVED***portDefaultDeclaration, e***REMOVED***portDefaultSpecifier, e***REMOVED***portNamedDeclaration, e***REMOVED***portNamespaceSpecifier, e***REMOVED***portSpecifier, e***REMOVED***pressionStatement, file, forInStatement, forOfStatement, forStatement, functionDeclaration, functionE***REMOVED***pression, functionTypeAnnotation, functionTypeParam, genericTypeAnnotation, getAssignmentIdentifiers, getBindingIdentifiers, getFunctionName, _default as getOuterBindingIdentifiers, identifier, ifStatement, _import as import, importAttribute, importDeclaration, importDefaultSpecifier, importE***REMOVED***pression, importNamespaceSpecifier, importSpecifier, inde***REMOVED***edAccessType, inferredPredicate, inheritInnerComments, inheritLeadingComments, inheritTrailingComments, inherits, inheritsComments, interfaceDeclaration, interfaceE***REMOVED***tends, interfaceTypeAnnotation, interpreterDirective, intersectionTypeAnnotation, is, isAccessor, isAnyTypeAnnotation, isArgumentPlaceholder, isArrayE***REMOVED***pression, isArrayPattern, isArrayTypeAnnotation, isArrowFunctionE***REMOVED***pression, isAssignmentE***REMOVED***pression, isAssignmentPattern, isAwaitE***REMOVED***pression, isBigIntLiteral, isBinary, isBinaryE***REMOVED***pression, isBindE***REMOVED***pression, isBinding, isBlock, isBlockParent, isBlockScoped, isBlockStatement, isBooleanLiteral, isBooleanLiteralTypeAnnotation, isBooleanTypeAnnotation, isBreakStatement, isCallE***REMOVED***pression, isCatchClause, isClass, isClassAccessorProperty, isClassBody, isClassDeclaration, isClassE***REMOVED***pression, isClassImplements, isClassMethod, isClassPrivateMethod, isClassPrivateProperty, isClassProperty, isCompletionStatement, isConditional, isConditionalE***REMOVED***pression, isContinueStatement, isDebuggerStatement, isDecimalLiteral, isDeclaration, isDeclareClass, isDeclareE***REMOVED***portAllDeclaration, isDeclareE***REMOVED***portDeclaration, isDeclareFunction, isDeclareInterface, isDeclareModule, isDeclareModuleE***REMOVED***ports, isDeclareOpaqueType, isDeclareTypeAlias, isDeclareVariable, isDeclaredPredicate, isDecorator, isDirective, isDirectiveLiteral, isDoE***REMOVED***pression, isDoWhileStatement, isEmptyStatement, isEmptyTypeAnnotation, isEnumBody, isEnumBooleanBody, isEnumBooleanMember, isEnumDeclaration, isEnumDefaultedMember, isEnumMember, isEnumNumberBody, isEnumNumberMember, isEnumStringBody, isEnumStringMember, isEnumSymbolBody, isE***REMOVED***istsTypeAnnotation, isE***REMOVED***portAllDeclaration, isE***REMOVED***portDeclaration, isE***REMOVED***portDefaultDeclaration, isE***REMOVED***portDefaultSpecifier, isE***REMOVED***portNamedDeclaration, isE***REMOVED***portNamespaceSpecifier, isE***REMOVED***portSpecifier, isE***REMOVED***pression, isE***REMOVED***pressionStatement, isE***REMOVED***pressionWrapper, isFile, isFlow, isFlowBaseAnnotation, isFlowDeclaration, isFlowPredicate, isFlowType, isFor, isForInStatement, isForOfStatement, isForStatement, isForXStatement, isFunction, isFunctionDeclaration, isFunctionE***REMOVED***pression, isFunctionParent, isFunctionTypeAnnotation, isFunctionTypeParam, isGenericTypeAnnotation, isIdentifier, isIfStatement, isImmutable, isImport, isImportAttribute, isImportDeclaration, isImportDefaultSpecifier, isImportE***REMOVED***pression, isImportNamespaceSpecifier, isImportOrE***REMOVED***portDeclaration, isImportSpecifier, isInde***REMOVED***edAccessType, isInferredPredicate, isInterfaceDeclaration, isInterfaceE***REMOVED***tends, isInterfaceTypeAnnotation, isInterpreterDirective, isIntersectionTypeAnnotation, isJSX, isJSXAttribute, isJSXClosingElement, isJSXClosingFragment, isJSXElement, isJSXEmptyE***REMOVED***pression, isJSXE***REMOVED***pressionContainer, isJSXFragment, isJSXIdentifier, isJSXMemberE***REMOVED***pression, isJSXNamespacedName, isJSXOpeningElement, isJSXOpeningFragment, isJSXSpreadAttribute, isJSXSpreadChild, isJSXTe***REMOVED***t, isLVal, isLabeledStatement, isLet, isLiteral, isLogicalE***REMOVED***pression, isLoop, isMemberE***REMOVED***pression, isMetaProperty, isMethod, isMiscellaneous, isMi***REMOVED***edTypeAnnotation, isModuleDeclaration, isModuleE***REMOVED***pression, isModuleSpecifier, isNewE***REMOVED***pression, isNode, isNodesEquivalent, isNoop, isNullLiteral, isNullLiteralTypeAnnotation, isNullableTypeAnnotation, isNumberLiteral, isNumberLiteralTypeAnnotation, isNumberTypeAnnotation, isNumericLiteral, isObjectE***REMOVED***pression, isObjectMember, isObjectMethod, isObjectPattern, isObjectProperty, isObjectTypeAnnotation, isObjectTypeCallProperty, isObjectTypeInde***REMOVED***er, isObjectTypeInternalSlot, isObjectTypeProperty, isObjectTypeSpreadProperty, isOpaqueType, isOptionalCallE***REMOVED***pression, isOptionalInde***REMOVED***edAccessType, isOptionalMemberE***REMOVED***pression, isParenthesizedE***REMOVED***pression, isPattern, isPatternLike, isPipelineBareFunction, isPipelinePrimaryTopicReference, isPipelineTopicE***REMOVED***pression, isPlaceholder, isPlaceholderType, isPrivate, isPrivateName, isProgram, isProperty, isPureish, isQualifiedTypeIdentifier, isRecordE***REMOVED***pression, isReferenced, isRegE***REMOVED***pLiteral, isRege***REMOVED***Literal, isRestElement, isRestProperty, isReturnStatement, isScopable, isScope, isSequenceE***REMOVED***pression, isSpecifierDefault, isSpreadElement, isSpreadProperty, isStandardized, isStatement, isStaticBlock, isStringLiteral, isStringLiteralTypeAnnotation, isStringTypeAnnotation, isSuper, isSwitchCase, isSwitchStatement, isSymbolTypeAnnotation, isTSAnyKeyword, isTSArrayType, isTSAsE***REMOVED***pression, isTSBaseType, isTSBigIntKeyword, isTSBooleanKeyword, isTSCallSignatureDeclaration, isTSConditionalType, isTSConstructSignatureDeclaration, isTSConstructorType, isTSDeclareFunction, isTSDeclareMethod, isTSEntityName, isTSEnumDeclaration, isTSEnumMember, isTSE***REMOVED***portAssignment, isTSE***REMOVED***pressionWithTypeArguments, isTSE***REMOVED***ternalModuleReference, isTSFunctionType, isTSImportEqualsDeclaration, isTSImportType, isTSInde***REMOVED***Signature, isTSInde***REMOVED***edAccessType, isTSInferType, isTSInstantiationE***REMOVED***pression, isTSInterfaceBody, isTSInterfaceDeclaration, isTSIntersectionType, isTSIntrinsicKeyword, isTSLiteralType, isTSMappedType, isTSMethodSignature, isTSModuleBlock, isTSModuleDeclaration, isTSNamedTupleMember, isTSNamespaceE***REMOVED***portDeclaration, isTSNeverKeyword, isTSNonNullE***REMOVED***pression, isTSNullKeyword, isTSNumberKeyword, isTSObjectKeyword, isTSOptionalType, isTSParameterProperty, isTSParenthesizedType, isTSPropertySignature, isTSQualifiedName, isTSRestType, isTSSatisfiesE***REMOVED***pression, isTSStringKeyword, isTSSymbolKeyword, isTSThisType, isTSTupleType, isTSType, isTSTypeAliasDeclaration, isTSTypeAnnotation, isTSTypeAssertion, isTSTypeElement, isTSTypeLiteral, isTSTypeOperator, isTSTypeParameter, isTSTypeParameterDeclaration, isTSTypeParameterInstantiation, isTSTypePredicate, isTSTypeQuery, isTSTypeReference, isTSUndefinedKeyword, isTSUnionType, isTSUnknownKeyword, isTSVoidKeyword, isTaggedTemplateE***REMOVED***pression, isTemplateElement, isTemplateLiteral, isTerminatorless, isThisE***REMOVED***pression, isThisTypeAnnotation, isThrowStatement, isTopicReference, isTryStatement, isTupleE***REMOVED***pression, isTupleTypeAnnotation, isType, isTypeAlias, isTypeAnnotation, isTypeCastE***REMOVED***pression, isTypeParameter, isTypeParameterDeclaration, isTypeParameterInstantiation, isTypeScript, isTypeofTypeAnnotation, isUnaryE***REMOVED***pression, isUnaryLike, isUnionTypeAnnotation, isUpdateE***REMOVED***pression, isUserWhitespacable, isV8IntrinsicIdentifier, isValidES3Identifier, isValidIdentifier, isVar, isVariableDeclaration, isVariableDeclarator, isVariance, isVoidTypeAnnotation, isWhile, isWhileStatement, isWithStatement, isYieldE***REMOVED***pression, js***REMOVED***Attribute as jSXAttribute, js***REMOVED***ClosingElement as jSXClosingElement, js***REMOVED***ClosingFragment as jSXClosingFragment, js***REMOVED***Element as jSXElement, js***REMOVED***EmptyE***REMOVED***pression as jSXEmptyE***REMOVED***pression, js***REMOVED***E***REMOVED***pressionContainer as jSXE***REMOVED***pressionContainer, js***REMOVED***Fragment as jSXFragment, js***REMOVED***Identifier as jSXIdentifier, js***REMOVED***MemberE***REMOVED***pression as jSXMemberE***REMOVED***pression, js***REMOVED***NamespacedName as jSXNamespacedName, js***REMOVED***OpeningElement as jSXOpeningElement, js***REMOVED***OpeningFragment as jSXOpeningFragment, js***REMOVED***SpreadAttribute as jSXSpreadAttribute, js***REMOVED***SpreadChild as jSXSpreadChild, js***REMOVED***Te***REMOVED***t as jSXTe***REMOVED***t, js***REMOVED***Attribute, js***REMOVED***ClosingElement, js***REMOVED***ClosingFragment, js***REMOVED***Element, js***REMOVED***EmptyE***REMOVED***pression, js***REMOVED***E***REMOVED***pressionContainer, js***REMOVED***Fragment, js***REMOVED***Identifier, js***REMOVED***MemberE***REMOVED***pression, js***REMOVED***NamespacedName, js***REMOVED***OpeningElement, js***REMOVED***OpeningFragment, js***REMOVED***SpreadAttribute, js***REMOVED***SpreadChild, js***REMOVED***Te***REMOVED***t, labeledStatement, logicalE***REMOVED***pression, matchesPattern, memberE***REMOVED***pression, metaProperty, mi***REMOVED***edTypeAnnotation, moduleE***REMOVED***pression, newE***REMOVED***pression, noop, nullLiteral, nullLiteralTypeAnnotation, nullableTypeAnnotation, NumberLiteral$1 as numberLiteral, numberLiteralTypeAnnotation, numberTypeAnnotation, numericLiteral, objectE***REMOVED***pression, objectMethod, objectPattern, objectProperty, objectTypeAnnotation, objectTypeCallProperty, objectTypeInde***REMOVED***er, objectTypeInternalSlot, objectTypeProperty, objectTypeSpreadProperty, opaqueType, optionalCallE***REMOVED***pression, optionalInde***REMOVED***edAccessType, optionalMemberE***REMOVED***pression, parenthesizedE***REMOVED***pression, pipelineBareFunction, pipelinePrimaryTopicReference, pipelineTopicE***REMOVED***pression, placeholder, prependToMemberE***REMOVED***pression, privateName, program, qualifiedTypeIdentifier, react, recordE***REMOVED***pression, regE***REMOVED***pLiteral, Rege***REMOVED***Literal$1 as rege***REMOVED***Literal, removeComments, removeProperties, removePropertiesDeep, removeTypeDuplicates, restElement, RestProperty$1 as restProperty, returnStatement, sequenceE***REMOVED***pression, shallowEqual, spreadElement, SpreadProperty$1 as spreadProperty, staticBlock, stringLiteral, stringLiteralTypeAnnotation, stringTypeAnnotation, _super as super, switchCase, switchStatement, symbolTypeAnnotation, tsAnyKeyword as tSAnyKeyword, tsArrayType as tSArrayType, tsAsE***REMOVED***pression as tSAsE***REMOVED***pression, tsBigIntKeyword as tSBigIntKeyword, tsBooleanKeyword as tSBooleanKeyword, tsCallSignatureDeclaration as tSCallSignatureDeclaration, tsConditionalType as tSConditionalType, tsConstructSignatureDeclaration as tSConstructSignatureDeclaration, tsConstructorType as tSConstructorType, tsDeclareFunction as tSDeclareFunction, tsDeclareMethod as tSDeclareMethod, tsEnumDeclaration as tSEnumDeclaration, tsEnumMember as tSEnumMember, tsE***REMOVED***portAssignment as tSE***REMOVED***portAssignment, tsE***REMOVED***pressionWithTypeArguments as tSE***REMOVED***pressionWithTypeArguments, tsE***REMOVED***ternalModuleReference as tSE***REMOVED***ternalModuleReference, tsFunctionType as tSFunctionType, tsImportEqualsDeclaration as tSImportEqualsDeclaration, tsImportType as tSImportType, tsInde***REMOVED***Signature as tSInde***REMOVED***Signature, tsInde***REMOVED***edAccessType as tSInde***REMOVED***edAccessType, tsInferType as tSInferType, tsInstantiationE***REMOVED***pression as tSInstantiationE***REMOVED***pression, tsInterfaceBody as tSInterfaceBody, tsInterfaceDeclaration as tSInterfaceDeclaration, tsIntersectionType as tSIntersectionType, tsIntrinsicKeyword as tSIntrinsicKeyword, tsLiteralType as tSLiteralType, tsMappedType as tSMappedType, tsMethodSignature as tSMethodSignature, tsModuleBlock as tSModuleBlock, tsModuleDeclaration as tSModuleDeclaration, tsNamedTupleMember as tSNamedTupleMember, tsNamespaceE***REMOVED***portDeclaration as tSNamespaceE***REMOVED***portDeclaration, tsNeverKeyword as tSNeverKeyword, tsNonNullE***REMOVED***pression as tSNonNullE***REMOVED***pression, tsNullKeyword as tSNullKeyword, tsNumberKeyword as tSNumberKeyword, tsObjectKeyword as tSObjectKeyword, tsOptionalType as tSOptionalType, tsParameterProperty as tSParameterProperty, tsParenthesizedType as tSParenthesizedType, tsPropertySignature as tSPropertySignature, tsQualifiedName as tSQualifiedName, tsRestType as tSRestType, tsSatisfiesE***REMOVED***pression as tSSatisfiesE***REMOVED***pression, tsStringKeyword as tSStringKeyword, tsSymbolKeyword as tSSymbolKeyword, tsThisType as tSThisType, tsTupleType as tSTupleType, tsTypeAliasDeclaration as tSTypeAliasDeclaration, tsTypeAnnotation as tSTypeAnnotation, tsTypeAssertion as tSTypeAssertion, tsTypeLiteral as tSTypeLiteral, tsTypeOperator as tSTypeOperator, tsTypeParameter as tSTypeParameter, tsTypeParameterDeclaration as tSTypeParameterDeclaration, tsTypeParameterInstantiation as tSTypeParameterInstantiation, tsTypePredicate as tSTypePredicate, tsTypeQuery as tSTypeQuery, tsTypeReference as tSTypeReference, tsUndefinedKeyword as tSUndefinedKeyword, tsUnionType as tSUnionType, tsUnknownKeyword as tSUnknownKeyword, tsVoidKeyword as tSVoidKeyword, taggedTemplateE***REMOVED***pression, templateElement, templateLiteral, thisE***REMOVED***pression, thisTypeAnnotation, throwStatement, toBindingIdentifierName, toBlock, toComputedKey, _default$3 as toE***REMOVED***pression, toIdentifier, toKeyAlias, _default$2 as toStatement, topicReference, traverse, traverseFast, tryStatement, tsAnyKeyword, tsArrayType, tsAsE***REMOVED***pression, tsBigIntKeyword, tsBooleanKeyword, tsCallSignatureDeclaration, tsConditionalType, tsConstructSignatureDeclaration, tsConstructorType, tsDeclareFunction, tsDeclareMethod, tsEnumDeclaration, tsEnumMember, tsE***REMOVED***portAssignment, tsE***REMOVED***pressionWithTypeArguments, tsE***REMOVED***ternalModuleReference, tsFunctionType, tsImportEqualsDeclaration, tsImportType, tsInde***REMOVED***Signature, tsInde***REMOVED***edAccessType, tsInferType, tsInstantiationE***REMOVED***pression, tsInterfaceBody, tsInterfaceDeclaration, tsIntersectionType, tsIntrinsicKeyword, tsLiteralType, tsMappedType, tsMethodSignature, tsModuleBlock, tsModuleDeclaration, tsNamedTupleMember, tsNamespaceE***REMOVED***portDeclaration, tsNeverKeyword, tsNonNullE***REMOVED***pression, tsNullKeyword, tsNumberKeyword, tsObjectKeyword, tsOptionalType, tsParameterProperty, tsParenthesizedType, tsPropertySignature, tsQualifiedName, tsRestType, tsSatisfiesE***REMOVED***pression, tsStringKeyword, tsSymbolKeyword, tsThisType, tsTupleType, tsTypeAliasDeclaration, tsTypeAnnotation, tsTypeAssertion, tsTypeLiteral, tsTypeOperator, tsTypeParameter, tsTypeParameterDeclaration, tsTypeParameterInstantiation, tsTypePredicate, tsTypeQuery, tsTypeReference, tsUndefinedKeyword, tsUnionType, tsUnknownKeyword, tsVoidKeyword, tupleE***REMOVED***pression, tupleTypeAnnotation, typeAlias, typeAnnotation, typeCastE***REMOVED***pression, typeParameter, typeParameterDeclaration, typeParameterInstantiation, typeofTypeAnnotation, unaryE***REMOVED***pression, unionTypeAnnotation, updateE***REMOVED***pression, v8IntrinsicIdentifier, validate, _default$1 as valueToNode, variableDeclaration, variableDeclarator, variance, voidTypeAnnotation, whileStatement, withStatement, yieldE***REMOVED***pression };
