"use strict";

Object.defineProperty(e***REMOVED***ports, "__esModule", {
  value: true
});
e***REMOVED***ports.default = gatherSequenceE***REMOVED***pressions;
var _getBindingIdentifiers = require("../retrievers/getBindingIdentifiers.js");
var _inde***REMOVED*** = require("../validators/generated/inde***REMOVED***.js");
var _inde***REMOVED***2 = require("../builders/generated/inde***REMOVED***.js");
var _productions = require("../builders/productions.js");
var _cloneNode = require("../clone/cloneNode.js");
;
function gatherSequenceE***REMOVED***pressions(nodes, declars) {
  const e***REMOVED***prs = [];
  let ensureLastUndefined = true;
  for (const node of nodes) {
    if (!(0, _inde***REMOVED***.isEmptyStatement)(node)) {
      ensureLastUndefined = false;
    }
    if ((0, _inde***REMOVED***.isE***REMOVED***pression)(node)) {
      e***REMOVED***prs.push(node);
    } else if ((0, _inde***REMOVED***.isE***REMOVED***pressionStatement)(node)) {
      e***REMOVED***prs.push(node.e***REMOVED***pression);
    } else if ((0, _inde***REMOVED***.isVariableDeclaration)(node)) {
      if (node.kind !== "var") return;
      for (const declar of node.declarations) {
        const bindings = (0, _getBindingIdentifiers.default)(declar);
        for (const key of Object.keys(bindings)) {
          declars.push({
            kind: node.kind,
            id: (0, _cloneNode.default)(bindings[key])
          });
        }
        if (declar.init) {
          e***REMOVED***prs.push((0, _inde***REMOVED***2.assignmentE***REMOVED***pression)("=", declar.id, declar.init));
        }
      }
      ensureLastUndefined = true;
    } else if ((0, _inde***REMOVED***.isIfStatement)(node)) {
      const consequent = node.consequent ? gatherSequenceE***REMOVED***pressions([node.consequent], declars) : (0, _productions.buildUndefinedNode)();
      const alternate = node.alternate ? gatherSequenceE***REMOVED***pressions([node.alternate], declars) : (0, _productions.buildUndefinedNode)();
      if (!consequent || !alternate) return;
      e***REMOVED***prs.push((0, _inde***REMOVED***2.conditionalE***REMOVED***pression)(node.test, consequent, alternate));
    } else if ((0, _inde***REMOVED***.isBlockStatement)(node)) {
      const body = gatherSequenceE***REMOVED***pressions(node.body, declars);
      if (!body) return;
      e***REMOVED***prs.push(body);
    } else if ((0, _inde***REMOVED***.isEmptyStatement)(node)) {
      if (nodes.inde***REMOVED***Of(node) === 0) {
        ensureLastUndefined = true;
      }
    } else {
      return;
    }
  }
  if (ensureLastUndefined) {
    e***REMOVED***prs.push((0, _productions.buildUndefinedNode)());
  }
  if (e***REMOVED***prs.length === 1) {
    return e***REMOVED***prs[0];
  } else {
    return (0, _inde***REMOVED***2.sequenceE***REMOVED***pression)(e***REMOVED***prs);
  }
}

//# sourceMappingURL=gatherSequenceE***REMOVED***pressions.js.map
