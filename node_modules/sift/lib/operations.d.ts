import { BaseOperation, EqualsOperation, Options, Operation, Query, NamedGroupOperation } from "./core";
import { Key } from "./utils";
declare class $Ne e***REMOVED***tends BaseOperation<any> {
    readonly propop = true;
    private _test;
    init(): void;
    reset(): void;
    ne***REMOVED***t(item: any): void;
}
declare class $ElemMatch e***REMOVED***tends BaseOperation<Query<any>> {
    readonly propop = true;
    private _queryOperation;
    init(): void;
    reset(): void;
    ne***REMOVED***t(item: any): void;
}
declare class $Not e***REMOVED***tends BaseOperation<Query<any>> {
    readonly propop = true;
    private _queryOperation;
    init(): void;
    reset(): void;
    ne***REMOVED***t(item: any, key: Key, owner: any, root: boolean): void;
}
e***REMOVED***port declare class $Size e***REMOVED***tends BaseOperation<any> {
    readonly propop = true;
    init(): void;
    ne***REMOVED***t(item: any): void;
}
declare class $Or e***REMOVED***tends BaseOperation<any> {
    readonly propop = false;
    private _ops;
    init(): void;
    reset(): void;
    ne***REMOVED***t(item: any, key: Key, owner: any): void;
}
declare class $Nor e***REMOVED***tends $Or {
    readonly propop = false;
    ne***REMOVED***t(item: any, key: Key, owner: any): void;
}
declare class $In e***REMOVED***tends BaseOperation<any> {
    readonly propop = true;
    private _testers;
    init(): void;
    ne***REMOVED***t(item: any, key: Key, owner: any): void;
}
declare class $Nin e***REMOVED***tends BaseOperation<any> {
    readonly propop = true;
    private _in;
    constructor(params: any, ownerQuery: any, options: Options, name: string);
    ne***REMOVED***t(item: any, key: Key, owner: any, root: boolean): void;
    reset(): void;
}
declare class $E***REMOVED***ists e***REMOVED***tends BaseOperation<boolean> {
    readonly propop = true;
    ne***REMOVED***t(item: any, key: Key, owner: any, root: boolean, leaf?: boolean): void;
}
declare class $And e***REMOVED***tends NamedGroupOperation {
    readonly propop = false;
    constructor(params: Query<any>[], owneryQuery: Query<any>, options: Options, name: string);
    ne***REMOVED***t(item: any, key: Key, owner: any, root: boolean): void;
}
declare class $All e***REMOVED***tends NamedGroupOperation {
    readonly propop = true;
    constructor(params: Query<any>[], owneryQuery: Query<any>, options: Options, name: string);
    ne***REMOVED***t(item: any, key: Key, owner: any, root: boolean): void;
}
e***REMOVED***port declare const $eq: (params: any, owneryQuery: Query<any>, options: Options) => EqualsOperation<any>;
e***REMOVED***port declare const $ne: (params: any, owneryQuery: Query<any>, options: Options, name: string) => $Ne;
e***REMOVED***port declare const $or: (params: Query<any>[], owneryQuery: Query<any>, options: Options, name: string) => $Or;
e***REMOVED***port declare const $nor: (params: Query<any>[], owneryQuery: Query<any>, options: Options, name: string) => $Nor;
e***REMOVED***port declare const $elemMatch: (params: any, owneryQuery: Query<any>, options: Options, name: string) => $ElemMatch;
e***REMOVED***port declare const $nin: (params: any, owneryQuery: Query<any>, options: Options, name: string) => $Nin;
e***REMOVED***port declare const $in: (params: any, owneryQuery: Query<any>, options: Options, name: string) => $In;
e***REMOVED***port declare const $lt: (params: any, owneryQuery: any, options: Options, name: string) => Operation<any>;
e***REMOVED***port declare const $lte: (params: any, owneryQuery: any, options: Options, name: string) => Operation<any>;
e***REMOVED***port declare const $gt: (params: any, owneryQuery: any, options: Options, name: string) => Operation<any>;
e***REMOVED***port declare const $gte: (params: any, owneryQuery: any, options: Options, name: string) => Operation<any>;
e***REMOVED***port declare const $mod: ([mod, equalsValue]: number[], owneryQuery: Query<any>, options: Options) => EqualsOperation<(b: any) => boolean>;
e***REMOVED***port declare const $e***REMOVED***ists: (params: boolean, owneryQuery: Query<any>, options: Options, name: string) => $E***REMOVED***ists;
e***REMOVED***port declare const $rege***REMOVED***: (pattern: string, owneryQuery: Query<any>, options: Options) => EqualsOperation<RegE***REMOVED***p>;
e***REMOVED***port declare const $not: (params: any, owneryQuery: Query<any>, options: Options, name: string) => $Not;
e***REMOVED***port declare const $type: (clazz: Function | string, owneryQuery: Query<any>, options: Options) => EqualsOperation<(b: any) => any>;
e***REMOVED***port declare const $and: (params: Query<any>[], ownerQuery: Query<any>, options: Options, name: string) => $And;
e***REMOVED***port declare const $all: (params: Query<any>[], ownerQuery: Query<any>, options: Options, name: string) => $All;
e***REMOVED***port declare const $size: (params: number, ownerQuery: Query<any>, options: Options) => $Size;
e***REMOVED***port declare const $options: () => any;
e***REMOVED***port declare const $where: (params: string | Function, ownerQuery: Query<any>, options: Options) => EqualsOperation<(b: any) => any>;
e***REMOVED***port {};
