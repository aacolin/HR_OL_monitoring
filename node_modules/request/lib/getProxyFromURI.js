'use strict'

function formatHostname (hostname) {
  // canonicalize the hostname, so that 'oogle.com' won't match 'google.com'
  return hostname.replace(/^\.*/, '.').toLowerCase()
}

function parseNoPro***REMOVED***yZone (zone) {
  zone = zone.trim().toLowerCase()

  var zoneParts = zone.split(':', 2)
  var zoneHost = formatHostname(zoneParts[0])
  var zonePort = zoneParts[1]
  var hasPort = zone.inde***REMOVED***Of(':') > -1

  return {hostname: zoneHost, port: zonePort, hasPort: hasPort}
}

function uriInNoPro***REMOVED***y (uri, noPro***REMOVED***y) {
  var port = uri.port || (uri.protocol === 'https:' ? '443' : '80')
  var hostname = formatHostname(uri.hostname)
  var noPro***REMOVED***yList = noPro***REMOVED***y.split(',')

  // iterate through the noPro***REMOVED***yList until it finds a match.
  return noPro***REMOVED***yList.map(parseNoPro***REMOVED***yZone).some(function (noPro***REMOVED***yZone) {
    var isMatchedAt = hostname.inde***REMOVED***Of(noPro***REMOVED***yZone.hostname)
    var hostnameMatched = (
      isMatchedAt > -1 &&
        (isMatchedAt === hostname.length - noPro***REMOVED***yZone.hostname.length)
    )

    if (noPro***REMOVED***yZone.hasPort) {
      return (port === noPro***REMOVED***yZone.port) && hostnameMatched
    }

    return hostnameMatched
  })
}

function getPro***REMOVED***yFromURI (uri) {
  // Decide the proper request pro***REMOVED***y to use based on the request URI object and the
  // environmental variables (NO_PROXY, HTTP_PROXY, etc.)
  // respect NO_PROXY environment variables (see: https://lyn***REMOVED***.invisible-island.net/lyn***REMOVED***2.8.7/breakout/lyn***REMOVED***_help/keystrokes/environments.html)

  var noPro***REMOVED***y = process.env.NO_PROXY || process.env.no_pro***REMOVED***y || ''

  // if the noPro***REMOVED***y is a wildcard then return null

  if (noPro***REMOVED***y === '*') {
    return null
  }

  // if the noPro***REMOVED***y is not empty and the uri is found return null

  if (noPro***REMOVED***y !== '' && uriInNoPro***REMOVED***y(uri, noPro***REMOVED***y)) {
    return null
  }

  // Check for HTTP or HTTPS Pro***REMOVED***y in environment Else default to null

  if (uri.protocol === 'http:') {
    return process.env.HTTP_PROXY ||
      process.env.http_pro***REMOVED***y || null
  }

  if (uri.protocol === 'https:') {
    return process.env.HTTPS_PROXY ||
      process.env.https_pro***REMOVED***y ||
      process.env.HTTP_PROXY ||
      process.env.http_pro***REMOVED***y || null
  }

  // if none of that works, return null
  // (What uri protocol are you using then?)

  return null
}

module.e***REMOVED***ports = getPro***REMOVED***yFromURI
