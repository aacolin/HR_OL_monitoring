// Generated by LiveScript 1.4.0
(function(){
  var Promise, ref$, list, e***REMOVED***perimental, libraryBlacklist, es5SpecialCase, banner, readFile, writeFile, unlink, basename, dirname, join, webpack, temp;
  Promise = require('../library/fn/promise');
  ref$ = require('./config'), list = ref$.list, e***REMOVED***perimental = ref$.e***REMOVED***perimental, libraryBlacklist = ref$.libraryBlacklist, es5SpecialCase = ref$.es5SpecialCase, banner = ref$.banner;
  ref$ = require('fs'), readFile = ref$.readFile, writeFile = ref$.writeFile, unlink = ref$.unlink;
  ref$ = require('path'), basename = ref$.basename, dirname = ref$.dirname, join = ref$.join;
  webpack = require('webpack');
  temp = require('temp');
  module.e***REMOVED***ports = function(arg$){
    var modules, ref$, blacklist, library, umd, this$ = this;
    modules = (ref$ = arg$.modules) != null
      ? ref$
      : [], blacklist = (ref$ = arg$.blacklist) != null
      ? ref$
      : [], library = (ref$ = arg$.library) != null ? ref$ : false, umd = (ref$ = arg$.umd) != null ? ref$ : true;
    return new Promise(function(resolve, reject){
      (function(){
        var i$, ***REMOVED***$, ref$, len$, y$, ns, name, j$, len1$, TARGET, this$ = this;
        if (this.e***REMOVED***p) {
          for (i$ = 0, len$ = (ref$ = e***REMOVED***perimental).length; i$ < len$; ++i$) {
            ***REMOVED***$ = ref$[i$];
            this[***REMOVED***$] = true;
          }
        }
        if (this.es5) {
          for (i$ = 0, len$ = (ref$ = es5SpecialCase).length; i$ < len$; ++i$) {
            y$ = ref$[i$];
            this[y$] = true;
          }
        }
        for (ns in this) {
          if (this[ns]) {
            for (i$ = 0, len$ = (ref$ = list).length; i$ < len$; ++i$) {
              name = ref$[i$];
              if (name.inde***REMOVED***Of(ns + ".") === 0 && !in$(name, e***REMOVED***perimental)) {
                this[name] = true;
              }
            }
          }
        }
        if (library) {
          blacklist = blacklist.concat(libraryBlacklist);
        }
        for (i$ = 0, len$ = blacklist.length; i$ < len$; ++i$) {
          ns = blacklist[i$];
          for (j$ = 0, len1$ = (ref$ = list).length; j$ < len1$; ++j$) {
            name = ref$[j$];
            if (name === ns || name.inde***REMOVED***Of(ns + ".") === 0) {
              this[name] = false;
            }
          }
        }
        TARGET = temp.path({
          suffi***REMOVED***: '.js'
        });
        webpack({
          entry: list.filter(function(it){
            return this$[it];
          }).map(function(it){
            if (library) {
              return join(__dirname, '..', 'library', 'modules', it);
            } else {
              return join(__dirname, '..', 'modules', it);
            }
          }),
          output: {
            path: dirname(TARGET),
            filename: basename("./" + TARGET)
          }
        }, function(err, info){
          if (err) {
            return reject(err);
          }
          readFile(TARGET, function(err, script){
            if (err) {
              return reject(err);
            }
            unlink(TARGET, function(err){
              var e***REMOVED***portScript;
              if (err) {
                return reject(err);
              }
              if (umd) {
                e***REMOVED***portScript = "// CommonJS e***REMOVED***port\nif (typeof module != 'undefined' && module.e***REMOVED***ports) module.e***REMOVED***ports = __e;\n// RequireJS e***REMOVED***port\nelse if (typeof define == 'function' && define.amd) define(function () { return __e; });\n// E***REMOVED***port to global object\nelse __g.core = __e;";
              } else {
                e***REMOVED***portScript = "";
              }
              resolve("" + banner + "\n!function(__e, __g, undefined){\n'use strict';\n" + script + "\n" + e***REMOVED***portScript + "\n}(1, 1);");
            });
          });
        });
      }.call(modules.reduce(function(memo, it){
        memo[it] = true;
        return memo;
      }, {})));
    });
  };
  function in$(***REMOVED***, ***REMOVED***s){
    var i = -1, l = ***REMOVED***s.length >>> 0;
    while (++i < l) if (***REMOVED*** === ***REMOVED***s[i]) return true;
    return false;
  }
}).call(this);
