var global = require('./_global');
var core = require('./_core');
var hide = require('./_hide');
var redefine = require('./_redefine');
var ct***REMOVED*** = require('./_ct***REMOVED***');
var PROTOTYPE = 'prototype';

var $e***REMOVED***port = function (type, name, source) {
  var IS_FORCED = type & $e***REMOVED***port.F;
  var IS_GLOBAL = type & $e***REMOVED***port.G;
  var IS_STATIC = type & $e***REMOVED***port.S;
  var IS_PROTO = type & $e***REMOVED***port.P;
  var IS_BIND = type & $e***REMOVED***port.B;
  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE];
  var e***REMOVED***ports = IS_GLOBAL ? core : core[name] || (core[name] = {});
  var e***REMOVED***pProto = e***REMOVED***ports[PROTOTYPE] || (e***REMOVED***ports[PROTOTYPE] = {});
  var key, own, out, e***REMOVED***p;
  if (IS_GLOBAL) source = name;
  for (key in source) {
    // contains in native
    own = !IS_FORCED && target && target[key] !== undefined;
    // e***REMOVED***port native or passed
    out = (own ? target : source)[key];
    // bind timers to global for call from e***REMOVED***port conte***REMOVED***t
    e***REMOVED***p = IS_BIND && own ? ct***REMOVED***(out, global) : IS_PROTO && typeof out == 'function' ? ct***REMOVED***(Function.call, out) : out;
    // e***REMOVED***tend global
    if (target) redefine(target, key, out, type & $e***REMOVED***port.U);
    // e***REMOVED***port
    if (e***REMOVED***ports[key] != out) hide(e***REMOVED***ports, key, e***REMOVED***p);
    if (IS_PROTO && e***REMOVED***pProto[key] != out) e***REMOVED***pProto[key] = out;
  }
};
global.core = core;
// type bitmap
$e***REMOVED***port.F = 1;   // forced
$e***REMOVED***port.G = 2;   // global
$e***REMOVED***port.S = 4;   // static
$e***REMOVED***port.P = 8;   // proto
$e***REMOVED***port.B = 16;  // bind
$e***REMOVED***port.W = 32;  // wrap
$e***REMOVED***port.U = 64;  // safe
$e***REMOVED***port.R = 128; // real proto method for `library`
module.e***REMOVED***ports = $e***REMOVED***port;
