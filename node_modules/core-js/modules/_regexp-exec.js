'use strict';

var rege***REMOVED***pFlags = require('./_flags');

var nativeE***REMOVED***ec = RegE***REMOVED***p.prototype.e***REMOVED***ec;
// This always refers to the native implementation, because the
// String#replace polyfill uses ./fi***REMOVED***-rege***REMOVED***p-well-known-symbol-logic.js,
// which loads this file before patching the method.
var nativeReplace = String.prototype.replace;

var patchedE***REMOVED***ec = nativeE***REMOVED***ec;

var LAST_INDEX = 'lastInde***REMOVED***';

var UPDATES_LAST_INDEX_WRONG = (function () {
  var re1 = /a/,
      re2 = /b*/g;
  nativeE***REMOVED***ec.call(re1, 'a');
  nativeE***REMOVED***ec.call(re2, 'a');
  return re1[LAST_INDEX] !== 0 || re2[LAST_INDEX] !== 0;
})();

// nonparticipating capturing group, copied from es5-shim's String#split patch.
var NPCG_INCLUDED = /()??/.e***REMOVED***ec('')[1] !== undefined;

var PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED;

if (PATCH) {
  patchedE***REMOVED***ec = function e***REMOVED***ec(str) {
    var re = this;
    var lastInde***REMOVED***, reCopy, match, i;

    if (NPCG_INCLUDED) {
      reCopy = new RegE***REMOVED***p('^' + re.source + '$(?!\\s)', rege***REMOVED***pFlags.call(re));
    }
    if (UPDATES_LAST_INDEX_WRONG) lastInde***REMOVED*** = re[LAST_INDEX];

    match = nativeE***REMOVED***ec.call(re, str);

    if (UPDATES_LAST_INDEX_WRONG && match) {
      re[LAST_INDEX] = re.global ? match.inde***REMOVED*** + match[0].length : lastInde***REMOVED***;
    }
    if (NPCG_INCLUDED && match && match.length > 1) {
      // Fi***REMOVED*** browsers whose `e***REMOVED***ec` methods don't consistently return `undefined`
      // for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/
      // eslint-disable-ne***REMOVED***t-line no-loop-func
      nativeReplace.call(match[0], reCopy, function () {
        for (i = 1; i < arguments.length - 2; i++) {
          if (arguments[i] === undefined) match[i] = undefined;
        }
      });
    }

    return match;
  };
}

module.e***REMOVED***ports = patchedE***REMOVED***ec;
