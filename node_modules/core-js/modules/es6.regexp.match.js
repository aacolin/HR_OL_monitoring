'use strict';

var anObject = require('./_an-object');
var toLength = require('./_to-length');
var advanceStringInde***REMOVED*** = require('./_advance-string-inde***REMOVED***');
var regE***REMOVED***pE***REMOVED***ec = require('./_rege***REMOVED***p-e***REMOVED***ec-abstract');

// @@match logic
require('./_fi***REMOVED***-re-wks')('match', 1, function (defined, MATCH, $match, maybeCallNative) {
  return [
    // `String.prototype.match` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.match
    function match(rege***REMOVED***p) {
      var O = defined(this);
      var fn = rege***REMOVED***p == undefined ? undefined : rege***REMOVED***p[MATCH];
      return fn !== undefined ? fn.call(rege***REMOVED***p, O) : new RegE***REMOVED***p(rege***REMOVED***p)[MATCH](String(O));
    },
    // `RegE***REMOVED***p.prototype[@@match]` method
    // https://tc39.github.io/ecma262/#sec-rege***REMOVED***p.prototype-@@match
    function (rege***REMOVED***p) {
      var res = maybeCallNative($match, rege***REMOVED***p, this);
      if (res.done) return res.value;
      var r***REMOVED*** = anObject(rege***REMOVED***p);
      var S = String(this);
      if (!r***REMOVED***.global) return regE***REMOVED***pE***REMOVED***ec(r***REMOVED***, S);
      var fullUnicode = r***REMOVED***.unicode;
      r***REMOVED***.lastInde***REMOVED*** = 0;
      var A = [];
      var n = 0;
      var result;
      while ((result = regE***REMOVED***pE***REMOVED***ec(r***REMOVED***, S)) !== null) {
        var matchStr = String(result[0]);
        A[n] = matchStr;
        if (matchStr === '') r***REMOVED***.lastInde***REMOVED*** = advanceStringInde***REMOVED***(S, toLength(r***REMOVED***.lastInde***REMOVED***), fullUnicode);
        n++;
      }
      return n === 0 ? null : A;
    }
  ];
});
