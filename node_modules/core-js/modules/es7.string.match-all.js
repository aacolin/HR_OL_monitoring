'use strict';
// https://tc39.github.io/String.prototype.matchAll/
var $e***REMOVED***port = require('./_e***REMOVED***port');
var defined = require('./_defined');
var toLength = require('./_to-length');
var isRegE***REMOVED***p = require('./_is-rege***REMOVED***p');
var getFlags = require('./_flags');
var RegE***REMOVED***pProto = RegE***REMOVED***p.prototype;

var $RegE***REMOVED***pStringIterator = function (rege***REMOVED***p, string) {
  this._r = rege***REMOVED***p;
  this._s = string;
};

require('./_iter-create')($RegE***REMOVED***pStringIterator, 'RegE***REMOVED***p String', function ne***REMOVED***t() {
  var match = this._r.e***REMOVED***ec(this._s);
  return { value: match, done: match === null };
});

$e***REMOVED***port($e***REMOVED***port.P, 'String', {
  matchAll: function matchAll(rege***REMOVED***p) {
    defined(this);
    if (!isRegE***REMOVED***p(rege***REMOVED***p)) throw TypeError(rege***REMOVED***p + ' is not a rege***REMOVED***p!');
    var S = String(this);
    var flags = 'flags' in RegE***REMOVED***pProto ? String(rege***REMOVED***p.flags) : getFlags.call(rege***REMOVED***p);
    var r***REMOVED*** = new RegE***REMOVED***p(rege***REMOVED***p.source, ~flags.inde***REMOVED***Of('g') ? flags : 'g' + flags);
    r***REMOVED***.lastInde***REMOVED*** = toLength(rege***REMOVED***p.lastInde***REMOVED***);
    return new $RegE***REMOVED***pStringIterator(r***REMOVED***, S);
  }
});
