'use strict';

var anObject = require('./_an-object');
var sameValue = require('./_same-value');
var regE***REMOVED***pE***REMOVED***ec = require('./_rege***REMOVED***p-e***REMOVED***ec-abstract');

// @@search logic
require('./_fi***REMOVED***-re-wks')('search', 1, function (defined, SEARCH, $search, maybeCallNative) {
  return [
    // `String.prototype.search` method
    // https://tc39.github.io/ecma262/#sec-string.prototype.search
    function search(rege***REMOVED***p) {
      var O = defined(this);
      var fn = rege***REMOVED***p == undefined ? undefined : rege***REMOVED***p[SEARCH];
      return fn !== undefined ? fn.call(rege***REMOVED***p, O) : new RegE***REMOVED***p(rege***REMOVED***p)[SEARCH](String(O));
    },
    // `RegE***REMOVED***p.prototype[@@search]` method
    // https://tc39.github.io/ecma262/#sec-rege***REMOVED***p.prototype-@@search
    function (rege***REMOVED***p) {
      var res = maybeCallNative($search, rege***REMOVED***p, this);
      if (res.done) return res.value;
      var r***REMOVED*** = anObject(rege***REMOVED***p);
      var S = String(this);
      var previousLastInde***REMOVED*** = r***REMOVED***.lastInde***REMOVED***;
      if (!sameValue(previousLastInde***REMOVED***, 0)) r***REMOVED***.lastInde***REMOVED*** = 0;
      var result = regE***REMOVED***pE***REMOVED***ec(r***REMOVED***, S);
      if (!sameValue(r***REMOVED***.lastInde***REMOVED***, previousLastInde***REMOVED***)) r***REMOVED***.lastInde***REMOVED*** = previousLastInde***REMOVED***;
      return result === null ? -1 : result.inde***REMOVED***;
    }
  ];
});
