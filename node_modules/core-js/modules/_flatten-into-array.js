'use strict';
// https://tc39.github.io/proposal-flatMap/#sec-FlattenIntoArray
var isArray = require('./_is-array');
var isObject = require('./_is-object');
var toLength = require('./_to-length');
var ct***REMOVED*** = require('./_ct***REMOVED***');
var IS_CONCAT_SPREADABLE = require('./_wks')('isConcatSpreadable');

function flattenIntoArray(target, original, source, sourceLen, start, depth, mapper, thisArg) {
  var targetInde***REMOVED*** = start;
  var sourceInde***REMOVED*** = 0;
  var mapFn = mapper ? ct***REMOVED***(mapper, thisArg, 3) : false;
  var element, spreadable;

  while (sourceInde***REMOVED*** < sourceLen) {
    if (sourceInde***REMOVED*** in source) {
      element = mapFn ? mapFn(source[sourceInde***REMOVED***], sourceInde***REMOVED***, original) : source[sourceInde***REMOVED***];

      spreadable = false;
      if (isObject(element)) {
        spreadable = element[IS_CONCAT_SPREADABLE];
        spreadable = spreadable !== undefined ? !!spreadable : isArray(element);
      }

      if (spreadable && depth > 0) {
        targetInde***REMOVED*** = flattenIntoArray(target, original, element, toLength(element.length), targetInde***REMOVED***, depth - 1) - 1;
      } else {
        if (targetInde***REMOVED*** >= 0***REMOVED***1fffffffffffff) throw TypeError();
        target[targetInde***REMOVED***] = element;
      }

      targetInde***REMOVED***++;
    }
    sourceInde***REMOVED***++;
  }
  return targetInde***REMOVED***;
}

module.e***REMOVED***ports = flattenIntoArray;
