var global = require('./_global');
var inheritIfRequired = require('./_inherit-if-required');
var dP = require('./_object-dp').f;
var gOPN = require('./_object-gopn').f;
var isRegE***REMOVED***p = require('./_is-rege***REMOVED***p');
var $flags = require('./_flags');
var $RegE***REMOVED***p = global.RegE***REMOVED***p;
var Base = $RegE***REMOVED***p;
var proto = $RegE***REMOVED***p.prototype;
var re1 = /a/g;
var re2 = /a/g;
// "new" creates a new object, old webkit buggy here
var CORRECT_NEW = new $RegE***REMOVED***p(re1) !== re1;

if (require('./_descriptors') && (!CORRECT_NEW || require('./_fails')(function () {
  re2[require('./_wks')('match')] = false;
  // RegE***REMOVED***p constructor can alter flags and IsRegE***REMOVED***p works correct with @@match
  return $RegE***REMOVED***p(re1) != re1 || $RegE***REMOVED***p(re2) == re2 || $RegE***REMOVED***p(re1, 'i') != '/a/i';
}))) {
  $RegE***REMOVED***p = function RegE***REMOVED***p(p, f) {
    var tiRE = this instanceof $RegE***REMOVED***p;
    var piRE = isRegE***REMOVED***p(p);
    var fiU = f === undefined;
    return !tiRE && piRE && p.constructor === $RegE***REMOVED***p && fiU ? p
      : inheritIfRequired(CORRECT_NEW
        ? new Base(piRE && !fiU ? p.source : p, f)
        : Base((piRE = p instanceof $RegE***REMOVED***p) ? p.source : p, piRE && fiU ? $flags.call(p) : f)
      , tiRE ? this : proto, $RegE***REMOVED***p);
  };
  var pro***REMOVED***y = function (key) {
    key in $RegE***REMOVED***p || dP($RegE***REMOVED***p, key, {
      configurable: true,
      get: function () { return Base[key]; },
      set: function (it) { Base[key] = it; }
    });
  };
  for (var keys = gOPN(Base), i = 0; keys.length > i;) pro***REMOVED***y(keys[i++]);
  proto.constructor = $RegE***REMOVED***p;
  $RegE***REMOVED***p.prototype = proto;
  require('./_redefine')(global, 'RegE***REMOVED***p', $RegE***REMOVED***p);
}

require('./_set-species')('RegE***REMOVED***p');
