'use strict';
var $e***REMOVED***port = require('./_e***REMOVED***port');
var $typed = require('./_typed');
var buffer = require('./_typed-buffer');
var anObject = require('./_an-object');
var toAbsoluteInde***REMOVED*** = require('./_to-absolute-inde***REMOVED***');
var toLength = require('./_to-length');
var isObject = require('./_is-object');
var ArrayBuffer = require('./_global').ArrayBuffer;
var speciesConstructor = require('./_species-constructor');
var $ArrayBuffer = buffer.ArrayBuffer;
var $DataView = buffer.DataView;
var $isView = $typed.ABV && ArrayBuffer.isView;
var $slice = $ArrayBuffer.prototype.slice;
var VIEW = $typed.VIEW;
var ARRAY_BUFFER = 'ArrayBuffer';

$e***REMOVED***port($e***REMOVED***port.G + $e***REMOVED***port.W + $e***REMOVED***port.F * (ArrayBuffer !== $ArrayBuffer), { ArrayBuffer: $ArrayBuffer });

$e***REMOVED***port($e***REMOVED***port.S + $e***REMOVED***port.F * !$typed.CONSTR, ARRAY_BUFFER, {
  // 24.1.3.1 ArrayBuffer.isView(arg)
  isView: function isView(it) {
    return $isView && $isView(it) || isObject(it) && VIEW in it;
  }
});

$e***REMOVED***port($e***REMOVED***port.P + $e***REMOVED***port.U + $e***REMOVED***port.F * require('./_fails')(function () {
  return !new $ArrayBuffer(2).slice(1, undefined).byteLength;
}), ARRAY_BUFFER, {
  // 24.1.4.3 ArrayBuffer.prototype.slice(start, end)
  slice: function slice(start, end) {
    if ($slice !== undefined && end === undefined) return $slice.call(anObject(this), start); // FF fi***REMOVED***
    var len = anObject(this).byteLength;
    var first = toAbsoluteInde***REMOVED***(start, len);
    var fin = toAbsoluteInde***REMOVED***(end === undefined ? len : end, len);
    var result = new (speciesConstructor(this, $ArrayBuffer))(toLength(fin - first));
    var viewS = new $DataView(this);
    var viewT = new $DataView(result);
    var inde***REMOVED*** = 0;
    while (first < fin) {
      viewT.setUint8(inde***REMOVED***++, viewS.getUint8(first++));
    } return result;
  }
});

require('./_set-species')(ARRAY_BUFFER);
