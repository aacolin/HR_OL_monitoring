'use strict';

import utils from './utils.js';
import bind from './helpers/bind.js';
import A***REMOVED***ios from './core/A***REMOVED***ios.js';
import mergeConfig from './core/mergeConfig.js';
import defaults from './defaults/inde***REMOVED***.js';
import formDataToJSON from './helpers/formDataToJSON.js';
import CanceledError from './cancel/CanceledError.js';
import CancelToken from './cancel/CancelToken.js';
import isCancel from './cancel/isCancel.js';
import {VERSION} from './env/data.js';
import toFormData from './helpers/toFormData.js';
import A***REMOVED***iosError from './core/A***REMOVED***iosError.js';
import spread from './helpers/spread.js';
import isA***REMOVED***iosError from './helpers/isA***REMOVED***iosError.js';
import A***REMOVED***iosHeaders from "./core/A***REMOVED***iosHeaders.js";
import adapters from './adapters/adapters.js';
import HttpStatusCode from './helpers/HttpStatusCode.js';

/**
 * Create an instance of A***REMOVED***ios
 *
 * @param {Object} defaultConfig The default config for the instance
 *
 * @returns {A***REMOVED***ios} A new instance of A***REMOVED***ios
 */
function createInstance(defaultConfig) {
  const conte***REMOVED***t = new A***REMOVED***ios(defaultConfig);
  const instance = bind(A***REMOVED***ios.prototype.request, conte***REMOVED***t);

  // Copy a***REMOVED***ios.prototype to instance
  utils.e***REMOVED***tend(instance, A***REMOVED***ios.prototype, conte***REMOVED***t, {allOwnKeys: true});

  // Copy conte***REMOVED***t to instance
  utils.e***REMOVED***tend(instance, conte***REMOVED***t, null, {allOwnKeys: true});

  // Factory for creating new instances
  instance.create = function create(instanceConfig) {
    return createInstance(mergeConfig(defaultConfig, instanceConfig));
  };

  return instance;
}

// Create the default instance to be e***REMOVED***ported
const a***REMOVED***ios = createInstance(defaults);

// E***REMOVED***pose A***REMOVED***ios class to allow class inheritance
a***REMOVED***ios.A***REMOVED***ios = A***REMOVED***ios;

// E***REMOVED***pose Cancel & CancelToken
a***REMOVED***ios.CanceledError = CanceledError;
a***REMOVED***ios.CancelToken = CancelToken;
a***REMOVED***ios.isCancel = isCancel;
a***REMOVED***ios.VERSION = VERSION;
a***REMOVED***ios.toFormData = toFormData;

// E***REMOVED***pose A***REMOVED***iosError class
a***REMOVED***ios.A***REMOVED***iosError = A***REMOVED***iosError;

// alias for CanceledError for backward compatibility
a***REMOVED***ios.Cancel = a***REMOVED***ios.CanceledError;

// E***REMOVED***pose all/spread
a***REMOVED***ios.all = function all(promises) {
  return Promise.all(promises);
};

a***REMOVED***ios.spread = spread;

// E***REMOVED***pose isA***REMOVED***iosError
a***REMOVED***ios.isA***REMOVED***iosError = isA***REMOVED***iosError;

// E***REMOVED***pose mergeConfig
a***REMOVED***ios.mergeConfig = mergeConfig;

a***REMOVED***ios.A***REMOVED***iosHeaders = A***REMOVED***iosHeaders;

a***REMOVED***ios.formToJSON = thing => formDataToJSON(utils.isHTMLForm(thing) ? new FormData(thing) : thing);

a***REMOVED***ios.getAdapter = adapters.getAdapter;

a***REMOVED***ios.HttpStatusCode = HttpStatusCode;

a***REMOVED***ios.default = a***REMOVED***ios;

// this module should only have a default e***REMOVED***port
e***REMOVED***port default a***REMOVED***ios
