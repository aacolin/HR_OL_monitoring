declare module 'mongoose' {
  import mongodb = require('mongodb');

  /**
   * Makes the inde***REMOVED***es in MongoDB match the inde***REMOVED***es defined in every model's
   * schema. This function will drop any inde***REMOVED***es that are not defined in
   * the model's schema e***REMOVED***cept the `_id` inde***REMOVED***, and build any inde***REMOVED***es that
   * are in your schema but not in MongoDB.
   */
  function syncInde***REMOVED***es(options?: SyncInde***REMOVED***esOptions): Promise<ConnectionSyncInde***REMOVED***esResult>;

  interface Inde***REMOVED***Manager {
    /**
     * Similar to `ensureInde***REMOVED***es()`, e***REMOVED***cept for it uses the [`createInde***REMOVED***`](https://mongodb.github.io/node-mongodb-native/4.9/classes/Collection.html#createInde***REMOVED***)
     * function.
     */
    createInde***REMOVED***es(options?: mongodb.CreateInde***REMOVED***esOptions): Promise<void>;

    /**
     * Does a dry-run of Model.syncInde***REMOVED***es(), meaning that
     * the result of this function would be the result of
     * Model.syncInde***REMOVED***es().
     */
    diffInde***REMOVED***es(options?: Record<string, unknown>): Promise<Inde***REMOVED***esDiff>

    /**
     * Sends `createInde***REMOVED***` commands to mongo for each inde***REMOVED*** declared in the schema.
     * The `createInde***REMOVED***` commands are sent in series.
     */
    ensureInde***REMOVED***es(options?: mongodb.CreateInde***REMOVED***esOptions): Promise<void>;

    /**
     * Lists the inde***REMOVED***es currently defined in MongoDB. This may or may not be
     * the same as the inde***REMOVED***es defined in your schema depending on whether you
     * use the [`autoInde***REMOVED***` option](/docs/guide.html#autoInde***REMOVED***) and if you
     * build inde***REMOVED***es manually.
     */
    listInde***REMOVED***es(): Promise<Array<any>>;

    /**
     * Makes the inde***REMOVED***es in MongoDB match the inde***REMOVED***es defined in this model's
     * schema. This function will drop any inde***REMOVED***es that are not defined in
     * the model's schema e***REMOVED***cept the `_id` inde***REMOVED***, and build any inde***REMOVED***es that
     * are in your schema but not in MongoDB.
     */
    syncInde***REMOVED***es(options?: SyncInde***REMOVED***esOptions): Promise<Array<string>>;
  }

  interface Inde***REMOVED***esDiff {
    /** Inde***REMOVED***es that would be created in mongodb. */
    toCreate: Array<any>
    /** Inde***REMOVED***es that would be dropped in mongodb. */
    toDrop: Array<any>
  }

  type Inde***REMOVED***Direction = 1 | -1 | '2d' | '2dsphere' | 'geoHaystack' | 'hashed' | 'te***REMOVED***t' | 'ascending' | 'asc' | 'descending' | 'desc';
  type Inde***REMOVED***Definition = Record<string, Inde***REMOVED***Direction>;

  interface SyncInde***REMOVED***esOptions e***REMOVED***tends mongodb.CreateInde***REMOVED***esOptions {
    continueOnError?: boolean;
    hideInde***REMOVED***es?: boolean;
  }
  type ConnectionSyncInde***REMOVED***esResult = Record<string, OneCollectionSyncInde***REMOVED***esResult>;
  type OneCollectionSyncInde***REMOVED***esResult = Array<string> & mongodb.MongoServerError;

  interface Inde***REMOVED***Options e***REMOVED***tends mongodb.CreateInde***REMOVED***esOptions {
    /**
     * `e***REMOVED***pires` utilizes the `ms` module from [guille](https://github.com/guille/) allowing us to use a friendlier synta***REMOVED***:
     *
     * @e***REMOVED***ample
     * ```js
     * const schema = new Schema({ prop1: Date });
     *
     * // e***REMOVED***pire in 24 hours
     * schema.inde***REMOVED***({ prop1: 1 }, { e***REMOVED***pires: 60*60*24 })
     *
     * // e***REMOVED***pire in 24 hours
     * schema.inde***REMOVED***({ prop1: 1 }, { e***REMOVED***pires: '24h' })
     *
     * // e***REMOVED***pire in 1.5 hours
     * schema.inde***REMOVED***({ prop1: 1 }, { e***REMOVED***pires: '1.5h' })
     *
     * // e***REMOVED***pire in 7 days
     * schema.inde***REMOVED***({ prop1: 1 }, { e***REMOVED***pires: '7d' })
     * ```
     */
    e***REMOVED***pires?: number | string;
    weights?: Record<string, number>;
  }

  type SearchInde***REMOVED***Description = mongodb.SearchInde***REMOVED***Description;
}
