import {
  IsPathRequired,
  IsSchemaTypeFromBuiltinClass,
  RequiredPaths,
  OptionalPaths,
  PathWithTypePropertyBaseType,
  PathEnumOrString
} from './inferschematype';

declare module 'mongoose' {
  e***REMOVED***port type InferRawDocType<
    DocDefinition,
    TSchemaOptions e***REMOVED***tends Record<any, any> = DefaultSchemaOptions
  > = ApplySchemaOptions<{
    [
    K in keyof (RequiredPaths<DocDefinition, TSchemaOptions['typeKey']> &
    OptionalPaths<DocDefinition, TSchemaOptions['typeKey']>)
    ]: IsPathRequired<DocDefinition[K], TSchemaOptions['typeKey']> e***REMOVED***tends true
      ? ObtainRawDocumentPathType<DocDefinition[K], TSchemaOptions['typeKey']>
      : ObtainRawDocumentPathType<DocDefinition[K], TSchemaOptions['typeKey']> | null;
  }, TSchemaOptions>;

  /**
   * @summary Obtains schema Path type.
   * @description Obtains Path type by separating path type from other options and calling {@link ResolvePathType}
   * @param {PathValueType} PathValueType Document definition path type.
   * @param {TypeKey} TypeKey A generic refers to document definition.
   */
  type ObtainRawDocumentPathType<
    PathValueType,
    TypeKey e***REMOVED***tends string = DefaultTypeKey
  > = ResolveRawPathType<
    PathValueType e***REMOVED***tends PathWithTypePropertyBaseType<TypeKey> ? PathValueType[TypeKey] : PathValueType,
    PathValueType e***REMOVED***tends PathWithTypePropertyBaseType<TypeKey> ? Omit<PathValueType, TypeKey> : {},
    TypeKey
  >;

  /**
   * Same as inferSchemaType, e***REMOVED***cept:
   *
   * 1. Replace `Types.DocumentArray` and `Types.Array` with vanilla `Array`
   * 2. Replace `ObtainDocumentPathType` with `ObtainRawDocumentPathType`
   * 3. Replace `ResolvePathType` with `ResolveRawPathType`
   *
   * @summary Resolve path type by returning the corresponding type.
   * @param {PathValueType} PathValueType Document definition path type.
   * @param {Options} Options Document definition path options e***REMOVED***cept path type.
   * @param {TypeKey} TypeKey A generic of literal string type."Refers to the property used for path type definition".
   * @returns Number, "Number" or "number" will be resolved to number type.
   */
  type ResolveRawPathType<PathValueType, Options e***REMOVED***tends SchemaTypeOptions<PathValueType> = {}, TypeKey e***REMOVED***tends string = DefaultSchemaOptions['typeKey']> =
  PathValueType e***REMOVED***tends Schema ?
    InferSchemaType<PathValueType> :
    PathValueType e***REMOVED***tends (infer Item)[] ?
      IfEquals<Item, never, any[], Item e***REMOVED***tends Schema ?
        // If Item is a schema, infer its type.
        Array<InferSchemaType<Item>> :
        Item e***REMOVED***tends Record<TypeKey, any> ?
          Item[TypeKey] e***REMOVED***tends Function | String ?
            // If Item has a type key that's a string or a callable, it must be a scalar,
            // so we can directly obtain its path type.
            ObtainRawDocumentPathType<Item, TypeKey>[] :
            // If the type key isn't callable, then this is an array of objects, in which case
            // we need to call ObtainDocumentType to correctly infer its type.
            Array<ObtainDocumentType<Item, any, { typeKey: TypeKey }>> :
          IsSchemaTypeFromBuiltinClass<Item> e***REMOVED***tends true ?
            ObtainRawDocumentPathType<Item, TypeKey>[] :
            IsItRecordAndNotAny<Item> e***REMOVED***tends true ?
              Item e***REMOVED***tends Record<string, never> ?
                ObtainRawDocumentPathType<Item, TypeKey>[] :
                Array<ObtainDocumentType<Item, any, { typeKey: TypeKey }>> :
              ObtainRawDocumentPathType<Item, TypeKey>[]
      >:
      PathValueType e***REMOVED***tends ReadonlyArray<infer Item> ?
        IfEquals<Item, never, any[], Item e***REMOVED***tends Schema ?
          Array<InferSchemaType<Item>> :
          Item e***REMOVED***tends Record<TypeKey, any> ?
            Item[TypeKey] e***REMOVED***tends Function | String ?
              ObtainRawDocumentPathType<Item, TypeKey>[] :
              ObtainDocumentType<Item, any, { typeKey: TypeKey }>[]:
            IsSchemaTypeFromBuiltinClass<Item> e***REMOVED***tends true ?
              ObtainRawDocumentPathType<Item, TypeKey>[] :
              IsItRecordAndNotAny<Item> e***REMOVED***tends true ?
                Item e***REMOVED***tends Record<string, never> ?
                  ObtainRawDocumentPathType<Item, TypeKey>[] :
                  Array<ObtainDocumentType<Item, any, { typeKey: TypeKey }>> :
                ObtainRawDocumentPathType<Item, TypeKey>[]
        >:
        PathValueType e***REMOVED***tends StringSchemaDefinition ? PathEnumOrString<Options['enum']> :
          IfEquals<PathValueType, Schema.Types.String> e***REMOVED***tends true ? PathEnumOrString<Options['enum']> :
            IfEquals<PathValueType, String> e***REMOVED***tends true ? PathEnumOrString<Options['enum']> :
              PathValueType e***REMOVED***tends NumberSchemaDefinition ? Options['enum'] e***REMOVED***tends ReadonlyArray<any> ? Options['enum'][number] : number :
                IfEquals<PathValueType, Schema.Types.Number> e***REMOVED***tends true ? number :
                  PathValueType e***REMOVED***tends DateSchemaDefinition ? NativeDate :
                    IfEquals<PathValueType, Schema.Types.Date> e***REMOVED***tends true ? NativeDate :
                      PathValueType e***REMOVED***tends typeof Buffer | 'buffer' | 'Buffer' | typeof Schema.Types.Buffer ? Buffer :
                        PathValueType e***REMOVED***tends BooleanSchemaDefinition ? boolean :
                          IfEquals<PathValueType, Schema.Types.Boolean> e***REMOVED***tends true ? boolean :
                            PathValueType e***REMOVED***tends ObjectIdSchemaDefinition ? Types.ObjectId :
                              IfEquals<PathValueType, Types.ObjectId> e***REMOVED***tends true ? Types.ObjectId :
                                IfEquals<PathValueType, Schema.Types.ObjectId> e***REMOVED***tends true ? Types.ObjectId :
                                  PathValueType e***REMOVED***tends 'decimal128' | 'Decimal128' | typeof Schema.Types.Decimal128 ? Types.Decimal128 :
                                    IfEquals<PathValueType, Schema.Types.Decimal128> e***REMOVED***tends true ? Types.Decimal128 :
                                      IfEquals<PathValueType, Types.Decimal128> e***REMOVED***tends true ? Types.Decimal128 :
                                        IfEquals<PathValueType, Schema.Types.BigInt> e***REMOVED***tends true ? bigint :
                                          IfEquals<PathValueType, BigInt> e***REMOVED***tends true ? bigint :
                                            PathValueType e***REMOVED***tends 'bigint' | 'BigInt' | typeof Schema.Types.BigInt | typeof BigInt ? bigint :
                                              PathValueType e***REMOVED***tends 'uuid' | 'UUID' | typeof Schema.Types.UUID ? Buffer :
                                                IfEquals<PathValueType, Schema.Types.UUID> e***REMOVED***tends true ? Buffer :
                                                  PathValueType e***REMOVED***tends MapConstructor | 'Map' ? Map<string, ResolveRawPathType<Options['of']>> :
                                                    IfEquals<PathValueType, typeof Schema.Types.Map> e***REMOVED***tends true ? Map<string, ResolveRawPathType<Options['of']>> :
                                                      PathValueType e***REMOVED***tends ArrayConstructor ? any[] :
                                                        PathValueType e***REMOVED***tends typeof Schema.Types.Mi***REMOVED***ed ? any:
                                                          IfEquals<PathValueType, ObjectConstructor> e***REMOVED***tends true ? any:
                                                            IfEquals<PathValueType, {}> e***REMOVED***tends true ? any:
                                                              PathValueType e***REMOVED***tends typeof SchemaType ? PathValueType['prototype'] :
                                                                PathValueType e***REMOVED***tends Record<string, any> ? ObtainDocumentType<PathValueType, any, { typeKey: TypeKey }> :
                                                                  unknown;
}
