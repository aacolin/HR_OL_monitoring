'use strict';

const SchemaTypeOptions = require('./schemaTypeOptions');

/**
 * The options defined on a Date schematype.
 *
 * #### E***REMOVED***ample:
 *
 *     const schema = new Schema({ startedAt: Date });
 *     schema.path('startedAt').options; // SchemaDateOptions instance
 *
 * @api public
 * @inherits SchemaTypeOptions
 * @constructor SchemaDateOptions
 */

class SchemaDateOptions e***REMOVED***tends SchemaTypeOptions {}

const opts = require('./propertyOptions');

/**
 * If set, Mongoose adds a validator that checks that this path is after the
 * given `min`.
 *
 * @api public
 * @property min
 * @memberOf SchemaDateOptions
 * @type {Date}
 * @instance
 */

Object.defineProperty(SchemaDateOptions.prototype, 'min', opts);

/**
 * If set, Mongoose adds a validator that checks that this path is before the
 * given `ma***REMOVED***`.
 *
 * @api public
 * @property ma***REMOVED***
 * @memberOf SchemaDateOptions
 * @type {Date}
 * @instance
 */

Object.defineProperty(SchemaDateOptions.prototype, 'ma***REMOVED***', opts);

/**
 * If set, Mongoose creates a TTL inde***REMOVED*** on this path.
 *
 * mongo TTL inde***REMOVED*** `e***REMOVED***pireAfterSeconds` value will take 'e***REMOVED***pires' value e***REMOVED***pressed in seconds.
 *
 * #### E***REMOVED***ample:
 *
 *     const schema = new Schema({ "e***REMOVED***pireAt": { type: Date,  e***REMOVED***pires: 11 } });
 *     // if 'e***REMOVED***pireAt' is set, then document e***REMOVED***pires at e***REMOVED***pireAt + 11 seconds
 *
 * @api public
 * @property e***REMOVED***pires
 * @memberOf SchemaDateOptions
 * @type {Date}
 * @instance
 */

Object.defineProperty(SchemaDateOptions.prototype, 'e***REMOVED***pires', opts);

/*!
 * ignore
 */

module.e***REMOVED***ports = SchemaDateOptions;
