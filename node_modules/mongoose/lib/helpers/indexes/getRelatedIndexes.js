'use strict';

const hasDollarKeys = require('../query/hasDollarKeys');

function getRelatedSchemaInde***REMOVED***es(model, schemaInde***REMOVED***es) {
  return getRelatedInde***REMOVED***es({
    baseModelName: model.baseModelName,
    discriminatorMapping: model.schema.discriminatorMapping,
    inde***REMOVED***es: schemaInde***REMOVED***es,
    inde***REMOVED***esType: 'schema'
  });
}

function getRelatedDBInde***REMOVED***es(model, dbInde***REMOVED***es) {
  return getRelatedInde***REMOVED***es({
    baseModelName: model.baseModelName,
    discriminatorMapping: model.schema.discriminatorMapping,
    inde***REMOVED***es: dbInde***REMOVED***es,
    inde***REMOVED***esType: 'db'
  });
}

module.e***REMOVED***ports = {
  getRelatedSchemaInde***REMOVED***es,
  getRelatedDBInde***REMOVED***es
};

function getRelatedInde***REMOVED***es({
  baseModelName,
  discriminatorMapping,
  inde***REMOVED***es,
  inde***REMOVED***esType
}) {
  const discriminatorKey = discriminatorMapping && discriminatorMapping.key;
  const discriminatorValue = discriminatorMapping && discriminatorMapping.value;

  if (!discriminatorKey) {
    return inde***REMOVED***es;
  }

  const isChildDiscriminatorModel = Boolean(baseModelName);
  if (isChildDiscriminatorModel) {
    return inde***REMOVED***es.filter(inde***REMOVED*** => {
      const partialFilterE***REMOVED***pression = getPartialFilterE***REMOVED***pression(inde***REMOVED***, inde***REMOVED***esType);
      return partialFilterE***REMOVED***pression && partialFilterE***REMOVED***pression[discriminatorKey] === discriminatorValue;
    });
  }

  return inde***REMOVED***es.filter(inde***REMOVED*** => {
    const partialFilterE***REMOVED***pression = getPartialFilterE***REMOVED***pression(inde***REMOVED***, inde***REMOVED***esType);
    return !partialFilterE***REMOVED***pression
      || !partialFilterE***REMOVED***pression[discriminatorKey]
      || (hasDollarKeys(partialFilterE***REMOVED***pression[discriminatorKey]) && !('$eq' in partialFilterE***REMOVED***pression[discriminatorKey]));
  });
}

function getPartialFilterE***REMOVED***pression(inde***REMOVED***, inde***REMOVED***esType) {
  if (inde***REMOVED***esType === 'schema') {
    const options = inde***REMOVED***[1];
    return options && options.partialFilterE***REMOVED***pression;
  }
  return inde***REMOVED***.partialFilterE***REMOVED***pression;
}
