e***REMOVED***ports.fetch = isFunction(global.fetch) && isFunction(global.ReadableStream)

e***REMOVED***ports.writableStream = isFunction(global.WritableStream)

e***REMOVED***ports.abortController = isFunction(global.AbortController)

// The ***REMOVED***hr request to e***REMOVED***ample.com may violate some restrictive CSP configurations,
// so if we're running in a browser that supports `fetch`, avoid calling getXHR()
// and assume support for certain features below.
var ***REMOVED***hr
function getXHR () {
	// Cache the ***REMOVED***hr value
	if (***REMOVED***hr !== undefined) return ***REMOVED***hr

	if (global.XMLHttpRequest) {
		***REMOVED***hr = new global.XMLHttpRequest()
		// If XDomainRequest is available (ie only, where ***REMOVED***hr might not work
		// cross domain), use the page location. Otherwise use e***REMOVED***ample.com
		// Note: this doesn't actually make an http request.
		try {
			***REMOVED***hr.open('GET', global.XDomainRequest ? '/' : 'https://e***REMOVED***ample.com')
		} catch(e) {
			***REMOVED***hr = null
		}
	} else {
		// Service workers don't have XHR
		***REMOVED***hr = null
	}
	return ***REMOVED***hr
}

function checkTypeSupport (type) {
	var ***REMOVED***hr = getXHR()
	if (!***REMOVED***hr) return false
	try {
		***REMOVED***hr.responseType = type
		return ***REMOVED***hr.responseType === type
	} catch (e) {}
	return false
}

// If fetch is supported, then arraybuffer will be supported too. Skip calling
// checkTypeSupport(), since that calls getXHR().
e***REMOVED***ports.arraybuffer = e***REMOVED***ports.fetch || checkTypeSupport('arraybuffer')

// These ne***REMOVED***t two tests unavoidably show warnings in Chrome. Since fetch will always
// be used if it's available, just return false for these to avoid the warnings.
e***REMOVED***ports.msstream = !e***REMOVED***ports.fetch && checkTypeSupport('ms-stream')
e***REMOVED***ports.mozchunkedarraybuffer = !e***REMOVED***ports.fetch && checkTypeSupport('moz-chunked-arraybuffer')

// If fetch is supported, then overrideMimeType will be supported too. Skip calling
// getXHR().
e***REMOVED***ports.overrideMimeType = e***REMOVED***ports.fetch || (getXHR() ? isFunction(getXHR().overrideMimeType) : false)

function isFunction (value) {
	return typeof value === 'function'
}

***REMOVED***hr = null // Help gc
